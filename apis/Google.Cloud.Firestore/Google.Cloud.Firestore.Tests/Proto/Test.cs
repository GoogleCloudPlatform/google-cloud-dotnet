// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Firestore.Tests.Proto {

  /// <summary>Holder for reflection information generated from test.proto</summary>
  public static partial class TestReflection {

    #region Descriptor
    /// <summary>File descriptor for test.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgp0ZXN0LnByb3RvEgV0ZXN0cxooZ29vZ2xlL2ZpcmVzdG9yZS92MWJldGEx",
            "L2ZpcmVzdG9yZS5wcm90bxolZ29vZ2xlL2ZpcmVzdG9yZS92MWJldGExL2Nv",
            "bW1vbi5wcm90byInCglUZXN0U3VpdGUSGgoFdGVzdHMYASADKAsyCy50ZXN0",
            "cy5UZXN0IoACCgRUZXN0EhMKC2Rlc2NyaXB0aW9uGAEgASgJEh0KA2dldBgC",
            "IAEoCzIOLnRlc3RzLkdldFRlc3RIABIjCgZjcmVhdGUYAyABKAsyES50ZXN0",
            "cy5DcmVhdGVUZXN0SAASHQoDc2V0GAQgASgLMg4udGVzdHMuU2V0VGVzdEgA",
            "EiMKBnVwZGF0ZRgFIAEoCzIRLnRlc3RzLlVwZGF0ZVRlc3RIABIuCgx1cGRh",
            "dGVfcGF0aHMYBiABKAsyFi50ZXN0cy5VcGRhdGVQYXRoc1Rlc3RIABIjCgZk",
            "ZWxldGUYByABKAsyES50ZXN0cy5EZWxldGVUZXN0SABCBgoEdGVzdCJeCgdH",
            "ZXRUZXN0EhQKDGRvY19yZWZfcGF0aBgBIAEoCRI9CgdyZXF1ZXN0GAIgASgL",
            "MiwuZ29vZ2xlLmZpcmVzdG9yZS52MWJldGExLkdldERvY3VtZW50UmVxdWVz",
            "dCKBAQoKQ3JlYXRlVGVzdBIUCgxkb2NfcmVmX3BhdGgYASABKAkSEQoJanNv",
            "bl9kYXRhGAIgASgJEjgKB3JlcXVlc3QYAyABKAsyJy5nb29nbGUuZmlyZXN0",
            "b3JlLnYxYmV0YTEuQ29tbWl0UmVxdWVzdBIQCghpc19lcnJvchgEIAEoCCKg",
            "AQoHU2V0VGVzdBIUCgxkb2NfcmVmX3BhdGgYASABKAkSIAoGb3B0aW9uGAIg",
            "ASgLMhAudGVzdHMuU2V0T3B0aW9uEhEKCWpzb25fZGF0YRgDIAEoCRI4Cgdy",
            "ZXF1ZXN0GAQgASgLMicuZ29vZ2xlLmZpcmVzdG9yZS52MWJldGExLkNvbW1p",
            "dFJlcXVlc3QSEAoIaXNfZXJyb3IYBSABKAgivwEKClVwZGF0ZVRlc3QSFAoM",
            "ZG9jX3JlZl9wYXRoGAEgASgJEjwKDHByZWNvbmRpdGlvbhgCIAEoCzImLmdv",
            "b2dsZS5maXJlc3RvcmUudjFiZXRhMS5QcmVjb25kaXRpb24SEQoJanNvbl9k",
            "YXRhGAMgASgJEjgKB3JlcXVlc3QYBCABKAsyJy5nb29nbGUuZmlyZXN0b3Jl",
            "LnYxYmV0YTEuQ29tbWl0UmVxdWVzdBIQCghpc19lcnJvchgFIAEoCCLtAQoP",
            "VXBkYXRlUGF0aHNUZXN0EhQKDGRvY19yZWZfcGF0aBgBIAEoCRI8CgxwcmVj",
            "b25kaXRpb24YAiABKAsyJi5nb29nbGUuZmlyZXN0b3JlLnYxYmV0YTEuUHJl",
            "Y29uZGl0aW9uEiUKC2ZpZWxkX3BhdGhzGAMgAygLMhAudGVzdHMuRmllbGRQ",
            "YXRoEhMKC2pzb25fdmFsdWVzGAQgAygJEjgKB3JlcXVlc3QYBSABKAsyJy5n",
            "b29nbGUuZmlyZXN0b3JlLnYxYmV0YTEuQ29tbWl0UmVxdWVzdBIQCghpc19l",
            "cnJvchgGIAEoCCKsAQoKRGVsZXRlVGVzdBIUCgxkb2NfcmVmX3BhdGgYASAB",
            "KAkSPAoMcHJlY29uZGl0aW9uGAIgASgLMiYuZ29vZ2xlLmZpcmVzdG9yZS52",
            "MWJldGExLlByZWNvbmRpdGlvbhI4CgdyZXF1ZXN0GAMgASgLMicuZ29vZ2xl",
            "LmZpcmVzdG9yZS52MWJldGExLkNvbW1pdFJlcXVlc3QSEAoIaXNfZXJyb3IY",
            "BCABKAgiOgoJU2V0T3B0aW9uEgsKA2FsbBgBIAEoCBIgCgZmaWVsZHMYAiAD",
            "KAsyEC50ZXN0cy5GaWVsZFBhdGgiGgoJRmllbGRQYXRoEg0KBWZpZWxkGAEg",
            "AygJQk0KJmNvbS5nb29nbGUuY2xvdWQuZmlyZXN0b3JlLmNvbmZvcm1hbmNl",
            "qgIiR29vZ2xlLkNsb3VkLkZpcmVzdG9yZS5UZXN0cy5Qcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Cloud.Firestore.V1Beta1.FirestoreReflection.Descriptor, global::Google.Cloud.Firestore.V1Beta1.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.Tests.Proto.TestSuite), global::Google.Cloud.Firestore.Tests.Proto.TestSuite.Parser, new[]{ "Tests" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.Tests.Proto.Test), global::Google.Cloud.Firestore.Tests.Proto.Test.Parser, new[]{ "Description", "Get", "Create", "Set", "Update", "UpdatePaths", "Delete" }, new[]{ "Test" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.Tests.Proto.GetTest), global::Google.Cloud.Firestore.Tests.Proto.GetTest.Parser, new[]{ "DocRefPath", "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.Tests.Proto.CreateTest), global::Google.Cloud.Firestore.Tests.Proto.CreateTest.Parser, new[]{ "DocRefPath", "JsonData", "Request", "IsError" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.Tests.Proto.SetTest), global::Google.Cloud.Firestore.Tests.Proto.SetTest.Parser, new[]{ "DocRefPath", "Option", "JsonData", "Request", "IsError" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.Tests.Proto.UpdateTest), global::Google.Cloud.Firestore.Tests.Proto.UpdateTest.Parser, new[]{ "DocRefPath", "Precondition", "JsonData", "Request", "IsError" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.Tests.Proto.UpdatePathsTest), global::Google.Cloud.Firestore.Tests.Proto.UpdatePathsTest.Parser, new[]{ "DocRefPath", "Precondition", "FieldPaths", "JsonValues", "Request", "IsError" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.Tests.Proto.DeleteTest), global::Google.Cloud.Firestore.Tests.Proto.DeleteTest.Parser, new[]{ "DocRefPath", "Precondition", "Request", "IsError" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.Tests.Proto.SetOption), global::Google.Cloud.Firestore.Tests.Proto.SetOption.Parser, new[]{ "All", "Fields" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.Tests.Proto.FieldPath), global::Google.Cloud.Firestore.Tests.Proto.FieldPath.Parser, new[]{ "Field" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A collection of tests.
  /// </summary>
  public sealed partial class TestSuite : pb::IMessage<TestSuite> {
    private static readonly pb::MessageParser<TestSuite> _parser = new pb::MessageParser<TestSuite>(() => new TestSuite());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestSuite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.Tests.Proto.TestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestSuite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestSuite(TestSuite other) : this() {
      tests_ = other.tests_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestSuite Clone() {
      return new TestSuite(this);
    }

    /// <summary>Field number for the "tests" field.</summary>
    public const int TestsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Firestore.Tests.Proto.Test> _repeated_tests_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Firestore.Tests.Proto.Test.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Firestore.Tests.Proto.Test> tests_ = new pbc::RepeatedField<global::Google.Cloud.Firestore.Tests.Proto.Test>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Firestore.Tests.Proto.Test> Tests {
      get { return tests_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestSuite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestSuite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tests_.Equals(other.tests_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tests_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tests_.WriteTo(output, _repeated_tests_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tests_.CalculateSize(_repeated_tests_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestSuite other) {
      if (other == null) {
        return;
      }
      tests_.Add(other.tests_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tests_.AddEntriesFrom(input, _repeated_tests_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A Test describes a single client method call and its expected result.
  /// </summary>
  public sealed partial class Test : pb::IMessage<Test> {
    private static readonly pb::MessageParser<Test> _parser = new pb::MessageParser<Test>(() => new Test());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Test> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.Tests.Proto.TestReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test(Test other) : this() {
      description_ = other.description_;
      switch (other.TestCase) {
        case TestOneofCase.Get:
          Get = other.Get.Clone();
          break;
        case TestOneofCase.Create:
          Create = other.Create.Clone();
          break;
        case TestOneofCase.Set:
          Set = other.Set.Clone();
          break;
        case TestOneofCase.Update:
          Update = other.Update.Clone();
          break;
        case TestOneofCase.UpdatePaths:
          UpdatePaths = other.UpdatePaths.Clone();
          break;
        case TestOneofCase.Delete:
          Delete = other.Delete.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test Clone() {
      return new Test(this);
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 1;
    private string description_ = "";
    /// <summary>
    /// short description of the test
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "get" field.</summary>
    public const int GetFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.Tests.Proto.GetTest Get {
      get { return testCase_ == TestOneofCase.Get ? (global::Google.Cloud.Firestore.Tests.Proto.GetTest) test_ : null; }
      set {
        test_ = value;
        testCase_ = value == null ? TestOneofCase.None : TestOneofCase.Get;
      }
    }

    /// <summary>Field number for the "create" field.</summary>
    public const int CreateFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.Tests.Proto.CreateTest Create {
      get { return testCase_ == TestOneofCase.Create ? (global::Google.Cloud.Firestore.Tests.Proto.CreateTest) test_ : null; }
      set {
        test_ = value;
        testCase_ = value == null ? TestOneofCase.None : TestOneofCase.Create;
      }
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.Tests.Proto.SetTest Set {
      get { return testCase_ == TestOneofCase.Set ? (global::Google.Cloud.Firestore.Tests.Proto.SetTest) test_ : null; }
      set {
        test_ = value;
        testCase_ = value == null ? TestOneofCase.None : TestOneofCase.Set;
      }
    }

    /// <summary>Field number for the "update" field.</summary>
    public const int UpdateFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.Tests.Proto.UpdateTest Update {
      get { return testCase_ == TestOneofCase.Update ? (global::Google.Cloud.Firestore.Tests.Proto.UpdateTest) test_ : null; }
      set {
        test_ = value;
        testCase_ = value == null ? TestOneofCase.None : TestOneofCase.Update;
      }
    }

    /// <summary>Field number for the "update_paths" field.</summary>
    public const int UpdatePathsFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.Tests.Proto.UpdatePathsTest UpdatePaths {
      get { return testCase_ == TestOneofCase.UpdatePaths ? (global::Google.Cloud.Firestore.Tests.Proto.UpdatePathsTest) test_ : null; }
      set {
        test_ = value;
        testCase_ = value == null ? TestOneofCase.None : TestOneofCase.UpdatePaths;
      }
    }

    /// <summary>Field number for the "delete" field.</summary>
    public const int DeleteFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.Tests.Proto.DeleteTest Delete {
      get { return testCase_ == TestOneofCase.Delete ? (global::Google.Cloud.Firestore.Tests.Proto.DeleteTest) test_ : null; }
      set {
        test_ = value;
        testCase_ = value == null ? TestOneofCase.None : TestOneofCase.Delete;
      }
    }

    private object test_;
    /// <summary>Enum of possible cases for the "test" oneof.</summary>
    public enum TestOneofCase {
      None = 0,
      Get = 2,
      Create = 3,
      Set = 4,
      Update = 5,
      UpdatePaths = 6,
      Delete = 7,
    }
    private TestOneofCase testCase_ = TestOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestOneofCase TestCase {
      get { return testCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTest() {
      testCase_ = TestOneofCase.None;
      test_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Test);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Test other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Description != other.Description) return false;
      if (!object.Equals(Get, other.Get)) return false;
      if (!object.Equals(Create, other.Create)) return false;
      if (!object.Equals(Set, other.Set)) return false;
      if (!object.Equals(Update, other.Update)) return false;
      if (!object.Equals(UpdatePaths, other.UpdatePaths)) return false;
      if (!object.Equals(Delete, other.Delete)) return false;
      if (TestCase != other.TestCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (testCase_ == TestOneofCase.Get) hash ^= Get.GetHashCode();
      if (testCase_ == TestOneofCase.Create) hash ^= Create.GetHashCode();
      if (testCase_ == TestOneofCase.Set) hash ^= Set.GetHashCode();
      if (testCase_ == TestOneofCase.Update) hash ^= Update.GetHashCode();
      if (testCase_ == TestOneofCase.UpdatePaths) hash ^= UpdatePaths.GetHashCode();
      if (testCase_ == TestOneofCase.Delete) hash ^= Delete.GetHashCode();
      hash ^= (int) testCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Description.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Description);
      }
      if (testCase_ == TestOneofCase.Get) {
        output.WriteRawTag(18);
        output.WriteMessage(Get);
      }
      if (testCase_ == TestOneofCase.Create) {
        output.WriteRawTag(26);
        output.WriteMessage(Create);
      }
      if (testCase_ == TestOneofCase.Set) {
        output.WriteRawTag(34);
        output.WriteMessage(Set);
      }
      if (testCase_ == TestOneofCase.Update) {
        output.WriteRawTag(42);
        output.WriteMessage(Update);
      }
      if (testCase_ == TestOneofCase.UpdatePaths) {
        output.WriteRawTag(50);
        output.WriteMessage(UpdatePaths);
      }
      if (testCase_ == TestOneofCase.Delete) {
        output.WriteRawTag(58);
        output.WriteMessage(Delete);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (testCase_ == TestOneofCase.Get) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Get);
      }
      if (testCase_ == TestOneofCase.Create) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Create);
      }
      if (testCase_ == TestOneofCase.Set) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Set);
      }
      if (testCase_ == TestOneofCase.Update) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Update);
      }
      if (testCase_ == TestOneofCase.UpdatePaths) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdatePaths);
      }
      if (testCase_ == TestOneofCase.Delete) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Delete);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Test other) {
      if (other == null) {
        return;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      switch (other.TestCase) {
        case TestOneofCase.Get:
          Get = other.Get;
          break;
        case TestOneofCase.Create:
          Create = other.Create;
          break;
        case TestOneofCase.Set:
          Set = other.Set;
          break;
        case TestOneofCase.Update:
          Update = other.Update;
          break;
        case TestOneofCase.UpdatePaths:
          UpdatePaths = other.UpdatePaths;
          break;
        case TestOneofCase.Delete:
          Delete = other.Delete;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Description = input.ReadString();
            break;
          }
          case 18: {
            global::Google.Cloud.Firestore.Tests.Proto.GetTest subBuilder = new global::Google.Cloud.Firestore.Tests.Proto.GetTest();
            if (testCase_ == TestOneofCase.Get) {
              subBuilder.MergeFrom(Get);
            }
            input.ReadMessage(subBuilder);
            Get = subBuilder;
            break;
          }
          case 26: {
            global::Google.Cloud.Firestore.Tests.Proto.CreateTest subBuilder = new global::Google.Cloud.Firestore.Tests.Proto.CreateTest();
            if (testCase_ == TestOneofCase.Create) {
              subBuilder.MergeFrom(Create);
            }
            input.ReadMessage(subBuilder);
            Create = subBuilder;
            break;
          }
          case 34: {
            global::Google.Cloud.Firestore.Tests.Proto.SetTest subBuilder = new global::Google.Cloud.Firestore.Tests.Proto.SetTest();
            if (testCase_ == TestOneofCase.Set) {
              subBuilder.MergeFrom(Set);
            }
            input.ReadMessage(subBuilder);
            Set = subBuilder;
            break;
          }
          case 42: {
            global::Google.Cloud.Firestore.Tests.Proto.UpdateTest subBuilder = new global::Google.Cloud.Firestore.Tests.Proto.UpdateTest();
            if (testCase_ == TestOneofCase.Update) {
              subBuilder.MergeFrom(Update);
            }
            input.ReadMessage(subBuilder);
            Update = subBuilder;
            break;
          }
          case 50: {
            global::Google.Cloud.Firestore.Tests.Proto.UpdatePathsTest subBuilder = new global::Google.Cloud.Firestore.Tests.Proto.UpdatePathsTest();
            if (testCase_ == TestOneofCase.UpdatePaths) {
              subBuilder.MergeFrom(UpdatePaths);
            }
            input.ReadMessage(subBuilder);
            UpdatePaths = subBuilder;
            break;
          }
          case 58: {
            global::Google.Cloud.Firestore.Tests.Proto.DeleteTest subBuilder = new global::Google.Cloud.Firestore.Tests.Proto.DeleteTest();
            if (testCase_ == TestOneofCase.Delete) {
              subBuilder.MergeFrom(Delete);
            }
            input.ReadMessage(subBuilder);
            Delete = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Call to the DocumentRef.Get method.
  /// </summary>
  public sealed partial class GetTest : pb::IMessage<GetTest> {
    private static readonly pb::MessageParser<GetTest> _parser = new pb::MessageParser<GetTest>(() => new GetTest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.Tests.Proto.TestReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTest(GetTest other) : this() {
      docRefPath_ = other.docRefPath_;
      Request = other.request_ != null ? other.Request.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTest Clone() {
      return new GetTest(this);
    }

    /// <summary>Field number for the "doc_ref_path" field.</summary>
    public const int DocRefPathFieldNumber = 1;
    private string docRefPath_ = "";
    /// <summary>
    /// The path of the doc, e.g. "projects/projectID/databases/(default)/documents/C/d"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DocRefPath {
      get { return docRefPath_; }
      set {
        docRefPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 2;
    private global::Google.Cloud.Firestore.V1Beta1.GetDocumentRequest request_;
    /// <summary>
    /// The request that the call should send to the Firestore service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.GetDocumentRequest Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DocRefPath != other.DocRefPath) return false;
      if (!object.Equals(Request, other.Request)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DocRefPath.Length != 0) hash ^= DocRefPath.GetHashCode();
      if (request_ != null) hash ^= Request.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DocRefPath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DocRefPath);
      }
      if (request_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DocRefPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DocRefPath);
      }
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTest other) {
      if (other == null) {
        return;
      }
      if (other.DocRefPath.Length != 0) {
        DocRefPath = other.DocRefPath;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          request_ = new global::Google.Cloud.Firestore.V1Beta1.GetDocumentRequest();
        }
        Request.MergeFrom(other.Request);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DocRefPath = input.ReadString();
            break;
          }
          case 18: {
            if (request_ == null) {
              request_ = new global::Google.Cloud.Firestore.V1Beta1.GetDocumentRequest();
            }
            input.ReadMessage(request_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Call to DocumentRef.Create.
  /// </summary>
  public sealed partial class CreateTest : pb::IMessage<CreateTest> {
    private static readonly pb::MessageParser<CreateTest> _parser = new pb::MessageParser<CreateTest>(() => new CreateTest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateTest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.Tests.Proto.TestReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTest(CreateTest other) : this() {
      docRefPath_ = other.docRefPath_;
      jsonData_ = other.jsonData_;
      Request = other.request_ != null ? other.Request.Clone() : null;
      isError_ = other.isError_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTest Clone() {
      return new CreateTest(this);
    }

    /// <summary>Field number for the "doc_ref_path" field.</summary>
    public const int DocRefPathFieldNumber = 1;
    private string docRefPath_ = "";
    /// <summary>
    /// The path of the doc, e.g. "projects/projectID/databases/(default)/documents/C/d"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DocRefPath {
      get { return docRefPath_; }
      set {
        docRefPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "json_data" field.</summary>
    public const int JsonDataFieldNumber = 2;
    private string jsonData_ = "";
    /// <summary>
    /// The data passed to Create, as JSON. The strings "Delete" and "ServerTimestamp"
    /// denote the two special sentinel values. Values that could be interpreted as integers
    /// (i.e. digit strings) should be treated as integers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JsonData {
      get { return jsonData_; }
      set {
        jsonData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 3;
    private global::Google.Cloud.Firestore.V1Beta1.CommitRequest request_;
    /// <summary>
    /// The request that the call should generate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.CommitRequest Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    /// <summary>Field number for the "is_error" field.</summary>
    public const int IsErrorFieldNumber = 4;
    private bool isError_;
    /// <summary>
    /// If true, the call should result in an error without generating a request.
    /// If this is true, request should not be set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsError {
      get { return isError_; }
      set {
        isError_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateTest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateTest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DocRefPath != other.DocRefPath) return false;
      if (JsonData != other.JsonData) return false;
      if (!object.Equals(Request, other.Request)) return false;
      if (IsError != other.IsError) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DocRefPath.Length != 0) hash ^= DocRefPath.GetHashCode();
      if (JsonData.Length != 0) hash ^= JsonData.GetHashCode();
      if (request_ != null) hash ^= Request.GetHashCode();
      if (IsError != false) hash ^= IsError.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DocRefPath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DocRefPath);
      }
      if (JsonData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(JsonData);
      }
      if (request_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Request);
      }
      if (IsError != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsError);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DocRefPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DocRefPath);
      }
      if (JsonData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonData);
      }
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (IsError != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateTest other) {
      if (other == null) {
        return;
      }
      if (other.DocRefPath.Length != 0) {
        DocRefPath = other.DocRefPath;
      }
      if (other.JsonData.Length != 0) {
        JsonData = other.JsonData;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          request_ = new global::Google.Cloud.Firestore.V1Beta1.CommitRequest();
        }
        Request.MergeFrom(other.Request);
      }
      if (other.IsError != false) {
        IsError = other.IsError;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DocRefPath = input.ReadString();
            break;
          }
          case 18: {
            JsonData = input.ReadString();
            break;
          }
          case 26: {
            if (request_ == null) {
              request_ = new global::Google.Cloud.Firestore.V1Beta1.CommitRequest();
            }
            input.ReadMessage(request_);
            break;
          }
          case 32: {
            IsError = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A call to DocumentRef.Set.
  /// </summary>
  public sealed partial class SetTest : pb::IMessage<SetTest> {
    private static readonly pb::MessageParser<SetTest> _parser = new pb::MessageParser<SetTest>(() => new SetTest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetTest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.Tests.Proto.TestReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTest(SetTest other) : this() {
      docRefPath_ = other.docRefPath_;
      Option = other.option_ != null ? other.Option.Clone() : null;
      jsonData_ = other.jsonData_;
      Request = other.request_ != null ? other.Request.Clone() : null;
      isError_ = other.isError_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTest Clone() {
      return new SetTest(this);
    }

    /// <summary>Field number for the "doc_ref_path" field.</summary>
    public const int DocRefPathFieldNumber = 1;
    private string docRefPath_ = "";
    /// <summary>
    /// path of doc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DocRefPath {
      get { return docRefPath_; }
      set {
        docRefPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "option" field.</summary>
    public const int OptionFieldNumber = 2;
    private global::Google.Cloud.Firestore.Tests.Proto.SetOption option_;
    /// <summary>
    /// option to the Set call, if any
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.Tests.Proto.SetOption Option {
      get { return option_; }
      set {
        option_ = value;
      }
    }

    /// <summary>Field number for the "json_data" field.</summary>
    public const int JsonDataFieldNumber = 3;
    private string jsonData_ = "";
    /// <summary>
    /// data (see CreateTest.json_data)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JsonData {
      get { return jsonData_; }
      set {
        jsonData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 4;
    private global::Google.Cloud.Firestore.V1Beta1.CommitRequest request_;
    /// <summary>
    /// expected request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.CommitRequest Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    /// <summary>Field number for the "is_error" field.</summary>
    public const int IsErrorFieldNumber = 5;
    private bool isError_;
    /// <summary>
    /// call signals an error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsError {
      get { return isError_; }
      set {
        isError_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetTest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetTest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DocRefPath != other.DocRefPath) return false;
      if (!object.Equals(Option, other.Option)) return false;
      if (JsonData != other.JsonData) return false;
      if (!object.Equals(Request, other.Request)) return false;
      if (IsError != other.IsError) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DocRefPath.Length != 0) hash ^= DocRefPath.GetHashCode();
      if (option_ != null) hash ^= Option.GetHashCode();
      if (JsonData.Length != 0) hash ^= JsonData.GetHashCode();
      if (request_ != null) hash ^= Request.GetHashCode();
      if (IsError != false) hash ^= IsError.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DocRefPath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DocRefPath);
      }
      if (option_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Option);
      }
      if (JsonData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(JsonData);
      }
      if (request_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Request);
      }
      if (IsError != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsError);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DocRefPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DocRefPath);
      }
      if (option_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Option);
      }
      if (JsonData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonData);
      }
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (IsError != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetTest other) {
      if (other == null) {
        return;
      }
      if (other.DocRefPath.Length != 0) {
        DocRefPath = other.DocRefPath;
      }
      if (other.option_ != null) {
        if (option_ == null) {
          option_ = new global::Google.Cloud.Firestore.Tests.Proto.SetOption();
        }
        Option.MergeFrom(other.Option);
      }
      if (other.JsonData.Length != 0) {
        JsonData = other.JsonData;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          request_ = new global::Google.Cloud.Firestore.V1Beta1.CommitRequest();
        }
        Request.MergeFrom(other.Request);
      }
      if (other.IsError != false) {
        IsError = other.IsError;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DocRefPath = input.ReadString();
            break;
          }
          case 18: {
            if (option_ == null) {
              option_ = new global::Google.Cloud.Firestore.Tests.Proto.SetOption();
            }
            input.ReadMessage(option_);
            break;
          }
          case 26: {
            JsonData = input.ReadString();
            break;
          }
          case 34: {
            if (request_ == null) {
              request_ = new global::Google.Cloud.Firestore.V1Beta1.CommitRequest();
            }
            input.ReadMessage(request_);
            break;
          }
          case 40: {
            IsError = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A call to the form of DocumentRef.Update that represents the data as a map
  /// or dictionary.
  /// </summary>
  public sealed partial class UpdateTest : pb::IMessage<UpdateTest> {
    private static readonly pb::MessageParser<UpdateTest> _parser = new pb::MessageParser<UpdateTest>(() => new UpdateTest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateTest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.Tests.Proto.TestReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTest(UpdateTest other) : this() {
      docRefPath_ = other.docRefPath_;
      Precondition = other.precondition_ != null ? other.Precondition.Clone() : null;
      jsonData_ = other.jsonData_;
      Request = other.request_ != null ? other.Request.Clone() : null;
      isError_ = other.isError_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTest Clone() {
      return new UpdateTest(this);
    }

    /// <summary>Field number for the "doc_ref_path" field.</summary>
    public const int DocRefPathFieldNumber = 1;
    private string docRefPath_ = "";
    /// <summary>
    /// path of doc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DocRefPath {
      get { return docRefPath_; }
      set {
        docRefPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "precondition" field.</summary>
    public const int PreconditionFieldNumber = 2;
    private global::Google.Cloud.Firestore.V1Beta1.Precondition precondition_;
    /// <summary>
    /// precondition in call, if any
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.Precondition Precondition {
      get { return precondition_; }
      set {
        precondition_ = value;
      }
    }

    /// <summary>Field number for the "json_data" field.</summary>
    public const int JsonDataFieldNumber = 3;
    private string jsonData_ = "";
    /// <summary>
    /// data (see CreateTest.json_data)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JsonData {
      get { return jsonData_; }
      set {
        jsonData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 4;
    private global::Google.Cloud.Firestore.V1Beta1.CommitRequest request_;
    /// <summary>
    /// expected request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.CommitRequest Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    /// <summary>Field number for the "is_error" field.</summary>
    public const int IsErrorFieldNumber = 5;
    private bool isError_;
    /// <summary>
    /// call signals an error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsError {
      get { return isError_; }
      set {
        isError_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateTest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateTest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DocRefPath != other.DocRefPath) return false;
      if (!object.Equals(Precondition, other.Precondition)) return false;
      if (JsonData != other.JsonData) return false;
      if (!object.Equals(Request, other.Request)) return false;
      if (IsError != other.IsError) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DocRefPath.Length != 0) hash ^= DocRefPath.GetHashCode();
      if (precondition_ != null) hash ^= Precondition.GetHashCode();
      if (JsonData.Length != 0) hash ^= JsonData.GetHashCode();
      if (request_ != null) hash ^= Request.GetHashCode();
      if (IsError != false) hash ^= IsError.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DocRefPath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DocRefPath);
      }
      if (precondition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Precondition);
      }
      if (JsonData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(JsonData);
      }
      if (request_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Request);
      }
      if (IsError != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsError);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DocRefPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DocRefPath);
      }
      if (precondition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Precondition);
      }
      if (JsonData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonData);
      }
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (IsError != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateTest other) {
      if (other == null) {
        return;
      }
      if (other.DocRefPath.Length != 0) {
        DocRefPath = other.DocRefPath;
      }
      if (other.precondition_ != null) {
        if (precondition_ == null) {
          precondition_ = new global::Google.Cloud.Firestore.V1Beta1.Precondition();
        }
        Precondition.MergeFrom(other.Precondition);
      }
      if (other.JsonData.Length != 0) {
        JsonData = other.JsonData;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          request_ = new global::Google.Cloud.Firestore.V1Beta1.CommitRequest();
        }
        Request.MergeFrom(other.Request);
      }
      if (other.IsError != false) {
        IsError = other.IsError;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DocRefPath = input.ReadString();
            break;
          }
          case 18: {
            if (precondition_ == null) {
              precondition_ = new global::Google.Cloud.Firestore.V1Beta1.Precondition();
            }
            input.ReadMessage(precondition_);
            break;
          }
          case 26: {
            JsonData = input.ReadString();
            break;
          }
          case 34: {
            if (request_ == null) {
              request_ = new global::Google.Cloud.Firestore.V1Beta1.CommitRequest();
            }
            input.ReadMessage(request_);
            break;
          }
          case 40: {
            IsError = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A call to the form of DocumentRef.Update that represents the data as a list
  /// of field paths and their values.
  /// </summary>
  public sealed partial class UpdatePathsTest : pb::IMessage<UpdatePathsTest> {
    private static readonly pb::MessageParser<UpdatePathsTest> _parser = new pb::MessageParser<UpdatePathsTest>(() => new UpdatePathsTest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePathsTest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.Tests.Proto.TestReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePathsTest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePathsTest(UpdatePathsTest other) : this() {
      docRefPath_ = other.docRefPath_;
      Precondition = other.precondition_ != null ? other.Precondition.Clone() : null;
      fieldPaths_ = other.fieldPaths_.Clone();
      jsonValues_ = other.jsonValues_.Clone();
      Request = other.request_ != null ? other.Request.Clone() : null;
      isError_ = other.isError_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePathsTest Clone() {
      return new UpdatePathsTest(this);
    }

    /// <summary>Field number for the "doc_ref_path" field.</summary>
    public const int DocRefPathFieldNumber = 1;
    private string docRefPath_ = "";
    /// <summary>
    /// path of doc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DocRefPath {
      get { return docRefPath_; }
      set {
        docRefPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "precondition" field.</summary>
    public const int PreconditionFieldNumber = 2;
    private global::Google.Cloud.Firestore.V1Beta1.Precondition precondition_;
    /// <summary>
    /// precondition in call, if any
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.Precondition Precondition {
      get { return precondition_; }
      set {
        precondition_ = value;
      }
    }

    /// <summary>Field number for the "field_paths" field.</summary>
    public const int FieldPathsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Firestore.Tests.Proto.FieldPath> _repeated_fieldPaths_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Firestore.Tests.Proto.FieldPath.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Firestore.Tests.Proto.FieldPath> fieldPaths_ = new pbc::RepeatedField<global::Google.Cloud.Firestore.Tests.Proto.FieldPath>();
    /// <summary>
    /// parallel sequences: field_paths[i] corresponds to json_values[i]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Firestore.Tests.Proto.FieldPath> FieldPaths {
      get { return fieldPaths_; }
    }

    /// <summary>Field number for the "json_values" field.</summary>
    public const int JsonValuesFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_jsonValues_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> jsonValues_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// the argument values, as JSON
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> JsonValues {
      get { return jsonValues_; }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 5;
    private global::Google.Cloud.Firestore.V1Beta1.CommitRequest request_;
    /// <summary>
    /// expected rquest
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.CommitRequest Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    /// <summary>Field number for the "is_error" field.</summary>
    public const int IsErrorFieldNumber = 6;
    private bool isError_;
    /// <summary>
    /// call signals an error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsError {
      get { return isError_; }
      set {
        isError_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePathsTest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePathsTest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DocRefPath != other.DocRefPath) return false;
      if (!object.Equals(Precondition, other.Precondition)) return false;
      if(!fieldPaths_.Equals(other.fieldPaths_)) return false;
      if(!jsonValues_.Equals(other.jsonValues_)) return false;
      if (!object.Equals(Request, other.Request)) return false;
      if (IsError != other.IsError) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DocRefPath.Length != 0) hash ^= DocRefPath.GetHashCode();
      if (precondition_ != null) hash ^= Precondition.GetHashCode();
      hash ^= fieldPaths_.GetHashCode();
      hash ^= jsonValues_.GetHashCode();
      if (request_ != null) hash ^= Request.GetHashCode();
      if (IsError != false) hash ^= IsError.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DocRefPath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DocRefPath);
      }
      if (precondition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Precondition);
      }
      fieldPaths_.WriteTo(output, _repeated_fieldPaths_codec);
      jsonValues_.WriteTo(output, _repeated_jsonValues_codec);
      if (request_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Request);
      }
      if (IsError != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsError);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DocRefPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DocRefPath);
      }
      if (precondition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Precondition);
      }
      size += fieldPaths_.CalculateSize(_repeated_fieldPaths_codec);
      size += jsonValues_.CalculateSize(_repeated_jsonValues_codec);
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (IsError != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePathsTest other) {
      if (other == null) {
        return;
      }
      if (other.DocRefPath.Length != 0) {
        DocRefPath = other.DocRefPath;
      }
      if (other.precondition_ != null) {
        if (precondition_ == null) {
          precondition_ = new global::Google.Cloud.Firestore.V1Beta1.Precondition();
        }
        Precondition.MergeFrom(other.Precondition);
      }
      fieldPaths_.Add(other.fieldPaths_);
      jsonValues_.Add(other.jsonValues_);
      if (other.request_ != null) {
        if (request_ == null) {
          request_ = new global::Google.Cloud.Firestore.V1Beta1.CommitRequest();
        }
        Request.MergeFrom(other.Request);
      }
      if (other.IsError != false) {
        IsError = other.IsError;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DocRefPath = input.ReadString();
            break;
          }
          case 18: {
            if (precondition_ == null) {
              precondition_ = new global::Google.Cloud.Firestore.V1Beta1.Precondition();
            }
            input.ReadMessage(precondition_);
            break;
          }
          case 26: {
            fieldPaths_.AddEntriesFrom(input, _repeated_fieldPaths_codec);
            break;
          }
          case 34: {
            jsonValues_.AddEntriesFrom(input, _repeated_jsonValues_codec);
            break;
          }
          case 42: {
            if (request_ == null) {
              request_ = new global::Google.Cloud.Firestore.V1Beta1.CommitRequest();
            }
            input.ReadMessage(request_);
            break;
          }
          case 48: {
            IsError = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A call to DocmentRef.Delete
  /// </summary>
  public sealed partial class DeleteTest : pb::IMessage<DeleteTest> {
    private static readonly pb::MessageParser<DeleteTest> _parser = new pb::MessageParser<DeleteTest>(() => new DeleteTest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteTest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.Tests.Proto.TestReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteTest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteTest(DeleteTest other) : this() {
      docRefPath_ = other.docRefPath_;
      Precondition = other.precondition_ != null ? other.Precondition.Clone() : null;
      Request = other.request_ != null ? other.Request.Clone() : null;
      isError_ = other.isError_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteTest Clone() {
      return new DeleteTest(this);
    }

    /// <summary>Field number for the "doc_ref_path" field.</summary>
    public const int DocRefPathFieldNumber = 1;
    private string docRefPath_ = "";
    /// <summary>
    /// path of doc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DocRefPath {
      get { return docRefPath_; }
      set {
        docRefPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "precondition" field.</summary>
    public const int PreconditionFieldNumber = 2;
    private global::Google.Cloud.Firestore.V1Beta1.Precondition precondition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.Precondition Precondition {
      get { return precondition_; }
      set {
        precondition_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 3;
    private global::Google.Cloud.Firestore.V1Beta1.CommitRequest request_;
    /// <summary>
    /// expected rquest
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.CommitRequest Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    /// <summary>Field number for the "is_error" field.</summary>
    public const int IsErrorFieldNumber = 4;
    private bool isError_;
    /// <summary>
    /// call signals an error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsError {
      get { return isError_; }
      set {
        isError_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteTest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteTest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DocRefPath != other.DocRefPath) return false;
      if (!object.Equals(Precondition, other.Precondition)) return false;
      if (!object.Equals(Request, other.Request)) return false;
      if (IsError != other.IsError) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DocRefPath.Length != 0) hash ^= DocRefPath.GetHashCode();
      if (precondition_ != null) hash ^= Precondition.GetHashCode();
      if (request_ != null) hash ^= Request.GetHashCode();
      if (IsError != false) hash ^= IsError.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DocRefPath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DocRefPath);
      }
      if (precondition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Precondition);
      }
      if (request_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Request);
      }
      if (IsError != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsError);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DocRefPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DocRefPath);
      }
      if (precondition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Precondition);
      }
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (IsError != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteTest other) {
      if (other == null) {
        return;
      }
      if (other.DocRefPath.Length != 0) {
        DocRefPath = other.DocRefPath;
      }
      if (other.precondition_ != null) {
        if (precondition_ == null) {
          precondition_ = new global::Google.Cloud.Firestore.V1Beta1.Precondition();
        }
        Precondition.MergeFrom(other.Precondition);
      }
      if (other.request_ != null) {
        if (request_ == null) {
          request_ = new global::Google.Cloud.Firestore.V1Beta1.CommitRequest();
        }
        Request.MergeFrom(other.Request);
      }
      if (other.IsError != false) {
        IsError = other.IsError;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DocRefPath = input.ReadString();
            break;
          }
          case 18: {
            if (precondition_ == null) {
              precondition_ = new global::Google.Cloud.Firestore.V1Beta1.Precondition();
            }
            input.ReadMessage(precondition_);
            break;
          }
          case 26: {
            if (request_ == null) {
              request_ = new global::Google.Cloud.Firestore.V1Beta1.CommitRequest();
            }
            input.ReadMessage(request_);
            break;
          }
          case 32: {
            IsError = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An option to the DocumentRef.Set call.
  /// </summary>
  public sealed partial class SetOption : pb::IMessage<SetOption> {
    private static readonly pb::MessageParser<SetOption> _parser = new pb::MessageParser<SetOption>(() => new SetOption());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetOption> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.Tests.Proto.TestReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetOption() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetOption(SetOption other) : this() {
      all_ = other.all_;
      fields_ = other.fields_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetOption Clone() {
      return new SetOption(this);
    }

    /// <summary>Field number for the "all" field.</summary>
    public const int AllFieldNumber = 1;
    private bool all_;
    /// <summary>
    /// if true, merge all fields ("fields" is ignored).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool All {
      get { return all_; }
      set {
        all_ = value;
      }
    }

    /// <summary>Field number for the "fields" field.</summary>
    public const int FieldsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Firestore.Tests.Proto.FieldPath> _repeated_fields_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Firestore.Tests.Proto.FieldPath.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Firestore.Tests.Proto.FieldPath> fields_ = new pbc::RepeatedField<global::Google.Cloud.Firestore.Tests.Proto.FieldPath>();
    /// <summary>
    /// field paths for a Merge option
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Firestore.Tests.Proto.FieldPath> Fields {
      get { return fields_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetOption);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetOption other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (All != other.All) return false;
      if(!fields_.Equals(other.fields_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (All != false) hash ^= All.GetHashCode();
      hash ^= fields_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (All != false) {
        output.WriteRawTag(8);
        output.WriteBool(All);
      }
      fields_.WriteTo(output, _repeated_fields_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (All != false) {
        size += 1 + 1;
      }
      size += fields_.CalculateSize(_repeated_fields_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetOption other) {
      if (other == null) {
        return;
      }
      if (other.All != false) {
        All = other.All;
      }
      fields_.Add(other.fields_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            All = input.ReadBool();
            break;
          }
          case 18: {
            fields_.AddEntriesFrom(input, _repeated_fields_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A field path.
  /// </summary>
  public sealed partial class FieldPath : pb::IMessage<FieldPath> {
    private static readonly pb::MessageParser<FieldPath> _parser = new pb::MessageParser<FieldPath>(() => new FieldPath());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FieldPath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.Tests.Proto.TestReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldPath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldPath(FieldPath other) : this() {
      field_ = other.field_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldPath Clone() {
      return new FieldPath(this);
    }

    /// <summary>Field number for the "field" field.</summary>
    public const int FieldFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_field_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> field_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Field {
      get { return field_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FieldPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FieldPath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!field_.Equals(other.field_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= field_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      field_.WriteTo(output, _repeated_field_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += field_.CalculateSize(_repeated_field_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FieldPath other) {
      if (other == null) {
        return;
      }
      field_.Add(other.field_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            field_.AddEntriesFrom(input, _repeated_field_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
