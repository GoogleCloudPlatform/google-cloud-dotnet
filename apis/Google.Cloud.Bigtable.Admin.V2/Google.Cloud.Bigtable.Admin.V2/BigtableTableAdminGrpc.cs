// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/bigtable/admin/v2/bigtable_table_admin.proto
// </auto-generated>
// Original file comments:
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Google.Cloud.Bigtable.Admin.V2 {
  /// <summary>
  /// Service for creating, configuring, and deleting Cloud Bigtable tables.
  ///
  /// Provides access to the table schemas only, not the data stored within
  /// the tables.
  /// </summary>
  public static partial class BigtableTableAdmin
  {
    static readonly string __ServiceName = "google.bigtable.admin.v2.BigtableTableAdmin";

    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.CreateTableRequest> __Marshaller_CreateTableRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Bigtable.Admin.V2.CreateTableRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.Table> __Marshaller_Table = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Bigtable.Admin.V2.Table.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.CreateTableFromSnapshotRequest> __Marshaller_CreateTableFromSnapshotRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Bigtable.Admin.V2.CreateTableFromSnapshotRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.LongRunning.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.ListTablesRequest> __Marshaller_ListTablesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Bigtable.Admin.V2.ListTablesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.ListTablesResponse> __Marshaller_ListTablesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Bigtable.Admin.V2.ListTablesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.GetTableRequest> __Marshaller_GetTableRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Bigtable.Admin.V2.GetTableRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.DeleteTableRequest> __Marshaller_DeleteTableRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Bigtable.Admin.V2.DeleteTableRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.ModifyColumnFamiliesRequest> __Marshaller_ModifyColumnFamiliesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Bigtable.Admin.V2.ModifyColumnFamiliesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.DropRowRangeRequest> __Marshaller_DropRowRangeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Bigtable.Admin.V2.DropRowRangeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenRequest> __Marshaller_GenerateConsistencyTokenRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenResponse> __Marshaller_GenerateConsistencyTokenResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyRequest> __Marshaller_CheckConsistencyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyResponse> __Marshaller_CheckConsistencyResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.SnapshotTableRequest> __Marshaller_SnapshotTableRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Bigtable.Admin.V2.SnapshotTableRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.GetSnapshotRequest> __Marshaller_GetSnapshotRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Bigtable.Admin.V2.GetSnapshotRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.Snapshot> __Marshaller_Snapshot = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Bigtable.Admin.V2.Snapshot.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsRequest> __Marshaller_ListSnapshotsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsResponse> __Marshaller_ListSnapshotsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.DeleteSnapshotRequest> __Marshaller_DeleteSnapshotRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Bigtable.Admin.V2.DeleteSnapshotRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.CreateTableRequest, global::Google.Cloud.Bigtable.Admin.V2.Table> __Method_CreateTable = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.CreateTableRequest, global::Google.Cloud.Bigtable.Admin.V2.Table>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTable",
        __Marshaller_CreateTableRequest,
        __Marshaller_Table);

    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.CreateTableFromSnapshotRequest, global::Google.LongRunning.Operation> __Method_CreateTableFromSnapshot = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.CreateTableFromSnapshotRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTableFromSnapshot",
        __Marshaller_CreateTableFromSnapshotRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.ListTablesRequest, global::Google.Cloud.Bigtable.Admin.V2.ListTablesResponse> __Method_ListTables = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.ListTablesRequest, global::Google.Cloud.Bigtable.Admin.V2.ListTablesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTables",
        __Marshaller_ListTablesRequest,
        __Marshaller_ListTablesResponse);

    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.GetTableRequest, global::Google.Cloud.Bigtable.Admin.V2.Table> __Method_GetTable = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.GetTableRequest, global::Google.Cloud.Bigtable.Admin.V2.Table>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTable",
        __Marshaller_GetTableRequest,
        __Marshaller_Table);

    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.DeleteTableRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteTable = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.DeleteTableRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTable",
        __Marshaller_DeleteTableRequest,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.ModifyColumnFamiliesRequest, global::Google.Cloud.Bigtable.Admin.V2.Table> __Method_ModifyColumnFamilies = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.ModifyColumnFamiliesRequest, global::Google.Cloud.Bigtable.Admin.V2.Table>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ModifyColumnFamilies",
        __Marshaller_ModifyColumnFamiliesRequest,
        __Marshaller_Table);

    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.DropRowRangeRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DropRowRange = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.DropRowRangeRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DropRowRange",
        __Marshaller_DropRowRangeRequest,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenRequest, global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenResponse> __Method_GenerateConsistencyToken = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenRequest, global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateConsistencyToken",
        __Marshaller_GenerateConsistencyTokenRequest,
        __Marshaller_GenerateConsistencyTokenResponse);

    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyRequest, global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyResponse> __Method_CheckConsistency = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyRequest, global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckConsistency",
        __Marshaller_CheckConsistencyRequest,
        __Marshaller_CheckConsistencyResponse);

    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.SnapshotTableRequest, global::Google.LongRunning.Operation> __Method_SnapshotTable = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.SnapshotTableRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SnapshotTable",
        __Marshaller_SnapshotTableRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.GetSnapshotRequest, global::Google.Cloud.Bigtable.Admin.V2.Snapshot> __Method_GetSnapshot = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.GetSnapshotRequest, global::Google.Cloud.Bigtable.Admin.V2.Snapshot>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSnapshot",
        __Marshaller_GetSnapshotRequest,
        __Marshaller_Snapshot);

    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsRequest, global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsResponse> __Method_ListSnapshots = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsRequest, global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSnapshots",
        __Marshaller_ListSnapshotsRequest,
        __Marshaller_ListSnapshotsResponse);

    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.DeleteSnapshotRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteSnapshot = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.DeleteSnapshotRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSnapshot",
        __Marshaller_DeleteSnapshotRequest,
        __Marshaller_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Bigtable.Admin.V2.BigtableTableAdminReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of BigtableTableAdmin</summary>
    public abstract partial class BigtableTableAdminBase
    {
      /// <summary>
      /// Creates a new table in the specified instance.
      /// The table can be created with a full set of initial column families,
      /// specified in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.Admin.V2.Table> CreateTable(global::Google.Cloud.Bigtable.Admin.V2.CreateTableRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This is a private alpha release of Cloud Bigtable snapshots. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Creates a new table from the specified snapshot. The target table must
      /// not exist. The snapshot and the table must be in the same instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateTableFromSnapshot(global::Google.Cloud.Bigtable.Admin.V2.CreateTableFromSnapshotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all tables served from a specified instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.Admin.V2.ListTablesResponse> ListTables(global::Google.Cloud.Bigtable.Admin.V2.ListTablesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets metadata information about the specified table.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.Admin.V2.Table> GetTable(global::Google.Cloud.Bigtable.Admin.V2.GetTableRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Permanently deletes a specified table and all of its data.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTable(global::Google.Cloud.Bigtable.Admin.V2.DeleteTableRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Performs a series of column family modifications on the specified table.
      /// Either all or none of the modifications will occur before this method
      /// returns, but data requests received prior to that point may see a table
      /// where only some modifications have taken effect.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.Admin.V2.Table> ModifyColumnFamilies(global::Google.Cloud.Bigtable.Admin.V2.ModifyColumnFamiliesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Permanently drop/delete a row range from a specified table. The request can
      /// specify whether to delete all rows in a table, or only those that match a
      /// particular prefix.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DropRowRange(global::Google.Cloud.Bigtable.Admin.V2.DropRowRangeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This is a private alpha release of Cloud Bigtable replication. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Generates a consistency token for a Table, which can be used in
      /// CheckConsistency to check whether mutations to the table that finished
      /// before this call started have been replicated. The tokens will be available
      /// for 90 days.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenResponse> GenerateConsistencyToken(global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This is a private alpha release of Cloud Bigtable replication. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Checks replication consistency based on a consistency token, that is, if
      /// replication has caught up based on the conditions specified in the token
      /// and the check request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyResponse> CheckConsistency(global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This is a private alpha release of Cloud Bigtable snapshots. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Creates a new snapshot in the specified cluster from the specified
      /// source table. The cluster and the table must be in the same instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> SnapshotTable(global::Google.Cloud.Bigtable.Admin.V2.SnapshotTableRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This is a private alpha release of Cloud Bigtable snapshots. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Gets metadata information about the specified snapshot.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.Admin.V2.Snapshot> GetSnapshot(global::Google.Cloud.Bigtable.Admin.V2.GetSnapshotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This is a private alpha release of Cloud Bigtable snapshots. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Lists all snapshots associated with the specified cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsResponse> ListSnapshots(global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This is a private alpha release of Cloud Bigtable snapshots. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Permanently deletes the specified snapshot.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSnapshot(global::Google.Cloud.Bigtable.Admin.V2.DeleteSnapshotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for BigtableTableAdmin</summary>
    public partial class BigtableTableAdminClient : grpc::ClientBase<BigtableTableAdminClient>
    {
      /// <summary>Creates a new client for BigtableTableAdmin</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public BigtableTableAdminClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for BigtableTableAdmin that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public BigtableTableAdminClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected BigtableTableAdminClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected BigtableTableAdminClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a new table in the specified instance.
      /// The table can be created with a full set of initial column families,
      /// specified in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Bigtable.Admin.V2.Table CreateTable(global::Google.Cloud.Bigtable.Admin.V2.CreateTableRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateTable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new table in the specified instance.
      /// The table can be created with a full set of initial column families,
      /// specified in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Bigtable.Admin.V2.Table CreateTable(global::Google.Cloud.Bigtable.Admin.V2.CreateTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTable, null, options, request);
      }
      /// <summary>
      /// Creates a new table in the specified instance.
      /// The table can be created with a full set of initial column families,
      /// specified in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.Table> CreateTableAsync(global::Google.Cloud.Bigtable.Admin.V2.CreateTableRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateTableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new table in the specified instance.
      /// The table can be created with a full set of initial column families,
      /// specified in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.Table> CreateTableAsync(global::Google.Cloud.Bigtable.Admin.V2.CreateTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTable, null, options, request);
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable snapshots. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Creates a new table from the specified snapshot. The target table must
      /// not exist. The snapshot and the table must be in the same instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CreateTableFromSnapshot(global::Google.Cloud.Bigtable.Admin.V2.CreateTableFromSnapshotRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateTableFromSnapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable snapshots. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Creates a new table from the specified snapshot. The target table must
      /// not exist. The snapshot and the table must be in the same instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CreateTableFromSnapshot(global::Google.Cloud.Bigtable.Admin.V2.CreateTableFromSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTableFromSnapshot, null, options, request);
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable snapshots. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Creates a new table from the specified snapshot. The target table must
      /// not exist. The snapshot and the table must be in the same instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateTableFromSnapshotAsync(global::Google.Cloud.Bigtable.Admin.V2.CreateTableFromSnapshotRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateTableFromSnapshotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable snapshots. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Creates a new table from the specified snapshot. The target table must
      /// not exist. The snapshot and the table must be in the same instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateTableFromSnapshotAsync(global::Google.Cloud.Bigtable.Admin.V2.CreateTableFromSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTableFromSnapshot, null, options, request);
      }
      /// <summary>
      /// Lists all tables served from a specified instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Bigtable.Admin.V2.ListTablesResponse ListTables(global::Google.Cloud.Bigtable.Admin.V2.ListTablesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListTables(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all tables served from a specified instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Bigtable.Admin.V2.ListTablesResponse ListTables(global::Google.Cloud.Bigtable.Admin.V2.ListTablesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTables, null, options, request);
      }
      /// <summary>
      /// Lists all tables served from a specified instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.ListTablesResponse> ListTablesAsync(global::Google.Cloud.Bigtable.Admin.V2.ListTablesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListTablesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all tables served from a specified instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.ListTablesResponse> ListTablesAsync(global::Google.Cloud.Bigtable.Admin.V2.ListTablesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTables, null, options, request);
      }
      /// <summary>
      /// Gets metadata information about the specified table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Bigtable.Admin.V2.Table GetTable(global::Google.Cloud.Bigtable.Admin.V2.GetTableRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetTable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets metadata information about the specified table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Bigtable.Admin.V2.Table GetTable(global::Google.Cloud.Bigtable.Admin.V2.GetTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTable, null, options, request);
      }
      /// <summary>
      /// Gets metadata information about the specified table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.Table> GetTableAsync(global::Google.Cloud.Bigtable.Admin.V2.GetTableRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetTableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets metadata information about the specified table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.Table> GetTableAsync(global::Google.Cloud.Bigtable.Admin.V2.GetTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTable, null, options, request);
      }
      /// <summary>
      /// Permanently deletes a specified table and all of its data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteTable(global::Google.Cloud.Bigtable.Admin.V2.DeleteTableRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteTable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Permanently deletes a specified table and all of its data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteTable(global::Google.Cloud.Bigtable.Admin.V2.DeleteTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTable, null, options, request);
      }
      /// <summary>
      /// Permanently deletes a specified table and all of its data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTableAsync(global::Google.Cloud.Bigtable.Admin.V2.DeleteTableRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteTableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Permanently deletes a specified table and all of its data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTableAsync(global::Google.Cloud.Bigtable.Admin.V2.DeleteTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTable, null, options, request);
      }
      /// <summary>
      /// Performs a series of column family modifications on the specified table.
      /// Either all or none of the modifications will occur before this method
      /// returns, but data requests received prior to that point may see a table
      /// where only some modifications have taken effect.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Bigtable.Admin.V2.Table ModifyColumnFamilies(global::Google.Cloud.Bigtable.Admin.V2.ModifyColumnFamiliesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ModifyColumnFamilies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Performs a series of column family modifications on the specified table.
      /// Either all or none of the modifications will occur before this method
      /// returns, but data requests received prior to that point may see a table
      /// where only some modifications have taken effect.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Bigtable.Admin.V2.Table ModifyColumnFamilies(global::Google.Cloud.Bigtable.Admin.V2.ModifyColumnFamiliesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ModifyColumnFamilies, null, options, request);
      }
      /// <summary>
      /// Performs a series of column family modifications on the specified table.
      /// Either all or none of the modifications will occur before this method
      /// returns, but data requests received prior to that point may see a table
      /// where only some modifications have taken effect.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.Table> ModifyColumnFamiliesAsync(global::Google.Cloud.Bigtable.Admin.V2.ModifyColumnFamiliesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ModifyColumnFamiliesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Performs a series of column family modifications on the specified table.
      /// Either all or none of the modifications will occur before this method
      /// returns, but data requests received prior to that point may see a table
      /// where only some modifications have taken effect.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.Table> ModifyColumnFamiliesAsync(global::Google.Cloud.Bigtable.Admin.V2.ModifyColumnFamiliesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ModifyColumnFamilies, null, options, request);
      }
      /// <summary>
      /// Permanently drop/delete a row range from a specified table. The request can
      /// specify whether to delete all rows in a table, or only those that match a
      /// particular prefix.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DropRowRange(global::Google.Cloud.Bigtable.Admin.V2.DropRowRangeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DropRowRange(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Permanently drop/delete a row range from a specified table. The request can
      /// specify whether to delete all rows in a table, or only those that match a
      /// particular prefix.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DropRowRange(global::Google.Cloud.Bigtable.Admin.V2.DropRowRangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DropRowRange, null, options, request);
      }
      /// <summary>
      /// Permanently drop/delete a row range from a specified table. The request can
      /// specify whether to delete all rows in a table, or only those that match a
      /// particular prefix.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DropRowRangeAsync(global::Google.Cloud.Bigtable.Admin.V2.DropRowRangeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DropRowRangeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Permanently drop/delete a row range from a specified table. The request can
      /// specify whether to delete all rows in a table, or only those that match a
      /// particular prefix.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DropRowRangeAsync(global::Google.Cloud.Bigtable.Admin.V2.DropRowRangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DropRowRange, null, options, request);
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable replication. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Generates a consistency token for a Table, which can be used in
      /// CheckConsistency to check whether mutations to the table that finished
      /// before this call started have been replicated. The tokens will be available
      /// for 90 days.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenResponse GenerateConsistencyToken(global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GenerateConsistencyToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable replication. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Generates a consistency token for a Table, which can be used in
      /// CheckConsistency to check whether mutations to the table that finished
      /// before this call started have been replicated. The tokens will be available
      /// for 90 days.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenResponse GenerateConsistencyToken(global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateConsistencyToken, null, options, request);
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable replication. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Generates a consistency token for a Table, which can be used in
      /// CheckConsistency to check whether mutations to the table that finished
      /// before this call started have been replicated. The tokens will be available
      /// for 90 days.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenResponse> GenerateConsistencyTokenAsync(global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GenerateConsistencyTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable replication. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Generates a consistency token for a Table, which can be used in
      /// CheckConsistency to check whether mutations to the table that finished
      /// before this call started have been replicated. The tokens will be available
      /// for 90 days.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenResponse> GenerateConsistencyTokenAsync(global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateConsistencyToken, null, options, request);
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable replication. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Checks replication consistency based on a consistency token, that is, if
      /// replication has caught up based on the conditions specified in the token
      /// and the check request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyResponse CheckConsistency(global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CheckConsistency(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable replication. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Checks replication consistency based on a consistency token, that is, if
      /// replication has caught up based on the conditions specified in the token
      /// and the check request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyResponse CheckConsistency(global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckConsistency, null, options, request);
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable replication. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Checks replication consistency based on a consistency token, that is, if
      /// replication has caught up based on the conditions specified in the token
      /// and the check request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyResponse> CheckConsistencyAsync(global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CheckConsistencyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable replication. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Checks replication consistency based on a consistency token, that is, if
      /// replication has caught up based on the conditions specified in the token
      /// and the check request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyResponse> CheckConsistencyAsync(global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckConsistency, null, options, request);
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable snapshots. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Creates a new snapshot in the specified cluster from the specified
      /// source table. The cluster and the table must be in the same instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation SnapshotTable(global::Google.Cloud.Bigtable.Admin.V2.SnapshotTableRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SnapshotTable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable snapshots. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Creates a new snapshot in the specified cluster from the specified
      /// source table. The cluster and the table must be in the same instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation SnapshotTable(global::Google.Cloud.Bigtable.Admin.V2.SnapshotTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SnapshotTable, null, options, request);
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable snapshots. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Creates a new snapshot in the specified cluster from the specified
      /// source table. The cluster and the table must be in the same instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> SnapshotTableAsync(global::Google.Cloud.Bigtable.Admin.V2.SnapshotTableRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SnapshotTableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable snapshots. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Creates a new snapshot in the specified cluster from the specified
      /// source table. The cluster and the table must be in the same instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> SnapshotTableAsync(global::Google.Cloud.Bigtable.Admin.V2.SnapshotTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SnapshotTable, null, options, request);
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable snapshots. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Gets metadata information about the specified snapshot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Bigtable.Admin.V2.Snapshot GetSnapshot(global::Google.Cloud.Bigtable.Admin.V2.GetSnapshotRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSnapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable snapshots. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Gets metadata information about the specified snapshot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Bigtable.Admin.V2.Snapshot GetSnapshot(global::Google.Cloud.Bigtable.Admin.V2.GetSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSnapshot, null, options, request);
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable snapshots. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Gets metadata information about the specified snapshot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.Snapshot> GetSnapshotAsync(global::Google.Cloud.Bigtable.Admin.V2.GetSnapshotRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSnapshotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable snapshots. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Gets metadata information about the specified snapshot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.Snapshot> GetSnapshotAsync(global::Google.Cloud.Bigtable.Admin.V2.GetSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSnapshot, null, options, request);
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable snapshots. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Lists all snapshots associated with the specified cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsResponse ListSnapshots(global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListSnapshots(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable snapshots. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Lists all snapshots associated with the specified cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsResponse ListSnapshots(global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSnapshots, null, options, request);
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable snapshots. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Lists all snapshots associated with the specified cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsResponse> ListSnapshotsAsync(global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListSnapshotsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable snapshots. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Lists all snapshots associated with the specified cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsResponse> ListSnapshotsAsync(global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSnapshots, null, options, request);
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable snapshots. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Permanently deletes the specified snapshot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSnapshot(global::Google.Cloud.Bigtable.Admin.V2.DeleteSnapshotRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteSnapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable snapshots. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Permanently deletes the specified snapshot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSnapshot(global::Google.Cloud.Bigtable.Admin.V2.DeleteSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSnapshot, null, options, request);
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable snapshots. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Permanently deletes the specified snapshot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSnapshotAsync(global::Google.Cloud.Bigtable.Admin.V2.DeleteSnapshotRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteSnapshotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This is a private alpha release of Cloud Bigtable snapshots. This feature
      /// is not currently available to most Cloud Bigtable customers. This feature
      /// might be changed in backward-incompatible ways and is not recommended for
      /// production use. It is not subject to any SLA or deprecation policy.
      ///
      /// Permanently deletes the specified snapshot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSnapshotAsync(global::Google.Cloud.Bigtable.Admin.V2.DeleteSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSnapshot, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override BigtableTableAdminClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BigtableTableAdminClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(BigtableTableAdminBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateTable, serviceImpl.CreateTable)
          .AddMethod(__Method_CreateTableFromSnapshot, serviceImpl.CreateTableFromSnapshot)
          .AddMethod(__Method_ListTables, serviceImpl.ListTables)
          .AddMethod(__Method_GetTable, serviceImpl.GetTable)
          .AddMethod(__Method_DeleteTable, serviceImpl.DeleteTable)
          .AddMethod(__Method_ModifyColumnFamilies, serviceImpl.ModifyColumnFamilies)
          .AddMethod(__Method_DropRowRange, serviceImpl.DropRowRange)
          .AddMethod(__Method_GenerateConsistencyToken, serviceImpl.GenerateConsistencyToken)
          .AddMethod(__Method_CheckConsistency, serviceImpl.CheckConsistency)
          .AddMethod(__Method_SnapshotTable, serviceImpl.SnapshotTable)
          .AddMethod(__Method_GetSnapshot, serviceImpl.GetSnapshot)
          .AddMethod(__Method_ListSnapshots, serviceImpl.ListSnapshots)
          .AddMethod(__Method_DeleteSnapshot, serviceImpl.DeleteSnapshot).Build();
    }

  }
}
#endregion
