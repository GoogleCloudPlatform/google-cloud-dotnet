// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/admin/database/v1/spanner_database_admin.proto
// Original file comments:
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Google.Cloud.Spanner.Admin.Database.V1 {
  /// <summary>
  ///  Cloud Spanner Database Admin API
  ///
  ///  The Cloud Spanner Database Admin API can be used to create, drop, and
  ///  list databases. It also enables updating the schema of pre-existing
  ///  databases.
  /// </summary>
  public static class DatabaseAdmin
  {
    static readonly string __ServiceName = "google.spanner.admin.database.v1.DatabaseAdmin";

    static readonly Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesRequest> __Marshaller_ListDatabasesRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesResponse> __Marshaller_ListDatabasesResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.CreateDatabaseRequest> __Marshaller_CreateDatabaseRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.Admin.Database.V1.CreateDatabaseRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.LongRunning.Operation> __Marshaller_Operation = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.LongRunning.Operation.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseRequest> __Marshaller_GetDatabaseRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.Database> __Marshaller_Database = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.Admin.Database.V1.Database.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseDdlRequest> __Marshaller_UpdateDatabaseDdlRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseDdlRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.DropDatabaseRequest> __Marshaller_DropDatabaseRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.Admin.Database.V1.DropDatabaseRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlRequest> __Marshaller_GetDatabaseDdlRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlResponse> __Marshaller_GetDatabaseDdlResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Iam.V1.SetIamPolicyRequest> __Marshaller_SetIamPolicyRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.SetIamPolicyRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Iam.V1.Policy> __Marshaller_Policy = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.Policy.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Iam.V1.GetIamPolicyRequest> __Marshaller_GetIamPolicyRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.GetIamPolicyRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest> __Marshaller_TestIamPermissionsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.TestIamPermissionsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Marshaller_TestIamPermissionsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.TestIamPermissionsResponse.Parser.ParseFrom);

    static readonly Method<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesRequest, global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesResponse> __Method_ListDatabases = new Method<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesRequest, global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesResponse>(
        MethodType.Unary,
        __ServiceName,
        "ListDatabases",
        __Marshaller_ListDatabasesRequest,
        __Marshaller_ListDatabasesResponse);

    static readonly Method<global::Google.Cloud.Spanner.Admin.Database.V1.CreateDatabaseRequest, global::Google.LongRunning.Operation> __Method_CreateDatabase = new Method<global::Google.Cloud.Spanner.Admin.Database.V1.CreateDatabaseRequest, global::Google.LongRunning.Operation>(
        MethodType.Unary,
        __ServiceName,
        "CreateDatabase",
        __Marshaller_CreateDatabaseRequest,
        __Marshaller_Operation);

    static readonly Method<global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseRequest, global::Google.Cloud.Spanner.Admin.Database.V1.Database> __Method_GetDatabase = new Method<global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseRequest, global::Google.Cloud.Spanner.Admin.Database.V1.Database>(
        MethodType.Unary,
        __ServiceName,
        "GetDatabase",
        __Marshaller_GetDatabaseRequest,
        __Marshaller_Database);

    static readonly Method<global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseDdlRequest, global::Google.LongRunning.Operation> __Method_UpdateDatabaseDdl = new Method<global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseDdlRequest, global::Google.LongRunning.Operation>(
        MethodType.Unary,
        __ServiceName,
        "UpdateDatabaseDdl",
        __Marshaller_UpdateDatabaseDdlRequest,
        __Marshaller_Operation);

    static readonly Method<global::Google.Cloud.Spanner.Admin.Database.V1.DropDatabaseRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DropDatabase = new Method<global::Google.Cloud.Spanner.Admin.Database.V1.DropDatabaseRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        MethodType.Unary,
        __ServiceName,
        "DropDatabase",
        __Marshaller_DropDatabaseRequest,
        __Marshaller_Empty);

    static readonly Method<global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlRequest, global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlResponse> __Method_GetDatabaseDdl = new Method<global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlRequest, global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetDatabaseDdl",
        __Marshaller_GetDatabaseDdlRequest,
        __Marshaller_GetDatabaseDdlResponse);

    static readonly Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_SetIamPolicy = new Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_SetIamPolicyRequest,
        __Marshaller_Policy);

    static readonly Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_GetIamPolicy = new Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_GetIamPolicyRequest,
        __Marshaller_Policy);

    static readonly Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Method_TestIamPermissions = new Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse>(
        MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_TestIamPermissionsRequest,
        __Marshaller_TestIamPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Spanner.Admin.Database.V1.SpannerDatabaseAdminReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DatabaseAdmin</summary>
    public abstract class DatabaseAdminBase
    {
      /// <summary>
      ///  Lists Cloud Spanner databases.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesResponse> ListDatabases(global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Creates a new Cloud Spanner database and starts to prepare it for serving.
      ///  The returned [long-running operation][google.longrunning.Operation] will
      ///  have a name of the format `&lt;database_name>/operations/&lt;operation_id>` and
      ///  can be used to track preparation of the database. The
      ///  [metadata][google.longrunning.Operation.metadata] field type is
      ///  [CreateDatabaseMetadata][google.spanner.admin.database.v1.CreateDatabaseMetadata]. The
      ///  [response][google.longrunning.Operation.response] field type is
      ///  [Database][google.spanner.admin.database.v1.Database], if successful.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateDatabase(global::Google.Cloud.Spanner.Admin.Database.V1.CreateDatabaseRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Gets the state of a Cloud Spanner database.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.Admin.Database.V1.Database> GetDatabase(global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Updates the schema of a Cloud Spanner database by
      ///  creating/altering/dropping tables, columns, indexes, etc. The returned
      ///  [long-running operation][google.longrunning.Operation] will have a name of
      ///  the format `&lt;database_name>/operations/&lt;operation_id>` and can be used to
      ///  track execution of the schema change(s). The
      ///  [metadata][google.longrunning.Operation.metadata] field type is
      ///  [UpdateDatabaseDdlMetadata][google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata].  The operation has no response.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateDatabaseDdl(global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseDdlRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Drops (aka deletes) a Cloud Spanner database.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DropDatabase(global::Google.Cloud.Spanner.Admin.Database.V1.DropDatabaseRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Returns the schema of a Cloud Spanner database as a list of formatted
      ///  DDL statements. This method does not show pending schema updates, those may
      ///  be queried using the [Operations][google.longrunning.Operations] API.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlResponse> GetDatabaseDdl(global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Sets the access control policy on a database resource. Replaces any
      ///  existing policy.
      ///
      ///  Authorization requires `spanner.databases.setIamPolicy` permission on
      ///  [resource][google.iam.v1.SetIamPolicyRequest.resource].
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Gets the access control policy for a database resource. Returns an empty
      ///  policy if a database exists but does not have a policy set.
      ///
      ///  Authorization requires `spanner.databases.getIamPolicy` permission on
      ///  [resource][google.iam.v1.GetIamPolicyRequest.resource].
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Returns permissions that the caller has on the specified database resource.
      ///
      ///  Attempting this RPC on a non-existent Cloud Spanner database will result in
      ///  a NOT_FOUND error if the user has `spanner.databases.list` permission on
      ///  the containing Cloud Spanner instance. Otherwise returns an empty set of
      ///  permissions.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DatabaseAdmin</summary>
    public class DatabaseAdminClient : ClientBase<DatabaseAdminClient>
    {
      /// <summary>Creates a new client for DatabaseAdmin</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DatabaseAdminClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DatabaseAdmin that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DatabaseAdminClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DatabaseAdminClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DatabaseAdminClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Lists Cloud Spanner databases.
      /// </summary>
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesResponse ListDatabases(global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListDatabases(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists Cloud Spanner databases.
      /// </summary>
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesResponse ListDatabases(global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDatabases, null, options, request);
      }
      /// <summary>
      ///  Lists Cloud Spanner databases.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesResponse> ListDatabasesAsync(global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListDatabasesAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists Cloud Spanner databases.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesResponse> ListDatabasesAsync(global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDatabases, null, options, request);
      }
      /// <summary>
      ///  Creates a new Cloud Spanner database and starts to prepare it for serving.
      ///  The returned [long-running operation][google.longrunning.Operation] will
      ///  have a name of the format `&lt;database_name>/operations/&lt;operation_id>` and
      ///  can be used to track preparation of the database. The
      ///  [metadata][google.longrunning.Operation.metadata] field type is
      ///  [CreateDatabaseMetadata][google.spanner.admin.database.v1.CreateDatabaseMetadata]. The
      ///  [response][google.longrunning.Operation.response] field type is
      ///  [Database][google.spanner.admin.database.v1.Database], if successful.
      /// </summary>
      public virtual global::Google.LongRunning.Operation CreateDatabase(global::Google.Cloud.Spanner.Admin.Database.V1.CreateDatabaseRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateDatabase(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a new Cloud Spanner database and starts to prepare it for serving.
      ///  The returned [long-running operation][google.longrunning.Operation] will
      ///  have a name of the format `&lt;database_name>/operations/&lt;operation_id>` and
      ///  can be used to track preparation of the database. The
      ///  [metadata][google.longrunning.Operation.metadata] field type is
      ///  [CreateDatabaseMetadata][google.spanner.admin.database.v1.CreateDatabaseMetadata]. The
      ///  [response][google.longrunning.Operation.response] field type is
      ///  [Database][google.spanner.admin.database.v1.Database], if successful.
      /// </summary>
      public virtual global::Google.LongRunning.Operation CreateDatabase(global::Google.Cloud.Spanner.Admin.Database.V1.CreateDatabaseRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDatabase, null, options, request);
      }
      /// <summary>
      ///  Creates a new Cloud Spanner database and starts to prepare it for serving.
      ///  The returned [long-running operation][google.longrunning.Operation] will
      ///  have a name of the format `&lt;database_name>/operations/&lt;operation_id>` and
      ///  can be used to track preparation of the database. The
      ///  [metadata][google.longrunning.Operation.metadata] field type is
      ///  [CreateDatabaseMetadata][google.spanner.admin.database.v1.CreateDatabaseMetadata]. The
      ///  [response][google.longrunning.Operation.response] field type is
      ///  [Database][google.spanner.admin.database.v1.Database], if successful.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> CreateDatabaseAsync(global::Google.Cloud.Spanner.Admin.Database.V1.CreateDatabaseRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateDatabaseAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a new Cloud Spanner database and starts to prepare it for serving.
      ///  The returned [long-running operation][google.longrunning.Operation] will
      ///  have a name of the format `&lt;database_name>/operations/&lt;operation_id>` and
      ///  can be used to track preparation of the database. The
      ///  [metadata][google.longrunning.Operation.metadata] field type is
      ///  [CreateDatabaseMetadata][google.spanner.admin.database.v1.CreateDatabaseMetadata]. The
      ///  [response][google.longrunning.Operation.response] field type is
      ///  [Database][google.spanner.admin.database.v1.Database], if successful.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> CreateDatabaseAsync(global::Google.Cloud.Spanner.Admin.Database.V1.CreateDatabaseRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDatabase, null, options, request);
      }
      /// <summary>
      ///  Gets the state of a Cloud Spanner database.
      /// </summary>
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.Database GetDatabase(global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDatabase(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the state of a Cloud Spanner database.
      /// </summary>
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.Database GetDatabase(global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDatabase, null, options, request);
      }
      /// <summary>
      ///  Gets the state of a Cloud Spanner database.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.Database> GetDatabaseAsync(global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDatabaseAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the state of a Cloud Spanner database.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.Database> GetDatabaseAsync(global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDatabase, null, options, request);
      }
      /// <summary>
      ///  Updates the schema of a Cloud Spanner database by
      ///  creating/altering/dropping tables, columns, indexes, etc. The returned
      ///  [long-running operation][google.longrunning.Operation] will have a name of
      ///  the format `&lt;database_name>/operations/&lt;operation_id>` and can be used to
      ///  track execution of the schema change(s). The
      ///  [metadata][google.longrunning.Operation.metadata] field type is
      ///  [UpdateDatabaseDdlMetadata][google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata].  The operation has no response.
      /// </summary>
      public virtual global::Google.LongRunning.Operation UpdateDatabaseDdl(global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseDdlRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateDatabaseDdl(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Updates the schema of a Cloud Spanner database by
      ///  creating/altering/dropping tables, columns, indexes, etc. The returned
      ///  [long-running operation][google.longrunning.Operation] will have a name of
      ///  the format `&lt;database_name>/operations/&lt;operation_id>` and can be used to
      ///  track execution of the schema change(s). The
      ///  [metadata][google.longrunning.Operation.metadata] field type is
      ///  [UpdateDatabaseDdlMetadata][google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata].  The operation has no response.
      /// </summary>
      public virtual global::Google.LongRunning.Operation UpdateDatabaseDdl(global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseDdlRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateDatabaseDdl, null, options, request);
      }
      /// <summary>
      ///  Updates the schema of a Cloud Spanner database by
      ///  creating/altering/dropping tables, columns, indexes, etc. The returned
      ///  [long-running operation][google.longrunning.Operation] will have a name of
      ///  the format `&lt;database_name>/operations/&lt;operation_id>` and can be used to
      ///  track execution of the schema change(s). The
      ///  [metadata][google.longrunning.Operation.metadata] field type is
      ///  [UpdateDatabaseDdlMetadata][google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata].  The operation has no response.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateDatabaseDdlAsync(global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseDdlRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateDatabaseDdlAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Updates the schema of a Cloud Spanner database by
      ///  creating/altering/dropping tables, columns, indexes, etc. The returned
      ///  [long-running operation][google.longrunning.Operation] will have a name of
      ///  the format `&lt;database_name>/operations/&lt;operation_id>` and can be used to
      ///  track execution of the schema change(s). The
      ///  [metadata][google.longrunning.Operation.metadata] field type is
      ///  [UpdateDatabaseDdlMetadata][google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata].  The operation has no response.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateDatabaseDdlAsync(global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseDdlRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateDatabaseDdl, null, options, request);
      }
      /// <summary>
      ///  Drops (aka deletes) a Cloud Spanner database.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DropDatabase(global::Google.Cloud.Spanner.Admin.Database.V1.DropDatabaseRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DropDatabase(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Drops (aka deletes) a Cloud Spanner database.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DropDatabase(global::Google.Cloud.Spanner.Admin.Database.V1.DropDatabaseRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DropDatabase, null, options, request);
      }
      /// <summary>
      ///  Drops (aka deletes) a Cloud Spanner database.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DropDatabaseAsync(global::Google.Cloud.Spanner.Admin.Database.V1.DropDatabaseRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DropDatabaseAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Drops (aka deletes) a Cloud Spanner database.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DropDatabaseAsync(global::Google.Cloud.Spanner.Admin.Database.V1.DropDatabaseRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DropDatabase, null, options, request);
      }
      /// <summary>
      ///  Returns the schema of a Cloud Spanner database as a list of formatted
      ///  DDL statements. This method does not show pending schema updates, those may
      ///  be queried using the [Operations][google.longrunning.Operations] API.
      /// </summary>
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlResponse GetDatabaseDdl(global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDatabaseDdl(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Returns the schema of a Cloud Spanner database as a list of formatted
      ///  DDL statements. This method does not show pending schema updates, those may
      ///  be queried using the [Operations][google.longrunning.Operations] API.
      /// </summary>
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlResponse GetDatabaseDdl(global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDatabaseDdl, null, options, request);
      }
      /// <summary>
      ///  Returns the schema of a Cloud Spanner database as a list of formatted
      ///  DDL statements. This method does not show pending schema updates, those may
      ///  be queried using the [Operations][google.longrunning.Operations] API.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlResponse> GetDatabaseDdlAsync(global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDatabaseDdlAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Returns the schema of a Cloud Spanner database as a list of formatted
      ///  DDL statements. This method does not show pending schema updates, those may
      ///  be queried using the [Operations][google.longrunning.Operations] API.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlResponse> GetDatabaseDdlAsync(global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDatabaseDdl, null, options, request);
      }
      /// <summary>
      ///  Sets the access control policy on a database resource. Replaces any
      ///  existing policy.
      ///
      ///  Authorization requires `spanner.databases.setIamPolicy` permission on
      ///  [resource][google.iam.v1.SetIamPolicyRequest.resource].
      /// </summary>
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetIamPolicy(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Sets the access control policy on a database resource. Replaces any
      ///  existing policy.
      ///
      ///  Authorization requires `spanner.databases.setIamPolicy` permission on
      ///  [resource][google.iam.v1.SetIamPolicyRequest.resource].
      /// </summary>
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      ///  Sets the access control policy on a database resource. Replaces any
      ///  existing policy.
      ///
      ///  Authorization requires `spanner.databases.setIamPolicy` permission on
      ///  [resource][google.iam.v1.SetIamPolicyRequest.resource].
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetIamPolicyAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Sets the access control policy on a database resource. Replaces any
      ///  existing policy.
      ///
      ///  Authorization requires `spanner.databases.setIamPolicy` permission on
      ///  [resource][google.iam.v1.SetIamPolicyRequest.resource].
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      ///  Gets the access control policy for a database resource. Returns an empty
      ///  policy if a database exists but does not have a policy set.
      ///
      ///  Authorization requires `spanner.databases.getIamPolicy` permission on
      ///  [resource][google.iam.v1.GetIamPolicyRequest.resource].
      /// </summary>
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetIamPolicy(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the access control policy for a database resource. Returns an empty
      ///  policy if a database exists but does not have a policy set.
      ///
      ///  Authorization requires `spanner.databases.getIamPolicy` permission on
      ///  [resource][google.iam.v1.GetIamPolicyRequest.resource].
      /// </summary>
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      ///  Gets the access control policy for a database resource. Returns an empty
      ///  policy if a database exists but does not have a policy set.
      ///
      ///  Authorization requires `spanner.databases.getIamPolicy` permission on
      ///  [resource][google.iam.v1.GetIamPolicyRequest.resource].
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetIamPolicyAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the access control policy for a database resource. Returns an empty
      ///  policy if a database exists but does not have a policy set.
      ///
      ///  Authorization requires `spanner.databases.getIamPolicy` permission on
      ///  [resource][google.iam.v1.GetIamPolicyRequest.resource].
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      ///  Returns permissions that the caller has on the specified database resource.
      ///
      ///  Attempting this RPC on a non-existent Cloud Spanner database will result in
      ///  a NOT_FOUND error if the user has `spanner.databases.list` permission on
      ///  the containing Cloud Spanner instance. Otherwise returns an empty set of
      ///  permissions.
      /// </summary>
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return TestIamPermissions(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Returns permissions that the caller has on the specified database resource.
      ///
      ///  Attempting this RPC on a non-existent Cloud Spanner database will result in
      ///  a NOT_FOUND error if the user has `spanner.databases.list` permission on
      ///  the containing Cloud Spanner instance. Otherwise returns an empty set of
      ///  permissions.
      /// </summary>
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      ///  Returns permissions that the caller has on the specified database resource.
      ///
      ///  Attempting this RPC on a non-existent Cloud Spanner database will result in
      ///  a NOT_FOUND error if the user has `spanner.databases.list` permission on
      ///  the containing Cloud Spanner instance. Otherwise returns an empty set of
      ///  permissions.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return TestIamPermissionsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Returns permissions that the caller has on the specified database resource.
      ///
      ///  Attempting this RPC on a non-existent Cloud Spanner database will result in
      ///  a NOT_FOUND error if the user has `spanner.databases.list` permission on
      ///  the containing Cloud Spanner instance. Otherwise returns an empty set of
      ///  permissions.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      protected override DatabaseAdminClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DatabaseAdminClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(DatabaseAdminBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListDatabases, serviceImpl.ListDatabases)
          .AddMethod(__Method_CreateDatabase, serviceImpl.CreateDatabase)
          .AddMethod(__Method_GetDatabase, serviceImpl.GetDatabase)
          .AddMethod(__Method_UpdateDatabaseDdl, serviceImpl.UpdateDatabaseDdl)
          .AddMethod(__Method_DropDatabase, serviceImpl.DropDatabase)
          .AddMethod(__Method_GetDatabaseDdl, serviceImpl.GetDatabaseDdl)
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions).Build();
    }

  }
}
#endregion
