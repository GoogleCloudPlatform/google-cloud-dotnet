// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/privacy/dlp/v2beta2/dlp.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Dlp.V2Beta2 {

  /// <summary>Holder for reflection information generated from google/privacy/dlp/v2beta2/dlp.proto</summary>
  public static partial class DlpReflection {

    #region Descriptor
    /// <summary>File descriptor for google/privacy/dlp/v2beta2/dlp.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DlpReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRnb29nbGUvcHJpdmFjeS9kbHAvdjJiZXRhMi9kbHAucHJvdG8SGmdvb2ds",
            "ZS5wcml2YWN5LmRscC52MmJldGEyGhxnb29nbGUvYXBpL2Fubm90YXRpb25z",
            "LnByb3RvGihnb29nbGUvcHJpdmFjeS9kbHAvdjJiZXRhMi9zdG9yYWdlLnBy",
            "b3RvGh5nb29nbGUvcHJvdG9idWYvZHVyYXRpb24ucHJvdG8aG2dvb2dsZS9w",
            "cm90b2J1Zi9lbXB0eS5wcm90bxogZ29vZ2xlL3Byb3RvYnVmL2ZpZWxkX21h",
            "c2sucHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8aF2dv",
            "b2dsZS9ycGMvc3RhdHVzLnByb3RvGhZnb29nbGUvdHlwZS9kYXRlLnByb3Rv",
            "Ghtnb29nbGUvdHlwZS9kYXlvZndlZWsucHJvdG8aG2dvb2dsZS90eXBlL3Rp",
            "bWVvZmRheS5wcm90byLqBAoNSW5zcGVjdENvbmZpZxI4CgppbmZvX3R5cGVz",
            "GAEgAygLMiQuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuSW5mb1R5cGUS",
            "PgoObWluX2xpa2VsaWhvb2QYAiABKA4yJi5nb29nbGUucHJpdmFjeS5kbHAu",
            "djJiZXRhMi5MaWtlbGlob29kEkcKBmxpbWl0cxgDIAEoCzI3Lmdvb2dsZS5w",
            "cml2YWN5LmRscC52MmJldGEyLkluc3BlY3RDb25maWcuRmluZGluZ0xpbWl0",
            "cxIVCg1pbmNsdWRlX3F1b3RlGAQgASgIEhoKEmV4Y2x1ZGVfaW5mb190eXBl",
            "cxgFIAEoCBJFChFjdXN0b21faW5mb190eXBlcxgGIAMoCzIqLmdvb2dsZS5w",
            "cml2YWN5LmRscC52MmJldGEyLkN1c3RvbUluZm9UeXBlGpsCCg1GaW5kaW5n",
            "TGltaXRzEh0KFW1heF9maW5kaW5nc19wZXJfaXRlbRgBIAEoBRIgChhtYXhf",
            "ZmluZGluZ3NfcGVyX3JlcXVlc3QYAiABKAUSaQoabWF4X2ZpbmRpbmdzX3Bl",
            "cl9pbmZvX3R5cGUYAyADKAsyRS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRh",
            "Mi5JbnNwZWN0Q29uZmlnLkZpbmRpbmdMaW1pdHMuSW5mb1R5cGVMaW1pdBpe",
            "Cg1JbmZvVHlwZUxpbWl0EjcKCWluZm9fdHlwZRgBIAEoCzIkLmdvb2dsZS5w",
            "cml2YWN5LmRscC52MmJldGEyLkluZm9UeXBlEhQKDG1heF9maW5kaW5ncxgC",
            "IAEoBSJ9CgtDb250ZW50SXRlbRIMCgR0eXBlGAEgASgJEg4KBGRhdGEYAiAB",
            "KAxIABIPCgV2YWx1ZRgDIAEoCUgAEjIKBXRhYmxlGAQgASgLMiEuZ29vZ2xl",
            "LnByaXZhY3kuZGxwLnYyYmV0YTIuVGFibGVIAEILCglkYXRhX2l0ZW0irAEK",
            "BVRhYmxlEjQKB2hlYWRlcnMYASADKAsyIy5nb29nbGUucHJpdmFjeS5kbHAu",
            "djJiZXRhMi5GaWVsZElkEjMKBHJvd3MYAiADKAsyJS5nb29nbGUucHJpdmFj",
            "eS5kbHAudjJiZXRhMi5UYWJsZS5Sb3caOAoDUm93EjEKBnZhbHVlcxgBIAMo",
            "CzIhLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLlZhbHVlImIKDUluc3Bl",
            "Y3RSZXN1bHQSNQoIZmluZGluZ3MYASADKAsyIy5nb29nbGUucHJpdmFjeS5k",
            "bHAudjJiZXRhMi5GaW5kaW5nEhoKEmZpbmRpbmdzX3RydW5jYXRlZBgCIAEo",
            "CCL2AQoHRmluZGluZxINCgVxdW90ZRgBIAEoCRI3CglpbmZvX3R5cGUYAiAB",
            "KAsyJC5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5JbmZvVHlwZRI6Cgps",
            "aWtlbGlob29kGAMgASgOMiYuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIu",
            "TGlrZWxpaG9vZBI2Cghsb2NhdGlvbhgEIAEoCzIkLmdvb2dsZS5wcml2YWN5",
            "LmRscC52MmJldGEyLkxvY2F0aW9uEi8KC2NyZWF0ZV90aW1lGAYgASgLMhou",
            "Z29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCLyAgoITG9jYXRpb24SNQoKYnl0",
            "ZV9yYW5nZRgBIAEoCzIhLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLlJh",
            "bmdlEjoKD2NvZGVwb2ludF9yYW5nZRgCIAEoCzIhLmdvb2dsZS5wcml2YWN5",
            "LmRscC52MmJldGEyLlJhbmdlEj4KC2ltYWdlX2JveGVzGAMgAygLMikuZ29v",
            "Z2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuSW1hZ2VMb2NhdGlvbhI5CgpyZWNv",
            "cmRfa2V5GAQgASgLMiUuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuUmVj",
            "b3JkS2V5EjUKCGZpZWxkX2lkGAUgASgLMiMuZ29vZ2xlLnByaXZhY3kuZGxw",
            "LnYyYmV0YTIuRmllbGRJZBJBCg50YWJsZV9sb2NhdGlvbhgGIAEoCzIpLmdv",
            "b2dsZS5wcml2YWN5LmRscC52MmJldGEyLlRhYmxlTG9jYXRpb24iIgoNVGFi",
            "bGVMb2NhdGlvbhIRCglyb3dfaW5kZXgYASABKAMiIwoFUmFuZ2USDQoFc3Rh",
            "cnQYASABKAMSCwoDZW5kGAIgASgDIkkKDUltYWdlTG9jYXRpb24SCwoDdG9w",
            "GAEgASgFEgwKBGxlZnQYAiABKAUSDQoFd2lkdGgYAyABKAUSDgoGaGVpZ2h0",
            "GAQgASgFIqoDChJSZWRhY3RJbWFnZVJlcXVlc3QSDgoGcGFyZW50GAEgASgJ",
            "EkEKDmluc3BlY3RfY29uZmlnGAIgASgLMikuZ29vZ2xlLnByaXZhY3kuZGxw",
            "LnYyYmV0YTIuSW5zcGVjdENvbmZpZxISCgppbWFnZV90eXBlGAMgASgJEhIK",
            "CmltYWdlX2RhdGEYBCABKAwSZAoXaW1hZ2VfcmVkYWN0aW9uX2NvbmZpZ3MY",
            "BSADKAsyQy5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5SZWRhY3RJbWFn",
            "ZVJlcXVlc3QuSW1hZ2VSZWRhY3Rpb25Db25maWcasgEKFEltYWdlUmVkYWN0",
            "aW9uQ29uZmlnEjkKCWluZm9fdHlwZRgBIAEoCzIkLmdvb2dsZS5wcml2YWN5",
            "LmRscC52MmJldGEyLkluZm9UeXBlSAASGQoPcmVkYWN0X2FsbF90ZXh0GAIg",
            "ASgISAASOgoPcmVkYWN0aW9uX2NvbG9yGAMgASgLMiEuZ29vZ2xlLnByaXZh",
            "Y3kuZGxwLnYyYmV0YTIuQ29sb3JCCAoGdGFyZ2V0IjEKBUNvbG9yEgsKA3Jl",
            "ZBgBIAEoAhINCgVncmVlbhgCIAEoAhIMCgRibHVlGAMgASgCIkUKE1JlZGFj",
            "dEltYWdlUmVzcG9uc2USFgoOcmVkYWN0ZWRfaW1hZ2UYASABKAwSFgoOZXh0",
            "cmFjdGVkX3RleHQYAiABKAkirgIKGERlaWRlbnRpZnlDb250ZW50UmVxdWVz",
            "dBIOCgZwYXJlbnQYASABKAkSRwoRZGVpZGVudGlmeV9jb25maWcYAiABKAsy",
            "LC5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5EZWlkZW50aWZ5Q29uZmln",
            "EkEKDmluc3BlY3RfY29uZmlnGAMgASgLMikuZ29vZ2xlLnByaXZhY3kuZGxw",
            "LnYyYmV0YTIuSW5zcGVjdENvbmZpZxI1CgRpdGVtGAQgASgLMicuZ29vZ2xl",
            "LnByaXZhY3kuZGxwLnYyYmV0YTIuQ29udGVudEl0ZW0SHQoVaW5zcGVjdF90",
            "ZW1wbGF0ZV9uYW1lGAUgASgJEiAKGGRlaWRlbnRpZnlfdGVtcGxhdGVfbmFt",
            "ZRgGIAEoCSKYAQoZRGVpZGVudGlmeUNvbnRlbnRSZXNwb25zZRI1CgRpdGVt",
            "GAEgASgLMicuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuQ29udGVudEl0",
            "ZW0SRAoIb3ZlcnZpZXcYAiABKAsyMi5nb29nbGUucHJpdmFjeS5kbHAudjJi",
            "ZXRhMi5UcmFuc2Zvcm1hdGlvbk92ZXJ2aWV3Iq4CChhSZWlkZW50aWZ5Q29u",
            "dGVudFJlcXVlc3QSDgoGcGFyZW50GAEgASgJEkcKEXJlaWRlbnRpZnlfY29u",
            "ZmlnGAIgASgLMiwuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuRGVpZGVu",
            "dGlmeUNvbmZpZxJBCg5pbnNwZWN0X2NvbmZpZxgDIAEoCzIpLmdvb2dsZS5w",
            "cml2YWN5LmRscC52MmJldGEyLkluc3BlY3RDb25maWcSNQoEaXRlbRgEIAEo",
            "CzInLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLkNvbnRlbnRJdGVtEh0K",
            "FWluc3BlY3RfdGVtcGxhdGVfbmFtZRgFIAEoCRIgChhyZWlkZW50aWZ5X3Rl",
            "bXBsYXRlX25hbWUYBiABKAkimAEKGVJlaWRlbnRpZnlDb250ZW50UmVzcG9u",
            "c2USNQoEaXRlbRgBIAEoCzInLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEy",
            "LkNvbnRlbnRJdGVtEkQKCG92ZXJ2aWV3GAIgASgLMjIuZ29vZ2xlLnByaXZh",
            "Y3kuZGxwLnYyYmV0YTIuVHJhbnNmb3JtYXRpb25PdmVydmlldyLAAQoVSW5z",
            "cGVjdENvbnRlbnRSZXF1ZXN0Eg4KBnBhcmVudBgBIAEoCRJBCg5pbnNwZWN0",
            "X2NvbmZpZxgCIAEoCzIpLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLklu",
            "c3BlY3RDb25maWcSNQoEaXRlbRgDIAEoCzInLmdvb2dsZS5wcml2YWN5LmRs",
            "cC52MmJldGEyLkNvbnRlbnRJdGVtEh0KFWluc3BlY3RfdGVtcGxhdGVfbmFt",
            "ZRgEIAEoCSJTChZJbnNwZWN0Q29udGVudFJlc3BvbnNlEjkKBnJlc3VsdBgB",
            "IAEoCzIpLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLkluc3BlY3RSZXN1",
            "bHQifAoYSW5zcGVjdERhdGFTb3VyY2VSZXF1ZXN0Eg4KBnBhcmVudBgBIAEo",
            "CRJACgpqb2JfY29uZmlnGAIgASgLMiwuZ29vZ2xlLnByaXZhY3kuZGxwLnYy",
            "YmV0YTIuSW5zcGVjdEpvYkNvbmZpZxIOCgZqb2JfaWQYAyABKAkiWQoTT3V0",
            "cHV0U3RvcmFnZUNvbmZpZxI6CgV0YWJsZRgBIAEoCzIpLmdvb2dsZS5wcml2",
            "YWN5LmRscC52MmJldGEyLkJpZ1F1ZXJ5VGFibGVIAEIGCgR0eXBlIlwKEklu",
            "Zm9UeXBlU3RhdGlzdGljcxI3CglpbmZvX3R5cGUYASABKAsyJC5nb29nbGUu",
            "cHJpdmFjeS5kbHAudjJiZXRhMi5JbmZvVHlwZRINCgVjb3VudBgCIAEoAyL8",
            "AwoYSW5zcGVjdERhdGFTb3VyY2VEZXRhaWxzEmAKEXJlcXVlc3RlZF9vcHRp",
            "b25zGAIgASgLMkUuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuSW5zcGVj",
            "dERhdGFTb3VyY2VEZXRhaWxzLlJlcXVlc3RlZE9wdGlvbnMSSwoGcmVzdWx0",
            "GAMgASgLMjsuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuSW5zcGVjdERh",
            "dGFTb3VyY2VEZXRhaWxzLlJlc3VsdBqkAQoQUmVxdWVzdGVkT3B0aW9ucxJO",
            "ChlzbmFwc2hvdF9pbnNwZWN0X3RlbXBsYXRlGAEgASgLMisuZ29vZ2xlLnBy",
            "aXZhY3kuZGxwLnYyYmV0YTIuSW5zcGVjdFRlbXBsYXRlEkAKCmpvYl9jb25m",
            "aWcYAyABKAsyLC5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5JbnNwZWN0",
            "Sm9iQ29uZmlnGokBCgZSZXN1bHQSFwoPcHJvY2Vzc2VkX2J5dGVzGAEgASgD",
            "Eh0KFXRvdGFsX2VzdGltYXRlZF9ieXRlcxgCIAEoAxJHCg9pbmZvX3R5cGVf",
            "c3RhdHMYAyADKAsyLi5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5JbmZv",
            "VHlwZVN0YXRpc3RpY3MigAEKE0luZm9UeXBlRGVzY3JpcHRpb24SDAoEbmFt",
            "ZRgBIAEoCRIUCgxkaXNwbGF5X25hbWUYAiABKAkSRQoMc3VwcG9ydGVkX2J5",
            "GAMgAygOMi8uZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuSW5mb1R5cGVT",
            "dXBwb3J0ZWRCeSI9ChRMaXN0SW5mb1R5cGVzUmVxdWVzdBIVCg1sYW5ndWFn",
            "ZV9jb2RlGAEgASgJEg4KBmZpbHRlchgCIAEoCSJcChVMaXN0SW5mb1R5cGVz",
            "UmVzcG9uc2USQwoKaW5mb190eXBlcxgBIAMoCzIvLmdvb2dsZS5wcml2YWN5",
            "LmRscC52MmJldGEyLkluZm9UeXBlRGVzY3JpcHRpb24ihQEKHEFuYWx5emVE",
            "YXRhU291cmNlUmlza1JlcXVlc3QSDgoGcGFyZW50GAEgASgJEkUKCmpvYl9j",
            "b25maWcYAiABKAsyMS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5SaXNr",
            "QW5hbHlzaXNKb2JDb25maWcSDgoGam9iX2lkGAMgASgJItABChVSaXNrQW5h",
            "bHlzaXNKb2JDb25maWcSQQoOcHJpdmFjeV9tZXRyaWMYASABKAsyKS5nb29n",
            "bGUucHJpdmFjeS5kbHAudjJiZXRhMi5Qcml2YWN5TWV0cmljEj8KDHNvdXJj",
            "ZV90YWJsZRgCIAEoCzIpLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLkJp",
            "Z1F1ZXJ5VGFibGUSMwoHYWN0aW9ucxgDIAMoCzIiLmdvb2dsZS5wcml2YWN5",
            "LmRscC52MmJldGEyLkFjdGlvbiK4DQoNUHJpdmFjeU1ldHJpYxJgChZudW1l",
            "cmljYWxfc3RhdHNfY29uZmlnGAEgASgLMj4uZ29vZ2xlLnByaXZhY3kuZGxw",
            "LnYyYmV0YTIuUHJpdmFjeU1ldHJpYy5OdW1lcmljYWxTdGF0c0NvbmZpZ0gA",
            "EmQKGGNhdGVnb3JpY2FsX3N0YXRzX2NvbmZpZxgCIAEoCzJALmdvb2dsZS5w",
            "cml2YWN5LmRscC52MmJldGEyLlByaXZhY3lNZXRyaWMuQ2F0ZWdvcmljYWxT",
            "dGF0c0NvbmZpZ0gAElgKEmtfYW5vbnltaXR5X2NvbmZpZxgDIAEoCzI6Lmdv",
            "b2dsZS5wcml2YWN5LmRscC52MmJldGEyLlByaXZhY3lNZXRyaWMuS0Fub255",
            "bWl0eUNvbmZpZ0gAElgKEmxfZGl2ZXJzaXR5X2NvbmZpZxgEIAEoCzI6Lmdv",
            "b2dsZS5wcml2YWN5LmRscC52MmJldGEyLlByaXZhY3lNZXRyaWMuTERpdmVy",
            "c2l0eUNvbmZpZ0gAEmEKF2tfbWFwX2VzdGltYXRpb25fY29uZmlnGAUgASgL",
            "Mj4uZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuUHJpdmFjeU1ldHJpYy5L",
            "TWFwRXN0aW1hdGlvbkNvbmZpZ0gAGkoKFE51bWVyaWNhbFN0YXRzQ29uZmln",
            "EjIKBWZpZWxkGAEgASgLMiMuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIu",
            "RmllbGRJZBpMChZDYXRlZ29yaWNhbFN0YXRzQ29uZmlnEjIKBWZpZWxkGAEg",
            "ASgLMiMuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuRmllbGRJZBqDAQoQ",
            "S0Fub255bWl0eUNvbmZpZxI2CglxdWFzaV9pZHMYASADKAsyIy5nb29nbGUu",
            "cHJpdmFjeS5kbHAudjJiZXRhMi5GaWVsZElkEjcKCWVudGl0eV9pZBgCIAEo",
            "CzIkLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLkVudGl0eUlkGowBChBM",
            "RGl2ZXJzaXR5Q29uZmlnEjYKCXF1YXNpX2lkcxgBIAMoCzIjLmdvb2dsZS5w",
            "cml2YWN5LmRscC52MmJldGEyLkZpZWxkSWQSQAoTc2Vuc2l0aXZlX2F0dHJp",
            "YnV0ZRgCIAEoCzIjLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLkZpZWxk",
            "SWQakAYKFEtNYXBFc3RpbWF0aW9uQ29uZmlnEl0KCXF1YXNpX2lkcxgBIAMo",
            "CzJKLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLlByaXZhY3lNZXRyaWMu",
            "S01hcEVzdGltYXRpb25Db25maWcuVGFnZ2VkRmllbGQSEwoLcmVnaW9uX2Nv",
            "ZGUYAiABKAkSZwoQYXV4aWxpYXJ5X3RhYmxlcxgDIAMoCzJNLmdvb2dsZS5w",
            "cml2YWN5LmRscC52MmJldGEyLlByaXZhY3lNZXRyaWMuS01hcEVzdGltYXRp",
            "b25Db25maWcuQXV4aWxpYXJ5VGFibGUaxQEKC1RhZ2dlZEZpZWxkEjIKBWZp",
            "ZWxkGAEgASgLMiMuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuRmllbGRJ",
            "ZBI5CglpbmZvX3R5cGUYAiABKAsyJC5nb29nbGUucHJpdmFjeS5kbHAudjJi",
            "ZXRhMi5JbmZvVHlwZUgAEhQKCmN1c3RvbV90YWcYAyABKAlIABIqCghpbmZl",
            "cnJlZBgEIAEoCzIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eUgAQgUKA3RhZxrS",
            "AgoOQXV4aWxpYXJ5VGFibGUSOAoFdGFibGUYAyABKAsyKS5nb29nbGUucHJp",
            "dmFjeS5kbHAudjJiZXRhMi5CaWdRdWVyeVRhYmxlEm0KCXF1YXNpX2lkcxgB",
            "IAMoCzJaLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLlByaXZhY3lNZXRy",
            "aWMuS01hcEVzdGltYXRpb25Db25maWcuQXV4aWxpYXJ5VGFibGUuUXVhc2lJ",
            "ZEZpZWxkEj8KEnJlbGF0aXZlX2ZyZXF1ZW5jeRgCIAEoCzIjLmdvb2dsZS5w",
            "cml2YWN5LmRscC52MmJldGEyLkZpZWxkSWQaVgoMUXVhc2lJZEZpZWxkEjIK",
            "BWZpZWxkGAEgASgLMiMuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuRmll",
            "bGRJZBISCgpjdXN0b21fdGFnGAIgASgJQgYKBHR5cGUiixgKHEFuYWx5emVE",
            "YXRhU291cmNlUmlza0RldGFpbHMSSwoYcmVxdWVzdGVkX3ByaXZhY3lfbWV0",
            "cmljGAEgASgLMikuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuUHJpdmFj",
            "eU1ldHJpYxJJChZyZXF1ZXN0ZWRfc291cmNlX3RhYmxlGAIgASgLMikuZ29v",
            "Z2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuQmlnUXVlcnlUYWJsZRJvChZudW1l",
            "cmljYWxfc3RhdHNfcmVzdWx0GAMgASgLMk0uZ29vZ2xlLnByaXZhY3kuZGxw",
            "LnYyYmV0YTIuQW5hbHl6ZURhdGFTb3VyY2VSaXNrRGV0YWlscy5OdW1lcmlj",
            "YWxTdGF0c1Jlc3VsdEgAEnMKGGNhdGVnb3JpY2FsX3N0YXRzX3Jlc3VsdBgE",
            "IAEoCzJPLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLkFuYWx5emVEYXRh",
            "U291cmNlUmlza0RldGFpbHMuQ2F0ZWdvcmljYWxTdGF0c1Jlc3VsdEgAEmcK",
            "EmtfYW5vbnltaXR5X3Jlc3VsdBgFIAEoCzJJLmdvb2dsZS5wcml2YWN5LmRs",
            "cC52MmJldGEyLkFuYWx5emVEYXRhU291cmNlUmlza0RldGFpbHMuS0Fub255",
            "bWl0eVJlc3VsdEgAEmcKEmxfZGl2ZXJzaXR5X3Jlc3VsdBgGIAEoCzJJLmdv",
            "b2dsZS5wcml2YWN5LmRscC52MmJldGEyLkFuYWx5emVEYXRhU291cmNlUmlz",
            "a0RldGFpbHMuTERpdmVyc2l0eVJlc3VsdEgAEnAKF2tfbWFwX2VzdGltYXRp",
            "b25fcmVzdWx0GAcgASgLMk0uZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIu",
            "QW5hbHl6ZURhdGFTb3VyY2VSaXNrRGV0YWlscy5LTWFwRXN0aW1hdGlvblJl",
            "c3VsdEgAGr4BChROdW1lcmljYWxTdGF0c1Jlc3VsdBI0CgltaW5fdmFsdWUY",
            "ASABKAsyIS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5WYWx1ZRI0Cglt",
            "YXhfdmFsdWUYAiABKAsyIS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5W",
            "YWx1ZRI6Cg9xdWFudGlsZV92YWx1ZXMYBCADKAsyIS5nb29nbGUucHJpdmFj",
            "eS5kbHAudjJiZXRhMi5WYWx1ZRr7AgoWQ2F0ZWdvcmljYWxTdGF0c1Jlc3Vs",
            "dBKaAQohdmFsdWVfZnJlcXVlbmN5X2hpc3RvZ3JhbV9idWNrZXRzGAUgAygL",
            "Mm8uZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuQW5hbHl6ZURhdGFTb3Vy",
            "Y2VSaXNrRGV0YWlscy5DYXRlZ29yaWNhbFN0YXRzUmVzdWx0LkNhdGVnb3Jp",
            "Y2FsU3RhdHNIaXN0b2dyYW1CdWNrZXQawwEKH0NhdGVnb3JpY2FsU3RhdHNI",
            "aXN0b2dyYW1CdWNrZXQSIwobdmFsdWVfZnJlcXVlbmN5X2xvd2VyX2JvdW5k",
            "GAEgASgDEiMKG3ZhbHVlX2ZyZXF1ZW5jeV91cHBlcl9ib3VuZBgCIAEoAxIT",
            "CgtidWNrZXRfc2l6ZRgDIAEoAxJBCg1idWNrZXRfdmFsdWVzGAQgAygLMiou",
            "Z29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuVmFsdWVGcmVxdWVuY3kaqAQK",
            "EEtBbm9ueW1pdHlSZXN1bHQSkAEKI2VxdWl2YWxlbmNlX2NsYXNzX2hpc3Rv",
            "Z3JhbV9idWNrZXRzGAUgAygLMmMuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0",
            "YTIuQW5hbHl6ZURhdGFTb3VyY2VSaXNrRGV0YWlscy5LQW5vbnltaXR5UmVz",
            "dWx0LktBbm9ueW1pdHlIaXN0b2dyYW1CdWNrZXQaeQoaS0Fub255bWl0eUVx",
            "dWl2YWxlbmNlQ2xhc3MSOwoQcXVhc2lfaWRzX3ZhbHVlcxgBIAMoCzIhLmdv",
            "b2dsZS5wcml2YWN5LmRscC52MmJldGEyLlZhbHVlEh4KFmVxdWl2YWxlbmNl",
            "X2NsYXNzX3NpemUYAiABKAMahQIKGUtBbm9ueW1pdHlIaXN0b2dyYW1CdWNr",
            "ZXQSKgoiZXF1aXZhbGVuY2VfY2xhc3Nfc2l6ZV9sb3dlcl9ib3VuZBgBIAEo",
            "AxIqCiJlcXVpdmFsZW5jZV9jbGFzc19zaXplX3VwcGVyX2JvdW5kGAIgASgD",
            "EhMKC2J1Y2tldF9zaXplGAMgASgDEnsKDWJ1Y2tldF92YWx1ZXMYBCADKAsy",
            "ZC5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5BbmFseXplRGF0YVNvdXJj",
            "ZVJpc2tEZXRhaWxzLktBbm9ueW1pdHlSZXN1bHQuS0Fub255bWl0eUVxdWl2",
            "YWxlbmNlQ2xhc3MaqAUKEExEaXZlcnNpdHlSZXN1bHQSmAEKK3NlbnNpdGl2",
            "ZV92YWx1ZV9mcmVxdWVuY3lfaGlzdG9ncmFtX2J1Y2tldHMYBSADKAsyYy5n",
            "b29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5BbmFseXplRGF0YVNvdXJjZVJp",
            "c2tEZXRhaWxzLkxEaXZlcnNpdHlSZXN1bHQuTERpdmVyc2l0eUhpc3RvZ3Jh",
            "bUJ1Y2tldBrqAQoaTERpdmVyc2l0eUVxdWl2YWxlbmNlQ2xhc3MSOwoQcXVh",
            "c2lfaWRzX3ZhbHVlcxgBIAMoCzIhLmdvb2dsZS5wcml2YWN5LmRscC52MmJl",
            "dGEyLlZhbHVlEh4KFmVxdWl2YWxlbmNlX2NsYXNzX3NpemUYAiABKAMSJQod",
            "bnVtX2Rpc3RpbmN0X3NlbnNpdGl2ZV92YWx1ZXMYAyABKAMSSAoUdG9wX3Nl",
            "bnNpdGl2ZV92YWx1ZXMYBCADKAsyKi5nb29nbGUucHJpdmFjeS5kbHAudjJi",
            "ZXRhMi5WYWx1ZUZyZXF1ZW5jeRqLAgoZTERpdmVyc2l0eUhpc3RvZ3JhbUJ1",
            "Y2tldBItCiVzZW5zaXRpdmVfdmFsdWVfZnJlcXVlbmN5X2xvd2VyX2JvdW5k",
            "GAEgASgDEi0KJXNlbnNpdGl2ZV92YWx1ZV9mcmVxdWVuY3lfdXBwZXJfYm91",
            "bmQYAiABKAMSEwoLYnVja2V0X3NpemUYAyABKAMSewoNYnVja2V0X3ZhbHVl",
            "cxgEIAMoCzJkLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLkFuYWx5emVE",
            "YXRhU291cmNlUmlza0RldGFpbHMuTERpdmVyc2l0eVJlc3VsdC5MRGl2ZXJz",
            "aXR5RXF1aXZhbGVuY2VDbGFzcxqJBAoUS01hcEVzdGltYXRpb25SZXN1bHQS",
            "jwEKGmtfbWFwX2VzdGltYXRpb25faGlzdG9ncmFtGAEgAygLMmsuZ29vZ2xl",
            "LnByaXZhY3kuZGxwLnYyYmV0YTIuQW5hbHl6ZURhdGFTb3VyY2VSaXNrRGV0",
            "YWlscy5LTWFwRXN0aW1hdGlvblJlc3VsdC5LTWFwRXN0aW1hdGlvbkhpc3Rv",
            "Z3JhbUJ1Y2tldBp3ChtLTWFwRXN0aW1hdGlvblF1YXNpSWRWYWx1ZXMSOwoQ",
            "cXVhc2lfaWRzX3ZhbHVlcxgBIAMoCzIhLmdvb2dsZS5wcml2YWN5LmRscC52",
            "MmJldGEyLlZhbHVlEhsKE2VzdGltYXRlZF9hbm9ueW1pdHkYAiABKAMa5QEK",
            "HUtNYXBFc3RpbWF0aW9uSGlzdG9ncmFtQnVja2V0EhUKDW1pbl9hbm9ueW1p",
            "dHkYASABKAMSFQoNbWF4X2Fub255bWl0eRgCIAEoAxITCgtidWNrZXRfc2l6",
            "ZRgFIAEoAxKAAQoNYnVja2V0X3ZhbHVlcxgGIAMoCzJpLmdvb2dsZS5wcml2",
            "YWN5LmRscC52MmJldGEyLkFuYWx5emVEYXRhU291cmNlUmlza0RldGFpbHMu",
            "S01hcEVzdGltYXRpb25SZXN1bHQuS01hcEVzdGltYXRpb25RdWFzaUlkVmFs",
            "dWVzQggKBnJlc3VsdCJRCg5WYWx1ZUZyZXF1ZW5jeRIwCgV2YWx1ZRgBIAEo",
            "CzIhLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLlZhbHVlEg0KBWNvdW50",
            "GAIgASgDIv4BCgVWYWx1ZRIXCg1pbnRlZ2VyX3ZhbHVlGAEgASgDSAASFQoL",
            "ZmxvYXRfdmFsdWUYAiABKAFIABIWCgxzdHJpbmdfdmFsdWUYAyABKAlIABIX",
            "Cg1ib29sZWFuX3ZhbHVlGAQgASgISAASNQoPdGltZXN0YW1wX3ZhbHVlGAUg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEgAEiwKCnRpbWVfdmFs",
            "dWUYBiABKAsyFi5nb29nbGUudHlwZS5UaW1lT2ZEYXlIABInCgpkYXRlX3Zh",
            "bHVlGAcgASgLMhEuZ29vZ2xlLnR5cGUuRGF0ZUgAQgYKBHR5cGUi0wEKEERl",
            "aWRlbnRpZnlDb25maWcSWAoZaW5mb190eXBlX3RyYW5zZm9ybWF0aW9ucxgB",
            "IAEoCzIzLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLkluZm9UeXBlVHJh",
            "bnNmb3JtYXRpb25zSAASUwoWcmVjb3JkX3RyYW5zZm9ybWF0aW9ucxgCIAEo",
            "CzIxLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLlJlY29yZFRyYW5zZm9y",
            "bWF0aW9uc0gAQhAKDnRyYW5zZm9ybWF0aW9uIoQGChdQcmltaXRpdmVUcmFu",
            "c2Zvcm1hdGlvbhJICg5yZXBsYWNlX2NvbmZpZxgBIAEoCzIuLmdvb2dsZS5w",
            "cml2YWN5LmRscC52MmJldGEyLlJlcGxhY2VWYWx1ZUNvbmZpZ0gAEkEKDXJl",
            "ZGFjdF9jb25maWcYAiABKAsyKC5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRh",
            "Mi5SZWRhY3RDb25maWdIABJQChVjaGFyYWN0ZXJfbWFza19jb25maWcYAyAB",
            "KAsyLy5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5DaGFyYWN0ZXJNYXNr",
            "Q29uZmlnSAASXgodY3J5cHRvX3JlcGxhY2VfZmZ4X2ZwZV9jb25maWcYBCAB",
            "KAsyNS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5DcnlwdG9SZXBsYWNl",
            "RmZ4RnBlQ29uZmlnSAASWwobZml4ZWRfc2l6ZV9idWNrZXRpbmdfY29uZmln",
            "GAUgASgLMjQuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuRml4ZWRTaXpl",
            "QnVja2V0aW5nQ29uZmlnSAASRwoQYnVja2V0aW5nX2NvbmZpZxgGIAEoCzIr",
            "Lmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLkJ1Y2tldGluZ0NvbmZpZ0gA",
            "El4KHXJlcGxhY2Vfd2l0aF9pbmZvX3R5cGVfY29uZmlnGAcgASgLMjUuZ29v",
            "Z2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuUmVwbGFjZVdpdGhJbmZvVHlwZUNv",
            "bmZpZ0gAEkYKEHRpbWVfcGFydF9jb25maWcYCCABKAsyKi5nb29nbGUucHJp",
            "dmFjeS5kbHAudjJiZXRhMi5UaW1lUGFydENvbmZpZ0gAEkoKEmNyeXB0b19o",
            "YXNoX2NvbmZpZxgJIAEoCzIsLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEy",
            "LkNyeXB0b0hhc2hDb25maWdIAEIQCg50cmFuc2Zvcm1hdGlvbiLhAQoOVGlt",
            "ZVBhcnRDb25maWcSTAoPcGFydF90b19leHRyYWN0GAEgASgOMjMuZ29vZ2xl",
            "LnByaXZhY3kuZGxwLnYyYmV0YTIuVGltZVBhcnRDb25maWcuVGltZVBhcnQi",
            "gAEKCFRpbWVQYXJ0EhkKFVRJTUVfUEFSVF9VTlNQRUNJRklFRBAAEggKBFlF",
            "QVIQARIJCgVNT05USBACEhAKDERBWV9PRl9NT05USBADEg8KC0RBWV9PRl9X",
            "RUVLEAQSEAoMV0VFS19PRl9ZRUFSEAUSDwoLSE9VUl9PRl9EQVkQBiJNChBD",
            "cnlwdG9IYXNoQ29uZmlnEjkKCmNyeXB0b19rZXkYASABKAsyJS5nb29nbGUu",
            "cHJpdmFjeS5kbHAudjJiZXRhMi5DcnlwdG9LZXkiSgoSUmVwbGFjZVZhbHVl",
            "Q29uZmlnEjQKCW5ld192YWx1ZRgBIAEoCzIhLmdvb2dsZS5wcml2YWN5LmRs",
            "cC52MmJldGEyLlZhbHVlIhsKGVJlcGxhY2VXaXRoSW5mb1R5cGVDb25maWci",
            "DgoMUmVkYWN0Q29uZmlnIrsCCg1DaGFyc1RvSWdub3JlEhwKEmNoYXJhY3Rl",
            "cnNfdG9fc2tpcBgBIAEoCUgAEmQKG2NvbW1vbl9jaGFyYWN0ZXJzX3RvX2ln",
            "bm9yZRgCIAEoDjI9Lmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLkNoYXJz",
            "VG9JZ25vcmUuQ29tbW9uQ2hhcnNUb0lnbm9yZUgAIpcBChNDb21tb25DaGFy",
            "c1RvSWdub3JlEiYKIkNPTU1PTl9DSEFSU19UT19JR05PUkVfVU5TUEVDSUZJ",
            "RUQQABILCgdOVU1FUklDEAESFAoQQUxQSEFfVVBQRVJfQ0FTRRACEhQKEEFM",
            "UEhBX0xPV0VSX0NBU0UQAxIPCgtQVU5DVFVBVElPThAEEg4KCldISVRFU1BB",
            "Q0UQBUIMCgpjaGFyYWN0ZXJzIqgBChNDaGFyYWN0ZXJNYXNrQ29uZmlnEhkK",
            "EW1hc2tpbmdfY2hhcmFjdGVyGAEgASgJEhYKDm51bWJlcl90b19tYXNrGAIg",
            "ASgFEhUKDXJldmVyc2Vfb3JkZXIYAyABKAgSRwoUY2hhcmFjdGVyc190b19p",
            "Z25vcmUYBCADKAsyKS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5DaGFy",
            "c1RvSWdub3JlIp8BChhGaXhlZFNpemVCdWNrZXRpbmdDb25maWcSNgoLbG93",
            "ZXJfYm91bmQYASABKAsyIS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5W",
            "YWx1ZRI2Cgt1cHBlcl9ib3VuZBgCIAEoCzIhLmdvb2dsZS5wcml2YWN5LmRs",
            "cC52MmJldGEyLlZhbHVlEhMKC2J1Y2tldF9zaXplGAMgASgBIv8BCg9CdWNr",
            "ZXRpbmdDb25maWcSQwoHYnVja2V0cxgBIAMoCzIyLmdvb2dsZS5wcml2YWN5",
            "LmRscC52MmJldGEyLkJ1Y2tldGluZ0NvbmZpZy5CdWNrZXQapgEKBkJ1Y2tl",
            "dBIuCgNtaW4YASABKAsyIS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5W",
            "YWx1ZRIuCgNtYXgYAiABKAsyIS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRh",
            "Mi5WYWx1ZRI8ChFyZXBsYWNlbWVudF92YWx1ZRgDIAEoCzIhLmdvb2dsZS5w",
            "cml2YWN5LmRscC52MmJldGEyLlZhbHVlIogEChlDcnlwdG9SZXBsYWNlRmZ4",
            "RnBlQ29uZmlnEjkKCmNyeXB0b19rZXkYASABKAsyJS5nb29nbGUucHJpdmFj",
            "eS5kbHAudjJiZXRhMi5DcnlwdG9LZXkSNAoHY29udGV4dBgCIAEoCzIjLmdv",
            "b2dsZS5wcml2YWN5LmRscC52MmJldGEyLkZpZWxkSWQSaAoPY29tbW9uX2Fs",
            "cGhhYmV0GAQgASgOMk0uZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuQ3J5",
            "cHRvUmVwbGFjZUZmeEZwZUNvbmZpZy5GZnhDb21tb25OYXRpdmVBbHBoYWJl",
            "dEgAEhkKD2N1c3RvbV9hbHBoYWJldBgFIAEoCUgAEg8KBXJhZGl4GAYgASgF",
            "SAASQQoTc3Vycm9nYXRlX2luZm9fdHlwZRgIIAEoCzIkLmdvb2dsZS5wcml2",
            "YWN5LmRscC52MmJldGEyLkluZm9UeXBlIpQBChdGZnhDb21tb25OYXRpdmVB",
            "bHBoYWJldBIqCiZGRlhfQ09NTU9OX05BVElWRV9BTFBIQUJFVF9VTlNQRUNJ",
            "RklFRBAAEgsKB05VTUVSSUMQARIPCgtIRVhBREVDSU1BTBACEhwKGFVQUEVS",
            "X0NBU0VfQUxQSEFfTlVNRVJJQxADEhEKDUFMUEhBX05VTUVSSUMQBEIKCghh",
            "bHBoYWJldCLnAQoJQ3J5cHRvS2V5EkMKCXRyYW5zaWVudBgBIAEoCzIuLmdv",
            "b2dsZS5wcml2YWN5LmRscC52MmJldGEyLlRyYW5zaWVudENyeXB0b0tleUgA",
            "EkMKCXVud3JhcHBlZBgCIAEoCzIuLmdvb2dsZS5wcml2YWN5LmRscC52MmJl",
            "dGEyLlVud3JhcHBlZENyeXB0b0tleUgAEkYKC2ttc193cmFwcGVkGAMgASgL",
            "Mi8uZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuS21zV3JhcHBlZENyeXB0",
            "b0tleUgAQggKBnNvdXJjZSIiChJUcmFuc2llbnRDcnlwdG9LZXkSDAoEbmFt",
            "ZRgBIAEoCSIhChJVbndyYXBwZWRDcnlwdG9LZXkSCwoDa2V5GAEgASgMIkMK",
            "E0ttc1dyYXBwZWRDcnlwdG9LZXkSEwoLd3JhcHBlZF9rZXkYASABKAwSFwoP",
            "Y3J5cHRvX2tleV9uYW1lGAIgASgJIqoCChdJbmZvVHlwZVRyYW5zZm9ybWF0",
            "aW9ucxJjCg90cmFuc2Zvcm1hdGlvbnMYASADKAsySi5nb29nbGUucHJpdmFj",
            "eS5kbHAudjJiZXRhMi5JbmZvVHlwZVRyYW5zZm9ybWF0aW9ucy5JbmZvVHlw",
            "ZVRyYW5zZm9ybWF0aW9uGqkBChZJbmZvVHlwZVRyYW5zZm9ybWF0aW9uEjgK",
            "CmluZm9fdHlwZXMYASADKAsyJC5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRh",
            "Mi5JbmZvVHlwZRJVChhwcmltaXRpdmVfdHJhbnNmb3JtYXRpb24YAiABKAsy",
            "My5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5QcmltaXRpdmVUcmFuc2Zv",
            "cm1hdGlvbiLPAgoTRmllbGRUcmFuc2Zvcm1hdGlvbhIzCgZmaWVsZHMYASAD",
            "KAsyIy5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5GaWVsZElkEj4KCWNv",
            "bmRpdGlvbhgDIAEoCzIrLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLlJl",
            "Y29yZENvbmRpdGlvbhJXChhwcmltaXRpdmVfdHJhbnNmb3JtYXRpb24YBCAB",
            "KAsyMy5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5QcmltaXRpdmVUcmFu",
            "c2Zvcm1hdGlvbkgAElgKGWluZm9fdHlwZV90cmFuc2Zvcm1hdGlvbnMYBSAB",
            "KAsyMy5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5JbmZvVHlwZVRyYW5z",
            "Zm9ybWF0aW9uc0gAQhAKDnRyYW5zZm9ybWF0aW9uIrMBChVSZWNvcmRUcmFu",
            "c2Zvcm1hdGlvbnMSTgoVZmllbGRfdHJhbnNmb3JtYXRpb25zGAEgAygLMi8u",
            "Z29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuRmllbGRUcmFuc2Zvcm1hdGlv",
            "bhJKChNyZWNvcmRfc3VwcHJlc3Npb25zGAIgAygLMi0uZ29vZ2xlLnByaXZh",
            "Y3kuZGxwLnYyYmV0YTIuUmVjb3JkU3VwcHJlc3Npb24iUwoRUmVjb3JkU3Vw",
            "cHJlc3Npb24SPgoJY29uZGl0aW9uGAEgASgLMisuZ29vZ2xlLnByaXZhY3ku",
            "ZGxwLnYyYmV0YTIuUmVjb3JkQ29uZGl0aW9uIvUECg9SZWNvcmRDb25kaXRp",
            "b24STAoLZXhwcmVzc2lvbnMYAyABKAsyNy5nb29nbGUucHJpdmFjeS5kbHAu",
            "djJiZXRhMi5SZWNvcmRDb25kaXRpb24uRXhwcmVzc2lvbnMaswEKCUNvbmRp",
            "dGlvbhIyCgVmaWVsZBgBIAEoCzIjLmdvb2dsZS5wcml2YWN5LmRscC52MmJl",
            "dGEyLkZpZWxkSWQSQAoIb3BlcmF0b3IYAyABKA4yLi5nb29nbGUucHJpdmFj",
            "eS5kbHAudjJiZXRhMi5SZWxhdGlvbmFsT3BlcmF0b3ISMAoFdmFsdWUYBCAB",
            "KAsyIS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5WYWx1ZRpXCgpDb25k",
            "aXRpb25zEkkKCmNvbmRpdGlvbnMYASADKAsyNS5nb29nbGUucHJpdmFjeS5k",
            "bHAudjJiZXRhMi5SZWNvcmRDb25kaXRpb24uQ29uZGl0aW9uGoQCCgtFeHBy",
            "ZXNzaW9ucxJhChBsb2dpY2FsX29wZXJhdG9yGAEgASgOMkcuZ29vZ2xlLnBy",
            "aXZhY3kuZGxwLnYyYmV0YTIuUmVjb3JkQ29uZGl0aW9uLkV4cHJlc3Npb25z",
            "LkxvZ2ljYWxPcGVyYXRvchJMCgpjb25kaXRpb25zGAMgASgLMjYuZ29vZ2xl",
            "LnByaXZhY3kuZGxwLnYyYmV0YTIuUmVjb3JkQ29uZGl0aW9uLkNvbmRpdGlv",
            "bnNIACI8Cg9Mb2dpY2FsT3BlcmF0b3ISIAocTE9HSUNBTF9PUEVSQVRPUl9V",
            "TlNQRUNJRklFRBAAEgcKA0FORBABQgYKBHR5cGUiiAEKFlRyYW5zZm9ybWF0",
            "aW9uT3ZlcnZpZXcSGQoRdHJhbnNmb3JtZWRfYnl0ZXMYAiABKAMSUwoYdHJh",
            "bnNmb3JtYXRpb25fc3VtbWFyaWVzGAMgAygLMjEuZ29vZ2xlLnByaXZhY3ku",
            "ZGxwLnYyYmV0YTIuVHJhbnNmb3JtYXRpb25TdW1tYXJ5IsIFChVUcmFuc2Zv",
            "cm1hdGlvblN1bW1hcnkSNwoJaW5mb190eXBlGAEgASgLMiQuZ29vZ2xlLnBy",
            "aXZhY3kuZGxwLnYyYmV0YTIuSW5mb1R5cGUSMgoFZmllbGQYAiABKAsyIy5n",
            "b29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5GaWVsZElkEksKDnRyYW5zZm9y",
            "bWF0aW9uGAMgASgLMjMuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuUHJp",
            "bWl0aXZlVHJhbnNmb3JtYXRpb24STgoVZmllbGRfdHJhbnNmb3JtYXRpb25z",
            "GAUgAygLMi8uZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuRmllbGRUcmFu",
            "c2Zvcm1hdGlvbhJGCg9yZWNvcmRfc3VwcHJlc3MYBiABKAsyLS5nb29nbGUu",
            "cHJpdmFjeS5kbHAudjJiZXRhMi5SZWNvcmRTdXBwcmVzc2lvbhJQCgdyZXN1",
            "bHRzGAQgAygLMj8uZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuVHJhbnNm",
            "b3JtYXRpb25TdW1tYXJ5LlN1bW1hcnlSZXN1bHQSGQoRdHJhbnNmb3JtZWRf",
            "Ynl0ZXMYByABKAMaiQEKDVN1bW1hcnlSZXN1bHQSDQoFY291bnQYASABKAMS",
            "WAoEY29kZRgCIAEoDjJKLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLlRy",
            "YW5zZm9ybWF0aW9uU3VtbWFyeS5UcmFuc2Zvcm1hdGlvblJlc3VsdENvZGUS",
            "DwoHZGV0YWlscxgDIAEoCSJeChhUcmFuc2Zvcm1hdGlvblJlc3VsdENvZGUS",
            "KgomVFJBTlNGT1JNQVRJT05fUkVTVUxUX0NPREVfVU5TUEVDSUZJRUQQABIL",
            "CgdTVUNDRVNTEAESCQoFRVJST1IQAiJWCghTY2hlZHVsZRJAChtyZWNjdXJy",
            "ZW5jZV9wZXJpb2RfZHVyYXRpb24YASABKAsyGS5nb29nbGUucHJvdG9idWYu",
            "RHVyYXRpb25IAEIICgZvcHRpb24i7wEKD0luc3BlY3RUZW1wbGF0ZRIMCgRu",
            "YW1lGAEgASgJEhQKDGRpc3BsYXlfbmFtZRgCIAEoCRITCgtkZXNjcmlwdGlv",
            "bhgDIAEoCRIvCgtjcmVhdGVfdGltZRgEIAEoCzIaLmdvb2dsZS5wcm90b2J1",
            "Zi5UaW1lc3RhbXASLwoLdXBkYXRlX3RpbWUYBSABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEkEKDmluc3BlY3RfY29uZmlnGAYgASgLMikuZ29v",
            "Z2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuSW5zcGVjdENvbmZpZyL4AQoSRGVp",
            "ZGVudGlmeVRlbXBsYXRlEgwKBG5hbWUYASABKAkSFAoMZGlzcGxheV9uYW1l",
            "GAIgASgJEhMKC2Rlc2NyaXB0aW9uGAMgASgJEi8KC2NyZWF0ZV90aW1lGAQg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIvCgt1cGRhdGVfdGlt",
            "ZRgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASRwoRZGVpZGVu",
            "dGlmeV9jb25maWcYBiABKAsyLC5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRh",
            "Mi5EZWlkZW50aWZ5Q29uZmlnIt0FCgpKb2JUcmlnZ2VyEgwKBG5hbWUYASAB",
            "KAkSFAoMZGlzcGxheV9uYW1lGAIgASgJEhMKC2Rlc2NyaXB0aW9uGAMgASgJ",
            "EkMKC2luc3BlY3Rfam9iGAQgASgLMiwuZ29vZ2xlLnByaXZhY3kuZGxwLnYy",
            "YmV0YTIuSW5zcGVjdEpvYkNvbmZpZ0gAEkAKCHRyaWdnZXJzGAUgAygLMi4u",
            "Z29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuSm9iVHJpZ2dlci5UcmlnZ2Vy",
            "EjwKBmVycm9ycxgGIAMoCzIsLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEy",
            "LkpvYlRyaWdnZXIuRXJyb3ISLwoLY3JlYXRlX3RpbWUYByABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wEi8KC3VwZGF0ZV90aW1lGAggASgLMhou",
            "Z29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIxCg1sYXN0X3J1bl90aW1lGAkg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI9CgZzdGF0dXMYCiAB",
            "KA4yLS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5Kb2JUcmlnZ2VyLlN0",
            "YXR1cxpOCgdUcmlnZ2VyEjgKCHNjaGVkdWxlGAEgASgLMiQuZ29vZ2xlLnBy",
            "aXZhY3kuZGxwLnYyYmV0YTIuU2NoZWR1bGVIAEIJCgd0cmlnZ2VyGlwKBUVy",
            "cm9yEiMKB2RldGFpbHMYASABKAsyEi5nb29nbGUucnBjLlN0YXR1cxIuCgp0",
            "aW1lc3RhbXBzGAIgAygLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCJI",
            "CgZTdGF0dXMSFgoSU1RBVFVTX1VOU1BFQ0lGSUVEEAASCwoHSEVBTFRIWRAB",
            "EgoKBlBBVVNFRBACEg0KCUNBTkNFTExFRBADQgUKA2pvYiKdAgoGQWN0aW9u",
            "EkgKDXNhdmVfZmluZGluZ3MYASABKAsyLy5nb29nbGUucHJpdmFjeS5kbHAu",
            "djJiZXRhMi5BY3Rpb24uU2F2ZUZpbmRpbmdzSAASRQoHcHViX3N1YhgCIAEo",
            "CzIyLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLkFjdGlvbi5QdWJsaXNo",
            "VG9QdWJTdWJIABpWCgxTYXZlRmluZGluZ3MSRgoNb3V0cHV0X2NvbmZpZxgB",
            "IAEoCzIvLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLk91dHB1dFN0b3Jh",
            "Z2VDb25maWcaIAoPUHVibGlzaFRvUHViU3ViEg0KBXRvcGljGAEgASgJQggK",
            "BmFjdGlvbiKKAQocQ3JlYXRlSW5zcGVjdFRlbXBsYXRlUmVxdWVzdBIOCgZw",
            "YXJlbnQYASABKAkSRQoQaW5zcGVjdF90ZW1wbGF0ZRgCIAEoCzIrLmdvb2ds",
            "ZS5wcml2YWN5LmRscC52MmJldGEyLkluc3BlY3RUZW1wbGF0ZRITCgt0ZW1w",
            "bGF0ZV9pZBgDIAEoCSKkAQocVXBkYXRlSW5zcGVjdFRlbXBsYXRlUmVxdWVz",
            "dBIMCgRuYW1lGAEgASgJEkUKEGluc3BlY3RfdGVtcGxhdGUYAiABKAsyKy5n",
            "b29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5JbnNwZWN0VGVtcGxhdGUSLwoL",
            "dXBkYXRlX21hc2sYAyABKAsyGi5nb29nbGUucHJvdG9idWYuRmllbGRNYXNr",
            "IikKGUdldEluc3BlY3RUZW1wbGF0ZVJlcXVlc3QSDAoEbmFtZRgBIAEoCSJU",
            "ChtMaXN0SW5zcGVjdFRlbXBsYXRlc1JlcXVlc3QSDgoGcGFyZW50GAEgASgJ",
            "EhIKCnBhZ2VfdG9rZW4YAiABKAkSEQoJcGFnZV9zaXplGAMgASgFIn8KHExp",
            "c3RJbnNwZWN0VGVtcGxhdGVzUmVzcG9uc2USRgoRaW5zcGVjdF90ZW1wbGF0",
            "ZXMYASADKAsyKy5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5JbnNwZWN0",
            "VGVtcGxhdGUSFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJIiwKHERlbGV0ZUlu",
            "c3BlY3RUZW1wbGF0ZVJlcXVlc3QSDAoEbmFtZRgBIAEoCSJ6ChdDcmVhdGVK",
            "b2JUcmlnZ2VyUmVxdWVzdBIOCgZwYXJlbnQYASABKAkSOwoLam9iX3RyaWdn",
            "ZXIYAiABKAsyJi5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5Kb2JUcmln",
            "Z2VyEhIKCnRyaWdnZXJfaWQYAyABKAkilQEKF1VwZGF0ZUpvYlRyaWdnZXJS",
            "ZXF1ZXN0EgwKBG5hbWUYASABKAkSOwoLam9iX3RyaWdnZXIYAiABKAsyJi5n",
            "b29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5Kb2JUcmlnZ2VyEi8KC3VwZGF0",
            "ZV9tYXNrGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLkZpZWxkTWFzayIkChRH",
            "ZXRKb2JUcmlnZ2VyUmVxdWVzdBIMCgRuYW1lGAEgASgJImEKFkxpc3RKb2JU",
            "cmlnZ2Vyc1JlcXVlc3QSDgoGcGFyZW50GAEgASgJEhIKCnBhZ2VfdG9rZW4Y",
            "AiABKAkSEQoJcGFnZV9zaXplGAMgASgFEhAKCG9yZGVyX2J5GAQgASgJInAK",
            "F0xpc3RKb2JUcmlnZ2Vyc1Jlc3BvbnNlEjwKDGpvYl90cmlnZ2VycxgBIAMo",
            "CzImLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLkpvYlRyaWdnZXISFwoP",
            "bmV4dF9wYWdlX3Rva2VuGAIgASgJIicKF0RlbGV0ZUpvYlRyaWdnZXJSZXF1",
            "ZXN0EgwKBG5hbWUYASABKAkitAIKEEluc3BlY3RKb2JDb25maWcSQQoOc3Rv",
            "cmFnZV9jb25maWcYASABKAsyKS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRh",
            "Mi5TdG9yYWdlQ29uZmlnEkYKDW91dHB1dF9jb25maWcYAiABKAsyLy5nb29n",
            "bGUucHJpdmFjeS5kbHAudjJiZXRhMi5PdXRwdXRTdG9yYWdlQ29uZmlnEkEK",
            "Dmluc3BlY3RfY29uZmlnGAMgASgLMikuZ29vZ2xlLnByaXZhY3kuZGxwLnYy",
            "YmV0YTIuSW5zcGVjdENvbmZpZxIdChVpbnNwZWN0X3RlbXBsYXRlX25hbWUY",
            "BCABKAkSMwoHYWN0aW9ucxgFIAMoCzIiLmdvb2dsZS5wcml2YWN5LmRscC52",
            "MmJldGEyLkFjdGlvbiLvBAoGRGxwSm9iEgwKBG5hbWUYASABKAkSNAoEdHlw",
            "ZRgCIAEoDjImLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLkRscEpvYlR5",
            "cGUSOgoFc3RhdGUYAyABKA4yKy5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRh",
            "Mi5EbHBKb2IuSm9iU3RhdGUSUAoMcmlza19kZXRhaWxzGAQgASgLMjguZ29v",
            "Z2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuQW5hbHl6ZURhdGFTb3VyY2VSaXNr",
            "RGV0YWlsc0gAEk8KD2luc3BlY3RfZGV0YWlscxgFIAEoCzI0Lmdvb2dsZS5w",
            "cml2YWN5LmRscC52MmJldGEyLkluc3BlY3REYXRhU291cmNlRGV0YWlsc0gA",
            "Ei8KC2NyZWF0ZV90aW1lGAYgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVz",
            "dGFtcBIuCgpzdGFydF90aW1lGAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRp",
            "bWVzdGFtcBIsCghlbmRfdGltZRgIIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXASKQoNZXJyb3JfcmVzdWx0cxgJIAMoCzISLmdvb2dsZS5ycGMu",
            "U3RhdHVzEhgKEGpvYl90cmlnZ2VyX25hbWUYCiABKAkiYwoISm9iU3RhdGUS",
            "GQoVSk9CX1NUQVRFX1VOU1BFQ0lGSUVEEAASCwoHUEVORElORxABEgsKB1JV",
            "Tk5JTkcQAhIICgRET05FEAMSDAoIQ0FOQ0VMRUQQBBIKCgZGQUlMRUQQBUIJ",
            "CgdkZXRhaWxzIiAKEEdldERscEpvYlJlcXVlc3QSDAoEbmFtZRgBIAEoCSKR",
            "AQoSTGlzdERscEpvYnNSZXF1ZXN0Eg4KBnBhcmVudBgEIAEoCRIOCgZmaWx0",
            "ZXIYASABKAkSEQoJcGFnZV9zaXplGAIgASgFEhIKCnBhZ2VfdG9rZW4YAyAB",
            "KAkSNAoEdHlwZRgFIAEoDjImLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEy",
            "LkRscEpvYlR5cGUiYAoTTGlzdERscEpvYnNSZXNwb25zZRIwCgRqb2JzGAEg",
            "AygLMiIuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuRGxwSm9iEhcKD25l",
            "eHRfcGFnZV90b2tlbhgCIAEoCSIjChNDYW5jZWxEbHBKb2JSZXF1ZXN0EgwK",
            "BG5hbWUYASABKAkiIwoTRGVsZXRlRGxwSm9iUmVxdWVzdBIMCgRuYW1lGAEg",
            "ASgJIpMBCh9DcmVhdGVEZWlkZW50aWZ5VGVtcGxhdGVSZXF1ZXN0Eg4KBnBh",
            "cmVudBgBIAEoCRJLChNkZWlkZW50aWZ5X3RlbXBsYXRlGAIgASgLMi4uZ29v",
            "Z2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuRGVpZGVudGlmeVRlbXBsYXRlEhMK",
            "C3RlbXBsYXRlX2lkGAMgASgJIq0BCh9VcGRhdGVEZWlkZW50aWZ5VGVtcGxh",
            "dGVSZXF1ZXN0EgwKBG5hbWUYASABKAkSSwoTZGVpZGVudGlmeV90ZW1wbGF0",
            "ZRgCIAEoCzIuLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLkRlaWRlbnRp",
            "ZnlUZW1wbGF0ZRIvCgt1cGRhdGVfbWFzaxgDIAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5GaWVsZE1hc2siLAocR2V0RGVpZGVudGlmeVRlbXBsYXRlUmVxdWVz",
            "dBIMCgRuYW1lGAEgASgJIlcKHkxpc3REZWlkZW50aWZ5VGVtcGxhdGVzUmVx",
            "dWVzdBIOCgZwYXJlbnQYASABKAkSEgoKcGFnZV90b2tlbhgCIAEoCRIRCglw",
            "YWdlX3NpemUYAyABKAUiiAEKH0xpc3REZWlkZW50aWZ5VGVtcGxhdGVzUmVz",
            "cG9uc2USTAoUZGVpZGVudGlmeV90ZW1wbGF0ZXMYASADKAsyLi5nb29nbGUu",
            "cHJpdmFjeS5kbHAudjJiZXRhMi5EZWlkZW50aWZ5VGVtcGxhdGUSFwoPbmV4",
            "dF9wYWdlX3Rva2VuGAIgASgJIi8KH0RlbGV0ZURlaWRlbnRpZnlUZW1wbGF0",
            "ZVJlcXVlc3QSDAoEbmFtZRgBIAEoCSpQChNJbmZvVHlwZVN1cHBvcnRlZEJ5",
            "EhkKFUVOVU1fVFlQRV9VTlNQRUNJRklFRBAAEgsKB0lOU1BFQ1QQARIRCg1S",
            "SVNLX0FOQUxZU0lTEAIquwEKElJlbGF0aW9uYWxPcGVyYXRvchIjCh9SRUxB",
            "VElPTkFMX09QRVJBVE9SX1VOU1BFQ0lGSUVEEAASDAoIRVFVQUxfVE8QARIQ",
            "CgxOT1RfRVFVQUxfVE8QAhIQCgxHUkVBVEVSX1RIQU4QAxINCglMRVNTX1RI",
            "QU4QBBIaChZHUkVBVEVSX1RIQU5fT1JfRVFVQUxTEAUSFwoTTEVTU19USEFO",
            "X09SX0VRVUFMUxAGEgoKBkVYSVNUUxAHKlIKCkRscEpvYlR5cGUSHAoYRExQ",
            "X0pPQl9UWVBFX1VOU1BFQ0lGSUVEEAASDwoLSU5TUEVDVF9KT0IQARIVChFS",
            "SVNLX0FOQUxZU0lTX0pPQhACMtknCgpEbHBTZXJ2aWNlErABCg5JbnNwZWN0",
            "Q29udGVudBIxLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLkluc3BlY3RD",
            "b250ZW50UmVxdWVzdBoyLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLklu",
            "c3BlY3RDb250ZW50UmVzcG9uc2UiN4LT5JMCMSIsL3YyYmV0YTIve3BhcmVu",
            "dD1wcm9qZWN0cy8qfS9jb250ZW50Omluc3BlY3Q6ASoSpAEKC1JlZGFjdElt",
            "YWdlEi4uZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuUmVkYWN0SW1hZ2VS",
            "ZXF1ZXN0Gi8uZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuUmVkYWN0SW1h",
            "Z2VSZXNwb25zZSI0gtPkkwIuIikvdjJiZXRhMi97cGFyZW50PXByb2plY3Rz",
            "Lyp9L2ltYWdlOnJlZGFjdDoBKhK8AQoRRGVpZGVudGlmeUNvbnRlbnQSNC5n",
            "b29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5EZWlkZW50aWZ5Q29udGVudFJl",
            "cXVlc3QaNS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5EZWlkZW50aWZ5",
            "Q29udGVudFJlc3BvbnNlIjqC0+STAjQiLy92MmJldGEyL3twYXJlbnQ9cHJv",
            "amVjdHMvKn0vY29udGVudDpkZWlkZW50aWZ5OgEqErwBChFSZWlkZW50aWZ5",
            "Q29udGVudBI0Lmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLlJlaWRlbnRp",
            "ZnlDb250ZW50UmVxdWVzdBo1Lmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEy",
            "LlJlaWRlbnRpZnlDb250ZW50UmVzcG9uc2UiOoLT5JMCNCIvL3YyYmV0YTIv",
            "e3BhcmVudD1wcm9qZWN0cy8qfS9jb250ZW50OnJlaWRlbnRpZnk6ASoSqQEK",
            "EUluc3BlY3REYXRhU291cmNlEjQuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0",
            "YTIuSW5zcGVjdERhdGFTb3VyY2VSZXF1ZXN0GiIuZ29vZ2xlLnByaXZhY3ku",
            "ZGxwLnYyYmV0YTIuRGxwSm9iIjqC0+STAjQiLy92MmJldGEyL3twYXJlbnQ9",
            "cHJvamVjdHMvKn0vZGF0YVNvdXJjZTppbnNwZWN0OgEqErEBChVBbmFseXpl",
            "RGF0YVNvdXJjZVJpc2sSOC5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5B",
            "bmFseXplRGF0YVNvdXJjZVJpc2tSZXF1ZXN0GiIuZ29vZ2xlLnByaXZhY3ku",
            "ZGxwLnYyYmV0YTIuRGxwSm9iIjqC0+STAjQiLy92MmJldGEyL3twYXJlbnQ9",
            "cHJvamVjdHMvKn0vZGF0YVNvdXJjZTphbmFseXplOgEqEpABCg1MaXN0SW5m",
            "b1R5cGVzEjAuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuTGlzdEluZm9U",
            "eXBlc1JlcXVlc3QaMS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5MaXN0",
            "SW5mb1R5cGVzUmVzcG9uc2UiGoLT5JMCFBISL3YyYmV0YTIvaW5mb1R5cGVz",
            "EvEBChVDcmVhdGVJbnNwZWN0VGVtcGxhdGUSOC5nb29nbGUucHJpdmFjeS5k",
            "bHAudjJiZXRhMi5DcmVhdGVJbnNwZWN0VGVtcGxhdGVSZXF1ZXN0GisuZ29v",
            "Z2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuSW5zcGVjdFRlbXBsYXRlInGC0+ST",
            "AmsiMi92MmJldGEyL3twYXJlbnQ9b3JnYW5pemF0aW9ucy8qfS9pbnNwZWN0",
            "VGVtcGxhdGVzOgEqWjIiLS92MmJldGEyL3twYXJlbnQ9cHJvamVjdHMvKn0v",
            "aW5zcGVjdFRlbXBsYXRlczoBKhLxAQoVVXBkYXRlSW5zcGVjdFRlbXBsYXRl",
            "EjguZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuVXBkYXRlSW5zcGVjdFRl",
            "bXBsYXRlUmVxdWVzdBorLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLklu",
            "c3BlY3RUZW1wbGF0ZSJxgtPkkwJrMjIvdjJiZXRhMi97bmFtZT1vcmdhbml6",
            "YXRpb25zLyovaW5zcGVjdFRlbXBsYXRlcy8qfToBKloyMi0vdjJiZXRhMi97",
            "bmFtZT1wcm9qZWN0cy8qL2luc3BlY3RUZW1wbGF0ZXMvKn06ASoS5QEKEkdl",
            "dEluc3BlY3RUZW1wbGF0ZRI1Lmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEy",
            "LkdldEluc3BlY3RUZW1wbGF0ZVJlcXVlc3QaKy5nb29nbGUucHJpdmFjeS5k",
            "bHAudjJiZXRhMi5JbnNwZWN0VGVtcGxhdGUia4LT5JMCZRIyL3YyYmV0YTIv",
            "e25hbWU9b3JnYW5pemF0aW9ucy8qL2luc3BlY3RUZW1wbGF0ZXMvKn1aLxIt",
            "L3YyYmV0YTIve25hbWU9cHJvamVjdHMvKi9pbnNwZWN0VGVtcGxhdGVzLyp9",
            "EvYBChRMaXN0SW5zcGVjdFRlbXBsYXRlcxI3Lmdvb2dsZS5wcml2YWN5LmRs",
            "cC52MmJldGEyLkxpc3RJbnNwZWN0VGVtcGxhdGVzUmVxdWVzdBo4Lmdvb2ds",
            "ZS5wcml2YWN5LmRscC52MmJldGEyLkxpc3RJbnNwZWN0VGVtcGxhdGVzUmVz",
            "cG9uc2Uia4LT5JMCZRIyL3YyYmV0YTIve3BhcmVudD1vcmdhbml6YXRpb25z",
            "Lyp9L2luc3BlY3RUZW1wbGF0ZXNaLxItL3YyYmV0YTIve3BhcmVudD1wcm9q",
            "ZWN0cy8qfS9pbnNwZWN0VGVtcGxhdGVzEtYBChVEZWxldGVJbnNwZWN0VGVt",
            "cGxhdGUSOC5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5EZWxldGVJbnNw",
            "ZWN0VGVtcGxhdGVSZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5ImuC",
            "0+STAmUqMi92MmJldGEyL3tuYW1lPW9yZ2FuaXphdGlvbnMvKi9pbnNwZWN0",
            "VGVtcGxhdGVzLyp9Wi8qLS92MmJldGEyL3tuYW1lPXByb2plY3RzLyovaW5z",
            "cGVjdFRlbXBsYXRlcy8qfRKAAgoYQ3JlYXRlRGVpZGVudGlmeVRlbXBsYXRl",
            "EjsuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuQ3JlYXRlRGVpZGVudGlm",
            "eVRlbXBsYXRlUmVxdWVzdBouLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEy",
            "LkRlaWRlbnRpZnlUZW1wbGF0ZSJ3gtPkkwJxIjUvdjJiZXRhMi97cGFyZW50",
            "PW9yZ2FuaXphdGlvbnMvKn0vZGVpZGVudGlmeVRlbXBsYXRlczoBKlo1IjAv",
            "djJiZXRhMi97cGFyZW50PXByb2plY3RzLyp9L2RlaWRlbnRpZnlUZW1wbGF0",
            "ZXM6ASoSgAIKGFVwZGF0ZURlaWRlbnRpZnlUZW1wbGF0ZRI7Lmdvb2dsZS5w",
            "cml2YWN5LmRscC52MmJldGEyLlVwZGF0ZURlaWRlbnRpZnlUZW1wbGF0ZVJl",
            "cXVlc3QaLi5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5EZWlkZW50aWZ5",
            "VGVtcGxhdGUid4LT5JMCcTI1L3YyYmV0YTIve25hbWU9b3JnYW5pemF0aW9u",
            "cy8qL2RlaWRlbnRpZnlUZW1wbGF0ZXMvKn06ASpaNTIwL3YyYmV0YTIve25h",
            "bWU9cHJvamVjdHMvKi9kZWlkZW50aWZ5VGVtcGxhdGVzLyp9OgEqEvQBChVH",
            "ZXREZWlkZW50aWZ5VGVtcGxhdGUSOC5nb29nbGUucHJpdmFjeS5kbHAudjJi",
            "ZXRhMi5HZXREZWlkZW50aWZ5VGVtcGxhdGVSZXF1ZXN0Gi4uZ29vZ2xlLnBy",
            "aXZhY3kuZGxwLnYyYmV0YTIuRGVpZGVudGlmeVRlbXBsYXRlInGC0+STAmsS",
            "NS92MmJldGEyL3tuYW1lPW9yZ2FuaXphdGlvbnMvKi9kZWlkZW50aWZ5VGVt",
            "cGxhdGVzLyp9WjISMC92MmJldGEyL3tuYW1lPXByb2plY3RzLyovZGVpZGVu",
            "dGlmeVRlbXBsYXRlcy8qfRKFAgoXTGlzdERlaWRlbnRpZnlUZW1wbGF0ZXMS",
            "Oi5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5MaXN0RGVpZGVudGlmeVRl",
            "bXBsYXRlc1JlcXVlc3QaOy5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5M",
            "aXN0RGVpZGVudGlmeVRlbXBsYXRlc1Jlc3BvbnNlInGC0+STAmsSNS92MmJl",
            "dGEyL3twYXJlbnQ9b3JnYW5pemF0aW9ucy8qfS9kZWlkZW50aWZ5VGVtcGxh",
            "dGVzWjISMC92MmJldGEyL3twYXJlbnQ9cHJvamVjdHMvKn0vZGVpZGVudGlm",
            "eVRlbXBsYXRlcxLiAQoYRGVsZXRlRGVpZGVudGlmeVRlbXBsYXRlEjsuZ29v",
            "Z2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuRGVsZXRlRGVpZGVudGlmeVRlbXBs",
            "YXRlUmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSJxgtPkkwJrKjUv",
            "djJiZXRhMi97bmFtZT1vcmdhbml6YXRpb25zLyovZGVpZGVudGlmeVRlbXBs",
            "YXRlcy8qfVoyKjAvdjJiZXRhMi97bmFtZT1wcm9qZWN0cy8qL2RlaWRlbnRp",
            "ZnlUZW1wbGF0ZXMvKn0SpAEKEENyZWF0ZUpvYlRyaWdnZXISMy5nb29nbGUu",
            "cHJpdmFjeS5kbHAudjJiZXRhMi5DcmVhdGVKb2JUcmlnZ2VyUmVxdWVzdBom",
            "Lmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLkpvYlRyaWdnZXIiM4LT5JMC",
            "LSIoL3YyYmV0YTIve3BhcmVudD1wcm9qZWN0cy8qfS9qb2JUcmlnZ2VyczoB",
            "KhKkAQoQVXBkYXRlSm9iVHJpZ2dlchIzLmdvb2dsZS5wcml2YWN5LmRscC52",
            "MmJldGEyLlVwZGF0ZUpvYlRyaWdnZXJSZXF1ZXN0GiYuZ29vZ2xlLnByaXZh",
            "Y3kuZGxwLnYyYmV0YTIuSm9iVHJpZ2dlciIzgtPkkwItMigvdjJiZXRhMi97",
            "bmFtZT1wcm9qZWN0cy8qL2pvYlRyaWdnZXJzLyp9OgEqEpsBCg1HZXRKb2JU",
            "cmlnZ2VyEjAuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuR2V0Sm9iVHJp",
            "Z2dlclJlcXVlc3QaJi5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMi5Kb2JU",
            "cmlnZ2VyIjCC0+STAioSKC92MmJldGEyL3tuYW1lPXByb2plY3RzLyovam9i",
            "VHJpZ2dlcnMvKn0SrAEKD0xpc3RKb2JUcmlnZ2VycxIyLmdvb2dsZS5wcml2",
            "YWN5LmRscC52MmJldGEyLkxpc3RKb2JUcmlnZ2Vyc1JlcXVlc3QaMy5nb29n",
            "bGUucHJpdmFjeS5kbHAudjJiZXRhMi5MaXN0Sm9iVHJpZ2dlcnNSZXNwb25z",
            "ZSIwgtPkkwIqEigvdjJiZXRhMi97cGFyZW50PXByb2plY3RzLyp9L2pvYlRy",
            "aWdnZXJzEpEBChBEZWxldGVKb2JUcmlnZ2VyEjMuZ29vZ2xlLnByaXZhY3ku",
            "ZGxwLnYyYmV0YTIuRGVsZXRlSm9iVHJpZ2dlclJlcXVlc3QaFi5nb29nbGUu",
            "cHJvdG9idWYuRW1wdHkiMILT5JMCKiooL3YyYmV0YTIve25hbWU9cHJvamVj",
            "dHMvKi9qb2JUcmlnZ2Vycy8qfRKcAQoLTGlzdERscEpvYnMSLi5nb29nbGUu",
            "cHJpdmFjeS5kbHAudjJiZXRhMi5MaXN0RGxwSm9ic1JlcXVlc3QaLy5nb29n",
            "bGUucHJpdmFjeS5kbHAudjJiZXRhMi5MaXN0RGxwSm9ic1Jlc3BvbnNlIiyC",
            "0+STAiYSJC92MmJldGEyL3twYXJlbnQ9cHJvamVjdHMvKn0vZGxwSm9icxKL",
            "AQoJR2V0RGxwSm9iEiwuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTIuR2V0",
            "RGxwSm9iUmVxdWVzdBoiLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEyLkRs",
            "cEpvYiIsgtPkkwImEiQvdjJiZXRhMi97bmFtZT1wcm9qZWN0cy8qL2RscEpv",
            "YnMvKn0ShQEKDERlbGV0ZURscEpvYhIvLmdvb2dsZS5wcml2YWN5LmRscC52",
            "MmJldGEyLkRlbGV0ZURscEpvYlJlcXVlc3QaFi5nb29nbGUucHJvdG9idWYu",
            "RW1wdHkiLILT5JMCJiokL3YyYmV0YTIve25hbWU9cHJvamVjdHMvKi9kbHBK",
            "b2JzLyp9Eo8BCgxDYW5jZWxEbHBKb2ISLy5nb29nbGUucHJpdmFjeS5kbHAu",
            "djJiZXRhMi5DYW5jZWxEbHBKb2JSZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVm",
            "LkVtcHR5IjaC0+STAjAiKy92MmJldGEyL3tuYW1lPXByb2plY3RzLyovZGxw",
            "Sm9icy8qfTpjYW5jZWw6ASpCoQEKHmNvbS5nb29nbGUucHJpdmFjeS5kbHAu",
            "djJiZXRhMkIIRGxwUHJvdG9QAVo9Z29vZ2xlLmdvbGFuZy5vcmcvZ2VucHJv",
            "dG8vZ29vZ2xlYXBpcy9wcml2YWN5L2RscC92MmJldGEyO2RscKoCGEdvb2ds",
            "ZS5DbG91ZC5EbHAuVjJCZXRhMsoCGEdvb2dsZVxDbG91ZFxEbHBcVjJiZXRh",
            "MmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Cloud.Dlp.V2Beta2.StorageReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.FieldMaskReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Rpc.StatusReflection.Descriptor, global::Google.Type.DateReflection.Descriptor, global::Google.Type.DayofweekReflection.Descriptor, global::Google.Type.TimeofdayReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Cloud.Dlp.V2Beta2.InfoTypeSupportedBy), typeof(global::Google.Cloud.Dlp.V2Beta2.RelationalOperator), typeof(global::Google.Cloud.Dlp.V2Beta2.DlpJobType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.InspectConfig), global::Google.Cloud.Dlp.V2Beta2.InspectConfig.Parser, new[]{ "InfoTypes", "MinLikelihood", "Limits", "IncludeQuote", "ExcludeInfoTypes", "CustomInfoTypes" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.InspectConfig.Types.FindingLimits), global::Google.Cloud.Dlp.V2Beta2.InspectConfig.Types.FindingLimits.Parser, new[]{ "MaxFindingsPerItem", "MaxFindingsPerRequest", "MaxFindingsPerInfoType" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.InspectConfig.Types.FindingLimits.Types.InfoTypeLimit), global::Google.Cloud.Dlp.V2Beta2.InspectConfig.Types.FindingLimits.Types.InfoTypeLimit.Parser, new[]{ "InfoType", "MaxFindings" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.ContentItem), global::Google.Cloud.Dlp.V2Beta2.ContentItem.Parser, new[]{ "Type", "Data", "Value", "Table" }, new[]{ "DataItem" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.Table), global::Google.Cloud.Dlp.V2Beta2.Table.Parser, new[]{ "Headers", "Rows" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.Table.Types.Row), global::Google.Cloud.Dlp.V2Beta2.Table.Types.Row.Parser, new[]{ "Values" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.InspectResult), global::Google.Cloud.Dlp.V2Beta2.InspectResult.Parser, new[]{ "Findings", "FindingsTruncated" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.Finding), global::Google.Cloud.Dlp.V2Beta2.Finding.Parser, new[]{ "Quote", "InfoType", "Likelihood", "Location", "CreateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.Location), global::Google.Cloud.Dlp.V2Beta2.Location.Parser, new[]{ "ByteRange", "CodepointRange", "ImageBoxes", "RecordKey", "FieldId", "TableLocation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.TableLocation), global::Google.Cloud.Dlp.V2Beta2.TableLocation.Parser, new[]{ "RowIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.Range), global::Google.Cloud.Dlp.V2Beta2.Range.Parser, new[]{ "Start", "End" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.ImageLocation), global::Google.Cloud.Dlp.V2Beta2.ImageLocation.Parser, new[]{ "Top", "Left", "Width", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.RedactImageRequest), global::Google.Cloud.Dlp.V2Beta2.RedactImageRequest.Parser, new[]{ "Parent", "InspectConfig", "ImageType", "ImageData", "ImageRedactionConfigs" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.RedactImageRequest.Types.ImageRedactionConfig), global::Google.Cloud.Dlp.V2Beta2.RedactImageRequest.Types.ImageRedactionConfig.Parser, new[]{ "InfoType", "RedactAllText", "RedactionColor" }, new[]{ "Target" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.Color), global::Google.Cloud.Dlp.V2Beta2.Color.Parser, new[]{ "Red", "Green", "Blue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.RedactImageResponse), global::Google.Cloud.Dlp.V2Beta2.RedactImageResponse.Parser, new[]{ "RedactedImage", "ExtractedText" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.DeidentifyContentRequest), global::Google.Cloud.Dlp.V2Beta2.DeidentifyContentRequest.Parser, new[]{ "Parent", "DeidentifyConfig", "InspectConfig", "Item", "InspectTemplateName", "DeidentifyTemplateName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.DeidentifyContentResponse), global::Google.Cloud.Dlp.V2Beta2.DeidentifyContentResponse.Parser, new[]{ "Item", "Overview" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.ReidentifyContentRequest), global::Google.Cloud.Dlp.V2Beta2.ReidentifyContentRequest.Parser, new[]{ "Parent", "ReidentifyConfig", "InspectConfig", "Item", "InspectTemplateName", "ReidentifyTemplateName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.ReidentifyContentResponse), global::Google.Cloud.Dlp.V2Beta2.ReidentifyContentResponse.Parser, new[]{ "Item", "Overview" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.InspectContentRequest), global::Google.Cloud.Dlp.V2Beta2.InspectContentRequest.Parser, new[]{ "Parent", "InspectConfig", "Item", "InspectTemplateName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.InspectContentResponse), global::Google.Cloud.Dlp.V2Beta2.InspectContentResponse.Parser, new[]{ "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.InspectDataSourceRequest), global::Google.Cloud.Dlp.V2Beta2.InspectDataSourceRequest.Parser, new[]{ "Parent", "JobConfig", "JobId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.OutputStorageConfig), global::Google.Cloud.Dlp.V2Beta2.OutputStorageConfig.Parser, new[]{ "Table" }, new[]{ "Type" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.InfoTypeStatistics), global::Google.Cloud.Dlp.V2Beta2.InfoTypeStatistics.Parser, new[]{ "InfoType", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.InspectDataSourceDetails), global::Google.Cloud.Dlp.V2Beta2.InspectDataSourceDetails.Parser, new[]{ "RequestedOptions", "Result" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.InspectDataSourceDetails.Types.RequestedOptions), global::Google.Cloud.Dlp.V2Beta2.InspectDataSourceDetails.Types.RequestedOptions.Parser, new[]{ "SnapshotInspectTemplate", "JobConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.InspectDataSourceDetails.Types.Result), global::Google.Cloud.Dlp.V2Beta2.InspectDataSourceDetails.Types.Result.Parser, new[]{ "ProcessedBytes", "TotalEstimatedBytes", "InfoTypeStats" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.InfoTypeDescription), global::Google.Cloud.Dlp.V2Beta2.InfoTypeDescription.Parser, new[]{ "Name", "DisplayName", "SupportedBy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.ListInfoTypesRequest), global::Google.Cloud.Dlp.V2Beta2.ListInfoTypesRequest.Parser, new[]{ "LanguageCode", "Filter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.ListInfoTypesResponse), global::Google.Cloud.Dlp.V2Beta2.ListInfoTypesResponse.Parser, new[]{ "InfoTypes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskRequest), global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskRequest.Parser, new[]{ "Parent", "JobConfig", "JobId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.RiskAnalysisJobConfig), global::Google.Cloud.Dlp.V2Beta2.RiskAnalysisJobConfig.Parser, new[]{ "PrivacyMetric", "SourceTable", "Actions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric), global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Parser, new[]{ "NumericalStatsConfig", "CategoricalStatsConfig", "KAnonymityConfig", "LDiversityConfig", "KMapEstimationConfig" }, new[]{ "Type" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.NumericalStatsConfig), global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.NumericalStatsConfig.Parser, new[]{ "Field" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.CategoricalStatsConfig), global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.CategoricalStatsConfig.Parser, new[]{ "Field" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KAnonymityConfig), global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KAnonymityConfig.Parser, new[]{ "QuasiIds", "EntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.LDiversityConfig), global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.LDiversityConfig.Parser, new[]{ "QuasiIds", "SensitiveAttribute" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig), global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig.Parser, new[]{ "QuasiIds", "RegionCode", "AuxiliaryTables" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig.Types.TaggedField), global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig.Types.TaggedField.Parser, new[]{ "Field", "InfoType", "CustomTag", "Inferred" }, new[]{ "Tag" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig.Types.AuxiliaryTable), global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig.Types.AuxiliaryTable.Parser, new[]{ "Table", "QuasiIds", "RelativeFrequency" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig.Types.AuxiliaryTable.Types.QuasiIdField), global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig.Types.AuxiliaryTable.Types.QuasiIdField.Parser, new[]{ "Field", "CustomTag" }, null, null, null)})})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails), global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Parser, new[]{ "RequestedPrivacyMetric", "RequestedSourceTable", "NumericalStatsResult", "CategoricalStatsResult", "KAnonymityResult", "LDiversityResult", "KMapEstimationResult" }, new[]{ "Result" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.NumericalStatsResult), global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.NumericalStatsResult.Parser, new[]{ "MinValue", "MaxValue", "QuantileValues" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.CategoricalStatsResult), global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.CategoricalStatsResult.Parser, new[]{ "ValueFrequencyHistogramBuckets" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.CategoricalStatsResult.Types.CategoricalStatsHistogramBucket), global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.CategoricalStatsResult.Types.CategoricalStatsHistogramBucket.Parser, new[]{ "ValueFrequencyLowerBound", "ValueFrequencyUpperBound", "BucketSize", "BucketValues" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KAnonymityResult), global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KAnonymityResult.Parser, new[]{ "EquivalenceClassHistogramBuckets" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KAnonymityResult.Types.KAnonymityEquivalenceClass), global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KAnonymityResult.Types.KAnonymityEquivalenceClass.Parser, new[]{ "QuasiIdsValues", "EquivalenceClassSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KAnonymityResult.Types.KAnonymityHistogramBucket), global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KAnonymityResult.Types.KAnonymityHistogramBucket.Parser, new[]{ "EquivalenceClassSizeLowerBound", "EquivalenceClassSizeUpperBound", "BucketSize", "BucketValues" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.LDiversityResult), global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.LDiversityResult.Parser, new[]{ "SensitiveValueFrequencyHistogramBuckets" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.LDiversityResult.Types.LDiversityEquivalenceClass), global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.LDiversityResult.Types.LDiversityEquivalenceClass.Parser, new[]{ "QuasiIdsValues", "EquivalenceClassSize", "NumDistinctSensitiveValues", "TopSensitiveValues" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.LDiversityResult.Types.LDiversityHistogramBucket), global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.LDiversityResult.Types.LDiversityHistogramBucket.Parser, new[]{ "SensitiveValueFrequencyLowerBound", "SensitiveValueFrequencyUpperBound", "BucketSize", "BucketValues" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KMapEstimationResult), global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KMapEstimationResult.Parser, new[]{ "KMapEstimationHistogram" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KMapEstimationResult.Types.KMapEstimationQuasiIdValues), global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KMapEstimationResult.Types.KMapEstimationQuasiIdValues.Parser, new[]{ "QuasiIdsValues", "EstimatedAnonymity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KMapEstimationResult.Types.KMapEstimationHistogramBucket), global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KMapEstimationResult.Types.KMapEstimationHistogramBucket.Parser, new[]{ "MinAnonymity", "MaxAnonymity", "BucketSize", "BucketValues" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.ValueFrequency), global::Google.Cloud.Dlp.V2Beta2.ValueFrequency.Parser, new[]{ "Value", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.Value), global::Google.Cloud.Dlp.V2Beta2.Value.Parser, new[]{ "IntegerValue", "FloatValue", "StringValue", "BooleanValue", "TimestampValue", "TimeValue", "DateValue" }, new[]{ "Type" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.DeidentifyConfig), global::Google.Cloud.Dlp.V2Beta2.DeidentifyConfig.Parser, new[]{ "InfoTypeTransformations", "RecordTransformations" }, new[]{ "Transformation" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.PrimitiveTransformation), global::Google.Cloud.Dlp.V2Beta2.PrimitiveTransformation.Parser, new[]{ "ReplaceConfig", "RedactConfig", "CharacterMaskConfig", "CryptoReplaceFfxFpeConfig", "FixedSizeBucketingConfig", "BucketingConfig", "ReplaceWithInfoTypeConfig", "TimePartConfig", "CryptoHashConfig" }, new[]{ "Transformation" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.TimePartConfig), global::Google.Cloud.Dlp.V2Beta2.TimePartConfig.Parser, new[]{ "PartToExtract" }, null, new[]{ typeof(global::Google.Cloud.Dlp.V2Beta2.TimePartConfig.Types.TimePart) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.CryptoHashConfig), global::Google.Cloud.Dlp.V2Beta2.CryptoHashConfig.Parser, new[]{ "CryptoKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.ReplaceValueConfig), global::Google.Cloud.Dlp.V2Beta2.ReplaceValueConfig.Parser, new[]{ "NewValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.ReplaceWithInfoTypeConfig), global::Google.Cloud.Dlp.V2Beta2.ReplaceWithInfoTypeConfig.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.RedactConfig), global::Google.Cloud.Dlp.V2Beta2.RedactConfig.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.CharsToIgnore), global::Google.Cloud.Dlp.V2Beta2.CharsToIgnore.Parser, new[]{ "CharactersToSkip", "CommonCharactersToIgnore" }, new[]{ "Characters" }, new[]{ typeof(global::Google.Cloud.Dlp.V2Beta2.CharsToIgnore.Types.CommonCharsToIgnore) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.CharacterMaskConfig), global::Google.Cloud.Dlp.V2Beta2.CharacterMaskConfig.Parser, new[]{ "MaskingCharacter", "NumberToMask", "ReverseOrder", "CharactersToIgnore" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.FixedSizeBucketingConfig), global::Google.Cloud.Dlp.V2Beta2.FixedSizeBucketingConfig.Parser, new[]{ "LowerBound", "UpperBound", "BucketSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.BucketingConfig), global::Google.Cloud.Dlp.V2Beta2.BucketingConfig.Parser, new[]{ "Buckets" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.BucketingConfig.Types.Bucket), global::Google.Cloud.Dlp.V2Beta2.BucketingConfig.Types.Bucket.Parser, new[]{ "Min", "Max", "ReplacementValue" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.CryptoReplaceFfxFpeConfig), global::Google.Cloud.Dlp.V2Beta2.CryptoReplaceFfxFpeConfig.Parser, new[]{ "CryptoKey", "Context", "CommonAlphabet", "CustomAlphabet", "Radix", "SurrogateInfoType" }, new[]{ "Alphabet" }, new[]{ typeof(global::Google.Cloud.Dlp.V2Beta2.CryptoReplaceFfxFpeConfig.Types.FfxCommonNativeAlphabet) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.CryptoKey), global::Google.Cloud.Dlp.V2Beta2.CryptoKey.Parser, new[]{ "Transient", "Unwrapped", "KmsWrapped" }, new[]{ "Source" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.TransientCryptoKey), global::Google.Cloud.Dlp.V2Beta2.TransientCryptoKey.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.UnwrappedCryptoKey), global::Google.Cloud.Dlp.V2Beta2.UnwrappedCryptoKey.Parser, new[]{ "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.KmsWrappedCryptoKey), global::Google.Cloud.Dlp.V2Beta2.KmsWrappedCryptoKey.Parser, new[]{ "WrappedKey", "CryptoKeyName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.InfoTypeTransformations), global::Google.Cloud.Dlp.V2Beta2.InfoTypeTransformations.Parser, new[]{ "Transformations" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.InfoTypeTransformations.Types.InfoTypeTransformation), global::Google.Cloud.Dlp.V2Beta2.InfoTypeTransformations.Types.InfoTypeTransformation.Parser, new[]{ "InfoTypes", "PrimitiveTransformation" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.FieldTransformation), global::Google.Cloud.Dlp.V2Beta2.FieldTransformation.Parser, new[]{ "Fields", "Condition", "PrimitiveTransformation", "InfoTypeTransformations" }, new[]{ "Transformation" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.RecordTransformations), global::Google.Cloud.Dlp.V2Beta2.RecordTransformations.Parser, new[]{ "FieldTransformations", "RecordSuppressions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.RecordSuppression), global::Google.Cloud.Dlp.V2Beta2.RecordSuppression.Parser, new[]{ "Condition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.RecordCondition), global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Parser, new[]{ "Expressions" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Types.Condition), global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Types.Condition.Parser, new[]{ "Field", "Operator", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Types.Conditions), global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Types.Conditions.Parser, new[]{ "Conditions_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Types.Expressions), global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Types.Expressions.Parser, new[]{ "LogicalOperator", "Conditions" }, new[]{ "Type" }, new[]{ typeof(global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Types.Expressions.Types.LogicalOperator) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.TransformationOverview), global::Google.Cloud.Dlp.V2Beta2.TransformationOverview.Parser, new[]{ "TransformedBytes", "TransformationSummaries" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.TransformationSummary), global::Google.Cloud.Dlp.V2Beta2.TransformationSummary.Parser, new[]{ "InfoType", "Field", "Transformation", "FieldTransformations", "RecordSuppress", "Results", "TransformedBytes" }, null, new[]{ typeof(global::Google.Cloud.Dlp.V2Beta2.TransformationSummary.Types.TransformationResultCode) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.TransformationSummary.Types.SummaryResult), global::Google.Cloud.Dlp.V2Beta2.TransformationSummary.Types.SummaryResult.Parser, new[]{ "Count", "Code", "Details" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.Schedule), global::Google.Cloud.Dlp.V2Beta2.Schedule.Parser, new[]{ "ReccurrencePeriodDuration" }, new[]{ "Option" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.InspectTemplate), global::Google.Cloud.Dlp.V2Beta2.InspectTemplate.Parser, new[]{ "Name", "DisplayName", "Description", "CreateTime", "UpdateTime", "InspectConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.DeidentifyTemplate), global::Google.Cloud.Dlp.V2Beta2.DeidentifyTemplate.Parser, new[]{ "Name", "DisplayName", "Description", "CreateTime", "UpdateTime", "DeidentifyConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.JobTrigger), global::Google.Cloud.Dlp.V2Beta2.JobTrigger.Parser, new[]{ "Name", "DisplayName", "Description", "InspectJob", "Triggers", "Errors", "CreateTime", "UpdateTime", "LastRunTime", "Status" }, new[]{ "Job" }, new[]{ typeof(global::Google.Cloud.Dlp.V2Beta2.JobTrigger.Types.Status) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.JobTrigger.Types.Trigger), global::Google.Cloud.Dlp.V2Beta2.JobTrigger.Types.Trigger.Parser, new[]{ "Schedule" }, new[]{ "Trigger" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.JobTrigger.Types.Error), global::Google.Cloud.Dlp.V2Beta2.JobTrigger.Types.Error.Parser, new[]{ "Details", "Timestamps" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.Action), global::Google.Cloud.Dlp.V2Beta2.Action.Parser, new[]{ "SaveFindings", "PubSub" }, new[]{ "Action" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.Action.Types.SaveFindings), global::Google.Cloud.Dlp.V2Beta2.Action.Types.SaveFindings.Parser, new[]{ "OutputConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.Action.Types.PublishToPubSub), global::Google.Cloud.Dlp.V2Beta2.Action.Types.PublishToPubSub.Parser, new[]{ "Topic" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.CreateInspectTemplateRequest), global::Google.Cloud.Dlp.V2Beta2.CreateInspectTemplateRequest.Parser, new[]{ "Parent", "InspectTemplate", "TemplateId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.UpdateInspectTemplateRequest), global::Google.Cloud.Dlp.V2Beta2.UpdateInspectTemplateRequest.Parser, new[]{ "Name", "InspectTemplate", "UpdateMask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.GetInspectTemplateRequest), global::Google.Cloud.Dlp.V2Beta2.GetInspectTemplateRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.ListInspectTemplatesRequest), global::Google.Cloud.Dlp.V2Beta2.ListInspectTemplatesRequest.Parser, new[]{ "Parent", "PageToken", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.ListInspectTemplatesResponse), global::Google.Cloud.Dlp.V2Beta2.ListInspectTemplatesResponse.Parser, new[]{ "InspectTemplates", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.DeleteInspectTemplateRequest), global::Google.Cloud.Dlp.V2Beta2.DeleteInspectTemplateRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.CreateJobTriggerRequest), global::Google.Cloud.Dlp.V2Beta2.CreateJobTriggerRequest.Parser, new[]{ "Parent", "JobTrigger", "TriggerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.UpdateJobTriggerRequest), global::Google.Cloud.Dlp.V2Beta2.UpdateJobTriggerRequest.Parser, new[]{ "Name", "JobTrigger", "UpdateMask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.GetJobTriggerRequest), global::Google.Cloud.Dlp.V2Beta2.GetJobTriggerRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.ListJobTriggersRequest), global::Google.Cloud.Dlp.V2Beta2.ListJobTriggersRequest.Parser, new[]{ "Parent", "PageToken", "PageSize", "OrderBy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.ListJobTriggersResponse), global::Google.Cloud.Dlp.V2Beta2.ListJobTriggersResponse.Parser, new[]{ "JobTriggers", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.DeleteJobTriggerRequest), global::Google.Cloud.Dlp.V2Beta2.DeleteJobTriggerRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.InspectJobConfig), global::Google.Cloud.Dlp.V2Beta2.InspectJobConfig.Parser, new[]{ "StorageConfig", "OutputConfig", "InspectConfig", "InspectTemplateName", "Actions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.DlpJob), global::Google.Cloud.Dlp.V2Beta2.DlpJob.Parser, new[]{ "Name", "Type", "State", "RiskDetails", "InspectDetails", "CreateTime", "StartTime", "EndTime", "ErrorResults", "JobTriggerName" }, new[]{ "Details" }, new[]{ typeof(global::Google.Cloud.Dlp.V2Beta2.DlpJob.Types.JobState) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.GetDlpJobRequest), global::Google.Cloud.Dlp.V2Beta2.GetDlpJobRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.ListDlpJobsRequest), global::Google.Cloud.Dlp.V2Beta2.ListDlpJobsRequest.Parser, new[]{ "Parent", "Filter", "PageSize", "PageToken", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.ListDlpJobsResponse), global::Google.Cloud.Dlp.V2Beta2.ListDlpJobsResponse.Parser, new[]{ "Jobs", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.CancelDlpJobRequest), global::Google.Cloud.Dlp.V2Beta2.CancelDlpJobRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.DeleteDlpJobRequest), global::Google.Cloud.Dlp.V2Beta2.DeleteDlpJobRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.CreateDeidentifyTemplateRequest), global::Google.Cloud.Dlp.V2Beta2.CreateDeidentifyTemplateRequest.Parser, new[]{ "Parent", "DeidentifyTemplate", "TemplateId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.UpdateDeidentifyTemplateRequest), global::Google.Cloud.Dlp.V2Beta2.UpdateDeidentifyTemplateRequest.Parser, new[]{ "Name", "DeidentifyTemplate", "UpdateMask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.GetDeidentifyTemplateRequest), global::Google.Cloud.Dlp.V2Beta2.GetDeidentifyTemplateRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.ListDeidentifyTemplatesRequest), global::Google.Cloud.Dlp.V2Beta2.ListDeidentifyTemplatesRequest.Parser, new[]{ "Parent", "PageToken", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.ListDeidentifyTemplatesResponse), global::Google.Cloud.Dlp.V2Beta2.ListDeidentifyTemplatesResponse.Parser, new[]{ "DeidentifyTemplates", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta2.DeleteDeidentifyTemplateRequest), global::Google.Cloud.Dlp.V2Beta2.DeleteDeidentifyTemplateRequest.Parser, new[]{ "Name" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Parts of the APIs which use certain infoTypes.
  /// </summary>
  public enum InfoTypeSupportedBy {
    [pbr::OriginalName("ENUM_TYPE_UNSPECIFIED")] EnumTypeUnspecified = 0,
    /// <summary>
    /// Supported by the inspect operations.
    /// </summary>
    [pbr::OriginalName("INSPECT")] Inspect = 1,
    /// <summary>
    /// Supported by the risk analysis operations.
    /// </summary>
    [pbr::OriginalName("RISK_ANALYSIS")] RiskAnalysis = 2,
  }

  /// <summary>
  /// Operators available for comparing the value of fields.
  /// </summary>
  public enum RelationalOperator {
    [pbr::OriginalName("RELATIONAL_OPERATOR_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// Equal.
    /// </summary>
    [pbr::OriginalName("EQUAL_TO")] EqualTo = 1,
    /// <summary>
    /// Not equal to.
    /// </summary>
    [pbr::OriginalName("NOT_EQUAL_TO")] NotEqualTo = 2,
    /// <summary>
    /// Greater than.
    /// </summary>
    [pbr::OriginalName("GREATER_THAN")] GreaterThan = 3,
    /// <summary>
    /// Less than.
    /// </summary>
    [pbr::OriginalName("LESS_THAN")] LessThan = 4,
    /// <summary>
    /// Greater than or equals.
    /// </summary>
    [pbr::OriginalName("GREATER_THAN_OR_EQUALS")] GreaterThanOrEquals = 5,
    /// <summary>
    /// Less than or equals.
    /// </summary>
    [pbr::OriginalName("LESS_THAN_OR_EQUALS")] LessThanOrEquals = 6,
    /// <summary>
    /// Exists
    /// </summary>
    [pbr::OriginalName("EXISTS")] Exists = 7,
  }

  /// <summary>
  /// An enum to represent the various type of DLP jobs.
  /// </summary>
  public enum DlpJobType {
    [pbr::OriginalName("DLP_JOB_TYPE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// The job inspected Google Cloud for sensitive data.
    /// </summary>
    [pbr::OriginalName("INSPECT_JOB")] InspectJob = 1,
    /// <summary>
    /// The job executed a Risk Analysis computation.
    /// </summary>
    [pbr::OriginalName("RISK_ANALYSIS_JOB")] RiskAnalysisJob = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Configuration description of the scanning process.
  /// When used with redactContent only info_types and min_likelihood are currently
  /// used.
  /// </summary>
  public sealed partial class InspectConfig : pb::IMessage<InspectConfig> {
    private static readonly pb::MessageParser<InspectConfig> _parser = new pb::MessageParser<InspectConfig>(() => new InspectConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InspectConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectConfig(InspectConfig other) : this() {
      infoTypes_ = other.infoTypes_.Clone();
      minLikelihood_ = other.minLikelihood_;
      Limits = other.limits_ != null ? other.Limits.Clone() : null;
      includeQuote_ = other.includeQuote_;
      excludeInfoTypes_ = other.excludeInfoTypes_;
      customInfoTypes_ = other.customInfoTypes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectConfig Clone() {
      return new InspectConfig(this);
    }

    /// <summary>Field number for the "info_types" field.</summary>
    public const int InfoTypesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.InfoType> _repeated_infoTypes_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta2.InfoType.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.InfoType> infoTypes_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.InfoType>();
    /// <summary>
    /// Restricts what info_types to look for. The values must correspond to
    /// InfoType values returned by ListInfoTypes or found in documentation.
    /// Empty info_types runs all enabled detectors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.InfoType> InfoTypes {
      get { return infoTypes_; }
    }

    /// <summary>Field number for the "min_likelihood" field.</summary>
    public const int MinLikelihoodFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta2.Likelihood minLikelihood_ = 0;
    /// <summary>
    /// Only returns findings equal or above this threshold. The default is
    /// POSSIBLE.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.Likelihood MinLikelihood {
      get { return minLikelihood_; }
      set {
        minLikelihood_ = value;
      }
    }

    /// <summary>Field number for the "limits" field.</summary>
    public const int LimitsFieldNumber = 3;
    private global::Google.Cloud.Dlp.V2Beta2.InspectConfig.Types.FindingLimits limits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.InspectConfig.Types.FindingLimits Limits {
      get { return limits_; }
      set {
        limits_ = value;
      }
    }

    /// <summary>Field number for the "include_quote" field.</summary>
    public const int IncludeQuoteFieldNumber = 4;
    private bool includeQuote_;
    /// <summary>
    /// When true, a contextual quote from the data that triggered a finding is
    /// included in the response; see Finding.quote.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeQuote {
      get { return includeQuote_; }
      set {
        includeQuote_ = value;
      }
    }

    /// <summary>Field number for the "exclude_info_types" field.</summary>
    public const int ExcludeInfoTypesFieldNumber = 5;
    private bool excludeInfoTypes_;
    /// <summary>
    /// When true, excludes type information of the findings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ExcludeInfoTypes {
      get { return excludeInfoTypes_; }
      set {
        excludeInfoTypes_ = value;
      }
    }

    /// <summary>Field number for the "custom_info_types" field.</summary>
    public const int CustomInfoTypesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.CustomInfoType> _repeated_customInfoTypes_codec
        = pb::FieldCodec.ForMessage(50, global::Google.Cloud.Dlp.V2Beta2.CustomInfoType.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.CustomInfoType> customInfoTypes_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.CustomInfoType>();
    /// <summary>
    /// Custom infoTypes provided by the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.CustomInfoType> CustomInfoTypes {
      get { return customInfoTypes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InspectConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InspectConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!infoTypes_.Equals(other.infoTypes_)) return false;
      if (MinLikelihood != other.MinLikelihood) return false;
      if (!object.Equals(Limits, other.Limits)) return false;
      if (IncludeQuote != other.IncludeQuote) return false;
      if (ExcludeInfoTypes != other.ExcludeInfoTypes) return false;
      if(!customInfoTypes_.Equals(other.customInfoTypes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= infoTypes_.GetHashCode();
      if (MinLikelihood != 0) hash ^= MinLikelihood.GetHashCode();
      if (limits_ != null) hash ^= Limits.GetHashCode();
      if (IncludeQuote != false) hash ^= IncludeQuote.GetHashCode();
      if (ExcludeInfoTypes != false) hash ^= ExcludeInfoTypes.GetHashCode();
      hash ^= customInfoTypes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infoTypes_.WriteTo(output, _repeated_infoTypes_codec);
      if (MinLikelihood != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MinLikelihood);
      }
      if (limits_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Limits);
      }
      if (IncludeQuote != false) {
        output.WriteRawTag(32);
        output.WriteBool(IncludeQuote);
      }
      if (ExcludeInfoTypes != false) {
        output.WriteRawTag(40);
        output.WriteBool(ExcludeInfoTypes);
      }
      customInfoTypes_.WriteTo(output, _repeated_customInfoTypes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infoTypes_.CalculateSize(_repeated_infoTypes_codec);
      if (MinLikelihood != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MinLikelihood);
      }
      if (limits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Limits);
      }
      if (IncludeQuote != false) {
        size += 1 + 1;
      }
      if (ExcludeInfoTypes != false) {
        size += 1 + 1;
      }
      size += customInfoTypes_.CalculateSize(_repeated_customInfoTypes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InspectConfig other) {
      if (other == null) {
        return;
      }
      infoTypes_.Add(other.infoTypes_);
      if (other.MinLikelihood != 0) {
        MinLikelihood = other.MinLikelihood;
      }
      if (other.limits_ != null) {
        if (limits_ == null) {
          limits_ = new global::Google.Cloud.Dlp.V2Beta2.InspectConfig.Types.FindingLimits();
        }
        Limits.MergeFrom(other.Limits);
      }
      if (other.IncludeQuote != false) {
        IncludeQuote = other.IncludeQuote;
      }
      if (other.ExcludeInfoTypes != false) {
        ExcludeInfoTypes = other.ExcludeInfoTypes;
      }
      customInfoTypes_.Add(other.customInfoTypes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infoTypes_.AddEntriesFrom(input, _repeated_infoTypes_codec);
            break;
          }
          case 16: {
            minLikelihood_ = (global::Google.Cloud.Dlp.V2Beta2.Likelihood) input.ReadEnum();
            break;
          }
          case 26: {
            if (limits_ == null) {
              limits_ = new global::Google.Cloud.Dlp.V2Beta2.InspectConfig.Types.FindingLimits();
            }
            input.ReadMessage(limits_);
            break;
          }
          case 32: {
            IncludeQuote = input.ReadBool();
            break;
          }
          case 40: {
            ExcludeInfoTypes = input.ReadBool();
            break;
          }
          case 50: {
            customInfoTypes_.AddEntriesFrom(input, _repeated_customInfoTypes_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the InspectConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class FindingLimits : pb::IMessage<FindingLimits> {
        private static readonly pb::MessageParser<FindingLimits> _parser = new pb::MessageParser<FindingLimits>(() => new FindingLimits());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FindingLimits> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta2.InspectConfig.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FindingLimits() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FindingLimits(FindingLimits other) : this() {
          maxFindingsPerItem_ = other.maxFindingsPerItem_;
          maxFindingsPerRequest_ = other.maxFindingsPerRequest_;
          maxFindingsPerInfoType_ = other.maxFindingsPerInfoType_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FindingLimits Clone() {
          return new FindingLimits(this);
        }

        /// <summary>Field number for the "max_findings_per_item" field.</summary>
        public const int MaxFindingsPerItemFieldNumber = 1;
        private int maxFindingsPerItem_;
        /// <summary>
        /// Max number of findings that will be returned for each item scanned.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxFindingsPerItem {
          get { return maxFindingsPerItem_; }
          set {
            maxFindingsPerItem_ = value;
          }
        }

        /// <summary>Field number for the "max_findings_per_request" field.</summary>
        public const int MaxFindingsPerRequestFieldNumber = 2;
        private int maxFindingsPerRequest_;
        /// <summary>
        /// Max total number of findings that will be returned per request/job.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxFindingsPerRequest {
          get { return maxFindingsPerRequest_; }
          set {
            maxFindingsPerRequest_ = value;
          }
        }

        /// <summary>Field number for the "max_findings_per_info_type" field.</summary>
        public const int MaxFindingsPerInfoTypeFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.InspectConfig.Types.FindingLimits.Types.InfoTypeLimit> _repeated_maxFindingsPerInfoType_codec
            = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Dlp.V2Beta2.InspectConfig.Types.FindingLimits.Types.InfoTypeLimit.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.InspectConfig.Types.FindingLimits.Types.InfoTypeLimit> maxFindingsPerInfoType_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.InspectConfig.Types.FindingLimits.Types.InfoTypeLimit>();
        /// <summary>
        /// Configuration of findings limit given for specified infoTypes.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.InspectConfig.Types.FindingLimits.Types.InfoTypeLimit> MaxFindingsPerInfoType {
          get { return maxFindingsPerInfoType_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FindingLimits);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FindingLimits other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MaxFindingsPerItem != other.MaxFindingsPerItem) return false;
          if (MaxFindingsPerRequest != other.MaxFindingsPerRequest) return false;
          if(!maxFindingsPerInfoType_.Equals(other.maxFindingsPerInfoType_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MaxFindingsPerItem != 0) hash ^= MaxFindingsPerItem.GetHashCode();
          if (MaxFindingsPerRequest != 0) hash ^= MaxFindingsPerRequest.GetHashCode();
          hash ^= maxFindingsPerInfoType_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (MaxFindingsPerItem != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(MaxFindingsPerItem);
          }
          if (MaxFindingsPerRequest != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(MaxFindingsPerRequest);
          }
          maxFindingsPerInfoType_.WriteTo(output, _repeated_maxFindingsPerInfoType_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MaxFindingsPerItem != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxFindingsPerItem);
          }
          if (MaxFindingsPerRequest != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxFindingsPerRequest);
          }
          size += maxFindingsPerInfoType_.CalculateSize(_repeated_maxFindingsPerInfoType_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FindingLimits other) {
          if (other == null) {
            return;
          }
          if (other.MaxFindingsPerItem != 0) {
            MaxFindingsPerItem = other.MaxFindingsPerItem;
          }
          if (other.MaxFindingsPerRequest != 0) {
            MaxFindingsPerRequest = other.MaxFindingsPerRequest;
          }
          maxFindingsPerInfoType_.Add(other.maxFindingsPerInfoType_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                MaxFindingsPerItem = input.ReadInt32();
                break;
              }
              case 16: {
                MaxFindingsPerRequest = input.ReadInt32();
                break;
              }
              case 26: {
                maxFindingsPerInfoType_.AddEntriesFrom(input, _repeated_maxFindingsPerInfoType_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the FindingLimits message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Max findings configuration per infoType, per content item or long
          /// running DlpJob.
          /// </summary>
          public sealed partial class InfoTypeLimit : pb::IMessage<InfoTypeLimit> {
            private static readonly pb::MessageParser<InfoTypeLimit> _parser = new pb::MessageParser<InfoTypeLimit>(() => new InfoTypeLimit());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<InfoTypeLimit> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Cloud.Dlp.V2Beta2.InspectConfig.Types.FindingLimits.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public InfoTypeLimit() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public InfoTypeLimit(InfoTypeLimit other) : this() {
              InfoType = other.infoType_ != null ? other.InfoType.Clone() : null;
              maxFindings_ = other.maxFindings_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public InfoTypeLimit Clone() {
              return new InfoTypeLimit(this);
            }

            /// <summary>Field number for the "info_type" field.</summary>
            public const int InfoTypeFieldNumber = 1;
            private global::Google.Cloud.Dlp.V2Beta2.InfoType infoType_;
            /// <summary>
            /// Type of information the findings limit applies to. Only one limit per
            /// info_type should be provided. If InfoTypeLimit does not have an
            /// info_type, the DLP API applies the limit against all info_types that
            /// are found but not specified in another InfoTypeLimit.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Google.Cloud.Dlp.V2Beta2.InfoType InfoType {
              get { return infoType_; }
              set {
                infoType_ = value;
              }
            }

            /// <summary>Field number for the "max_findings" field.</summary>
            public const int MaxFindingsFieldNumber = 2;
            private int maxFindings_;
            /// <summary>
            /// Max findings limit for the given infoType.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int MaxFindings {
              get { return maxFindings_; }
              set {
                maxFindings_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as InfoTypeLimit);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(InfoTypeLimit other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(InfoType, other.InfoType)) return false;
              if (MaxFindings != other.MaxFindings) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (infoType_ != null) hash ^= InfoType.GetHashCode();
              if (MaxFindings != 0) hash ^= MaxFindings.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (infoType_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(InfoType);
              }
              if (MaxFindings != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(MaxFindings);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (infoType_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoType);
              }
              if (MaxFindings != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxFindings);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(InfoTypeLimit other) {
              if (other == null) {
                return;
              }
              if (other.infoType_ != null) {
                if (infoType_ == null) {
                  infoType_ = new global::Google.Cloud.Dlp.V2Beta2.InfoType();
                }
                InfoType.MergeFrom(other.InfoType);
              }
              if (other.MaxFindings != 0) {
                MaxFindings = other.MaxFindings;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    if (infoType_ == null) {
                      infoType_ = new global::Google.Cloud.Dlp.V2Beta2.InfoType();
                    }
                    input.ReadMessage(infoType_);
                    break;
                  }
                  case 16: {
                    MaxFindings = input.ReadInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// Container structure for the content to inspect.
  /// </summary>
  public sealed partial class ContentItem : pb::IMessage<ContentItem> {
    private static readonly pb::MessageParser<ContentItem> _parser = new pb::MessageParser<ContentItem>(() => new ContentItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContentItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentItem(ContentItem other) : this() {
      type_ = other.type_;
      switch (other.DataItemCase) {
        case DataItemOneofCase.Data:
          Data = other.Data;
          break;
        case DataItemOneofCase.Value:
          Value = other.Value;
          break;
        case DataItemOneofCase.Table:
          Table = other.Table.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentItem Clone() {
      return new ContentItem(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    /// <summary>
    /// Type of the content, as defined in Content-Type HTTP header.
    /// Supported types are: all "text" types, octet streams, PNG images,
    /// JPEG images.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    /// <summary>
    /// Content data to inspect or redact.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return dataItemCase_ == DataItemOneofCase.Data ? (pb::ByteString) dataItem_ : pb::ByteString.Empty; }
      set {
        dataItem_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        dataItemCase_ = DataItemOneofCase.Data;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    /// <summary>
    /// String data to inspect or redact.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return dataItemCase_ == DataItemOneofCase.Value ? (string) dataItem_ : ""; }
      set {
        dataItem_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        dataItemCase_ = DataItemOneofCase.Value;
      }
    }

    /// <summary>Field number for the "table" field.</summary>
    public const int TableFieldNumber = 4;
    /// <summary>
    /// Structured content for inspection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.Table Table {
      get { return dataItemCase_ == DataItemOneofCase.Table ? (global::Google.Cloud.Dlp.V2Beta2.Table) dataItem_ : null; }
      set {
        dataItem_ = value;
        dataItemCase_ = value == null ? DataItemOneofCase.None : DataItemOneofCase.Table;
      }
    }

    private object dataItem_;
    /// <summary>Enum of possible cases for the "data_item" oneof.</summary>
    public enum DataItemOneofCase {
      None = 0,
      Data = 2,
      Value = 3,
      Table = 4,
    }
    private DataItemOneofCase dataItemCase_ = DataItemOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataItemOneofCase DataItemCase {
      get { return dataItemCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDataItem() {
      dataItemCase_ = DataItemOneofCase.None;
      dataItem_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContentItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContentItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Data != other.Data) return false;
      if (Value != other.Value) return false;
      if (!object.Equals(Table, other.Table)) return false;
      if (DataItemCase != other.DataItemCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (dataItemCase_ == DataItemOneofCase.Data) hash ^= Data.GetHashCode();
      if (dataItemCase_ == DataItemOneofCase.Value) hash ^= Value.GetHashCode();
      if (dataItemCase_ == DataItemOneofCase.Table) hash ^= Table.GetHashCode();
      hash ^= (int) dataItemCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (dataItemCase_ == DataItemOneofCase.Data) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (dataItemCase_ == DataItemOneofCase.Value) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
      if (dataItemCase_ == DataItemOneofCase.Table) {
        output.WriteRawTag(34);
        output.WriteMessage(Table);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (dataItemCase_ == DataItemOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (dataItemCase_ == DataItemOneofCase.Value) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (dataItemCase_ == DataItemOneofCase.Table) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Table);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContentItem other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      switch (other.DataItemCase) {
        case DataItemOneofCase.Data:
          Data = other.Data;
          break;
        case DataItemOneofCase.Value:
          Value = other.Value;
          break;
        case DataItemOneofCase.Table:
          Table = other.Table;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
          case 34: {
            global::Google.Cloud.Dlp.V2Beta2.Table subBuilder = new global::Google.Cloud.Dlp.V2Beta2.Table();
            if (dataItemCase_ == DataItemOneofCase.Table) {
              subBuilder.MergeFrom(Table);
            }
            input.ReadMessage(subBuilder);
            Table = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Structured content to inspect. Up to 50,000 `Value`s per request allowed.
  /// </summary>
  public sealed partial class Table : pb::IMessage<Table> {
    private static readonly pb::MessageParser<Table> _parser = new pb::MessageParser<Table>(() => new Table());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Table> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table(Table other) : this() {
      headers_ = other.headers_.Clone();
      rows_ = other.rows_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table Clone() {
      return new Table(this);
    }

    /// <summary>Field number for the "headers" field.</summary>
    public const int HeadersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.FieldId> _repeated_headers_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta2.FieldId.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.FieldId> headers_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.FieldId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.FieldId> Headers {
      get { return headers_; }
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.Table.Types.Row> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Dlp.V2Beta2.Table.Types.Row.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Table.Types.Row> rows_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Table.Types.Row>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Table.Types.Row> Rows {
      get { return rows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Table);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Table other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!headers_.Equals(other.headers_)) return false;
      if(!rows_.Equals(other.rows_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= headers_.GetHashCode();
      hash ^= rows_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      headers_.WriteTo(output, _repeated_headers_codec);
      rows_.WriteTo(output, _repeated_rows_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += headers_.CalculateSize(_repeated_headers_codec);
      size += rows_.CalculateSize(_repeated_rows_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Table other) {
      if (other == null) {
        return;
      }
      headers_.Add(other.headers_);
      rows_.Add(other.rows_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            headers_.AddEntriesFrom(input, _repeated_headers_codec);
            break;
          }
          case 18: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Table message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Row : pb::IMessage<Row> {
        private static readonly pb::MessageParser<Row> _parser = new pb::MessageParser<Row>(() => new Row());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Row> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta2.Table.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Row() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Row(Row other) : this() {
          values_ = other.values_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Row Clone() {
          return new Row(this);
        }

        /// <summary>Field number for the "values" field.</summary>
        public const int ValuesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.Value> _repeated_values_codec
            = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta2.Value.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Value> values_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Value>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Value> Values {
          get { return values_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Row);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Row other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!values_.Equals(other.values_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= values_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          values_.WriteTo(output, _repeated_values_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += values_.CalculateSize(_repeated_values_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Row other) {
          if (other == null) {
            return;
          }
          values_.Add(other.values_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                values_.AddEntriesFrom(input, _repeated_values_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// All the findings for a single scanned item.
  /// </summary>
  public sealed partial class InspectResult : pb::IMessage<InspectResult> {
    private static readonly pb::MessageParser<InspectResult> _parser = new pb::MessageParser<InspectResult>(() => new InspectResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InspectResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectResult(InspectResult other) : this() {
      findings_ = other.findings_.Clone();
      findingsTruncated_ = other.findingsTruncated_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectResult Clone() {
      return new InspectResult(this);
    }

    /// <summary>Field number for the "findings" field.</summary>
    public const int FindingsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.Finding> _repeated_findings_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta2.Finding.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Finding> findings_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Finding>();
    /// <summary>
    /// List of findings for an item.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Finding> Findings {
      get { return findings_; }
    }

    /// <summary>Field number for the "findings_truncated" field.</summary>
    public const int FindingsTruncatedFieldNumber = 2;
    private bool findingsTruncated_;
    /// <summary>
    /// If true, then this item might have more findings than were returned,
    /// and the findings returned are an arbitrary subset of all findings.
    /// The findings list might be truncated because the input items were too
    /// large, or because the server reached the maximum amount of resources
    /// allowed for a single API call. For best results, divide the input into
    /// smaller batches.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FindingsTruncated {
      get { return findingsTruncated_; }
      set {
        findingsTruncated_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InspectResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InspectResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!findings_.Equals(other.findings_)) return false;
      if (FindingsTruncated != other.FindingsTruncated) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= findings_.GetHashCode();
      if (FindingsTruncated != false) hash ^= FindingsTruncated.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      findings_.WriteTo(output, _repeated_findings_codec);
      if (FindingsTruncated != false) {
        output.WriteRawTag(16);
        output.WriteBool(FindingsTruncated);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += findings_.CalculateSize(_repeated_findings_codec);
      if (FindingsTruncated != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InspectResult other) {
      if (other == null) {
        return;
      }
      findings_.Add(other.findings_);
      if (other.FindingsTruncated != false) {
        FindingsTruncated = other.FindingsTruncated;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            findings_.AddEntriesFrom(input, _repeated_findings_codec);
            break;
          }
          case 16: {
            FindingsTruncated = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents a piece of potentially sensitive content.
  /// </summary>
  public sealed partial class Finding : pb::IMessage<Finding> {
    private static readonly pb::MessageParser<Finding> _parser = new pb::MessageParser<Finding>(() => new Finding());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Finding> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Finding() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Finding(Finding other) : this() {
      quote_ = other.quote_;
      InfoType = other.infoType_ != null ? other.InfoType.Clone() : null;
      likelihood_ = other.likelihood_;
      Location = other.location_ != null ? other.Location.Clone() : null;
      CreateTime = other.createTime_ != null ? other.CreateTime.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Finding Clone() {
      return new Finding(this);
    }

    /// <summary>Field number for the "quote" field.</summary>
    public const int QuoteFieldNumber = 1;
    private string quote_ = "";
    /// <summary>
    /// The content that was found. Even if the content is not textual, it
    /// may be converted to a textual representation here.
    /// Provided if requested by the `InspectConfig` and the finding is
    /// less than or equal to 4096 bytes long. If the finding exceeds 4096 bytes
    /// in length, the quote may be omitted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Quote {
      get { return quote_; }
      set {
        quote_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "info_type" field.</summary>
    public const int InfoTypeFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta2.InfoType infoType_;
    /// <summary>
    /// The type of content that might have been found.
    /// Provided if requested by the `InspectConfig`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.InfoType InfoType {
      get { return infoType_; }
      set {
        infoType_ = value;
      }
    }

    /// <summary>Field number for the "likelihood" field.</summary>
    public const int LikelihoodFieldNumber = 3;
    private global::Google.Cloud.Dlp.V2Beta2.Likelihood likelihood_ = 0;
    /// <summary>
    /// Estimate of how likely it is that the `info_type` is correct.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.Likelihood Likelihood {
      get { return likelihood_; }
      set {
        likelihood_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 4;
    private global::Google.Cloud.Dlp.V2Beta2.Location location_;
    /// <summary>
    /// Where the content was found.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.Location Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// Timestamp when finding was detected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Finding);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Finding other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Quote != other.Quote) return false;
      if (!object.Equals(InfoType, other.InfoType)) return false;
      if (Likelihood != other.Likelihood) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Quote.Length != 0) hash ^= Quote.GetHashCode();
      if (infoType_ != null) hash ^= InfoType.GetHashCode();
      if (Likelihood != 0) hash ^= Likelihood.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Quote.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Quote);
      }
      if (infoType_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(InfoType);
      }
      if (Likelihood != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Likelihood);
      }
      if (location_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Location);
      }
      if (createTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CreateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Quote.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Quote);
      }
      if (infoType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoType);
      }
      if (Likelihood != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Likelihood);
      }
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Finding other) {
      if (other == null) {
        return;
      }
      if (other.Quote.Length != 0) {
        Quote = other.Quote;
      }
      if (other.infoType_ != null) {
        if (infoType_ == null) {
          infoType_ = new global::Google.Cloud.Dlp.V2Beta2.InfoType();
        }
        InfoType.MergeFrom(other.InfoType);
      }
      if (other.Likelihood != 0) {
        Likelihood = other.Likelihood;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          location_ = new global::Google.Cloud.Dlp.V2Beta2.Location();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Quote = input.ReadString();
            break;
          }
          case 18: {
            if (infoType_ == null) {
              infoType_ = new global::Google.Cloud.Dlp.V2Beta2.InfoType();
            }
            input.ReadMessage(infoType_);
            break;
          }
          case 24: {
            likelihood_ = (global::Google.Cloud.Dlp.V2Beta2.Likelihood) input.ReadEnum();
            break;
          }
          case 34: {
            if (location_ == null) {
              location_ = new global::Google.Cloud.Dlp.V2Beta2.Location();
            }
            input.ReadMessage(location_);
            break;
          }
          case 50: {
            if (createTime_ == null) {
              createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(createTime_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Specifies the location of the finding.
  /// </summary>
  public sealed partial class Location : pb::IMessage<Location> {
    private static readonly pb::MessageParser<Location> _parser = new pb::MessageParser<Location>(() => new Location());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Location> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location(Location other) : this() {
      ByteRange = other.byteRange_ != null ? other.ByteRange.Clone() : null;
      CodepointRange = other.codepointRange_ != null ? other.CodepointRange.Clone() : null;
      imageBoxes_ = other.imageBoxes_.Clone();
      RecordKey = other.recordKey_ != null ? other.RecordKey.Clone() : null;
      FieldId = other.fieldId_ != null ? other.FieldId.Clone() : null;
      TableLocation = other.tableLocation_ != null ? other.TableLocation.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location Clone() {
      return new Location(this);
    }

    /// <summary>Field number for the "byte_range" field.</summary>
    public const int ByteRangeFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta2.Range byteRange_;
    /// <summary>
    /// Zero-based byte offsets delimiting the finding.
    /// These are relative to the finding's containing element.
    /// Note that when the content is not textual, this references
    /// the UTF-8 encoded textual representation of the content.
    /// Omitted if content is an image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.Range ByteRange {
      get { return byteRange_; }
      set {
        byteRange_ = value;
      }
    }

    /// <summary>Field number for the "codepoint_range" field.</summary>
    public const int CodepointRangeFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta2.Range codepointRange_;
    /// <summary>
    /// Unicode character offsets delimiting the finding.
    /// These are relative to the finding's containing element.
    /// Provided when the content is text.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.Range CodepointRange {
      get { return codepointRange_; }
      set {
        codepointRange_ = value;
      }
    }

    /// <summary>Field number for the "image_boxes" field.</summary>
    public const int ImageBoxesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.ImageLocation> _repeated_imageBoxes_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Dlp.V2Beta2.ImageLocation.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.ImageLocation> imageBoxes_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.ImageLocation>();
    /// <summary>
    /// The area within the image that contained the finding.
    /// Provided when the content is an image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.ImageLocation> ImageBoxes {
      get { return imageBoxes_; }
    }

    /// <summary>Field number for the "record_key" field.</summary>
    public const int RecordKeyFieldNumber = 4;
    private global::Google.Cloud.Dlp.V2Beta2.RecordKey recordKey_;
    /// <summary>
    /// The pointer to the record in storage that contained the field the
    /// finding was found in.
    /// Provided when the finding's containing element is a property
    /// of a storage object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.RecordKey RecordKey {
      get { return recordKey_; }
      set {
        recordKey_ = value;
      }
    }

    /// <summary>Field number for the "field_id" field.</summary>
    public const int FieldIdFieldNumber = 5;
    private global::Google.Cloud.Dlp.V2Beta2.FieldId fieldId_;
    /// <summary>
    /// The pointer to the property or cell that contained the finding.
    /// Provided when the finding's containing element is a cell in a table
    /// or a property of storage object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.FieldId FieldId {
      get { return fieldId_; }
      set {
        fieldId_ = value;
      }
    }

    /// <summary>Field number for the "table_location" field.</summary>
    public const int TableLocationFieldNumber = 6;
    private global::Google.Cloud.Dlp.V2Beta2.TableLocation tableLocation_;
    /// <summary>
    /// The pointer to the row of the table that contained the finding.
    /// Provided when the finding's containing element is a cell of a table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.TableLocation TableLocation {
      get { return tableLocation_; }
      set {
        tableLocation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Location);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Location other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ByteRange, other.ByteRange)) return false;
      if (!object.Equals(CodepointRange, other.CodepointRange)) return false;
      if(!imageBoxes_.Equals(other.imageBoxes_)) return false;
      if (!object.Equals(RecordKey, other.RecordKey)) return false;
      if (!object.Equals(FieldId, other.FieldId)) return false;
      if (!object.Equals(TableLocation, other.TableLocation)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (byteRange_ != null) hash ^= ByteRange.GetHashCode();
      if (codepointRange_ != null) hash ^= CodepointRange.GetHashCode();
      hash ^= imageBoxes_.GetHashCode();
      if (recordKey_ != null) hash ^= RecordKey.GetHashCode();
      if (fieldId_ != null) hash ^= FieldId.GetHashCode();
      if (tableLocation_ != null) hash ^= TableLocation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (byteRange_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ByteRange);
      }
      if (codepointRange_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CodepointRange);
      }
      imageBoxes_.WriteTo(output, _repeated_imageBoxes_codec);
      if (recordKey_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RecordKey);
      }
      if (fieldId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(FieldId);
      }
      if (tableLocation_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TableLocation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (byteRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ByteRange);
      }
      if (codepointRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CodepointRange);
      }
      size += imageBoxes_.CalculateSize(_repeated_imageBoxes_codec);
      if (recordKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecordKey);
      }
      if (fieldId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FieldId);
      }
      if (tableLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableLocation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Location other) {
      if (other == null) {
        return;
      }
      if (other.byteRange_ != null) {
        if (byteRange_ == null) {
          byteRange_ = new global::Google.Cloud.Dlp.V2Beta2.Range();
        }
        ByteRange.MergeFrom(other.ByteRange);
      }
      if (other.codepointRange_ != null) {
        if (codepointRange_ == null) {
          codepointRange_ = new global::Google.Cloud.Dlp.V2Beta2.Range();
        }
        CodepointRange.MergeFrom(other.CodepointRange);
      }
      imageBoxes_.Add(other.imageBoxes_);
      if (other.recordKey_ != null) {
        if (recordKey_ == null) {
          recordKey_ = new global::Google.Cloud.Dlp.V2Beta2.RecordKey();
        }
        RecordKey.MergeFrom(other.RecordKey);
      }
      if (other.fieldId_ != null) {
        if (fieldId_ == null) {
          fieldId_ = new global::Google.Cloud.Dlp.V2Beta2.FieldId();
        }
        FieldId.MergeFrom(other.FieldId);
      }
      if (other.tableLocation_ != null) {
        if (tableLocation_ == null) {
          tableLocation_ = new global::Google.Cloud.Dlp.V2Beta2.TableLocation();
        }
        TableLocation.MergeFrom(other.TableLocation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (byteRange_ == null) {
              byteRange_ = new global::Google.Cloud.Dlp.V2Beta2.Range();
            }
            input.ReadMessage(byteRange_);
            break;
          }
          case 18: {
            if (codepointRange_ == null) {
              codepointRange_ = new global::Google.Cloud.Dlp.V2Beta2.Range();
            }
            input.ReadMessage(codepointRange_);
            break;
          }
          case 26: {
            imageBoxes_.AddEntriesFrom(input, _repeated_imageBoxes_codec);
            break;
          }
          case 34: {
            if (recordKey_ == null) {
              recordKey_ = new global::Google.Cloud.Dlp.V2Beta2.RecordKey();
            }
            input.ReadMessage(recordKey_);
            break;
          }
          case 42: {
            if (fieldId_ == null) {
              fieldId_ = new global::Google.Cloud.Dlp.V2Beta2.FieldId();
            }
            input.ReadMessage(fieldId_);
            break;
          }
          case 50: {
            if (tableLocation_ == null) {
              tableLocation_ = new global::Google.Cloud.Dlp.V2Beta2.TableLocation();
            }
            input.ReadMessage(tableLocation_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Location of a finding within a table.
  /// </summary>
  public sealed partial class TableLocation : pb::IMessage<TableLocation> {
    private static readonly pb::MessageParser<TableLocation> _parser = new pb::MessageParser<TableLocation>(() => new TableLocation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TableLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableLocation(TableLocation other) : this() {
      rowIndex_ = other.rowIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableLocation Clone() {
      return new TableLocation(this);
    }

    /// <summary>Field number for the "row_index" field.</summary>
    public const int RowIndexFieldNumber = 1;
    private long rowIndex_;
    /// <summary>
    /// The zero-based index of the row where the finding is located.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RowIndex {
      get { return rowIndex_; }
      set {
        rowIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TableLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TableLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowIndex != other.RowIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowIndex != 0L) hash ^= RowIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowIndex != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RowIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RowIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TableLocation other) {
      if (other == null) {
        return;
      }
      if (other.RowIndex != 0L) {
        RowIndex = other.RowIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RowIndex = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Generic half-open interval [start, end)
  /// </summary>
  public sealed partial class Range : pb::IMessage<Range> {
    private static readonly pb::MessageParser<Range> _parser = new pb::MessageParser<Range>(() => new Range());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Range> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Range() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Range(Range other) : this() {
      start_ = other.start_;
      end_ = other.end_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Range Clone() {
      return new Range(this);
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 1;
    private long start_;
    /// <summary>
    /// Index of the first character of the range (inclusive).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 2;
    private long end_;
    /// <summary>
    /// Index of the last character of the range (exclusive).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Range);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Range other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0L) hash ^= Start.GetHashCode();
      if (End != 0L) hash ^= End.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Start);
      }
      if (End != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(End);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Start);
      }
      if (End != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(End);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Range other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0L) {
        Start = other.Start;
      }
      if (other.End != 0L) {
        End = other.End;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Start = input.ReadInt64();
            break;
          }
          case 16: {
            End = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Bounding box encompassing detected text within an image.
  /// </summary>
  public sealed partial class ImageLocation : pb::IMessage<ImageLocation> {
    private static readonly pb::MessageParser<ImageLocation> _parser = new pb::MessageParser<ImageLocation>(() => new ImageLocation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageLocation(ImageLocation other) : this() {
      top_ = other.top_;
      left_ = other.left_;
      width_ = other.width_;
      height_ = other.height_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageLocation Clone() {
      return new ImageLocation(this);
    }

    /// <summary>Field number for the "top" field.</summary>
    public const int TopFieldNumber = 1;
    private int top_;
    /// <summary>
    /// Top coordinate of the bounding box. (0,0) is upper left.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Top {
      get { return top_; }
      set {
        top_ = value;
      }
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 2;
    private int left_;
    /// <summary>
    /// Left coordinate of the bounding box. (0,0) is upper left.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private int width_;
    /// <summary>
    /// Width of the bounding box in pixels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 4;
    private int height_;
    /// <summary>
    /// Height of the bounding box in pixels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Top != other.Top) return false;
      if (Left != other.Left) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Top != 0) hash ^= Top.GetHashCode();
      if (Left != 0) hash ^= Left.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Top != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Top);
      }
      if (Left != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Left);
      }
      if (Width != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Height);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Top != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Top);
      }
      if (Left != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Left);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageLocation other) {
      if (other == null) {
        return;
      }
      if (other.Top != 0) {
        Top = other.Top;
      }
      if (other.Left != 0) {
        Left = other.Left;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Top = input.ReadInt32();
            break;
          }
          case 16: {
            Left = input.ReadInt32();
            break;
          }
          case 24: {
            Width = input.ReadInt32();
            break;
          }
          case 32: {
            Height = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to search for potentially sensitive info in a list of items
  /// and replace it with a default or provided content.
  /// </summary>
  public sealed partial class RedactImageRequest : pb::IMessage<RedactImageRequest> {
    private static readonly pb::MessageParser<RedactImageRequest> _parser = new pb::MessageParser<RedactImageRequest>(() => new RedactImageRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedactImageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedactImageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedactImageRequest(RedactImageRequest other) : this() {
      parent_ = other.parent_;
      InspectConfig = other.inspectConfig_ != null ? other.InspectConfig.Clone() : null;
      imageType_ = other.imageType_;
      imageData_ = other.imageData_;
      imageRedactionConfigs_ = other.imageRedactionConfigs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedactImageRequest Clone() {
      return new RedactImageRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The parent resource name, for example projects/my-project-id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inspect_config" field.</summary>
    public const int InspectConfigFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta2.InspectConfig inspectConfig_;
    /// <summary>
    /// Configuration for the inspector.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.InspectConfig InspectConfig {
      get { return inspectConfig_; }
      set {
        inspectConfig_ = value;
      }
    }

    /// <summary>Field number for the "image_type" field.</summary>
    public const int ImageTypeFieldNumber = 3;
    private string imageType_ = "";
    /// <summary>
    /// Type of the content, as defined in Content-Type HTTP header.
    /// Supported types are: PNG, JPEG, SVG, &amp; BMP.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageType {
      get { return imageType_; }
      set {
        imageType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image_data" field.</summary>
    public const int ImageDataFieldNumber = 4;
    private pb::ByteString imageData_ = pb::ByteString.Empty;
    /// <summary>
    /// The bytes of the image to redact.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ImageData {
      get { return imageData_; }
      set {
        imageData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image_redaction_configs" field.</summary>
    public const int ImageRedactionConfigsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.RedactImageRequest.Types.ImageRedactionConfig> _repeated_imageRedactionConfigs_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Cloud.Dlp.V2Beta2.RedactImageRequest.Types.ImageRedactionConfig.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.RedactImageRequest.Types.ImageRedactionConfig> imageRedactionConfigs_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.RedactImageRequest.Types.ImageRedactionConfig>();
    /// <summary>
    /// The configuration for specifying what content to redact from images.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.RedactImageRequest.Types.ImageRedactionConfig> ImageRedactionConfigs {
      get { return imageRedactionConfigs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedactImageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedactImageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (!object.Equals(InspectConfig, other.InspectConfig)) return false;
      if (ImageType != other.ImageType) return false;
      if (ImageData != other.ImageData) return false;
      if(!imageRedactionConfigs_.Equals(other.imageRedactionConfigs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (inspectConfig_ != null) hash ^= InspectConfig.GetHashCode();
      if (ImageType.Length != 0) hash ^= ImageType.GetHashCode();
      if (ImageData.Length != 0) hash ^= ImageData.GetHashCode();
      hash ^= imageRedactionConfigs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (inspectConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(InspectConfig);
      }
      if (ImageType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ImageType);
      }
      if (ImageData.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(ImageData);
      }
      imageRedactionConfigs_.WriteTo(output, _repeated_imageRedactionConfigs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (inspectConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InspectConfig);
      }
      if (ImageType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageType);
      }
      if (ImageData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ImageData);
      }
      size += imageRedactionConfigs_.CalculateSize(_repeated_imageRedactionConfigs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedactImageRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.inspectConfig_ != null) {
        if (inspectConfig_ == null) {
          inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta2.InspectConfig();
        }
        InspectConfig.MergeFrom(other.InspectConfig);
      }
      if (other.ImageType.Length != 0) {
        ImageType = other.ImageType;
      }
      if (other.ImageData.Length != 0) {
        ImageData = other.ImageData;
      }
      imageRedactionConfigs_.Add(other.imageRedactionConfigs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            if (inspectConfig_ == null) {
              inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta2.InspectConfig();
            }
            input.ReadMessage(inspectConfig_);
            break;
          }
          case 26: {
            ImageType = input.ReadString();
            break;
          }
          case 34: {
            ImageData = input.ReadBytes();
            break;
          }
          case 42: {
            imageRedactionConfigs_.AddEntriesFrom(input, _repeated_imageRedactionConfigs_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RedactImageRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Configuration for determining how redaction of images should occur.
      /// </summary>
      public sealed partial class ImageRedactionConfig : pb::IMessage<ImageRedactionConfig> {
        private static readonly pb::MessageParser<ImageRedactionConfig> _parser = new pb::MessageParser<ImageRedactionConfig>(() => new ImageRedactionConfig());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ImageRedactionConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta2.RedactImageRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageRedactionConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageRedactionConfig(ImageRedactionConfig other) : this() {
          RedactionColor = other.redactionColor_ != null ? other.RedactionColor.Clone() : null;
          switch (other.TargetCase) {
            case TargetOneofCase.InfoType:
              InfoType = other.InfoType.Clone();
              break;
            case TargetOneofCase.RedactAllText:
              RedactAllText = other.RedactAllText;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageRedactionConfig Clone() {
          return new ImageRedactionConfig(this);
        }

        /// <summary>Field number for the "info_type" field.</summary>
        public const int InfoTypeFieldNumber = 1;
        /// <summary>
        /// Only one per info_type should be provided per request. If not
        /// specified, and redact_all_text is false, the DLP API will redact all
        /// text that it matches against all info_types that are found, but not
        /// specified in another ImageRedactionConfig.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta2.InfoType InfoType {
          get { return targetCase_ == TargetOneofCase.InfoType ? (global::Google.Cloud.Dlp.V2Beta2.InfoType) target_ : null; }
          set {
            target_ = value;
            targetCase_ = value == null ? TargetOneofCase.None : TargetOneofCase.InfoType;
          }
        }

        /// <summary>Field number for the "redact_all_text" field.</summary>
        public const int RedactAllTextFieldNumber = 2;
        /// <summary>
        /// If true, all text found in the image, regardless whether it matches an
        /// info_type, is redacted.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool RedactAllText {
          get { return targetCase_ == TargetOneofCase.RedactAllText ? (bool) target_ : false; }
          set {
            target_ = value;
            targetCase_ = TargetOneofCase.RedactAllText;
          }
        }

        /// <summary>Field number for the "redaction_color" field.</summary>
        public const int RedactionColorFieldNumber = 3;
        private global::Google.Cloud.Dlp.V2Beta2.Color redactionColor_;
        /// <summary>
        /// The color to use when redacting content from an image. If not specified,
        /// the default is black.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta2.Color RedactionColor {
          get { return redactionColor_; }
          set {
            redactionColor_ = value;
          }
        }

        private object target_;
        /// <summary>Enum of possible cases for the "target" oneof.</summary>
        public enum TargetOneofCase {
          None = 0,
          InfoType = 1,
          RedactAllText = 2,
        }
        private TargetOneofCase targetCase_ = TargetOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TargetOneofCase TargetCase {
          get { return targetCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTarget() {
          targetCase_ = TargetOneofCase.None;
          target_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ImageRedactionConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ImageRedactionConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(InfoType, other.InfoType)) return false;
          if (RedactAllText != other.RedactAllText) return false;
          if (!object.Equals(RedactionColor, other.RedactionColor)) return false;
          if (TargetCase != other.TargetCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (targetCase_ == TargetOneofCase.InfoType) hash ^= InfoType.GetHashCode();
          if (targetCase_ == TargetOneofCase.RedactAllText) hash ^= RedactAllText.GetHashCode();
          if (redactionColor_ != null) hash ^= RedactionColor.GetHashCode();
          hash ^= (int) targetCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (targetCase_ == TargetOneofCase.InfoType) {
            output.WriteRawTag(10);
            output.WriteMessage(InfoType);
          }
          if (targetCase_ == TargetOneofCase.RedactAllText) {
            output.WriteRawTag(16);
            output.WriteBool(RedactAllText);
          }
          if (redactionColor_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(RedactionColor);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (targetCase_ == TargetOneofCase.InfoType) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoType);
          }
          if (targetCase_ == TargetOneofCase.RedactAllText) {
            size += 1 + 1;
          }
          if (redactionColor_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedactionColor);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ImageRedactionConfig other) {
          if (other == null) {
            return;
          }
          if (other.redactionColor_ != null) {
            if (redactionColor_ == null) {
              redactionColor_ = new global::Google.Cloud.Dlp.V2Beta2.Color();
            }
            RedactionColor.MergeFrom(other.RedactionColor);
          }
          switch (other.TargetCase) {
            case TargetOneofCase.InfoType:
              InfoType = other.InfoType;
              break;
            case TargetOneofCase.RedactAllText:
              RedactAllText = other.RedactAllText;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                global::Google.Cloud.Dlp.V2Beta2.InfoType subBuilder = new global::Google.Cloud.Dlp.V2Beta2.InfoType();
                if (targetCase_ == TargetOneofCase.InfoType) {
                  subBuilder.MergeFrom(InfoType);
                }
                input.ReadMessage(subBuilder);
                InfoType = subBuilder;
                break;
              }
              case 16: {
                RedactAllText = input.ReadBool();
                break;
              }
              case 26: {
                if (redactionColor_ == null) {
                  redactionColor_ = new global::Google.Cloud.Dlp.V2Beta2.Color();
                }
                input.ReadMessage(redactionColor_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Represents a color in the RGB color space.
  /// </summary>
  public sealed partial class Color : pb::IMessage<Color> {
    private static readonly pb::MessageParser<Color> _parser = new pb::MessageParser<Color>(() => new Color());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Color> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color(Color other) : this() {
      red_ = other.red_;
      green_ = other.green_;
      blue_ = other.blue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color Clone() {
      return new Color(this);
    }

    /// <summary>Field number for the "red" field.</summary>
    public const int RedFieldNumber = 1;
    private float red_;
    /// <summary>
    /// The amount of red in the color as a value in the interval [0, 1].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Red {
      get { return red_; }
      set {
        red_ = value;
      }
    }

    /// <summary>Field number for the "green" field.</summary>
    public const int GreenFieldNumber = 2;
    private float green_;
    /// <summary>
    /// The amount of green in the color as a value in the interval [0, 1].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Green {
      get { return green_; }
      set {
        green_ = value;
      }
    }

    /// <summary>Field number for the "blue" field.</summary>
    public const int BlueFieldNumber = 3;
    private float blue_;
    /// <summary>
    /// The amount of blue in the color as a value in the interval [0, 1].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Blue {
      get { return blue_; }
      set {
        blue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Color);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Color other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Red != other.Red) return false;
      if (Green != other.Green) return false;
      if (Blue != other.Blue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Red != 0F) hash ^= Red.GetHashCode();
      if (Green != 0F) hash ^= Green.GetHashCode();
      if (Blue != 0F) hash ^= Blue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Red != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Red);
      }
      if (Green != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Green);
      }
      if (Blue != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Blue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Red != 0F) {
        size += 1 + 4;
      }
      if (Green != 0F) {
        size += 1 + 4;
      }
      if (Blue != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Color other) {
      if (other == null) {
        return;
      }
      if (other.Red != 0F) {
        Red = other.Red;
      }
      if (other.Green != 0F) {
        Green = other.Green;
      }
      if (other.Blue != 0F) {
        Blue = other.Blue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Red = input.ReadFloat();
            break;
          }
          case 21: {
            Green = input.ReadFloat();
            break;
          }
          case 29: {
            Blue = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Results of redacting an image.
  /// </summary>
  public sealed partial class RedactImageResponse : pb::IMessage<RedactImageResponse> {
    private static readonly pb::MessageParser<RedactImageResponse> _parser = new pb::MessageParser<RedactImageResponse>(() => new RedactImageResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedactImageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedactImageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedactImageResponse(RedactImageResponse other) : this() {
      redactedImage_ = other.redactedImage_;
      extractedText_ = other.extractedText_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedactImageResponse Clone() {
      return new RedactImageResponse(this);
    }

    /// <summary>Field number for the "redacted_image" field.</summary>
    public const int RedactedImageFieldNumber = 1;
    private pb::ByteString redactedImage_ = pb::ByteString.Empty;
    /// <summary>
    /// The redacted image. The type will be the same as the original image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RedactedImage {
      get { return redactedImage_; }
      set {
        redactedImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extracted_text" field.</summary>
    public const int ExtractedTextFieldNumber = 2;
    private string extractedText_ = "";
    /// <summary>
    /// If an image was being inspected and the InspectConfig's include_quote was
    /// set to true, then this field will include all text, if any, that was found
    /// in the image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExtractedText {
      get { return extractedText_; }
      set {
        extractedText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedactImageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedactImageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RedactedImage != other.RedactedImage) return false;
      if (ExtractedText != other.ExtractedText) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RedactedImage.Length != 0) hash ^= RedactedImage.GetHashCode();
      if (ExtractedText.Length != 0) hash ^= ExtractedText.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RedactedImage.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RedactedImage);
      }
      if (ExtractedText.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ExtractedText);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RedactedImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RedactedImage);
      }
      if (ExtractedText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExtractedText);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedactImageResponse other) {
      if (other == null) {
        return;
      }
      if (other.RedactedImage.Length != 0) {
        RedactedImage = other.RedactedImage;
      }
      if (other.ExtractedText.Length != 0) {
        ExtractedText = other.ExtractedText;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RedactedImage = input.ReadBytes();
            break;
          }
          case 18: {
            ExtractedText = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to de-identify a list of items.
  /// </summary>
  public sealed partial class DeidentifyContentRequest : pb::IMessage<DeidentifyContentRequest> {
    private static readonly pb::MessageParser<DeidentifyContentRequest> _parser = new pb::MessageParser<DeidentifyContentRequest>(() => new DeidentifyContentRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeidentifyContentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeidentifyContentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeidentifyContentRequest(DeidentifyContentRequest other) : this() {
      parent_ = other.parent_;
      DeidentifyConfig = other.deidentifyConfig_ != null ? other.DeidentifyConfig.Clone() : null;
      InspectConfig = other.inspectConfig_ != null ? other.InspectConfig.Clone() : null;
      Item = other.item_ != null ? other.Item.Clone() : null;
      inspectTemplateName_ = other.inspectTemplateName_;
      deidentifyTemplateName_ = other.deidentifyTemplateName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeidentifyContentRequest Clone() {
      return new DeidentifyContentRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The parent resource name, for example projects/my-project-id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deidentify_config" field.</summary>
    public const int DeidentifyConfigFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta2.DeidentifyConfig deidentifyConfig_;
    /// <summary>
    /// Configuration for the de-identification of the content item.
    /// Items specified here will override the template referenced by the
    /// deidentify_template_name argument.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.DeidentifyConfig DeidentifyConfig {
      get { return deidentifyConfig_; }
      set {
        deidentifyConfig_ = value;
      }
    }

    /// <summary>Field number for the "inspect_config" field.</summary>
    public const int InspectConfigFieldNumber = 3;
    private global::Google.Cloud.Dlp.V2Beta2.InspectConfig inspectConfig_;
    /// <summary>
    /// Configuration for the inspector.
    /// Items specified here will override the template referenced by the
    /// inspect_template_name argument.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.InspectConfig InspectConfig {
      get { return inspectConfig_; }
      set {
        inspectConfig_ = value;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 4;
    private global::Google.Cloud.Dlp.V2Beta2.ContentItem item_;
    /// <summary>
    /// The item to de-identify. Will be treated as text.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.ContentItem Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "inspect_template_name" field.</summary>
    public const int InspectTemplateNameFieldNumber = 5;
    private string inspectTemplateName_ = "";
    /// <summary>
    /// Optional template to use. Any configuration directly specified in
    /// inspect_config will override those set in the template. Singular fields
    /// that are set in this request will replace their corresponding fields in the
    /// template. Repeated fields are appended. Singular sub-messages and groups
    /// are recursively merged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InspectTemplateName {
      get { return inspectTemplateName_; }
      set {
        inspectTemplateName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deidentify_template_name" field.</summary>
    public const int DeidentifyTemplateNameFieldNumber = 6;
    private string deidentifyTemplateName_ = "";
    /// <summary>
    /// Optional template to use. Any configuration directly specified in
    /// deidentify_config will override those set in the template. Singular fields
    /// that are set in this request will replace their corresponding fields in the
    /// template. Repeated fields are appended. Singular sub-messages and groups
    /// are recursively merged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeidentifyTemplateName {
      get { return deidentifyTemplateName_; }
      set {
        deidentifyTemplateName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeidentifyContentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeidentifyContentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (!object.Equals(DeidentifyConfig, other.DeidentifyConfig)) return false;
      if (!object.Equals(InspectConfig, other.InspectConfig)) return false;
      if (!object.Equals(Item, other.Item)) return false;
      if (InspectTemplateName != other.InspectTemplateName) return false;
      if (DeidentifyTemplateName != other.DeidentifyTemplateName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (deidentifyConfig_ != null) hash ^= DeidentifyConfig.GetHashCode();
      if (inspectConfig_ != null) hash ^= InspectConfig.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (InspectTemplateName.Length != 0) hash ^= InspectTemplateName.GetHashCode();
      if (DeidentifyTemplateName.Length != 0) hash ^= DeidentifyTemplateName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (deidentifyConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DeidentifyConfig);
      }
      if (inspectConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(InspectConfig);
      }
      if (item_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Item);
      }
      if (InspectTemplateName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(InspectTemplateName);
      }
      if (DeidentifyTemplateName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DeidentifyTemplateName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (deidentifyConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeidentifyConfig);
      }
      if (inspectConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InspectConfig);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (InspectTemplateName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InspectTemplateName);
      }
      if (DeidentifyTemplateName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeidentifyTemplateName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeidentifyContentRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.deidentifyConfig_ != null) {
        if (deidentifyConfig_ == null) {
          deidentifyConfig_ = new global::Google.Cloud.Dlp.V2Beta2.DeidentifyConfig();
        }
        DeidentifyConfig.MergeFrom(other.DeidentifyConfig);
      }
      if (other.inspectConfig_ != null) {
        if (inspectConfig_ == null) {
          inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta2.InspectConfig();
        }
        InspectConfig.MergeFrom(other.InspectConfig);
      }
      if (other.item_ != null) {
        if (item_ == null) {
          item_ = new global::Google.Cloud.Dlp.V2Beta2.ContentItem();
        }
        Item.MergeFrom(other.Item);
      }
      if (other.InspectTemplateName.Length != 0) {
        InspectTemplateName = other.InspectTemplateName;
      }
      if (other.DeidentifyTemplateName.Length != 0) {
        DeidentifyTemplateName = other.DeidentifyTemplateName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            if (deidentifyConfig_ == null) {
              deidentifyConfig_ = new global::Google.Cloud.Dlp.V2Beta2.DeidentifyConfig();
            }
            input.ReadMessage(deidentifyConfig_);
            break;
          }
          case 26: {
            if (inspectConfig_ == null) {
              inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta2.InspectConfig();
            }
            input.ReadMessage(inspectConfig_);
            break;
          }
          case 34: {
            if (item_ == null) {
              item_ = new global::Google.Cloud.Dlp.V2Beta2.ContentItem();
            }
            input.ReadMessage(item_);
            break;
          }
          case 42: {
            InspectTemplateName = input.ReadString();
            break;
          }
          case 50: {
            DeidentifyTemplateName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Results of de-identifying a ContentItem.
  /// </summary>
  public sealed partial class DeidentifyContentResponse : pb::IMessage<DeidentifyContentResponse> {
    private static readonly pb::MessageParser<DeidentifyContentResponse> _parser = new pb::MessageParser<DeidentifyContentResponse>(() => new DeidentifyContentResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeidentifyContentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeidentifyContentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeidentifyContentResponse(DeidentifyContentResponse other) : this() {
      Item = other.item_ != null ? other.Item.Clone() : null;
      Overview = other.overview_ != null ? other.Overview.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeidentifyContentResponse Clone() {
      return new DeidentifyContentResponse(this);
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta2.ContentItem item_;
    /// <summary>
    /// The de-identified item.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.ContentItem Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "overview" field.</summary>
    public const int OverviewFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta2.TransformationOverview overview_;
    /// <summary>
    /// An overview of the changes that were made on the `item`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.TransformationOverview Overview {
      get { return overview_; }
      set {
        overview_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeidentifyContentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeidentifyContentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Item, other.Item)) return false;
      if (!object.Equals(Overview, other.Overview)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (item_ != null) hash ^= Item.GetHashCode();
      if (overview_ != null) hash ^= Overview.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (item_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Item);
      }
      if (overview_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Overview);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (overview_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Overview);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeidentifyContentResponse other) {
      if (other == null) {
        return;
      }
      if (other.item_ != null) {
        if (item_ == null) {
          item_ = new global::Google.Cloud.Dlp.V2Beta2.ContentItem();
        }
        Item.MergeFrom(other.Item);
      }
      if (other.overview_ != null) {
        if (overview_ == null) {
          overview_ = new global::Google.Cloud.Dlp.V2Beta2.TransformationOverview();
        }
        Overview.MergeFrom(other.Overview);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (item_ == null) {
              item_ = new global::Google.Cloud.Dlp.V2Beta2.ContentItem();
            }
            input.ReadMessage(item_);
            break;
          }
          case 18: {
            if (overview_ == null) {
              overview_ = new global::Google.Cloud.Dlp.V2Beta2.TransformationOverview();
            }
            input.ReadMessage(overview_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to re-identify an item.
  /// </summary>
  public sealed partial class ReidentifyContentRequest : pb::IMessage<ReidentifyContentRequest> {
    private static readonly pb::MessageParser<ReidentifyContentRequest> _parser = new pb::MessageParser<ReidentifyContentRequest>(() => new ReidentifyContentRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReidentifyContentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReidentifyContentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReidentifyContentRequest(ReidentifyContentRequest other) : this() {
      parent_ = other.parent_;
      ReidentifyConfig = other.reidentifyConfig_ != null ? other.ReidentifyConfig.Clone() : null;
      InspectConfig = other.inspectConfig_ != null ? other.InspectConfig.Clone() : null;
      Item = other.item_ != null ? other.Item.Clone() : null;
      inspectTemplateName_ = other.inspectTemplateName_;
      reidentifyTemplateName_ = other.reidentifyTemplateName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReidentifyContentRequest Clone() {
      return new ReidentifyContentRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The parent resource name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reidentify_config" field.</summary>
    public const int ReidentifyConfigFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta2.DeidentifyConfig reidentifyConfig_;
    /// <summary>
    /// Configuration for the re-identification of the content item.
    /// This field shares the same proto message type that is used for
    /// de-identification, however its usage here is for the reversal of the
    /// previous de-identification. Re-identification is performed by examining
    /// the transformations used to de-identify the items and executing the
    /// reverse. This requires that only reversible transformations
    /// be provided here. The reversible transformations are:
    ///
    ///  - `CryptoReplaceFfxFpeConfig`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.DeidentifyConfig ReidentifyConfig {
      get { return reidentifyConfig_; }
      set {
        reidentifyConfig_ = value;
      }
    }

    /// <summary>Field number for the "inspect_config" field.</summary>
    public const int InspectConfigFieldNumber = 3;
    private global::Google.Cloud.Dlp.V2Beta2.InspectConfig inspectConfig_;
    /// <summary>
    /// Configuration for the inspector.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.InspectConfig InspectConfig {
      get { return inspectConfig_; }
      set {
        inspectConfig_ = value;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 4;
    private global::Google.Cloud.Dlp.V2Beta2.ContentItem item_;
    /// <summary>
    /// The item to re-identify. Will be treated as text.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.ContentItem Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "inspect_template_name" field.</summary>
    public const int InspectTemplateNameFieldNumber = 5;
    private string inspectTemplateName_ = "";
    /// <summary>
    /// Optional template to use. Any configuration directly specified in
    /// `inspect_config` will override those set in the template. Singular fields
    /// that are set in this request will replace their corresponding fields in the
    /// template. Repeated fields are appended. Singular sub-messages and groups
    /// are recursively merged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InspectTemplateName {
      get { return inspectTemplateName_; }
      set {
        inspectTemplateName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reidentify_template_name" field.</summary>
    public const int ReidentifyTemplateNameFieldNumber = 6;
    private string reidentifyTemplateName_ = "";
    /// <summary>
    /// Optional template to use. References an instance of `DeidentifyTemplate`.
    /// Any configuration directly specified in `reidentify_config` or
    /// `inspect_config` will override those set in the template. Singular fields
    /// that are set in this request will replace their corresponding fields in the
    /// template. Repeated fields are appended. Singular sub-messages and groups
    /// are recursively merged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReidentifyTemplateName {
      get { return reidentifyTemplateName_; }
      set {
        reidentifyTemplateName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReidentifyContentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReidentifyContentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (!object.Equals(ReidentifyConfig, other.ReidentifyConfig)) return false;
      if (!object.Equals(InspectConfig, other.InspectConfig)) return false;
      if (!object.Equals(Item, other.Item)) return false;
      if (InspectTemplateName != other.InspectTemplateName) return false;
      if (ReidentifyTemplateName != other.ReidentifyTemplateName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (reidentifyConfig_ != null) hash ^= ReidentifyConfig.GetHashCode();
      if (inspectConfig_ != null) hash ^= InspectConfig.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (InspectTemplateName.Length != 0) hash ^= InspectTemplateName.GetHashCode();
      if (ReidentifyTemplateName.Length != 0) hash ^= ReidentifyTemplateName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (reidentifyConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ReidentifyConfig);
      }
      if (inspectConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(InspectConfig);
      }
      if (item_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Item);
      }
      if (InspectTemplateName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(InspectTemplateName);
      }
      if (ReidentifyTemplateName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ReidentifyTemplateName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (reidentifyConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReidentifyConfig);
      }
      if (inspectConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InspectConfig);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (InspectTemplateName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InspectTemplateName);
      }
      if (ReidentifyTemplateName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReidentifyTemplateName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReidentifyContentRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.reidentifyConfig_ != null) {
        if (reidentifyConfig_ == null) {
          reidentifyConfig_ = new global::Google.Cloud.Dlp.V2Beta2.DeidentifyConfig();
        }
        ReidentifyConfig.MergeFrom(other.ReidentifyConfig);
      }
      if (other.inspectConfig_ != null) {
        if (inspectConfig_ == null) {
          inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta2.InspectConfig();
        }
        InspectConfig.MergeFrom(other.InspectConfig);
      }
      if (other.item_ != null) {
        if (item_ == null) {
          item_ = new global::Google.Cloud.Dlp.V2Beta2.ContentItem();
        }
        Item.MergeFrom(other.Item);
      }
      if (other.InspectTemplateName.Length != 0) {
        InspectTemplateName = other.InspectTemplateName;
      }
      if (other.ReidentifyTemplateName.Length != 0) {
        ReidentifyTemplateName = other.ReidentifyTemplateName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            if (reidentifyConfig_ == null) {
              reidentifyConfig_ = new global::Google.Cloud.Dlp.V2Beta2.DeidentifyConfig();
            }
            input.ReadMessage(reidentifyConfig_);
            break;
          }
          case 26: {
            if (inspectConfig_ == null) {
              inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta2.InspectConfig();
            }
            input.ReadMessage(inspectConfig_);
            break;
          }
          case 34: {
            if (item_ == null) {
              item_ = new global::Google.Cloud.Dlp.V2Beta2.ContentItem();
            }
            input.ReadMessage(item_);
            break;
          }
          case 42: {
            InspectTemplateName = input.ReadString();
            break;
          }
          case 50: {
            ReidentifyTemplateName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Results of re-identifying a item.
  /// </summary>
  public sealed partial class ReidentifyContentResponse : pb::IMessage<ReidentifyContentResponse> {
    private static readonly pb::MessageParser<ReidentifyContentResponse> _parser = new pb::MessageParser<ReidentifyContentResponse>(() => new ReidentifyContentResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReidentifyContentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReidentifyContentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReidentifyContentResponse(ReidentifyContentResponse other) : this() {
      Item = other.item_ != null ? other.Item.Clone() : null;
      Overview = other.overview_ != null ? other.Overview.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReidentifyContentResponse Clone() {
      return new ReidentifyContentResponse(this);
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta2.ContentItem item_;
    /// <summary>
    /// The re-identified item.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.ContentItem Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "overview" field.</summary>
    public const int OverviewFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta2.TransformationOverview overview_;
    /// <summary>
    /// An overview of the changes that were made to the `item`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.TransformationOverview Overview {
      get { return overview_; }
      set {
        overview_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReidentifyContentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReidentifyContentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Item, other.Item)) return false;
      if (!object.Equals(Overview, other.Overview)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (item_ != null) hash ^= Item.GetHashCode();
      if (overview_ != null) hash ^= Overview.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (item_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Item);
      }
      if (overview_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Overview);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (overview_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Overview);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReidentifyContentResponse other) {
      if (other == null) {
        return;
      }
      if (other.item_ != null) {
        if (item_ == null) {
          item_ = new global::Google.Cloud.Dlp.V2Beta2.ContentItem();
        }
        Item.MergeFrom(other.Item);
      }
      if (other.overview_ != null) {
        if (overview_ == null) {
          overview_ = new global::Google.Cloud.Dlp.V2Beta2.TransformationOverview();
        }
        Overview.MergeFrom(other.Overview);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (item_ == null) {
              item_ = new global::Google.Cloud.Dlp.V2Beta2.ContentItem();
            }
            input.ReadMessage(item_);
            break;
          }
          case 18: {
            if (overview_ == null) {
              overview_ = new global::Google.Cloud.Dlp.V2Beta2.TransformationOverview();
            }
            input.ReadMessage(overview_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to search for potentially sensitive info in a ContentItem.
  /// </summary>
  public sealed partial class InspectContentRequest : pb::IMessage<InspectContentRequest> {
    private static readonly pb::MessageParser<InspectContentRequest> _parser = new pb::MessageParser<InspectContentRequest>(() => new InspectContentRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InspectContentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectContentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectContentRequest(InspectContentRequest other) : this() {
      parent_ = other.parent_;
      InspectConfig = other.inspectConfig_ != null ? other.InspectConfig.Clone() : null;
      Item = other.item_ != null ? other.Item.Clone() : null;
      inspectTemplateName_ = other.inspectTemplateName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectContentRequest Clone() {
      return new InspectContentRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The parent resource name, for example projects/my-project-id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inspect_config" field.</summary>
    public const int InspectConfigFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta2.InspectConfig inspectConfig_;
    /// <summary>
    /// Configuration for the inspector. What specified here will override
    /// the template referenced by the inspect_template_name argument.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.InspectConfig InspectConfig {
      get { return inspectConfig_; }
      set {
        inspectConfig_ = value;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 3;
    private global::Google.Cloud.Dlp.V2Beta2.ContentItem item_;
    /// <summary>
    /// The item to inspect.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.ContentItem Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "inspect_template_name" field.</summary>
    public const int InspectTemplateNameFieldNumber = 4;
    private string inspectTemplateName_ = "";
    /// <summary>
    /// Optional template to use. Any configuration directly specified in
    /// inspect_config will override those set in the template. Singular fields
    /// that are set in this request will replace their corresponding fields in the
    /// template. Repeated fields are appended. Singular sub-messages and groups
    /// are recursively merged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InspectTemplateName {
      get { return inspectTemplateName_; }
      set {
        inspectTemplateName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InspectContentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InspectContentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (!object.Equals(InspectConfig, other.InspectConfig)) return false;
      if (!object.Equals(Item, other.Item)) return false;
      if (InspectTemplateName != other.InspectTemplateName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (inspectConfig_ != null) hash ^= InspectConfig.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (InspectTemplateName.Length != 0) hash ^= InspectTemplateName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (inspectConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(InspectConfig);
      }
      if (item_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Item);
      }
      if (InspectTemplateName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(InspectTemplateName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (inspectConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InspectConfig);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (InspectTemplateName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InspectTemplateName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InspectContentRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.inspectConfig_ != null) {
        if (inspectConfig_ == null) {
          inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta2.InspectConfig();
        }
        InspectConfig.MergeFrom(other.InspectConfig);
      }
      if (other.item_ != null) {
        if (item_ == null) {
          item_ = new global::Google.Cloud.Dlp.V2Beta2.ContentItem();
        }
        Item.MergeFrom(other.Item);
      }
      if (other.InspectTemplateName.Length != 0) {
        InspectTemplateName = other.InspectTemplateName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            if (inspectConfig_ == null) {
              inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta2.InspectConfig();
            }
            input.ReadMessage(inspectConfig_);
            break;
          }
          case 26: {
            if (item_ == null) {
              item_ = new global::Google.Cloud.Dlp.V2Beta2.ContentItem();
            }
            input.ReadMessage(item_);
            break;
          }
          case 34: {
            InspectTemplateName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Results of inspecting an item.
  /// </summary>
  public sealed partial class InspectContentResponse : pb::IMessage<InspectContentResponse> {
    private static readonly pb::MessageParser<InspectContentResponse> _parser = new pb::MessageParser<InspectContentResponse>(() => new InspectContentResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InspectContentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectContentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectContentResponse(InspectContentResponse other) : this() {
      Result = other.result_ != null ? other.Result.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectContentResponse Clone() {
      return new InspectContentResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta2.InspectResult result_;
    /// <summary>
    /// The findings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.InspectResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InspectContentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InspectContentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Result, other.Result)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (result_ != null) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (result_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InspectContentResponse other) {
      if (other == null) {
        return;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          result_ = new global::Google.Cloud.Dlp.V2Beta2.InspectResult();
        }
        Result.MergeFrom(other.Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (result_ == null) {
              result_ = new global::Google.Cloud.Dlp.V2Beta2.InspectResult();
            }
            input.ReadMessage(result_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request for scheduling a scan of a data subset from a Google Platform data
  /// repository.
  /// </summary>
  public sealed partial class InspectDataSourceRequest : pb::IMessage<InspectDataSourceRequest> {
    private static readonly pb::MessageParser<InspectDataSourceRequest> _parser = new pb::MessageParser<InspectDataSourceRequest>(() => new InspectDataSourceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InspectDataSourceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectDataSourceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectDataSourceRequest(InspectDataSourceRequest other) : this() {
      parent_ = other.parent_;
      JobConfig = other.jobConfig_ != null ? other.JobConfig.Clone() : null;
      jobId_ = other.jobId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectDataSourceRequest Clone() {
      return new InspectDataSourceRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The parent resource name, for example projects/my-project-id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "job_config" field.</summary>
    public const int JobConfigFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta2.InspectJobConfig jobConfig_;
    /// <summary>
    /// A configuration for the job.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.InspectJobConfig JobConfig {
      get { return jobConfig_; }
      set {
        jobConfig_ = value;
      }
    }

    /// <summary>Field number for the "job_id" field.</summary>
    public const int JobIdFieldNumber = 3;
    private string jobId_ = "";
    /// <summary>
    /// Optional job ID to use for the created job. If not provided, a job ID will
    /// automatically be generated. Must be unique within the project. The job ID
    /// can contain uppercase and lowercase letters, numbers, and hyphens; that is,
    /// it must match the regular expression: `[a-zA-Z\\d-]+`. The maximum length
    /// is 100 characters. Can be empty to allow the system to generate one.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JobId {
      get { return jobId_; }
      set {
        jobId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InspectDataSourceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InspectDataSourceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (!object.Equals(JobConfig, other.JobConfig)) return false;
      if (JobId != other.JobId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (jobConfig_ != null) hash ^= JobConfig.GetHashCode();
      if (JobId.Length != 0) hash ^= JobId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (jobConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(JobConfig);
      }
      if (JobId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(JobId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (jobConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JobConfig);
      }
      if (JobId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JobId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InspectDataSourceRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.jobConfig_ != null) {
        if (jobConfig_ == null) {
          jobConfig_ = new global::Google.Cloud.Dlp.V2Beta2.InspectJobConfig();
        }
        JobConfig.MergeFrom(other.JobConfig);
      }
      if (other.JobId.Length != 0) {
        JobId = other.JobId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            if (jobConfig_ == null) {
              jobConfig_ = new global::Google.Cloud.Dlp.V2Beta2.InspectJobConfig();
            }
            input.ReadMessage(jobConfig_);
            break;
          }
          case 26: {
            JobId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Cloud repository for storing output.
  /// </summary>
  public sealed partial class OutputStorageConfig : pb::IMessage<OutputStorageConfig> {
    private static readonly pb::MessageParser<OutputStorageConfig> _parser = new pb::MessageParser<OutputStorageConfig>(() => new OutputStorageConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutputStorageConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputStorageConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputStorageConfig(OutputStorageConfig other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.Table:
          Table = other.Table.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputStorageConfig Clone() {
      return new OutputStorageConfig(this);
    }

    /// <summary>Field number for the "table" field.</summary>
    public const int TableFieldNumber = 1;
    /// <summary>
    /// Store findings in a new table in an existing dataset. If table_id is not
    /// set a new one will be generated for you with the following format:
    /// dlp_googleapis_yyyy_mm_dd_[dlp_job_id]. Pacific timezone will be used for
    /// generating the date details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.BigQueryTable Table {
      get { return typeCase_ == TypeOneofCase.Table ? (global::Google.Cloud.Dlp.V2Beta2.BigQueryTable) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Table;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Table = 1,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OutputStorageConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutputStorageConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Table, other.Table)) return false;
      if (TypeCase != other.TypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.Table) hash ^= Table.GetHashCode();
      hash ^= (int) typeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.Table) {
        output.WriteRawTag(10);
        output.WriteMessage(Table);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.Table) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Table);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutputStorageConfig other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Table:
          Table = other.Table;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Cloud.Dlp.V2Beta2.BigQueryTable subBuilder = new global::Google.Cloud.Dlp.V2Beta2.BigQueryTable();
            if (typeCase_ == TypeOneofCase.Table) {
              subBuilder.MergeFrom(Table);
            }
            input.ReadMessage(subBuilder);
            Table = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Statistics regarding a specific InfoType.
  /// </summary>
  public sealed partial class InfoTypeStatistics : pb::IMessage<InfoTypeStatistics> {
    private static readonly pb::MessageParser<InfoTypeStatistics> _parser = new pb::MessageParser<InfoTypeStatistics>(() => new InfoTypeStatistics());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InfoTypeStatistics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTypeStatistics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTypeStatistics(InfoTypeStatistics other) : this() {
      InfoType = other.infoType_ != null ? other.InfoType.Clone() : null;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTypeStatistics Clone() {
      return new InfoTypeStatistics(this);
    }

    /// <summary>Field number for the "info_type" field.</summary>
    public const int InfoTypeFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta2.InfoType infoType_;
    /// <summary>
    /// The type of finding this stat is for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.InfoType InfoType {
      get { return infoType_; }
      set {
        infoType_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private long count_;
    /// <summary>
    /// Number of findings for this infoType.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InfoTypeStatistics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InfoTypeStatistics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InfoType, other.InfoType)) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (infoType_ != null) hash ^= InfoType.GetHashCode();
      if (Count != 0L) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (infoType_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InfoType);
      }
      if (Count != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (infoType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoType);
      }
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InfoTypeStatistics other) {
      if (other == null) {
        return;
      }
      if (other.infoType_ != null) {
        if (infoType_ == null) {
          infoType_ = new global::Google.Cloud.Dlp.V2Beta2.InfoType();
        }
        InfoType.MergeFrom(other.InfoType);
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (infoType_ == null) {
              infoType_ = new global::Google.Cloud.Dlp.V2Beta2.InfoType();
            }
            input.ReadMessage(infoType_);
            break;
          }
          case 16: {
            Count = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The results of an inspect DataSource job.
  /// </summary>
  public sealed partial class InspectDataSourceDetails : pb::IMessage<InspectDataSourceDetails> {
    private static readonly pb::MessageParser<InspectDataSourceDetails> _parser = new pb::MessageParser<InspectDataSourceDetails>(() => new InspectDataSourceDetails());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InspectDataSourceDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectDataSourceDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectDataSourceDetails(InspectDataSourceDetails other) : this() {
      RequestedOptions = other.requestedOptions_ != null ? other.RequestedOptions.Clone() : null;
      Result = other.result_ != null ? other.Result.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectDataSourceDetails Clone() {
      return new InspectDataSourceDetails(this);
    }

    /// <summary>Field number for the "requested_options" field.</summary>
    public const int RequestedOptionsFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta2.InspectDataSourceDetails.Types.RequestedOptions requestedOptions_;
    /// <summary>
    /// The configuration used for this job.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.InspectDataSourceDetails.Types.RequestedOptions RequestedOptions {
      get { return requestedOptions_; }
      set {
        requestedOptions_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private global::Google.Cloud.Dlp.V2Beta2.InspectDataSourceDetails.Types.Result result_;
    /// <summary>
    /// A summary of the outcome of this inspect job.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.InspectDataSourceDetails.Types.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InspectDataSourceDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InspectDataSourceDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RequestedOptions, other.RequestedOptions)) return false;
      if (!object.Equals(Result, other.Result)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestedOptions_ != null) hash ^= RequestedOptions.GetHashCode();
      if (result_ != null) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (requestedOptions_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RequestedOptions);
      }
      if (result_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestedOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestedOptions);
      }
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InspectDataSourceDetails other) {
      if (other == null) {
        return;
      }
      if (other.requestedOptions_ != null) {
        if (requestedOptions_ == null) {
          requestedOptions_ = new global::Google.Cloud.Dlp.V2Beta2.InspectDataSourceDetails.Types.RequestedOptions();
        }
        RequestedOptions.MergeFrom(other.RequestedOptions);
      }
      if (other.result_ != null) {
        if (result_ == null) {
          result_ = new global::Google.Cloud.Dlp.V2Beta2.InspectDataSourceDetails.Types.Result();
        }
        Result.MergeFrom(other.Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (requestedOptions_ == null) {
              requestedOptions_ = new global::Google.Cloud.Dlp.V2Beta2.InspectDataSourceDetails.Types.RequestedOptions();
            }
            input.ReadMessage(requestedOptions_);
            break;
          }
          case 26: {
            if (result_ == null) {
              result_ = new global::Google.Cloud.Dlp.V2Beta2.InspectDataSourceDetails.Types.Result();
            }
            input.ReadMessage(result_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the InspectDataSourceDetails message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class RequestedOptions : pb::IMessage<RequestedOptions> {
        private static readonly pb::MessageParser<RequestedOptions> _parser = new pb::MessageParser<RequestedOptions>(() => new RequestedOptions());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequestedOptions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta2.InspectDataSourceDetails.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestedOptions() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestedOptions(RequestedOptions other) : this() {
          SnapshotInspectTemplate = other.snapshotInspectTemplate_ != null ? other.SnapshotInspectTemplate.Clone() : null;
          JobConfig = other.jobConfig_ != null ? other.JobConfig.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequestedOptions Clone() {
          return new RequestedOptions(this);
        }

        /// <summary>Field number for the "snapshot_inspect_template" field.</summary>
        public const int SnapshotInspectTemplateFieldNumber = 1;
        private global::Google.Cloud.Dlp.V2Beta2.InspectTemplate snapshotInspectTemplate_;
        /// <summary>
        /// If run with an inspect template, a snapshot of it's state at the time of
        /// this run.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta2.InspectTemplate SnapshotInspectTemplate {
          get { return snapshotInspectTemplate_; }
          set {
            snapshotInspectTemplate_ = value;
          }
        }

        /// <summary>Field number for the "job_config" field.</summary>
        public const int JobConfigFieldNumber = 3;
        private global::Google.Cloud.Dlp.V2Beta2.InspectJobConfig jobConfig_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta2.InspectJobConfig JobConfig {
          get { return jobConfig_; }
          set {
            jobConfig_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RequestedOptions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequestedOptions other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(SnapshotInspectTemplate, other.SnapshotInspectTemplate)) return false;
          if (!object.Equals(JobConfig, other.JobConfig)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (snapshotInspectTemplate_ != null) hash ^= SnapshotInspectTemplate.GetHashCode();
          if (jobConfig_ != null) hash ^= JobConfig.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (snapshotInspectTemplate_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(SnapshotInspectTemplate);
          }
          if (jobConfig_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(JobConfig);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (snapshotInspectTemplate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SnapshotInspectTemplate);
          }
          if (jobConfig_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(JobConfig);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequestedOptions other) {
          if (other == null) {
            return;
          }
          if (other.snapshotInspectTemplate_ != null) {
            if (snapshotInspectTemplate_ == null) {
              snapshotInspectTemplate_ = new global::Google.Cloud.Dlp.V2Beta2.InspectTemplate();
            }
            SnapshotInspectTemplate.MergeFrom(other.SnapshotInspectTemplate);
          }
          if (other.jobConfig_ != null) {
            if (jobConfig_ == null) {
              jobConfig_ = new global::Google.Cloud.Dlp.V2Beta2.InspectJobConfig();
            }
            JobConfig.MergeFrom(other.JobConfig);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (snapshotInspectTemplate_ == null) {
                  snapshotInspectTemplate_ = new global::Google.Cloud.Dlp.V2Beta2.InspectTemplate();
                }
                input.ReadMessage(snapshotInspectTemplate_);
                break;
              }
              case 26: {
                if (jobConfig_ == null) {
                  jobConfig_ = new global::Google.Cloud.Dlp.V2Beta2.InspectJobConfig();
                }
                input.ReadMessage(jobConfig_);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Result : pb::IMessage<Result> {
        private static readonly pb::MessageParser<Result> _parser = new pb::MessageParser<Result>(() => new Result());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Result> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta2.InspectDataSourceDetails.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Result() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Result(Result other) : this() {
          processedBytes_ = other.processedBytes_;
          totalEstimatedBytes_ = other.totalEstimatedBytes_;
          infoTypeStats_ = other.infoTypeStats_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Result Clone() {
          return new Result(this);
        }

        /// <summary>Field number for the "processed_bytes" field.</summary>
        public const int ProcessedBytesFieldNumber = 1;
        private long processedBytes_;
        /// <summary>
        /// Total size in bytes that were processed.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ProcessedBytes {
          get { return processedBytes_; }
          set {
            processedBytes_ = value;
          }
        }

        /// <summary>Field number for the "total_estimated_bytes" field.</summary>
        public const int TotalEstimatedBytesFieldNumber = 2;
        private long totalEstimatedBytes_;
        /// <summary>
        /// Estimate of the number of bytes to process.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long TotalEstimatedBytes {
          get { return totalEstimatedBytes_; }
          set {
            totalEstimatedBytes_ = value;
          }
        }

        /// <summary>Field number for the "info_type_stats" field.</summary>
        public const int InfoTypeStatsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.InfoTypeStatistics> _repeated_infoTypeStats_codec
            = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Dlp.V2Beta2.InfoTypeStatistics.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.InfoTypeStatistics> infoTypeStats_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.InfoTypeStatistics>();
        /// <summary>
        /// Statistics of how many instances of each info type were found during
        /// inspect job.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.InfoTypeStatistics> InfoTypeStats {
          get { return infoTypeStats_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Result);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Result other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ProcessedBytes != other.ProcessedBytes) return false;
          if (TotalEstimatedBytes != other.TotalEstimatedBytes) return false;
          if(!infoTypeStats_.Equals(other.infoTypeStats_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ProcessedBytes != 0L) hash ^= ProcessedBytes.GetHashCode();
          if (TotalEstimatedBytes != 0L) hash ^= TotalEstimatedBytes.GetHashCode();
          hash ^= infoTypeStats_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ProcessedBytes != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(ProcessedBytes);
          }
          if (TotalEstimatedBytes != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(TotalEstimatedBytes);
          }
          infoTypeStats_.WriteTo(output, _repeated_infoTypeStats_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ProcessedBytes != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProcessedBytes);
          }
          if (TotalEstimatedBytes != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalEstimatedBytes);
          }
          size += infoTypeStats_.CalculateSize(_repeated_infoTypeStats_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Result other) {
          if (other == null) {
            return;
          }
          if (other.ProcessedBytes != 0L) {
            ProcessedBytes = other.ProcessedBytes;
          }
          if (other.TotalEstimatedBytes != 0L) {
            TotalEstimatedBytes = other.TotalEstimatedBytes;
          }
          infoTypeStats_.Add(other.infoTypeStats_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                ProcessedBytes = input.ReadInt64();
                break;
              }
              case 16: {
                TotalEstimatedBytes = input.ReadInt64();
                break;
              }
              case 26: {
                infoTypeStats_.AddEntriesFrom(input, _repeated_infoTypeStats_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// InfoType description.
  /// </summary>
  public sealed partial class InfoTypeDescription : pb::IMessage<InfoTypeDescription> {
    private static readonly pb::MessageParser<InfoTypeDescription> _parser = new pb::MessageParser<InfoTypeDescription>(() => new InfoTypeDescription());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InfoTypeDescription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTypeDescription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTypeDescription(InfoTypeDescription other) : this() {
      name_ = other.name_;
      displayName_ = other.displayName_;
      supportedBy_ = other.supportedBy_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTypeDescription Clone() {
      return new InfoTypeDescription(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Internal name of the infoType.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 2;
    private string displayName_ = "";
    /// <summary>
    /// Human readable form of the infoType name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "supported_by" field.</summary>
    public const int SupportedByFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.InfoTypeSupportedBy> _repeated_supportedBy_codec
        = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::Google.Cloud.Dlp.V2Beta2.InfoTypeSupportedBy) x);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.InfoTypeSupportedBy> supportedBy_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.InfoTypeSupportedBy>();
    /// <summary>
    /// Which parts of the API supports this InfoType.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.InfoTypeSupportedBy> SupportedBy {
      get { return supportedBy_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InfoTypeDescription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InfoTypeDescription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (DisplayName != other.DisplayName) return false;
      if(!supportedBy_.Equals(other.supportedBy_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      hash ^= supportedBy_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayName);
      }
      supportedBy_.WriteTo(output, _repeated_supportedBy_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      size += supportedBy_.CalculateSize(_repeated_supportedBy_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InfoTypeDescription other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      supportedBy_.Add(other.supportedBy_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            DisplayName = input.ReadString();
            break;
          }
          case 26:
          case 24: {
            supportedBy_.AddEntriesFrom(input, _repeated_supportedBy_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request for the list of infoTypes.
  /// </summary>
  public sealed partial class ListInfoTypesRequest : pb::IMessage<ListInfoTypesRequest> {
    private static readonly pb::MessageParser<ListInfoTypesRequest> _parser = new pb::MessageParser<ListInfoTypesRequest>(() => new ListInfoTypesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListInfoTypesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInfoTypesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInfoTypesRequest(ListInfoTypesRequest other) : this() {
      languageCode_ = other.languageCode_;
      filter_ = other.filter_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInfoTypesRequest Clone() {
      return new ListInfoTypesRequest(this);
    }

    /// <summary>Field number for the "language_code" field.</summary>
    public const int LanguageCodeFieldNumber = 1;
    private string languageCode_ = "";
    /// <summary>
    /// Optional BCP-47 language code for localized infoType friendly
    /// names. If omitted, or if localized strings are not available,
    /// en-US strings will be returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LanguageCode {
      get { return languageCode_; }
      set {
        languageCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 2;
    private string filter_ = "";
    /// <summary>
    /// Optional filter to only return infoTypes supported by certain parts of the
    /// API. Defaults to supported_by=INSPECT.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListInfoTypesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListInfoTypesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LanguageCode != other.LanguageCode) return false;
      if (Filter != other.Filter) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LanguageCode.Length != 0) hash ^= LanguageCode.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LanguageCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LanguageCode);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Filter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LanguageCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LanguageCode);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListInfoTypesRequest other) {
      if (other == null) {
        return;
      }
      if (other.LanguageCode.Length != 0) {
        LanguageCode = other.LanguageCode;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LanguageCode = input.ReadString();
            break;
          }
          case 18: {
            Filter = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response to the ListInfoTypes request.
  /// </summary>
  public sealed partial class ListInfoTypesResponse : pb::IMessage<ListInfoTypesResponse> {
    private static readonly pb::MessageParser<ListInfoTypesResponse> _parser = new pb::MessageParser<ListInfoTypesResponse>(() => new ListInfoTypesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListInfoTypesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInfoTypesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInfoTypesResponse(ListInfoTypesResponse other) : this() {
      infoTypes_ = other.infoTypes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInfoTypesResponse Clone() {
      return new ListInfoTypesResponse(this);
    }

    /// <summary>Field number for the "info_types" field.</summary>
    public const int InfoTypesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.InfoTypeDescription> _repeated_infoTypes_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta2.InfoTypeDescription.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.InfoTypeDescription> infoTypes_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.InfoTypeDescription>();
    /// <summary>
    /// Set of sensitive infoTypes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.InfoTypeDescription> InfoTypes {
      get { return infoTypes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListInfoTypesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListInfoTypesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!infoTypes_.Equals(other.infoTypes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= infoTypes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infoTypes_.WriteTo(output, _repeated_infoTypes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infoTypes_.CalculateSize(_repeated_infoTypes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListInfoTypesResponse other) {
      if (other == null) {
        return;
      }
      infoTypes_.Add(other.infoTypes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infoTypes_.AddEntriesFrom(input, _repeated_infoTypes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request for creating a risk analysis DlpJob.
  /// </summary>
  public sealed partial class AnalyzeDataSourceRiskRequest : pb::IMessage<AnalyzeDataSourceRiskRequest> {
    private static readonly pb::MessageParser<AnalyzeDataSourceRiskRequest> _parser = new pb::MessageParser<AnalyzeDataSourceRiskRequest>(() => new AnalyzeDataSourceRiskRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnalyzeDataSourceRiskRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeDataSourceRiskRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeDataSourceRiskRequest(AnalyzeDataSourceRiskRequest other) : this() {
      parent_ = other.parent_;
      JobConfig = other.jobConfig_ != null ? other.JobConfig.Clone() : null;
      jobId_ = other.jobId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeDataSourceRiskRequest Clone() {
      return new AnalyzeDataSourceRiskRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The parent resource name, for example projects/my-project-id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "job_config" field.</summary>
    public const int JobConfigFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta2.RiskAnalysisJobConfig jobConfig_;
    /// <summary>
    /// Configuration for this risk analysis job.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.RiskAnalysisJobConfig JobConfig {
      get { return jobConfig_; }
      set {
        jobConfig_ = value;
      }
    }

    /// <summary>Field number for the "job_id" field.</summary>
    public const int JobIdFieldNumber = 3;
    private string jobId_ = "";
    /// <summary>
    /// Optional job ID to use for the created job. If not provided, a job ID will
    /// automatically be generated. Must be unique within the project. The job ID
    /// can contain uppercase and lowercase letters, numbers, and hyphens; that is,
    /// it must match the regular expression: `[a-zA-Z\\d-]+`. The maximum length
    /// is 100 characters. Can be empty to allow the system to generate one.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JobId {
      get { return jobId_; }
      set {
        jobId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnalyzeDataSourceRiskRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnalyzeDataSourceRiskRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (!object.Equals(JobConfig, other.JobConfig)) return false;
      if (JobId != other.JobId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (jobConfig_ != null) hash ^= JobConfig.GetHashCode();
      if (JobId.Length != 0) hash ^= JobId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (jobConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(JobConfig);
      }
      if (JobId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(JobId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (jobConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JobConfig);
      }
      if (JobId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JobId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnalyzeDataSourceRiskRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.jobConfig_ != null) {
        if (jobConfig_ == null) {
          jobConfig_ = new global::Google.Cloud.Dlp.V2Beta2.RiskAnalysisJobConfig();
        }
        JobConfig.MergeFrom(other.JobConfig);
      }
      if (other.JobId.Length != 0) {
        JobId = other.JobId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            if (jobConfig_ == null) {
              jobConfig_ = new global::Google.Cloud.Dlp.V2Beta2.RiskAnalysisJobConfig();
            }
            input.ReadMessage(jobConfig_);
            break;
          }
          case 26: {
            JobId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Configuration for a risk analysis job.
  /// </summary>
  public sealed partial class RiskAnalysisJobConfig : pb::IMessage<RiskAnalysisJobConfig> {
    private static readonly pb::MessageParser<RiskAnalysisJobConfig> _parser = new pb::MessageParser<RiskAnalysisJobConfig>(() => new RiskAnalysisJobConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RiskAnalysisJobConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RiskAnalysisJobConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RiskAnalysisJobConfig(RiskAnalysisJobConfig other) : this() {
      PrivacyMetric = other.privacyMetric_ != null ? other.PrivacyMetric.Clone() : null;
      SourceTable = other.sourceTable_ != null ? other.SourceTable.Clone() : null;
      actions_ = other.actions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RiskAnalysisJobConfig Clone() {
      return new RiskAnalysisJobConfig(this);
    }

    /// <summary>Field number for the "privacy_metric" field.</summary>
    public const int PrivacyMetricFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric privacyMetric_;
    /// <summary>
    /// Privacy metric to compute.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric PrivacyMetric {
      get { return privacyMetric_; }
      set {
        privacyMetric_ = value;
      }
    }

    /// <summary>Field number for the "source_table" field.</summary>
    public const int SourceTableFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta2.BigQueryTable sourceTable_;
    /// <summary>
    /// Input dataset to compute metrics over.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.BigQueryTable SourceTable {
      get { return sourceTable_; }
      set {
        sourceTable_ = value;
      }
    }

    /// <summary>Field number for the "actions" field.</summary>
    public const int ActionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.Action> _repeated_actions_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Dlp.V2Beta2.Action.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Action> actions_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Action>();
    /// <summary>
    /// Actions to execute at the completion of the job. Are executed in the order
    /// provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Action> Actions {
      get { return actions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RiskAnalysisJobConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RiskAnalysisJobConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PrivacyMetric, other.PrivacyMetric)) return false;
      if (!object.Equals(SourceTable, other.SourceTable)) return false;
      if(!actions_.Equals(other.actions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (privacyMetric_ != null) hash ^= PrivacyMetric.GetHashCode();
      if (sourceTable_ != null) hash ^= SourceTable.GetHashCode();
      hash ^= actions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (privacyMetric_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PrivacyMetric);
      }
      if (sourceTable_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SourceTable);
      }
      actions_.WriteTo(output, _repeated_actions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (privacyMetric_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrivacyMetric);
      }
      if (sourceTable_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceTable);
      }
      size += actions_.CalculateSize(_repeated_actions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RiskAnalysisJobConfig other) {
      if (other == null) {
        return;
      }
      if (other.privacyMetric_ != null) {
        if (privacyMetric_ == null) {
          privacyMetric_ = new global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric();
        }
        PrivacyMetric.MergeFrom(other.PrivacyMetric);
      }
      if (other.sourceTable_ != null) {
        if (sourceTable_ == null) {
          sourceTable_ = new global::Google.Cloud.Dlp.V2Beta2.BigQueryTable();
        }
        SourceTable.MergeFrom(other.SourceTable);
      }
      actions_.Add(other.actions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (privacyMetric_ == null) {
              privacyMetric_ = new global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric();
            }
            input.ReadMessage(privacyMetric_);
            break;
          }
          case 18: {
            if (sourceTable_ == null) {
              sourceTable_ = new global::Google.Cloud.Dlp.V2Beta2.BigQueryTable();
            }
            input.ReadMessage(sourceTable_);
            break;
          }
          case 26: {
            actions_.AddEntriesFrom(input, _repeated_actions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Privacy metric to compute for reidentification risk analysis.
  /// </summary>
  public sealed partial class PrivacyMetric : pb::IMessage<PrivacyMetric> {
    private static readonly pb::MessageParser<PrivacyMetric> _parser = new pb::MessageParser<PrivacyMetric>(() => new PrivacyMetric());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrivacyMetric> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrivacyMetric() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrivacyMetric(PrivacyMetric other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.NumericalStatsConfig:
          NumericalStatsConfig = other.NumericalStatsConfig.Clone();
          break;
        case TypeOneofCase.CategoricalStatsConfig:
          CategoricalStatsConfig = other.CategoricalStatsConfig.Clone();
          break;
        case TypeOneofCase.KAnonymityConfig:
          KAnonymityConfig = other.KAnonymityConfig.Clone();
          break;
        case TypeOneofCase.LDiversityConfig:
          LDiversityConfig = other.LDiversityConfig.Clone();
          break;
        case TypeOneofCase.KMapEstimationConfig:
          KMapEstimationConfig = other.KMapEstimationConfig.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrivacyMetric Clone() {
      return new PrivacyMetric(this);
    }

    /// <summary>Field number for the "numerical_stats_config" field.</summary>
    public const int NumericalStatsConfigFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.NumericalStatsConfig NumericalStatsConfig {
      get { return typeCase_ == TypeOneofCase.NumericalStatsConfig ? (global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.NumericalStatsConfig) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.NumericalStatsConfig;
      }
    }

    /// <summary>Field number for the "categorical_stats_config" field.</summary>
    public const int CategoricalStatsConfigFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.CategoricalStatsConfig CategoricalStatsConfig {
      get { return typeCase_ == TypeOneofCase.CategoricalStatsConfig ? (global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.CategoricalStatsConfig) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.CategoricalStatsConfig;
      }
    }

    /// <summary>Field number for the "k_anonymity_config" field.</summary>
    public const int KAnonymityConfigFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KAnonymityConfig KAnonymityConfig {
      get { return typeCase_ == TypeOneofCase.KAnonymityConfig ? (global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KAnonymityConfig) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.KAnonymityConfig;
      }
    }

    /// <summary>Field number for the "l_diversity_config" field.</summary>
    public const int LDiversityConfigFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.LDiversityConfig LDiversityConfig {
      get { return typeCase_ == TypeOneofCase.LDiversityConfig ? (global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.LDiversityConfig) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.LDiversityConfig;
      }
    }

    /// <summary>Field number for the "k_map_estimation_config" field.</summary>
    public const int KMapEstimationConfigFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig KMapEstimationConfig {
      get { return typeCase_ == TypeOneofCase.KMapEstimationConfig ? (global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.KMapEstimationConfig;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      NumericalStatsConfig = 1,
      CategoricalStatsConfig = 2,
      KAnonymityConfig = 3,
      LDiversityConfig = 4,
      KMapEstimationConfig = 5,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrivacyMetric);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrivacyMetric other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NumericalStatsConfig, other.NumericalStatsConfig)) return false;
      if (!object.Equals(CategoricalStatsConfig, other.CategoricalStatsConfig)) return false;
      if (!object.Equals(KAnonymityConfig, other.KAnonymityConfig)) return false;
      if (!object.Equals(LDiversityConfig, other.LDiversityConfig)) return false;
      if (!object.Equals(KMapEstimationConfig, other.KMapEstimationConfig)) return false;
      if (TypeCase != other.TypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.NumericalStatsConfig) hash ^= NumericalStatsConfig.GetHashCode();
      if (typeCase_ == TypeOneofCase.CategoricalStatsConfig) hash ^= CategoricalStatsConfig.GetHashCode();
      if (typeCase_ == TypeOneofCase.KAnonymityConfig) hash ^= KAnonymityConfig.GetHashCode();
      if (typeCase_ == TypeOneofCase.LDiversityConfig) hash ^= LDiversityConfig.GetHashCode();
      if (typeCase_ == TypeOneofCase.KMapEstimationConfig) hash ^= KMapEstimationConfig.GetHashCode();
      hash ^= (int) typeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.NumericalStatsConfig) {
        output.WriteRawTag(10);
        output.WriteMessage(NumericalStatsConfig);
      }
      if (typeCase_ == TypeOneofCase.CategoricalStatsConfig) {
        output.WriteRawTag(18);
        output.WriteMessage(CategoricalStatsConfig);
      }
      if (typeCase_ == TypeOneofCase.KAnonymityConfig) {
        output.WriteRawTag(26);
        output.WriteMessage(KAnonymityConfig);
      }
      if (typeCase_ == TypeOneofCase.LDiversityConfig) {
        output.WriteRawTag(34);
        output.WriteMessage(LDiversityConfig);
      }
      if (typeCase_ == TypeOneofCase.KMapEstimationConfig) {
        output.WriteRawTag(42);
        output.WriteMessage(KMapEstimationConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.NumericalStatsConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NumericalStatsConfig);
      }
      if (typeCase_ == TypeOneofCase.CategoricalStatsConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CategoricalStatsConfig);
      }
      if (typeCase_ == TypeOneofCase.KAnonymityConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KAnonymityConfig);
      }
      if (typeCase_ == TypeOneofCase.LDiversityConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LDiversityConfig);
      }
      if (typeCase_ == TypeOneofCase.KMapEstimationConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KMapEstimationConfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrivacyMetric other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.NumericalStatsConfig:
          NumericalStatsConfig = other.NumericalStatsConfig;
          break;
        case TypeOneofCase.CategoricalStatsConfig:
          CategoricalStatsConfig = other.CategoricalStatsConfig;
          break;
        case TypeOneofCase.KAnonymityConfig:
          KAnonymityConfig = other.KAnonymityConfig;
          break;
        case TypeOneofCase.LDiversityConfig:
          LDiversityConfig = other.LDiversityConfig;
          break;
        case TypeOneofCase.KMapEstimationConfig:
          KMapEstimationConfig = other.KMapEstimationConfig;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.NumericalStatsConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.NumericalStatsConfig();
            if (typeCase_ == TypeOneofCase.NumericalStatsConfig) {
              subBuilder.MergeFrom(NumericalStatsConfig);
            }
            input.ReadMessage(subBuilder);
            NumericalStatsConfig = subBuilder;
            break;
          }
          case 18: {
            global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.CategoricalStatsConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.CategoricalStatsConfig();
            if (typeCase_ == TypeOneofCase.CategoricalStatsConfig) {
              subBuilder.MergeFrom(CategoricalStatsConfig);
            }
            input.ReadMessage(subBuilder);
            CategoricalStatsConfig = subBuilder;
            break;
          }
          case 26: {
            global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KAnonymityConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KAnonymityConfig();
            if (typeCase_ == TypeOneofCase.KAnonymityConfig) {
              subBuilder.MergeFrom(KAnonymityConfig);
            }
            input.ReadMessage(subBuilder);
            KAnonymityConfig = subBuilder;
            break;
          }
          case 34: {
            global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.LDiversityConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.LDiversityConfig();
            if (typeCase_ == TypeOneofCase.LDiversityConfig) {
              subBuilder.MergeFrom(LDiversityConfig);
            }
            input.ReadMessage(subBuilder);
            LDiversityConfig = subBuilder;
            break;
          }
          case 42: {
            global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig();
            if (typeCase_ == TypeOneofCase.KMapEstimationConfig) {
              subBuilder.MergeFrom(KMapEstimationConfig);
            }
            input.ReadMessage(subBuilder);
            KMapEstimationConfig = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PrivacyMetric message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Compute numerical stats over an individual column, including
      /// min, max, and quantiles.
      /// </summary>
      public sealed partial class NumericalStatsConfig : pb::IMessage<NumericalStatsConfig> {
        private static readonly pb::MessageParser<NumericalStatsConfig> _parser = new pb::MessageParser<NumericalStatsConfig>(() => new NumericalStatsConfig());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NumericalStatsConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NumericalStatsConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NumericalStatsConfig(NumericalStatsConfig other) : this() {
          Field = other.field_ != null ? other.Field.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NumericalStatsConfig Clone() {
          return new NumericalStatsConfig(this);
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 1;
        private global::Google.Cloud.Dlp.V2Beta2.FieldId field_;
        /// <summary>
        /// Field to compute numerical stats on. Supported types are
        /// integer, float, date, datetime, timestamp, time.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta2.FieldId Field {
          get { return field_; }
          set {
            field_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NumericalStatsConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NumericalStatsConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Field, other.Field)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (field_ != null) hash ^= Field.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (field_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Field);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (field_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Field);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NumericalStatsConfig other) {
          if (other == null) {
            return;
          }
          if (other.field_ != null) {
            if (field_ == null) {
              field_ = new global::Google.Cloud.Dlp.V2Beta2.FieldId();
            }
            Field.MergeFrom(other.Field);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (field_ == null) {
                  field_ = new global::Google.Cloud.Dlp.V2Beta2.FieldId();
                }
                input.ReadMessage(field_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Compute numerical stats over an individual column, including
      /// number of distinct values and value count distribution.
      /// </summary>
      public sealed partial class CategoricalStatsConfig : pb::IMessage<CategoricalStatsConfig> {
        private static readonly pb::MessageParser<CategoricalStatsConfig> _parser = new pb::MessageParser<CategoricalStatsConfig>(() => new CategoricalStatsConfig());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CategoricalStatsConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CategoricalStatsConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CategoricalStatsConfig(CategoricalStatsConfig other) : this() {
          Field = other.field_ != null ? other.Field.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CategoricalStatsConfig Clone() {
          return new CategoricalStatsConfig(this);
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 1;
        private global::Google.Cloud.Dlp.V2Beta2.FieldId field_;
        /// <summary>
        /// Field to compute categorical stats on. All column types are
        /// supported except for arrays and structs. However, it may be more
        /// informative to use NumericalStats when the field type is supported,
        /// depending on the data.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta2.FieldId Field {
          get { return field_; }
          set {
            field_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CategoricalStatsConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CategoricalStatsConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Field, other.Field)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (field_ != null) hash ^= Field.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (field_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Field);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (field_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Field);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CategoricalStatsConfig other) {
          if (other == null) {
            return;
          }
          if (other.field_ != null) {
            if (field_ == null) {
              field_ = new global::Google.Cloud.Dlp.V2Beta2.FieldId();
            }
            Field.MergeFrom(other.Field);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (field_ == null) {
                  field_ = new global::Google.Cloud.Dlp.V2Beta2.FieldId();
                }
                input.ReadMessage(field_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// k-anonymity metric, used for analysis of reidentification risk.
      /// </summary>
      public sealed partial class KAnonymityConfig : pb::IMessage<KAnonymityConfig> {
        private static readonly pb::MessageParser<KAnonymityConfig> _parser = new pb::MessageParser<KAnonymityConfig>(() => new KAnonymityConfig());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<KAnonymityConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KAnonymityConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KAnonymityConfig(KAnonymityConfig other) : this() {
          quasiIds_ = other.quasiIds_.Clone();
          EntityId = other.entityId_ != null ? other.EntityId.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KAnonymityConfig Clone() {
          return new KAnonymityConfig(this);
        }

        /// <summary>Field number for the "quasi_ids" field.</summary>
        public const int QuasiIdsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.FieldId> _repeated_quasiIds_codec
            = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta2.FieldId.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.FieldId> quasiIds_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.FieldId>();
        /// <summary>
        /// Set of fields to compute k-anonymity over. When multiple fields are
        /// specified, they are considered a single composite key. Structs and
        /// repeated data types are not supported; however, nested fields are
        /// supported so long as they are not structs themselves or nested within
        /// a repeated field.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.FieldId> QuasiIds {
          get { return quasiIds_; }
        }

        /// <summary>Field number for the "entity_id" field.</summary>
        public const int EntityIdFieldNumber = 2;
        private global::Google.Cloud.Dlp.V2Beta2.EntityId entityId_;
        /// <summary>
        /// Optional message indicating that each distinct entity_id should not
        /// contribute to the k-anonymity count more than once per equivalence class.
        /// If an entity_id appears on several rows with different quasi-identifier
        /// tuples, it will contribute to each count exactly once.
        ///
        /// This can lead to unexpected results. Consider a table where ID 1 is
        /// associated to quasi-identifier "foo", ID 2 to "bar", and ID 3 to *both*
        /// quasi-identifiers "foo" and "bar" (on separate rows), and where this ID
        /// is used as entity_id. Then, the anonymity value associated to ID 3 will
        /// be 2, even if it is the only ID to be associated to both values "foo" and
        /// "bar".
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta2.EntityId EntityId {
          get { return entityId_; }
          set {
            entityId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as KAnonymityConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(KAnonymityConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!quasiIds_.Equals(other.quasiIds_)) return false;
          if (!object.Equals(EntityId, other.EntityId)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= quasiIds_.GetHashCode();
          if (entityId_ != null) hash ^= EntityId.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          quasiIds_.WriteTo(output, _repeated_quasiIds_codec);
          if (entityId_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(EntityId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += quasiIds_.CalculateSize(_repeated_quasiIds_codec);
          if (entityId_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EntityId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(KAnonymityConfig other) {
          if (other == null) {
            return;
          }
          quasiIds_.Add(other.quasiIds_);
          if (other.entityId_ != null) {
            if (entityId_ == null) {
              entityId_ = new global::Google.Cloud.Dlp.V2Beta2.EntityId();
            }
            EntityId.MergeFrom(other.EntityId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                quasiIds_.AddEntriesFrom(input, _repeated_quasiIds_codec);
                break;
              }
              case 18: {
                if (entityId_ == null) {
                  entityId_ = new global::Google.Cloud.Dlp.V2Beta2.EntityId();
                }
                input.ReadMessage(entityId_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// l-diversity metric, used for analysis of reidentification risk.
      /// </summary>
      public sealed partial class LDiversityConfig : pb::IMessage<LDiversityConfig> {
        private static readonly pb::MessageParser<LDiversityConfig> _parser = new pb::MessageParser<LDiversityConfig>(() => new LDiversityConfig());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LDiversityConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LDiversityConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LDiversityConfig(LDiversityConfig other) : this() {
          quasiIds_ = other.quasiIds_.Clone();
          SensitiveAttribute = other.sensitiveAttribute_ != null ? other.SensitiveAttribute.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LDiversityConfig Clone() {
          return new LDiversityConfig(this);
        }

        /// <summary>Field number for the "quasi_ids" field.</summary>
        public const int QuasiIdsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.FieldId> _repeated_quasiIds_codec
            = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta2.FieldId.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.FieldId> quasiIds_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.FieldId>();
        /// <summary>
        /// Set of quasi-identifiers indicating how equivalence classes are
        /// defined for the l-diversity computation. When multiple fields are
        /// specified, they are considered a single composite key.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.FieldId> QuasiIds {
          get { return quasiIds_; }
        }

        /// <summary>Field number for the "sensitive_attribute" field.</summary>
        public const int SensitiveAttributeFieldNumber = 2;
        private global::Google.Cloud.Dlp.V2Beta2.FieldId sensitiveAttribute_;
        /// <summary>
        /// Sensitive field for computing the l-value.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta2.FieldId SensitiveAttribute {
          get { return sensitiveAttribute_; }
          set {
            sensitiveAttribute_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LDiversityConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LDiversityConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!quasiIds_.Equals(other.quasiIds_)) return false;
          if (!object.Equals(SensitiveAttribute, other.SensitiveAttribute)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= quasiIds_.GetHashCode();
          if (sensitiveAttribute_ != null) hash ^= SensitiveAttribute.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          quasiIds_.WriteTo(output, _repeated_quasiIds_codec);
          if (sensitiveAttribute_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(SensitiveAttribute);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += quasiIds_.CalculateSize(_repeated_quasiIds_codec);
          if (sensitiveAttribute_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SensitiveAttribute);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LDiversityConfig other) {
          if (other == null) {
            return;
          }
          quasiIds_.Add(other.quasiIds_);
          if (other.sensitiveAttribute_ != null) {
            if (sensitiveAttribute_ == null) {
              sensitiveAttribute_ = new global::Google.Cloud.Dlp.V2Beta2.FieldId();
            }
            SensitiveAttribute.MergeFrom(other.SensitiveAttribute);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                quasiIds_.AddEntriesFrom(input, _repeated_quasiIds_codec);
                break;
              }
              case 18: {
                if (sensitiveAttribute_ == null) {
                  sensitiveAttribute_ = new global::Google.Cloud.Dlp.V2Beta2.FieldId();
                }
                input.ReadMessage(sensitiveAttribute_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Reidentifiability metric. This corresponds to a risk model similar to what
      /// is called "journalist risk" in the literature, except the attack dataset is
      /// statistically modeled instead of being perfectly known. This can be done
      /// using publicly available data (like the US Census), or using a custom
      /// statistical model (indicated as one or several BigQuery tables), or by
      /// extrapolating from the distribution of values in the input dataset.
      /// </summary>
      public sealed partial class KMapEstimationConfig : pb::IMessage<KMapEstimationConfig> {
        private static readonly pb::MessageParser<KMapEstimationConfig> _parser = new pb::MessageParser<KMapEstimationConfig>(() => new KMapEstimationConfig());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<KMapEstimationConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KMapEstimationConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KMapEstimationConfig(KMapEstimationConfig other) : this() {
          quasiIds_ = other.quasiIds_.Clone();
          regionCode_ = other.regionCode_;
          auxiliaryTables_ = other.auxiliaryTables_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KMapEstimationConfig Clone() {
          return new KMapEstimationConfig(this);
        }

        /// <summary>Field number for the "quasi_ids" field.</summary>
        public const int QuasiIdsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig.Types.TaggedField> _repeated_quasiIds_codec
            = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig.Types.TaggedField.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig.Types.TaggedField> quasiIds_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig.Types.TaggedField>();
        /// <summary>
        /// Fields considered to be quasi-identifiers. No two columns can have the
        /// same tag. [required]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig.Types.TaggedField> QuasiIds {
          get { return quasiIds_; }
        }

        /// <summary>Field number for the "region_code" field.</summary>
        public const int RegionCodeFieldNumber = 2;
        private string regionCode_ = "";
        /// <summary>
        /// ISO 3166-1 alpha-2 region code to use in the statistical modeling.
        /// Required if no column is tagged with a region-specific InfoType (like
        /// US_ZIP_5) or a region code.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RegionCode {
          get { return regionCode_; }
          set {
            regionCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "auxiliary_tables" field.</summary>
        public const int AuxiliaryTablesFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig.Types.AuxiliaryTable> _repeated_auxiliaryTables_codec
            = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig.Types.AuxiliaryTable.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig.Types.AuxiliaryTable> auxiliaryTables_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig.Types.AuxiliaryTable>();
        /// <summary>
        /// Several auxiliary tables can be used in the analysis. Each custom_tag
        /// used to tag a quasi-identifiers column must appear in exactly one column
        /// of one auxiliary table.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig.Types.AuxiliaryTable> AuxiliaryTables {
          get { return auxiliaryTables_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as KMapEstimationConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(KMapEstimationConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!quasiIds_.Equals(other.quasiIds_)) return false;
          if (RegionCode != other.RegionCode) return false;
          if(!auxiliaryTables_.Equals(other.auxiliaryTables_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= quasiIds_.GetHashCode();
          if (RegionCode.Length != 0) hash ^= RegionCode.GetHashCode();
          hash ^= auxiliaryTables_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          quasiIds_.WriteTo(output, _repeated_quasiIds_codec);
          if (RegionCode.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(RegionCode);
          }
          auxiliaryTables_.WriteTo(output, _repeated_auxiliaryTables_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += quasiIds_.CalculateSize(_repeated_quasiIds_codec);
          if (RegionCode.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RegionCode);
          }
          size += auxiliaryTables_.CalculateSize(_repeated_auxiliaryTables_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(KMapEstimationConfig other) {
          if (other == null) {
            return;
          }
          quasiIds_.Add(other.quasiIds_);
          if (other.RegionCode.Length != 0) {
            RegionCode = other.RegionCode;
          }
          auxiliaryTables_.Add(other.auxiliaryTables_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                quasiIds_.AddEntriesFrom(input, _repeated_quasiIds_codec);
                break;
              }
              case 18: {
                RegionCode = input.ReadString();
                break;
              }
              case 26: {
                auxiliaryTables_.AddEntriesFrom(input, _repeated_auxiliaryTables_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the KMapEstimationConfig message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// A column with a semantic tag attached.
          /// </summary>
          public sealed partial class TaggedField : pb::IMessage<TaggedField> {
            private static readonly pb::MessageParser<TaggedField> _parser = new pb::MessageParser<TaggedField>(() => new TaggedField());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<TaggedField> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TaggedField() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TaggedField(TaggedField other) : this() {
              Field = other.field_ != null ? other.Field.Clone() : null;
              switch (other.TagCase) {
                case TagOneofCase.InfoType:
                  InfoType = other.InfoType.Clone();
                  break;
                case TagOneofCase.CustomTag:
                  CustomTag = other.CustomTag;
                  break;
                case TagOneofCase.Inferred:
                  Inferred = other.Inferred.Clone();
                  break;
              }

            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TaggedField Clone() {
              return new TaggedField(this);
            }

            /// <summary>Field number for the "field" field.</summary>
            public const int FieldFieldNumber = 1;
            private global::Google.Cloud.Dlp.V2Beta2.FieldId field_;
            /// <summary>
            /// Identifies the column. [required]
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Google.Cloud.Dlp.V2Beta2.FieldId Field {
              get { return field_; }
              set {
                field_ = value;
              }
            }

            /// <summary>Field number for the "info_type" field.</summary>
            public const int InfoTypeFieldNumber = 2;
            /// <summary>
            /// A column can be tagged with a InfoType to use the relevant public
            /// dataset as a statistical model of population, if available. We
            /// currently support US ZIP codes, region codes, ages and genders.
            /// To programmatically obtain the list of supported InfoTypes, use
            /// ListInfoTypes with the supported_by=RISK_ANALYSIS filter.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Google.Cloud.Dlp.V2Beta2.InfoType InfoType {
              get { return tagCase_ == TagOneofCase.InfoType ? (global::Google.Cloud.Dlp.V2Beta2.InfoType) tag_ : null; }
              set {
                tag_ = value;
                tagCase_ = value == null ? TagOneofCase.None : TagOneofCase.InfoType;
              }
            }

            /// <summary>Field number for the "custom_tag" field.</summary>
            public const int CustomTagFieldNumber = 3;
            /// <summary>
            /// A column can be tagged with a custom tag. In this case, the user must
            /// indicate an auxiliary table that contains statistical information on
            /// the possible values of this column (below).
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string CustomTag {
              get { return tagCase_ == TagOneofCase.CustomTag ? (string) tag_ : ""; }
              set {
                tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                tagCase_ = TagOneofCase.CustomTag;
              }
            }

            /// <summary>Field number for the "inferred" field.</summary>
            public const int InferredFieldNumber = 4;
            /// <summary>
            /// If no semantic tag is indicated, we infer the statistical model from
            /// the distribution of values in the input data
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Google.Protobuf.WellKnownTypes.Empty Inferred {
              get { return tagCase_ == TagOneofCase.Inferred ? (global::Google.Protobuf.WellKnownTypes.Empty) tag_ : null; }
              set {
                tag_ = value;
                tagCase_ = value == null ? TagOneofCase.None : TagOneofCase.Inferred;
              }
            }

            private object tag_;
            /// <summary>Enum of possible cases for the "tag" oneof.</summary>
            public enum TagOneofCase {
              None = 0,
              InfoType = 2,
              CustomTag = 3,
              Inferred = 4,
            }
            private TagOneofCase tagCase_ = TagOneofCase.None;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TagOneofCase TagCase {
              get { return tagCase_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearTag() {
              tagCase_ = TagOneofCase.None;
              tag_ = null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as TaggedField);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(TaggedField other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Field, other.Field)) return false;
              if (!object.Equals(InfoType, other.InfoType)) return false;
              if (CustomTag != other.CustomTag) return false;
              if (!object.Equals(Inferred, other.Inferred)) return false;
              if (TagCase != other.TagCase) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (field_ != null) hash ^= Field.GetHashCode();
              if (tagCase_ == TagOneofCase.InfoType) hash ^= InfoType.GetHashCode();
              if (tagCase_ == TagOneofCase.CustomTag) hash ^= CustomTag.GetHashCode();
              if (tagCase_ == TagOneofCase.Inferred) hash ^= Inferred.GetHashCode();
              hash ^= (int) tagCase_;
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (field_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Field);
              }
              if (tagCase_ == TagOneofCase.InfoType) {
                output.WriteRawTag(18);
                output.WriteMessage(InfoType);
              }
              if (tagCase_ == TagOneofCase.CustomTag) {
                output.WriteRawTag(26);
                output.WriteString(CustomTag);
              }
              if (tagCase_ == TagOneofCase.Inferred) {
                output.WriteRawTag(34);
                output.WriteMessage(Inferred);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (field_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Field);
              }
              if (tagCase_ == TagOneofCase.InfoType) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoType);
              }
              if (tagCase_ == TagOneofCase.CustomTag) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomTag);
              }
              if (tagCase_ == TagOneofCase.Inferred) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Inferred);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(TaggedField other) {
              if (other == null) {
                return;
              }
              if (other.field_ != null) {
                if (field_ == null) {
                  field_ = new global::Google.Cloud.Dlp.V2Beta2.FieldId();
                }
                Field.MergeFrom(other.Field);
              }
              switch (other.TagCase) {
                case TagOneofCase.InfoType:
                  InfoType = other.InfoType;
                  break;
                case TagOneofCase.CustomTag:
                  CustomTag = other.CustomTag;
                  break;
                case TagOneofCase.Inferred:
                  Inferred = other.Inferred;
                  break;
              }

            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    if (field_ == null) {
                      field_ = new global::Google.Cloud.Dlp.V2Beta2.FieldId();
                    }
                    input.ReadMessage(field_);
                    break;
                  }
                  case 18: {
                    global::Google.Cloud.Dlp.V2Beta2.InfoType subBuilder = new global::Google.Cloud.Dlp.V2Beta2.InfoType();
                    if (tagCase_ == TagOneofCase.InfoType) {
                      subBuilder.MergeFrom(InfoType);
                    }
                    input.ReadMessage(subBuilder);
                    InfoType = subBuilder;
                    break;
                  }
                  case 26: {
                    CustomTag = input.ReadString();
                    break;
                  }
                  case 34: {
                    global::Google.Protobuf.WellKnownTypes.Empty subBuilder = new global::Google.Protobuf.WellKnownTypes.Empty();
                    if (tagCase_ == TagOneofCase.Inferred) {
                      subBuilder.MergeFrom(Inferred);
                    }
                    input.ReadMessage(subBuilder);
                    Inferred = subBuilder;
                    break;
                  }
                }
              }
            }

          }

          /// <summary>
          /// An auxiliary table contains statistical information on the relative
          /// frequency of different quasi-identifiers values. It has one or several
          /// quasi-identifiers columns, and one column that indicates the relative
          /// frequency of each quasi-identifier tuple.
          /// If a tuple is present in the data but not in the auxiliary table, the
          /// corresponding relative frequency is assumed to be zero (and thus, the
          /// tuple is highly reidentifiable).
          /// </summary>
          public sealed partial class AuxiliaryTable : pb::IMessage<AuxiliaryTable> {
            private static readonly pb::MessageParser<AuxiliaryTable> _parser = new pb::MessageParser<AuxiliaryTable>(() => new AuxiliaryTable());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<AuxiliaryTable> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public AuxiliaryTable() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public AuxiliaryTable(AuxiliaryTable other) : this() {
              Table = other.table_ != null ? other.Table.Clone() : null;
              quasiIds_ = other.quasiIds_.Clone();
              RelativeFrequency = other.relativeFrequency_ != null ? other.RelativeFrequency.Clone() : null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public AuxiliaryTable Clone() {
              return new AuxiliaryTable(this);
            }

            /// <summary>Field number for the "table" field.</summary>
            public const int TableFieldNumber = 3;
            private global::Google.Cloud.Dlp.V2Beta2.BigQueryTable table_;
            /// <summary>
            /// Auxiliary table location. [required]
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Google.Cloud.Dlp.V2Beta2.BigQueryTable Table {
              get { return table_; }
              set {
                table_ = value;
              }
            }

            /// <summary>Field number for the "quasi_ids" field.</summary>
            public const int QuasiIdsFieldNumber = 1;
            private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig.Types.AuxiliaryTable.Types.QuasiIdField> _repeated_quasiIds_codec
                = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig.Types.AuxiliaryTable.Types.QuasiIdField.Parser);
            private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig.Types.AuxiliaryTable.Types.QuasiIdField> quasiIds_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig.Types.AuxiliaryTable.Types.QuasiIdField>();
            /// <summary>
            /// Quasi-identifier columns. [required]
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig.Types.AuxiliaryTable.Types.QuasiIdField> QuasiIds {
              get { return quasiIds_; }
            }

            /// <summary>Field number for the "relative_frequency" field.</summary>
            public const int RelativeFrequencyFieldNumber = 2;
            private global::Google.Cloud.Dlp.V2Beta2.FieldId relativeFrequency_;
            /// <summary>
            /// The relative frequency column must contain a floating-point number
            /// between 0 and 1 (inclusive). Null values are assumed to be zero.
            /// [required]
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Google.Cloud.Dlp.V2Beta2.FieldId RelativeFrequency {
              get { return relativeFrequency_; }
              set {
                relativeFrequency_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as AuxiliaryTable);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(AuxiliaryTable other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Table, other.Table)) return false;
              if(!quasiIds_.Equals(other.quasiIds_)) return false;
              if (!object.Equals(RelativeFrequency, other.RelativeFrequency)) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (table_ != null) hash ^= Table.GetHashCode();
              hash ^= quasiIds_.GetHashCode();
              if (relativeFrequency_ != null) hash ^= RelativeFrequency.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              quasiIds_.WriteTo(output, _repeated_quasiIds_codec);
              if (relativeFrequency_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(RelativeFrequency);
              }
              if (table_ != null) {
                output.WriteRawTag(26);
                output.WriteMessage(Table);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (table_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Table);
              }
              size += quasiIds_.CalculateSize(_repeated_quasiIds_codec);
              if (relativeFrequency_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(RelativeFrequency);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(AuxiliaryTable other) {
              if (other == null) {
                return;
              }
              if (other.table_ != null) {
                if (table_ == null) {
                  table_ = new global::Google.Cloud.Dlp.V2Beta2.BigQueryTable();
                }
                Table.MergeFrom(other.Table);
              }
              quasiIds_.Add(other.quasiIds_);
              if (other.relativeFrequency_ != null) {
                if (relativeFrequency_ == null) {
                  relativeFrequency_ = new global::Google.Cloud.Dlp.V2Beta2.FieldId();
                }
                RelativeFrequency.MergeFrom(other.RelativeFrequency);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    quasiIds_.AddEntriesFrom(input, _repeated_quasiIds_codec);
                    break;
                  }
                  case 18: {
                    if (relativeFrequency_ == null) {
                      relativeFrequency_ = new global::Google.Cloud.Dlp.V2Beta2.FieldId();
                    }
                    input.ReadMessage(relativeFrequency_);
                    break;
                  }
                  case 26: {
                    if (table_ == null) {
                      table_ = new global::Google.Cloud.Dlp.V2Beta2.BigQueryTable();
                    }
                    input.ReadMessage(table_);
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the AuxiliaryTable message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              /// <summary>
              /// A quasi-identifier column has a custom_tag, used to know which column
              /// in the data corresponds to which column in the statistical model.
              /// </summary>
              public sealed partial class QuasiIdField : pb::IMessage<QuasiIdField> {
                private static readonly pb::MessageParser<QuasiIdField> _parser = new pb::MessageParser<QuasiIdField>(() => new QuasiIdField());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<QuasiIdField> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric.Types.KMapEstimationConfig.Types.AuxiliaryTable.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public QuasiIdField() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public QuasiIdField(QuasiIdField other) : this() {
                  Field = other.field_ != null ? other.Field.Clone() : null;
                  customTag_ = other.customTag_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public QuasiIdField Clone() {
                  return new QuasiIdField(this);
                }

                /// <summary>Field number for the "field" field.</summary>
                public const int FieldFieldNumber = 1;
                private global::Google.Cloud.Dlp.V2Beta2.FieldId field_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::Google.Cloud.Dlp.V2Beta2.FieldId Field {
                  get { return field_; }
                  set {
                    field_ = value;
                  }
                }

                /// <summary>Field number for the "custom_tag" field.</summary>
                public const int CustomTagFieldNumber = 2;
                private string customTag_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string CustomTag {
                  get { return customTag_; }
                  set {
                    customTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as QuasiIdField);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(QuasiIdField other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (!object.Equals(Field, other.Field)) return false;
                  if (CustomTag != other.CustomTag) return false;
                  return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (field_ != null) hash ^= Field.GetHashCode();
                  if (CustomTag.Length != 0) hash ^= CustomTag.GetHashCode();
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (field_ != null) {
                    output.WriteRawTag(10);
                    output.WriteMessage(Field);
                  }
                  if (CustomTag.Length != 0) {
                    output.WriteRawTag(18);
                    output.WriteString(CustomTag);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (field_ != null) {
                    size += 1 + pb::CodedOutputStream.ComputeMessageSize(Field);
                  }
                  if (CustomTag.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomTag);
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(QuasiIdField other) {
                  if (other == null) {
                    return;
                  }
                  if (other.field_ != null) {
                    if (field_ == null) {
                      field_ = new global::Google.Cloud.Dlp.V2Beta2.FieldId();
                    }
                    Field.MergeFrom(other.Field);
                  }
                  if (other.CustomTag.Length != 0) {
                    CustomTag = other.CustomTag;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        input.SkipLastField();
                        break;
                      case 10: {
                        if (field_ == null) {
                          field_ = new global::Google.Cloud.Dlp.V2Beta2.FieldId();
                        }
                        input.ReadMessage(field_);
                        break;
                      }
                      case 18: {
                        CustomTag = input.ReadString();
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// Result of a risk analysis operation request.
  /// </summary>
  public sealed partial class AnalyzeDataSourceRiskDetails : pb::IMessage<AnalyzeDataSourceRiskDetails> {
    private static readonly pb::MessageParser<AnalyzeDataSourceRiskDetails> _parser = new pb::MessageParser<AnalyzeDataSourceRiskDetails>(() => new AnalyzeDataSourceRiskDetails());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnalyzeDataSourceRiskDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeDataSourceRiskDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeDataSourceRiskDetails(AnalyzeDataSourceRiskDetails other) : this() {
      RequestedPrivacyMetric = other.requestedPrivacyMetric_ != null ? other.RequestedPrivacyMetric.Clone() : null;
      RequestedSourceTable = other.requestedSourceTable_ != null ? other.RequestedSourceTable.Clone() : null;
      switch (other.ResultCase) {
        case ResultOneofCase.NumericalStatsResult:
          NumericalStatsResult = other.NumericalStatsResult.Clone();
          break;
        case ResultOneofCase.CategoricalStatsResult:
          CategoricalStatsResult = other.CategoricalStatsResult.Clone();
          break;
        case ResultOneofCase.KAnonymityResult:
          KAnonymityResult = other.KAnonymityResult.Clone();
          break;
        case ResultOneofCase.LDiversityResult:
          LDiversityResult = other.LDiversityResult.Clone();
          break;
        case ResultOneofCase.KMapEstimationResult:
          KMapEstimationResult = other.KMapEstimationResult.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeDataSourceRiskDetails Clone() {
      return new AnalyzeDataSourceRiskDetails(this);
    }

    /// <summary>Field number for the "requested_privacy_metric" field.</summary>
    public const int RequestedPrivacyMetricFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric requestedPrivacyMetric_;
    /// <summary>
    /// Privacy metric to compute.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric RequestedPrivacyMetric {
      get { return requestedPrivacyMetric_; }
      set {
        requestedPrivacyMetric_ = value;
      }
    }

    /// <summary>Field number for the "requested_source_table" field.</summary>
    public const int RequestedSourceTableFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta2.BigQueryTable requestedSourceTable_;
    /// <summary>
    /// Input dataset to compute metrics over.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.BigQueryTable RequestedSourceTable {
      get { return requestedSourceTable_; }
      set {
        requestedSourceTable_ = value;
      }
    }

    /// <summary>Field number for the "numerical_stats_result" field.</summary>
    public const int NumericalStatsResultFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.NumericalStatsResult NumericalStatsResult {
      get { return resultCase_ == ResultOneofCase.NumericalStatsResult ? (global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.NumericalStatsResult) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.NumericalStatsResult;
      }
    }

    /// <summary>Field number for the "categorical_stats_result" field.</summary>
    public const int CategoricalStatsResultFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.CategoricalStatsResult CategoricalStatsResult {
      get { return resultCase_ == ResultOneofCase.CategoricalStatsResult ? (global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.CategoricalStatsResult) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.CategoricalStatsResult;
      }
    }

    /// <summary>Field number for the "k_anonymity_result" field.</summary>
    public const int KAnonymityResultFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KAnonymityResult KAnonymityResult {
      get { return resultCase_ == ResultOneofCase.KAnonymityResult ? (global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KAnonymityResult) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.KAnonymityResult;
      }
    }

    /// <summary>Field number for the "l_diversity_result" field.</summary>
    public const int LDiversityResultFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.LDiversityResult LDiversityResult {
      get { return resultCase_ == ResultOneofCase.LDiversityResult ? (global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.LDiversityResult) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.LDiversityResult;
      }
    }

    /// <summary>Field number for the "k_map_estimation_result" field.</summary>
    public const int KMapEstimationResultFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KMapEstimationResult KMapEstimationResult {
      get { return resultCase_ == ResultOneofCase.KMapEstimationResult ? (global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KMapEstimationResult) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.KMapEstimationResult;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      NumericalStatsResult = 3,
      CategoricalStatsResult = 4,
      KAnonymityResult = 5,
      LDiversityResult = 6,
      KMapEstimationResult = 7,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnalyzeDataSourceRiskDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnalyzeDataSourceRiskDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RequestedPrivacyMetric, other.RequestedPrivacyMetric)) return false;
      if (!object.Equals(RequestedSourceTable, other.RequestedSourceTable)) return false;
      if (!object.Equals(NumericalStatsResult, other.NumericalStatsResult)) return false;
      if (!object.Equals(CategoricalStatsResult, other.CategoricalStatsResult)) return false;
      if (!object.Equals(KAnonymityResult, other.KAnonymityResult)) return false;
      if (!object.Equals(LDiversityResult, other.LDiversityResult)) return false;
      if (!object.Equals(KMapEstimationResult, other.KMapEstimationResult)) return false;
      if (ResultCase != other.ResultCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestedPrivacyMetric_ != null) hash ^= RequestedPrivacyMetric.GetHashCode();
      if (requestedSourceTable_ != null) hash ^= RequestedSourceTable.GetHashCode();
      if (resultCase_ == ResultOneofCase.NumericalStatsResult) hash ^= NumericalStatsResult.GetHashCode();
      if (resultCase_ == ResultOneofCase.CategoricalStatsResult) hash ^= CategoricalStatsResult.GetHashCode();
      if (resultCase_ == ResultOneofCase.KAnonymityResult) hash ^= KAnonymityResult.GetHashCode();
      if (resultCase_ == ResultOneofCase.LDiversityResult) hash ^= LDiversityResult.GetHashCode();
      if (resultCase_ == ResultOneofCase.KMapEstimationResult) hash ^= KMapEstimationResult.GetHashCode();
      hash ^= (int) resultCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (requestedPrivacyMetric_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RequestedPrivacyMetric);
      }
      if (requestedSourceTable_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RequestedSourceTable);
      }
      if (resultCase_ == ResultOneofCase.NumericalStatsResult) {
        output.WriteRawTag(26);
        output.WriteMessage(NumericalStatsResult);
      }
      if (resultCase_ == ResultOneofCase.CategoricalStatsResult) {
        output.WriteRawTag(34);
        output.WriteMessage(CategoricalStatsResult);
      }
      if (resultCase_ == ResultOneofCase.KAnonymityResult) {
        output.WriteRawTag(42);
        output.WriteMessage(KAnonymityResult);
      }
      if (resultCase_ == ResultOneofCase.LDiversityResult) {
        output.WriteRawTag(50);
        output.WriteMessage(LDiversityResult);
      }
      if (resultCase_ == ResultOneofCase.KMapEstimationResult) {
        output.WriteRawTag(58);
        output.WriteMessage(KMapEstimationResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestedPrivacyMetric_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestedPrivacyMetric);
      }
      if (requestedSourceTable_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestedSourceTable);
      }
      if (resultCase_ == ResultOneofCase.NumericalStatsResult) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NumericalStatsResult);
      }
      if (resultCase_ == ResultOneofCase.CategoricalStatsResult) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CategoricalStatsResult);
      }
      if (resultCase_ == ResultOneofCase.KAnonymityResult) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KAnonymityResult);
      }
      if (resultCase_ == ResultOneofCase.LDiversityResult) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LDiversityResult);
      }
      if (resultCase_ == ResultOneofCase.KMapEstimationResult) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KMapEstimationResult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnalyzeDataSourceRiskDetails other) {
      if (other == null) {
        return;
      }
      if (other.requestedPrivacyMetric_ != null) {
        if (requestedPrivacyMetric_ == null) {
          requestedPrivacyMetric_ = new global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric();
        }
        RequestedPrivacyMetric.MergeFrom(other.RequestedPrivacyMetric);
      }
      if (other.requestedSourceTable_ != null) {
        if (requestedSourceTable_ == null) {
          requestedSourceTable_ = new global::Google.Cloud.Dlp.V2Beta2.BigQueryTable();
        }
        RequestedSourceTable.MergeFrom(other.RequestedSourceTable);
      }
      switch (other.ResultCase) {
        case ResultOneofCase.NumericalStatsResult:
          NumericalStatsResult = other.NumericalStatsResult;
          break;
        case ResultOneofCase.CategoricalStatsResult:
          CategoricalStatsResult = other.CategoricalStatsResult;
          break;
        case ResultOneofCase.KAnonymityResult:
          KAnonymityResult = other.KAnonymityResult;
          break;
        case ResultOneofCase.LDiversityResult:
          LDiversityResult = other.LDiversityResult;
          break;
        case ResultOneofCase.KMapEstimationResult:
          KMapEstimationResult = other.KMapEstimationResult;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (requestedPrivacyMetric_ == null) {
              requestedPrivacyMetric_ = new global::Google.Cloud.Dlp.V2Beta2.PrivacyMetric();
            }
            input.ReadMessage(requestedPrivacyMetric_);
            break;
          }
          case 18: {
            if (requestedSourceTable_ == null) {
              requestedSourceTable_ = new global::Google.Cloud.Dlp.V2Beta2.BigQueryTable();
            }
            input.ReadMessage(requestedSourceTable_);
            break;
          }
          case 26: {
            global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.NumericalStatsResult subBuilder = new global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.NumericalStatsResult();
            if (resultCase_ == ResultOneofCase.NumericalStatsResult) {
              subBuilder.MergeFrom(NumericalStatsResult);
            }
            input.ReadMessage(subBuilder);
            NumericalStatsResult = subBuilder;
            break;
          }
          case 34: {
            global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.CategoricalStatsResult subBuilder = new global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.CategoricalStatsResult();
            if (resultCase_ == ResultOneofCase.CategoricalStatsResult) {
              subBuilder.MergeFrom(CategoricalStatsResult);
            }
            input.ReadMessage(subBuilder);
            CategoricalStatsResult = subBuilder;
            break;
          }
          case 42: {
            global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KAnonymityResult subBuilder = new global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KAnonymityResult();
            if (resultCase_ == ResultOneofCase.KAnonymityResult) {
              subBuilder.MergeFrom(KAnonymityResult);
            }
            input.ReadMessage(subBuilder);
            KAnonymityResult = subBuilder;
            break;
          }
          case 50: {
            global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.LDiversityResult subBuilder = new global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.LDiversityResult();
            if (resultCase_ == ResultOneofCase.LDiversityResult) {
              subBuilder.MergeFrom(LDiversityResult);
            }
            input.ReadMessage(subBuilder);
            LDiversityResult = subBuilder;
            break;
          }
          case 58: {
            global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KMapEstimationResult subBuilder = new global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KMapEstimationResult();
            if (resultCase_ == ResultOneofCase.KMapEstimationResult) {
              subBuilder.MergeFrom(KMapEstimationResult);
            }
            input.ReadMessage(subBuilder);
            KMapEstimationResult = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AnalyzeDataSourceRiskDetails message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Result of the numerical stats computation.
      /// </summary>
      public sealed partial class NumericalStatsResult : pb::IMessage<NumericalStatsResult> {
        private static readonly pb::MessageParser<NumericalStatsResult> _parser = new pb::MessageParser<NumericalStatsResult>(() => new NumericalStatsResult());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NumericalStatsResult> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NumericalStatsResult() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NumericalStatsResult(NumericalStatsResult other) : this() {
          MinValue = other.minValue_ != null ? other.MinValue.Clone() : null;
          MaxValue = other.maxValue_ != null ? other.MaxValue.Clone() : null;
          quantileValues_ = other.quantileValues_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NumericalStatsResult Clone() {
          return new NumericalStatsResult(this);
        }

        /// <summary>Field number for the "min_value" field.</summary>
        public const int MinValueFieldNumber = 1;
        private global::Google.Cloud.Dlp.V2Beta2.Value minValue_;
        /// <summary>
        /// Minimum value appearing in the column.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta2.Value MinValue {
          get { return minValue_; }
          set {
            minValue_ = value;
          }
        }

        /// <summary>Field number for the "max_value" field.</summary>
        public const int MaxValueFieldNumber = 2;
        private global::Google.Cloud.Dlp.V2Beta2.Value maxValue_;
        /// <summary>
        /// Maximum value appearing in the column.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta2.Value MaxValue {
          get { return maxValue_; }
          set {
            maxValue_ = value;
          }
        }

        /// <summary>Field number for the "quantile_values" field.</summary>
        public const int QuantileValuesFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.Value> _repeated_quantileValues_codec
            = pb::FieldCodec.ForMessage(34, global::Google.Cloud.Dlp.V2Beta2.Value.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Value> quantileValues_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Value>();
        /// <summary>
        /// List of 99 values that partition the set of field values into 100 equal
        /// sized buckets.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Value> QuantileValues {
          get { return quantileValues_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NumericalStatsResult);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NumericalStatsResult other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(MinValue, other.MinValue)) return false;
          if (!object.Equals(MaxValue, other.MaxValue)) return false;
          if(!quantileValues_.Equals(other.quantileValues_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (minValue_ != null) hash ^= MinValue.GetHashCode();
          if (maxValue_ != null) hash ^= MaxValue.GetHashCode();
          hash ^= quantileValues_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (minValue_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(MinValue);
          }
          if (maxValue_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(MaxValue);
          }
          quantileValues_.WriteTo(output, _repeated_quantileValues_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (minValue_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinValue);
          }
          if (maxValue_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxValue);
          }
          size += quantileValues_.CalculateSize(_repeated_quantileValues_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NumericalStatsResult other) {
          if (other == null) {
            return;
          }
          if (other.minValue_ != null) {
            if (minValue_ == null) {
              minValue_ = new global::Google.Cloud.Dlp.V2Beta2.Value();
            }
            MinValue.MergeFrom(other.MinValue);
          }
          if (other.maxValue_ != null) {
            if (maxValue_ == null) {
              maxValue_ = new global::Google.Cloud.Dlp.V2Beta2.Value();
            }
            MaxValue.MergeFrom(other.MaxValue);
          }
          quantileValues_.Add(other.quantileValues_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (minValue_ == null) {
                  minValue_ = new global::Google.Cloud.Dlp.V2Beta2.Value();
                }
                input.ReadMessage(minValue_);
                break;
              }
              case 18: {
                if (maxValue_ == null) {
                  maxValue_ = new global::Google.Cloud.Dlp.V2Beta2.Value();
                }
                input.ReadMessage(maxValue_);
                break;
              }
              case 34: {
                quantileValues_.AddEntriesFrom(input, _repeated_quantileValues_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Result of the categorical stats computation.
      /// </summary>
      public sealed partial class CategoricalStatsResult : pb::IMessage<CategoricalStatsResult> {
        private static readonly pb::MessageParser<CategoricalStatsResult> _parser = new pb::MessageParser<CategoricalStatsResult>(() => new CategoricalStatsResult());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CategoricalStatsResult> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CategoricalStatsResult() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CategoricalStatsResult(CategoricalStatsResult other) : this() {
          valueFrequencyHistogramBuckets_ = other.valueFrequencyHistogramBuckets_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CategoricalStatsResult Clone() {
          return new CategoricalStatsResult(this);
        }

        /// <summary>Field number for the "value_frequency_histogram_buckets" field.</summary>
        public const int ValueFrequencyHistogramBucketsFieldNumber = 5;
        private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.CategoricalStatsResult.Types.CategoricalStatsHistogramBucket> _repeated_valueFrequencyHistogramBuckets_codec
            = pb::FieldCodec.ForMessage(42, global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.CategoricalStatsResult.Types.CategoricalStatsHistogramBucket.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.CategoricalStatsResult.Types.CategoricalStatsHistogramBucket> valueFrequencyHistogramBuckets_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.CategoricalStatsResult.Types.CategoricalStatsHistogramBucket>();
        /// <summary>
        /// Histogram of value frequencies in the column.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.CategoricalStatsResult.Types.CategoricalStatsHistogramBucket> ValueFrequencyHistogramBuckets {
          get { return valueFrequencyHistogramBuckets_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CategoricalStatsResult);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CategoricalStatsResult other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!valueFrequencyHistogramBuckets_.Equals(other.valueFrequencyHistogramBuckets_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= valueFrequencyHistogramBuckets_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          valueFrequencyHistogramBuckets_.WriteTo(output, _repeated_valueFrequencyHistogramBuckets_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += valueFrequencyHistogramBuckets_.CalculateSize(_repeated_valueFrequencyHistogramBuckets_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CategoricalStatsResult other) {
          if (other == null) {
            return;
          }
          valueFrequencyHistogramBuckets_.Add(other.valueFrequencyHistogramBuckets_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 42: {
                valueFrequencyHistogramBuckets_.AddEntriesFrom(input, _repeated_valueFrequencyHistogramBuckets_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the CategoricalStatsResult message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class CategoricalStatsHistogramBucket : pb::IMessage<CategoricalStatsHistogramBucket> {
            private static readonly pb::MessageParser<CategoricalStatsHistogramBucket> _parser = new pb::MessageParser<CategoricalStatsHistogramBucket>(() => new CategoricalStatsHistogramBucket());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<CategoricalStatsHistogramBucket> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.CategoricalStatsResult.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CategoricalStatsHistogramBucket() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CategoricalStatsHistogramBucket(CategoricalStatsHistogramBucket other) : this() {
              valueFrequencyLowerBound_ = other.valueFrequencyLowerBound_;
              valueFrequencyUpperBound_ = other.valueFrequencyUpperBound_;
              bucketSize_ = other.bucketSize_;
              bucketValues_ = other.bucketValues_.Clone();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CategoricalStatsHistogramBucket Clone() {
              return new CategoricalStatsHistogramBucket(this);
            }

            /// <summary>Field number for the "value_frequency_lower_bound" field.</summary>
            public const int ValueFrequencyLowerBoundFieldNumber = 1;
            private long valueFrequencyLowerBound_;
            /// <summary>
            /// Lower bound on the value frequency of the values in this bucket.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long ValueFrequencyLowerBound {
              get { return valueFrequencyLowerBound_; }
              set {
                valueFrequencyLowerBound_ = value;
              }
            }

            /// <summary>Field number for the "value_frequency_upper_bound" field.</summary>
            public const int ValueFrequencyUpperBoundFieldNumber = 2;
            private long valueFrequencyUpperBound_;
            /// <summary>
            /// Upper bound on the value frequency of the values in this bucket.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long ValueFrequencyUpperBound {
              get { return valueFrequencyUpperBound_; }
              set {
                valueFrequencyUpperBound_ = value;
              }
            }

            /// <summary>Field number for the "bucket_size" field.</summary>
            public const int BucketSizeFieldNumber = 3;
            private long bucketSize_;
            /// <summary>
            /// Total number of values in this bucket.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long BucketSize {
              get { return bucketSize_; }
              set {
                bucketSize_ = value;
              }
            }

            /// <summary>Field number for the "bucket_values" field.</summary>
            public const int BucketValuesFieldNumber = 4;
            private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.ValueFrequency> _repeated_bucketValues_codec
                = pb::FieldCodec.ForMessage(34, global::Google.Cloud.Dlp.V2Beta2.ValueFrequency.Parser);
            private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.ValueFrequency> bucketValues_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.ValueFrequency>();
            /// <summary>
            /// Sample of value frequencies in this bucket. The total number of
            /// values returned per bucket is capped at 20.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.ValueFrequency> BucketValues {
              get { return bucketValues_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as CategoricalStatsHistogramBucket);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(CategoricalStatsHistogramBucket other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (ValueFrequencyLowerBound != other.ValueFrequencyLowerBound) return false;
              if (ValueFrequencyUpperBound != other.ValueFrequencyUpperBound) return false;
              if (BucketSize != other.BucketSize) return false;
              if(!bucketValues_.Equals(other.bucketValues_)) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (ValueFrequencyLowerBound != 0L) hash ^= ValueFrequencyLowerBound.GetHashCode();
              if (ValueFrequencyUpperBound != 0L) hash ^= ValueFrequencyUpperBound.GetHashCode();
              if (BucketSize != 0L) hash ^= BucketSize.GetHashCode();
              hash ^= bucketValues_.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (ValueFrequencyLowerBound != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(ValueFrequencyLowerBound);
              }
              if (ValueFrequencyUpperBound != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(ValueFrequencyUpperBound);
              }
              if (BucketSize != 0L) {
                output.WriteRawTag(24);
                output.WriteInt64(BucketSize);
              }
              bucketValues_.WriteTo(output, _repeated_bucketValues_codec);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (ValueFrequencyLowerBound != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(ValueFrequencyLowerBound);
              }
              if (ValueFrequencyUpperBound != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(ValueFrequencyUpperBound);
              }
              if (BucketSize != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(BucketSize);
              }
              size += bucketValues_.CalculateSize(_repeated_bucketValues_codec);
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(CategoricalStatsHistogramBucket other) {
              if (other == null) {
                return;
              }
              if (other.ValueFrequencyLowerBound != 0L) {
                ValueFrequencyLowerBound = other.ValueFrequencyLowerBound;
              }
              if (other.ValueFrequencyUpperBound != 0L) {
                ValueFrequencyUpperBound = other.ValueFrequencyUpperBound;
              }
              if (other.BucketSize != 0L) {
                BucketSize = other.BucketSize;
              }
              bucketValues_.Add(other.bucketValues_);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    ValueFrequencyLowerBound = input.ReadInt64();
                    break;
                  }
                  case 16: {
                    ValueFrequencyUpperBound = input.ReadInt64();
                    break;
                  }
                  case 24: {
                    BucketSize = input.ReadInt64();
                    break;
                  }
                  case 34: {
                    bucketValues_.AddEntriesFrom(input, _repeated_bucketValues_codec);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      /// <summary>
      /// Result of the k-anonymity computation.
      /// </summary>
      public sealed partial class KAnonymityResult : pb::IMessage<KAnonymityResult> {
        private static readonly pb::MessageParser<KAnonymityResult> _parser = new pb::MessageParser<KAnonymityResult>(() => new KAnonymityResult());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<KAnonymityResult> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KAnonymityResult() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KAnonymityResult(KAnonymityResult other) : this() {
          equivalenceClassHistogramBuckets_ = other.equivalenceClassHistogramBuckets_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KAnonymityResult Clone() {
          return new KAnonymityResult(this);
        }

        /// <summary>Field number for the "equivalence_class_histogram_buckets" field.</summary>
        public const int EquivalenceClassHistogramBucketsFieldNumber = 5;
        private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KAnonymityResult.Types.KAnonymityHistogramBucket> _repeated_equivalenceClassHistogramBuckets_codec
            = pb::FieldCodec.ForMessage(42, global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KAnonymityResult.Types.KAnonymityHistogramBucket.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KAnonymityResult.Types.KAnonymityHistogramBucket> equivalenceClassHistogramBuckets_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KAnonymityResult.Types.KAnonymityHistogramBucket>();
        /// <summary>
        /// Histogram of k-anonymity equivalence classes.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KAnonymityResult.Types.KAnonymityHistogramBucket> EquivalenceClassHistogramBuckets {
          get { return equivalenceClassHistogramBuckets_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as KAnonymityResult);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(KAnonymityResult other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!equivalenceClassHistogramBuckets_.Equals(other.equivalenceClassHistogramBuckets_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= equivalenceClassHistogramBuckets_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          equivalenceClassHistogramBuckets_.WriteTo(output, _repeated_equivalenceClassHistogramBuckets_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += equivalenceClassHistogramBuckets_.CalculateSize(_repeated_equivalenceClassHistogramBuckets_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(KAnonymityResult other) {
          if (other == null) {
            return;
          }
          equivalenceClassHistogramBuckets_.Add(other.equivalenceClassHistogramBuckets_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 42: {
                equivalenceClassHistogramBuckets_.AddEntriesFrom(input, _repeated_equivalenceClassHistogramBuckets_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the KAnonymityResult message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// The set of columns' values that share the same ldiversity value
          /// </summary>
          public sealed partial class KAnonymityEquivalenceClass : pb::IMessage<KAnonymityEquivalenceClass> {
            private static readonly pb::MessageParser<KAnonymityEquivalenceClass> _parser = new pb::MessageParser<KAnonymityEquivalenceClass>(() => new KAnonymityEquivalenceClass());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<KAnonymityEquivalenceClass> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KAnonymityResult.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KAnonymityEquivalenceClass() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KAnonymityEquivalenceClass(KAnonymityEquivalenceClass other) : this() {
              quasiIdsValues_ = other.quasiIdsValues_.Clone();
              equivalenceClassSize_ = other.equivalenceClassSize_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KAnonymityEquivalenceClass Clone() {
              return new KAnonymityEquivalenceClass(this);
            }

            /// <summary>Field number for the "quasi_ids_values" field.</summary>
            public const int QuasiIdsValuesFieldNumber = 1;
            private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.Value> _repeated_quasiIdsValues_codec
                = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta2.Value.Parser);
            private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Value> quasiIdsValues_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Value>();
            /// <summary>
            /// Set of values defining the equivalence class. One value per
            /// quasi-identifier column in the original KAnonymity metric message.
            /// The order is always the same as the original request.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Value> QuasiIdsValues {
              get { return quasiIdsValues_; }
            }

            /// <summary>Field number for the "equivalence_class_size" field.</summary>
            public const int EquivalenceClassSizeFieldNumber = 2;
            private long equivalenceClassSize_;
            /// <summary>
            /// Size of the equivalence class, for example number of rows with the
            /// above set of values.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long EquivalenceClassSize {
              get { return equivalenceClassSize_; }
              set {
                equivalenceClassSize_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as KAnonymityEquivalenceClass);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(KAnonymityEquivalenceClass other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!quasiIdsValues_.Equals(other.quasiIdsValues_)) return false;
              if (EquivalenceClassSize != other.EquivalenceClassSize) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= quasiIdsValues_.GetHashCode();
              if (EquivalenceClassSize != 0L) hash ^= EquivalenceClassSize.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              quasiIdsValues_.WriteTo(output, _repeated_quasiIdsValues_codec);
              if (EquivalenceClassSize != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(EquivalenceClassSize);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += quasiIdsValues_.CalculateSize(_repeated_quasiIdsValues_codec);
              if (EquivalenceClassSize != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(EquivalenceClassSize);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(KAnonymityEquivalenceClass other) {
              if (other == null) {
                return;
              }
              quasiIdsValues_.Add(other.quasiIdsValues_);
              if (other.EquivalenceClassSize != 0L) {
                EquivalenceClassSize = other.EquivalenceClassSize;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    quasiIdsValues_.AddEntriesFrom(input, _repeated_quasiIdsValues_codec);
                    break;
                  }
                  case 16: {
                    EquivalenceClassSize = input.ReadInt64();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class KAnonymityHistogramBucket : pb::IMessage<KAnonymityHistogramBucket> {
            private static readonly pb::MessageParser<KAnonymityHistogramBucket> _parser = new pb::MessageParser<KAnonymityHistogramBucket>(() => new KAnonymityHistogramBucket());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<KAnonymityHistogramBucket> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KAnonymityResult.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KAnonymityHistogramBucket() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KAnonymityHistogramBucket(KAnonymityHistogramBucket other) : this() {
              equivalenceClassSizeLowerBound_ = other.equivalenceClassSizeLowerBound_;
              equivalenceClassSizeUpperBound_ = other.equivalenceClassSizeUpperBound_;
              bucketSize_ = other.bucketSize_;
              bucketValues_ = other.bucketValues_.Clone();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KAnonymityHistogramBucket Clone() {
              return new KAnonymityHistogramBucket(this);
            }

            /// <summary>Field number for the "equivalence_class_size_lower_bound" field.</summary>
            public const int EquivalenceClassSizeLowerBoundFieldNumber = 1;
            private long equivalenceClassSizeLowerBound_;
            /// <summary>
            /// Lower bound on the size of the equivalence classes in this bucket.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long EquivalenceClassSizeLowerBound {
              get { return equivalenceClassSizeLowerBound_; }
              set {
                equivalenceClassSizeLowerBound_ = value;
              }
            }

            /// <summary>Field number for the "equivalence_class_size_upper_bound" field.</summary>
            public const int EquivalenceClassSizeUpperBoundFieldNumber = 2;
            private long equivalenceClassSizeUpperBound_;
            /// <summary>
            /// Upper bound on the size of the equivalence classes in this bucket.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long EquivalenceClassSizeUpperBound {
              get { return equivalenceClassSizeUpperBound_; }
              set {
                equivalenceClassSizeUpperBound_ = value;
              }
            }

            /// <summary>Field number for the "bucket_size" field.</summary>
            public const int BucketSizeFieldNumber = 3;
            private long bucketSize_;
            /// <summary>
            /// Total number of equivalence classes in this bucket.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long BucketSize {
              get { return bucketSize_; }
              set {
                bucketSize_ = value;
              }
            }

            /// <summary>Field number for the "bucket_values" field.</summary>
            public const int BucketValuesFieldNumber = 4;
            private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KAnonymityResult.Types.KAnonymityEquivalenceClass> _repeated_bucketValues_codec
                = pb::FieldCodec.ForMessage(34, global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KAnonymityResult.Types.KAnonymityEquivalenceClass.Parser);
            private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KAnonymityResult.Types.KAnonymityEquivalenceClass> bucketValues_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KAnonymityResult.Types.KAnonymityEquivalenceClass>();
            /// <summary>
            /// Sample of equivalence classes in this bucket. The total number of
            /// classes returned per bucket is capped at 20.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KAnonymityResult.Types.KAnonymityEquivalenceClass> BucketValues {
              get { return bucketValues_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as KAnonymityHistogramBucket);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(KAnonymityHistogramBucket other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (EquivalenceClassSizeLowerBound != other.EquivalenceClassSizeLowerBound) return false;
              if (EquivalenceClassSizeUpperBound != other.EquivalenceClassSizeUpperBound) return false;
              if (BucketSize != other.BucketSize) return false;
              if(!bucketValues_.Equals(other.bucketValues_)) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (EquivalenceClassSizeLowerBound != 0L) hash ^= EquivalenceClassSizeLowerBound.GetHashCode();
              if (EquivalenceClassSizeUpperBound != 0L) hash ^= EquivalenceClassSizeUpperBound.GetHashCode();
              if (BucketSize != 0L) hash ^= BucketSize.GetHashCode();
              hash ^= bucketValues_.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (EquivalenceClassSizeLowerBound != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(EquivalenceClassSizeLowerBound);
              }
              if (EquivalenceClassSizeUpperBound != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(EquivalenceClassSizeUpperBound);
              }
              if (BucketSize != 0L) {
                output.WriteRawTag(24);
                output.WriteInt64(BucketSize);
              }
              bucketValues_.WriteTo(output, _repeated_bucketValues_codec);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (EquivalenceClassSizeLowerBound != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(EquivalenceClassSizeLowerBound);
              }
              if (EquivalenceClassSizeUpperBound != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(EquivalenceClassSizeUpperBound);
              }
              if (BucketSize != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(BucketSize);
              }
              size += bucketValues_.CalculateSize(_repeated_bucketValues_codec);
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(KAnonymityHistogramBucket other) {
              if (other == null) {
                return;
              }
              if (other.EquivalenceClassSizeLowerBound != 0L) {
                EquivalenceClassSizeLowerBound = other.EquivalenceClassSizeLowerBound;
              }
              if (other.EquivalenceClassSizeUpperBound != 0L) {
                EquivalenceClassSizeUpperBound = other.EquivalenceClassSizeUpperBound;
              }
              if (other.BucketSize != 0L) {
                BucketSize = other.BucketSize;
              }
              bucketValues_.Add(other.bucketValues_);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    EquivalenceClassSizeLowerBound = input.ReadInt64();
                    break;
                  }
                  case 16: {
                    EquivalenceClassSizeUpperBound = input.ReadInt64();
                    break;
                  }
                  case 24: {
                    BucketSize = input.ReadInt64();
                    break;
                  }
                  case 34: {
                    bucketValues_.AddEntriesFrom(input, _repeated_bucketValues_codec);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      /// <summary>
      /// Result of the l-diversity computation.
      /// </summary>
      public sealed partial class LDiversityResult : pb::IMessage<LDiversityResult> {
        private static readonly pb::MessageParser<LDiversityResult> _parser = new pb::MessageParser<LDiversityResult>(() => new LDiversityResult());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LDiversityResult> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LDiversityResult() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LDiversityResult(LDiversityResult other) : this() {
          sensitiveValueFrequencyHistogramBuckets_ = other.sensitiveValueFrequencyHistogramBuckets_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LDiversityResult Clone() {
          return new LDiversityResult(this);
        }

        /// <summary>Field number for the "sensitive_value_frequency_histogram_buckets" field.</summary>
        public const int SensitiveValueFrequencyHistogramBucketsFieldNumber = 5;
        private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.LDiversityResult.Types.LDiversityHistogramBucket> _repeated_sensitiveValueFrequencyHistogramBuckets_codec
            = pb::FieldCodec.ForMessage(42, global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.LDiversityResult.Types.LDiversityHistogramBucket.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.LDiversityResult.Types.LDiversityHistogramBucket> sensitiveValueFrequencyHistogramBuckets_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.LDiversityResult.Types.LDiversityHistogramBucket>();
        /// <summary>
        /// Histogram of l-diversity equivalence class sensitive value frequencies.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.LDiversityResult.Types.LDiversityHistogramBucket> SensitiveValueFrequencyHistogramBuckets {
          get { return sensitiveValueFrequencyHistogramBuckets_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LDiversityResult);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LDiversityResult other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!sensitiveValueFrequencyHistogramBuckets_.Equals(other.sensitiveValueFrequencyHistogramBuckets_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= sensitiveValueFrequencyHistogramBuckets_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          sensitiveValueFrequencyHistogramBuckets_.WriteTo(output, _repeated_sensitiveValueFrequencyHistogramBuckets_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += sensitiveValueFrequencyHistogramBuckets_.CalculateSize(_repeated_sensitiveValueFrequencyHistogramBuckets_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LDiversityResult other) {
          if (other == null) {
            return;
          }
          sensitiveValueFrequencyHistogramBuckets_.Add(other.sensitiveValueFrequencyHistogramBuckets_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 42: {
                sensitiveValueFrequencyHistogramBuckets_.AddEntriesFrom(input, _repeated_sensitiveValueFrequencyHistogramBuckets_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the LDiversityResult message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// The set of columns' values that share the same ldiversity value.
          /// </summary>
          public sealed partial class LDiversityEquivalenceClass : pb::IMessage<LDiversityEquivalenceClass> {
            private static readonly pb::MessageParser<LDiversityEquivalenceClass> _parser = new pb::MessageParser<LDiversityEquivalenceClass>(() => new LDiversityEquivalenceClass());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<LDiversityEquivalenceClass> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.LDiversityResult.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public LDiversityEquivalenceClass() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public LDiversityEquivalenceClass(LDiversityEquivalenceClass other) : this() {
              quasiIdsValues_ = other.quasiIdsValues_.Clone();
              equivalenceClassSize_ = other.equivalenceClassSize_;
              numDistinctSensitiveValues_ = other.numDistinctSensitiveValues_;
              topSensitiveValues_ = other.topSensitiveValues_.Clone();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public LDiversityEquivalenceClass Clone() {
              return new LDiversityEquivalenceClass(this);
            }

            /// <summary>Field number for the "quasi_ids_values" field.</summary>
            public const int QuasiIdsValuesFieldNumber = 1;
            private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.Value> _repeated_quasiIdsValues_codec
                = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta2.Value.Parser);
            private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Value> quasiIdsValues_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Value>();
            /// <summary>
            /// Quasi-identifier values defining the k-anonymity equivalence
            /// class. The order is always the same as the original request.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Value> QuasiIdsValues {
              get { return quasiIdsValues_; }
            }

            /// <summary>Field number for the "equivalence_class_size" field.</summary>
            public const int EquivalenceClassSizeFieldNumber = 2;
            private long equivalenceClassSize_;
            /// <summary>
            /// Size of the k-anonymity equivalence class.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long EquivalenceClassSize {
              get { return equivalenceClassSize_; }
              set {
                equivalenceClassSize_ = value;
              }
            }

            /// <summary>Field number for the "num_distinct_sensitive_values" field.</summary>
            public const int NumDistinctSensitiveValuesFieldNumber = 3;
            private long numDistinctSensitiveValues_;
            /// <summary>
            /// Number of distinct sensitive values in this equivalence class.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long NumDistinctSensitiveValues {
              get { return numDistinctSensitiveValues_; }
              set {
                numDistinctSensitiveValues_ = value;
              }
            }

            /// <summary>Field number for the "top_sensitive_values" field.</summary>
            public const int TopSensitiveValuesFieldNumber = 4;
            private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.ValueFrequency> _repeated_topSensitiveValues_codec
                = pb::FieldCodec.ForMessage(34, global::Google.Cloud.Dlp.V2Beta2.ValueFrequency.Parser);
            private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.ValueFrequency> topSensitiveValues_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.ValueFrequency>();
            /// <summary>
            /// Estimated frequencies of top sensitive values.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.ValueFrequency> TopSensitiveValues {
              get { return topSensitiveValues_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as LDiversityEquivalenceClass);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(LDiversityEquivalenceClass other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!quasiIdsValues_.Equals(other.quasiIdsValues_)) return false;
              if (EquivalenceClassSize != other.EquivalenceClassSize) return false;
              if (NumDistinctSensitiveValues != other.NumDistinctSensitiveValues) return false;
              if(!topSensitiveValues_.Equals(other.topSensitiveValues_)) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= quasiIdsValues_.GetHashCode();
              if (EquivalenceClassSize != 0L) hash ^= EquivalenceClassSize.GetHashCode();
              if (NumDistinctSensitiveValues != 0L) hash ^= NumDistinctSensitiveValues.GetHashCode();
              hash ^= topSensitiveValues_.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              quasiIdsValues_.WriteTo(output, _repeated_quasiIdsValues_codec);
              if (EquivalenceClassSize != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(EquivalenceClassSize);
              }
              if (NumDistinctSensitiveValues != 0L) {
                output.WriteRawTag(24);
                output.WriteInt64(NumDistinctSensitiveValues);
              }
              topSensitiveValues_.WriteTo(output, _repeated_topSensitiveValues_codec);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += quasiIdsValues_.CalculateSize(_repeated_quasiIdsValues_codec);
              if (EquivalenceClassSize != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(EquivalenceClassSize);
              }
              if (NumDistinctSensitiveValues != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(NumDistinctSensitiveValues);
              }
              size += topSensitiveValues_.CalculateSize(_repeated_topSensitiveValues_codec);
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(LDiversityEquivalenceClass other) {
              if (other == null) {
                return;
              }
              quasiIdsValues_.Add(other.quasiIdsValues_);
              if (other.EquivalenceClassSize != 0L) {
                EquivalenceClassSize = other.EquivalenceClassSize;
              }
              if (other.NumDistinctSensitiveValues != 0L) {
                NumDistinctSensitiveValues = other.NumDistinctSensitiveValues;
              }
              topSensitiveValues_.Add(other.topSensitiveValues_);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    quasiIdsValues_.AddEntriesFrom(input, _repeated_quasiIdsValues_codec);
                    break;
                  }
                  case 16: {
                    EquivalenceClassSize = input.ReadInt64();
                    break;
                  }
                  case 24: {
                    NumDistinctSensitiveValues = input.ReadInt64();
                    break;
                  }
                  case 34: {
                    topSensitiveValues_.AddEntriesFrom(input, _repeated_topSensitiveValues_codec);
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class LDiversityHistogramBucket : pb::IMessage<LDiversityHistogramBucket> {
            private static readonly pb::MessageParser<LDiversityHistogramBucket> _parser = new pb::MessageParser<LDiversityHistogramBucket>(() => new LDiversityHistogramBucket());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<LDiversityHistogramBucket> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.LDiversityResult.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public LDiversityHistogramBucket() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public LDiversityHistogramBucket(LDiversityHistogramBucket other) : this() {
              sensitiveValueFrequencyLowerBound_ = other.sensitiveValueFrequencyLowerBound_;
              sensitiveValueFrequencyUpperBound_ = other.sensitiveValueFrequencyUpperBound_;
              bucketSize_ = other.bucketSize_;
              bucketValues_ = other.bucketValues_.Clone();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public LDiversityHistogramBucket Clone() {
              return new LDiversityHistogramBucket(this);
            }

            /// <summary>Field number for the "sensitive_value_frequency_lower_bound" field.</summary>
            public const int SensitiveValueFrequencyLowerBoundFieldNumber = 1;
            private long sensitiveValueFrequencyLowerBound_;
            /// <summary>
            /// Lower bound on the sensitive value frequencies of the equivalence
            /// classes in this bucket.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long SensitiveValueFrequencyLowerBound {
              get { return sensitiveValueFrequencyLowerBound_; }
              set {
                sensitiveValueFrequencyLowerBound_ = value;
              }
            }

            /// <summary>Field number for the "sensitive_value_frequency_upper_bound" field.</summary>
            public const int SensitiveValueFrequencyUpperBoundFieldNumber = 2;
            private long sensitiveValueFrequencyUpperBound_;
            /// <summary>
            /// Upper bound on the sensitive value frequencies of the equivalence
            /// classes in this bucket.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long SensitiveValueFrequencyUpperBound {
              get { return sensitiveValueFrequencyUpperBound_; }
              set {
                sensitiveValueFrequencyUpperBound_ = value;
              }
            }

            /// <summary>Field number for the "bucket_size" field.</summary>
            public const int BucketSizeFieldNumber = 3;
            private long bucketSize_;
            /// <summary>
            /// Total number of equivalence classes in this bucket.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long BucketSize {
              get { return bucketSize_; }
              set {
                bucketSize_ = value;
              }
            }

            /// <summary>Field number for the "bucket_values" field.</summary>
            public const int BucketValuesFieldNumber = 4;
            private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.LDiversityResult.Types.LDiversityEquivalenceClass> _repeated_bucketValues_codec
                = pb::FieldCodec.ForMessage(34, global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.LDiversityResult.Types.LDiversityEquivalenceClass.Parser);
            private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.LDiversityResult.Types.LDiversityEquivalenceClass> bucketValues_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.LDiversityResult.Types.LDiversityEquivalenceClass>();
            /// <summary>
            /// Sample of equivalence classes in this bucket. The total number of
            /// classes returned per bucket is capped at 20.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.LDiversityResult.Types.LDiversityEquivalenceClass> BucketValues {
              get { return bucketValues_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as LDiversityHistogramBucket);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(LDiversityHistogramBucket other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (SensitiveValueFrequencyLowerBound != other.SensitiveValueFrequencyLowerBound) return false;
              if (SensitiveValueFrequencyUpperBound != other.SensitiveValueFrequencyUpperBound) return false;
              if (BucketSize != other.BucketSize) return false;
              if(!bucketValues_.Equals(other.bucketValues_)) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (SensitiveValueFrequencyLowerBound != 0L) hash ^= SensitiveValueFrequencyLowerBound.GetHashCode();
              if (SensitiveValueFrequencyUpperBound != 0L) hash ^= SensitiveValueFrequencyUpperBound.GetHashCode();
              if (BucketSize != 0L) hash ^= BucketSize.GetHashCode();
              hash ^= bucketValues_.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (SensitiveValueFrequencyLowerBound != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(SensitiveValueFrequencyLowerBound);
              }
              if (SensitiveValueFrequencyUpperBound != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(SensitiveValueFrequencyUpperBound);
              }
              if (BucketSize != 0L) {
                output.WriteRawTag(24);
                output.WriteInt64(BucketSize);
              }
              bucketValues_.WriteTo(output, _repeated_bucketValues_codec);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (SensitiveValueFrequencyLowerBound != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(SensitiveValueFrequencyLowerBound);
              }
              if (SensitiveValueFrequencyUpperBound != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(SensitiveValueFrequencyUpperBound);
              }
              if (BucketSize != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(BucketSize);
              }
              size += bucketValues_.CalculateSize(_repeated_bucketValues_codec);
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(LDiversityHistogramBucket other) {
              if (other == null) {
                return;
              }
              if (other.SensitiveValueFrequencyLowerBound != 0L) {
                SensitiveValueFrequencyLowerBound = other.SensitiveValueFrequencyLowerBound;
              }
              if (other.SensitiveValueFrequencyUpperBound != 0L) {
                SensitiveValueFrequencyUpperBound = other.SensitiveValueFrequencyUpperBound;
              }
              if (other.BucketSize != 0L) {
                BucketSize = other.BucketSize;
              }
              bucketValues_.Add(other.bucketValues_);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    SensitiveValueFrequencyLowerBound = input.ReadInt64();
                    break;
                  }
                  case 16: {
                    SensitiveValueFrequencyUpperBound = input.ReadInt64();
                    break;
                  }
                  case 24: {
                    BucketSize = input.ReadInt64();
                    break;
                  }
                  case 34: {
                    bucketValues_.AddEntriesFrom(input, _repeated_bucketValues_codec);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      /// <summary>
      /// Result of the reidentifiability analysis. Note that these results are an
      /// estimation, not exact values.
      /// </summary>
      public sealed partial class KMapEstimationResult : pb::IMessage<KMapEstimationResult> {
        private static readonly pb::MessageParser<KMapEstimationResult> _parser = new pb::MessageParser<KMapEstimationResult>(() => new KMapEstimationResult());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<KMapEstimationResult> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KMapEstimationResult() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KMapEstimationResult(KMapEstimationResult other) : this() {
          kMapEstimationHistogram_ = other.kMapEstimationHistogram_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KMapEstimationResult Clone() {
          return new KMapEstimationResult(this);
        }

        /// <summary>Field number for the "k_map_estimation_histogram" field.</summary>
        public const int KMapEstimationHistogramFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KMapEstimationResult.Types.KMapEstimationHistogramBucket> _repeated_kMapEstimationHistogram_codec
            = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KMapEstimationResult.Types.KMapEstimationHistogramBucket.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KMapEstimationResult.Types.KMapEstimationHistogramBucket> kMapEstimationHistogram_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KMapEstimationResult.Types.KMapEstimationHistogramBucket>();
        /// <summary>
        /// The intervals [min_anonymity, max_anonymity] do not overlap. If a value
        /// doesn't correspond to any such interval, the associated frequency is
        /// zero. For example, the following records:
        ///   {min_anonymity: 1, max_anonymity: 1, frequency: 17}
        ///   {min_anonymity: 2, max_anonymity: 3, frequency: 42}
        ///   {min_anonymity: 5, max_anonymity: 10, frequency: 99}
        /// mean that there are no record with an estimated anonymity of 4, 5, or
        /// larger than 10.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KMapEstimationResult.Types.KMapEstimationHistogramBucket> KMapEstimationHistogram {
          get { return kMapEstimationHistogram_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as KMapEstimationResult);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(KMapEstimationResult other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!kMapEstimationHistogram_.Equals(other.kMapEstimationHistogram_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= kMapEstimationHistogram_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          kMapEstimationHistogram_.WriteTo(output, _repeated_kMapEstimationHistogram_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += kMapEstimationHistogram_.CalculateSize(_repeated_kMapEstimationHistogram_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(KMapEstimationResult other) {
          if (other == null) {
            return;
          }
          kMapEstimationHistogram_.Add(other.kMapEstimationHistogram_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                kMapEstimationHistogram_.AddEntriesFrom(input, _repeated_kMapEstimationHistogram_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the KMapEstimationResult message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// A tuple of values for the quasi-identifier columns.
          /// </summary>
          public sealed partial class KMapEstimationQuasiIdValues : pb::IMessage<KMapEstimationQuasiIdValues> {
            private static readonly pb::MessageParser<KMapEstimationQuasiIdValues> _parser = new pb::MessageParser<KMapEstimationQuasiIdValues>(() => new KMapEstimationQuasiIdValues());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<KMapEstimationQuasiIdValues> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KMapEstimationResult.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KMapEstimationQuasiIdValues() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KMapEstimationQuasiIdValues(KMapEstimationQuasiIdValues other) : this() {
              quasiIdsValues_ = other.quasiIdsValues_.Clone();
              estimatedAnonymity_ = other.estimatedAnonymity_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KMapEstimationQuasiIdValues Clone() {
              return new KMapEstimationQuasiIdValues(this);
            }

            /// <summary>Field number for the "quasi_ids_values" field.</summary>
            public const int QuasiIdsValuesFieldNumber = 1;
            private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.Value> _repeated_quasiIdsValues_codec
                = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta2.Value.Parser);
            private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Value> quasiIdsValues_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Value>();
            /// <summary>
            /// The quasi-identifier values.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Value> QuasiIdsValues {
              get { return quasiIdsValues_; }
            }

            /// <summary>Field number for the "estimated_anonymity" field.</summary>
            public const int EstimatedAnonymityFieldNumber = 2;
            private long estimatedAnonymity_;
            /// <summary>
            /// The estimated anonymity for these quasi-identifier values.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long EstimatedAnonymity {
              get { return estimatedAnonymity_; }
              set {
                estimatedAnonymity_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as KMapEstimationQuasiIdValues);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(KMapEstimationQuasiIdValues other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!quasiIdsValues_.Equals(other.quasiIdsValues_)) return false;
              if (EstimatedAnonymity != other.EstimatedAnonymity) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= quasiIdsValues_.GetHashCode();
              if (EstimatedAnonymity != 0L) hash ^= EstimatedAnonymity.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              quasiIdsValues_.WriteTo(output, _repeated_quasiIdsValues_codec);
              if (EstimatedAnonymity != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(EstimatedAnonymity);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += quasiIdsValues_.CalculateSize(_repeated_quasiIdsValues_codec);
              if (EstimatedAnonymity != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(EstimatedAnonymity);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(KMapEstimationQuasiIdValues other) {
              if (other == null) {
                return;
              }
              quasiIdsValues_.Add(other.quasiIdsValues_);
              if (other.EstimatedAnonymity != 0L) {
                EstimatedAnonymity = other.EstimatedAnonymity;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    quasiIdsValues_.AddEntriesFrom(input, _repeated_quasiIdsValues_codec);
                    break;
                  }
                  case 16: {
                    EstimatedAnonymity = input.ReadInt64();
                    break;
                  }
                }
              }
            }

          }

          /// <summary>
          /// A KMapEstimationHistogramBucket message with the following values:
          ///   min_anonymity: 3
          ///   max_anonymity: 5
          ///   frequency: 42
          /// means that there are 42 records whose quasi-identifier values correspond
          /// to 3, 4 or 5 people in the overlying population. An important particular
          /// case is when min_anonymity = max_anonymity = 1: the frequency field then
          /// corresponds to the number of uniquely identifiable records.
          /// </summary>
          public sealed partial class KMapEstimationHistogramBucket : pb::IMessage<KMapEstimationHistogramBucket> {
            private static readonly pb::MessageParser<KMapEstimationHistogramBucket> _parser = new pb::MessageParser<KMapEstimationHistogramBucket>(() => new KMapEstimationHistogramBucket());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<KMapEstimationHistogramBucket> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KMapEstimationResult.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KMapEstimationHistogramBucket() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KMapEstimationHistogramBucket(KMapEstimationHistogramBucket other) : this() {
              minAnonymity_ = other.minAnonymity_;
              maxAnonymity_ = other.maxAnonymity_;
              bucketSize_ = other.bucketSize_;
              bucketValues_ = other.bucketValues_.Clone();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KMapEstimationHistogramBucket Clone() {
              return new KMapEstimationHistogramBucket(this);
            }

            /// <summary>Field number for the "min_anonymity" field.</summary>
            public const int MinAnonymityFieldNumber = 1;
            private long minAnonymity_;
            /// <summary>
            /// Always positive.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long MinAnonymity {
              get { return minAnonymity_; }
              set {
                minAnonymity_ = value;
              }
            }

            /// <summary>Field number for the "max_anonymity" field.</summary>
            public const int MaxAnonymityFieldNumber = 2;
            private long maxAnonymity_;
            /// <summary>
            /// Always greater than or equal to min_anonymity.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long MaxAnonymity {
              get { return maxAnonymity_; }
              set {
                maxAnonymity_ = value;
              }
            }

            /// <summary>Field number for the "bucket_size" field.</summary>
            public const int BucketSizeFieldNumber = 5;
            private long bucketSize_;
            /// <summary>
            /// Number of records within these anonymity bounds.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long BucketSize {
              get { return bucketSize_; }
              set {
                bucketSize_ = value;
              }
            }

            /// <summary>Field number for the "bucket_values" field.</summary>
            public const int BucketValuesFieldNumber = 6;
            private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KMapEstimationResult.Types.KMapEstimationQuasiIdValues> _repeated_bucketValues_codec
                = pb::FieldCodec.ForMessage(50, global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KMapEstimationResult.Types.KMapEstimationQuasiIdValues.Parser);
            private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KMapEstimationResult.Types.KMapEstimationQuasiIdValues> bucketValues_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KMapEstimationResult.Types.KMapEstimationQuasiIdValues>();
            /// <summary>
            /// Sample of quasi-identifier tuple values in this bucket. The total
            /// number of classes returned per bucket is capped at 20.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails.Types.KMapEstimationResult.Types.KMapEstimationQuasiIdValues> BucketValues {
              get { return bucketValues_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as KMapEstimationHistogramBucket);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(KMapEstimationHistogramBucket other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (MinAnonymity != other.MinAnonymity) return false;
              if (MaxAnonymity != other.MaxAnonymity) return false;
              if (BucketSize != other.BucketSize) return false;
              if(!bucketValues_.Equals(other.bucketValues_)) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (MinAnonymity != 0L) hash ^= MinAnonymity.GetHashCode();
              if (MaxAnonymity != 0L) hash ^= MaxAnonymity.GetHashCode();
              if (BucketSize != 0L) hash ^= BucketSize.GetHashCode();
              hash ^= bucketValues_.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (MinAnonymity != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(MinAnonymity);
              }
              if (MaxAnonymity != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(MaxAnonymity);
              }
              if (BucketSize != 0L) {
                output.WriteRawTag(40);
                output.WriteInt64(BucketSize);
              }
              bucketValues_.WriteTo(output, _repeated_bucketValues_codec);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (MinAnonymity != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinAnonymity);
              }
              if (MaxAnonymity != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxAnonymity);
              }
              if (BucketSize != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(BucketSize);
              }
              size += bucketValues_.CalculateSize(_repeated_bucketValues_codec);
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(KMapEstimationHistogramBucket other) {
              if (other == null) {
                return;
              }
              if (other.MinAnonymity != 0L) {
                MinAnonymity = other.MinAnonymity;
              }
              if (other.MaxAnonymity != 0L) {
                MaxAnonymity = other.MaxAnonymity;
              }
              if (other.BucketSize != 0L) {
                BucketSize = other.BucketSize;
              }
              bucketValues_.Add(other.bucketValues_);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    MinAnonymity = input.ReadInt64();
                    break;
                  }
                  case 16: {
                    MaxAnonymity = input.ReadInt64();
                    break;
                  }
                  case 40: {
                    BucketSize = input.ReadInt64();
                    break;
                  }
                  case 50: {
                    bucketValues_.AddEntriesFrom(input, _repeated_bucketValues_codec);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// A value of a field, including its frequency.
  /// </summary>
  public sealed partial class ValueFrequency : pb::IMessage<ValueFrequency> {
    private static readonly pb::MessageParser<ValueFrequency> _parser = new pb::MessageParser<ValueFrequency>(() => new ValueFrequency());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValueFrequency> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueFrequency() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueFrequency(ValueFrequency other) : this() {
      Value = other.value_ != null ? other.Value.Clone() : null;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueFrequency Clone() {
      return new ValueFrequency(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta2.Value value_;
    /// <summary>
    /// A value contained in the field in question.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.Value Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private long count_;
    /// <summary>
    /// How many times the value is contained in the field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValueFrequency);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValueFrequency other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Value, other.Value)) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (value_ != null) hash ^= Value.GetHashCode();
      if (Count != 0L) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (value_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Value);
      }
      if (Count != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValueFrequency other) {
      if (other == null) {
        return;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::Google.Cloud.Dlp.V2Beta2.Value();
        }
        Value.MergeFrom(other.Value);
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (value_ == null) {
              value_ = new global::Google.Cloud.Dlp.V2Beta2.Value();
            }
            input.ReadMessage(value_);
            break;
          }
          case 16: {
            Count = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Set of primitive values supported by the system.
  /// Note that for the purposes of inspection or transformation, the number
  /// of bytes considered to comprise a 'Value' is based on its representation
  /// as a UTF-8 encoded string. For example, if 'integer_value' is set to
  /// 123456789, the number of bytes would be counted as 9, even though an
  /// int64 only holds up to 8 bytes of data.
  /// </summary>
  public sealed partial class Value : pb::IMessage<Value> {
    private static readonly pb::MessageParser<Value> _parser = new pb::MessageParser<Value>(() => new Value());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Value> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value(Value other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.IntegerValue:
          IntegerValue = other.IntegerValue;
          break;
        case TypeOneofCase.FloatValue:
          FloatValue = other.FloatValue;
          break;
        case TypeOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case TypeOneofCase.BooleanValue:
          BooleanValue = other.BooleanValue;
          break;
        case TypeOneofCase.TimestampValue:
          TimestampValue = other.TimestampValue.Clone();
          break;
        case TypeOneofCase.TimeValue:
          TimeValue = other.TimeValue.Clone();
          break;
        case TypeOneofCase.DateValue:
          DateValue = other.DateValue.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value Clone() {
      return new Value(this);
    }

    /// <summary>Field number for the "integer_value" field.</summary>
    public const int IntegerValueFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IntegerValue {
      get { return typeCase_ == TypeOneofCase.IntegerValue ? (long) type_ : 0L; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.IntegerValue;
      }
    }

    /// <summary>Field number for the "float_value" field.</summary>
    public const int FloatValueFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FloatValue {
      get { return typeCase_ == TypeOneofCase.FloatValue ? (double) type_ : 0D; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.FloatValue;
      }
    }

    /// <summary>Field number for the "string_value" field.</summary>
    public const int StringValueFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return typeCase_ == TypeOneofCase.StringValue ? (string) type_ : ""; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        typeCase_ = TypeOneofCase.StringValue;
      }
    }

    /// <summary>Field number for the "boolean_value" field.</summary>
    public const int BooleanValueFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BooleanValue {
      get { return typeCase_ == TypeOneofCase.BooleanValue ? (bool) type_ : false; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.BooleanValue;
      }
    }

    /// <summary>Field number for the "timestamp_value" field.</summary>
    public const int TimestampValueFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp TimestampValue {
      get { return typeCase_ == TypeOneofCase.TimestampValue ? (global::Google.Protobuf.WellKnownTypes.Timestamp) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.TimestampValue;
      }
    }

    /// <summary>Field number for the "time_value" field.</summary>
    public const int TimeValueFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.TimeOfDay TimeValue {
      get { return typeCase_ == TypeOneofCase.TimeValue ? (global::Google.Type.TimeOfDay) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.TimeValue;
      }
    }

    /// <summary>Field number for the "date_value" field.</summary>
    public const int DateValueFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.Date DateValue {
      get { return typeCase_ == TypeOneofCase.DateValue ? (global::Google.Type.Date) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.DateValue;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      IntegerValue = 1,
      FloatValue = 2,
      StringValue = 3,
      BooleanValue = 4,
      TimestampValue = 5,
      TimeValue = 6,
      DateValue = 7,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Value);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Value other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IntegerValue != other.IntegerValue) return false;
      if (FloatValue != other.FloatValue) return false;
      if (StringValue != other.StringValue) return false;
      if (BooleanValue != other.BooleanValue) return false;
      if (!object.Equals(TimestampValue, other.TimestampValue)) return false;
      if (!object.Equals(TimeValue, other.TimeValue)) return false;
      if (!object.Equals(DateValue, other.DateValue)) return false;
      if (TypeCase != other.TypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.IntegerValue) hash ^= IntegerValue.GetHashCode();
      if (typeCase_ == TypeOneofCase.FloatValue) hash ^= FloatValue.GetHashCode();
      if (typeCase_ == TypeOneofCase.StringValue) hash ^= StringValue.GetHashCode();
      if (typeCase_ == TypeOneofCase.BooleanValue) hash ^= BooleanValue.GetHashCode();
      if (typeCase_ == TypeOneofCase.TimestampValue) hash ^= TimestampValue.GetHashCode();
      if (typeCase_ == TypeOneofCase.TimeValue) hash ^= TimeValue.GetHashCode();
      if (typeCase_ == TypeOneofCase.DateValue) hash ^= DateValue.GetHashCode();
      hash ^= (int) typeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.IntegerValue) {
        output.WriteRawTag(8);
        output.WriteInt64(IntegerValue);
      }
      if (typeCase_ == TypeOneofCase.FloatValue) {
        output.WriteRawTag(17);
        output.WriteDouble(FloatValue);
      }
      if (typeCase_ == TypeOneofCase.StringValue) {
        output.WriteRawTag(26);
        output.WriteString(StringValue);
      }
      if (typeCase_ == TypeOneofCase.BooleanValue) {
        output.WriteRawTag(32);
        output.WriteBool(BooleanValue);
      }
      if (typeCase_ == TypeOneofCase.TimestampValue) {
        output.WriteRawTag(42);
        output.WriteMessage(TimestampValue);
      }
      if (typeCase_ == TypeOneofCase.TimeValue) {
        output.WriteRawTag(50);
        output.WriteMessage(TimeValue);
      }
      if (typeCase_ == TypeOneofCase.DateValue) {
        output.WriteRawTag(58);
        output.WriteMessage(DateValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.IntegerValue) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IntegerValue);
      }
      if (typeCase_ == TypeOneofCase.FloatValue) {
        size += 1 + 8;
      }
      if (typeCase_ == TypeOneofCase.StringValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (typeCase_ == TypeOneofCase.BooleanValue) {
        size += 1 + 1;
      }
      if (typeCase_ == TypeOneofCase.TimestampValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimestampValue);
      }
      if (typeCase_ == TypeOneofCase.TimeValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeValue);
      }
      if (typeCase_ == TypeOneofCase.DateValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DateValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Value other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.IntegerValue:
          IntegerValue = other.IntegerValue;
          break;
        case TypeOneofCase.FloatValue:
          FloatValue = other.FloatValue;
          break;
        case TypeOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case TypeOneofCase.BooleanValue:
          BooleanValue = other.BooleanValue;
          break;
        case TypeOneofCase.TimestampValue:
          TimestampValue = other.TimestampValue;
          break;
        case TypeOneofCase.TimeValue:
          TimeValue = other.TimeValue;
          break;
        case TypeOneofCase.DateValue:
          DateValue = other.DateValue;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IntegerValue = input.ReadInt64();
            break;
          }
          case 17: {
            FloatValue = input.ReadDouble();
            break;
          }
          case 26: {
            StringValue = input.ReadString();
            break;
          }
          case 32: {
            BooleanValue = input.ReadBool();
            break;
          }
          case 42: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (typeCase_ == TypeOneofCase.TimestampValue) {
              subBuilder.MergeFrom(TimestampValue);
            }
            input.ReadMessage(subBuilder);
            TimestampValue = subBuilder;
            break;
          }
          case 50: {
            global::Google.Type.TimeOfDay subBuilder = new global::Google.Type.TimeOfDay();
            if (typeCase_ == TypeOneofCase.TimeValue) {
              subBuilder.MergeFrom(TimeValue);
            }
            input.ReadMessage(subBuilder);
            TimeValue = subBuilder;
            break;
          }
          case 58: {
            global::Google.Type.Date subBuilder = new global::Google.Type.Date();
            if (typeCase_ == TypeOneofCase.DateValue) {
              subBuilder.MergeFrom(DateValue);
            }
            input.ReadMessage(subBuilder);
            DateValue = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The configuration that controls how the data will change.
  /// </summary>
  public sealed partial class DeidentifyConfig : pb::IMessage<DeidentifyConfig> {
    private static readonly pb::MessageParser<DeidentifyConfig> _parser = new pb::MessageParser<DeidentifyConfig>(() => new DeidentifyConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeidentifyConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeidentifyConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeidentifyConfig(DeidentifyConfig other) : this() {
      switch (other.TransformationCase) {
        case TransformationOneofCase.InfoTypeTransformations:
          InfoTypeTransformations = other.InfoTypeTransformations.Clone();
          break;
        case TransformationOneofCase.RecordTransformations:
          RecordTransformations = other.RecordTransformations.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeidentifyConfig Clone() {
      return new DeidentifyConfig(this);
    }

    /// <summary>Field number for the "info_type_transformations" field.</summary>
    public const int InfoTypeTransformationsFieldNumber = 1;
    /// <summary>
    /// Treat the dataset as free-form text and apply the same free text
    /// transformation everywhere.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.InfoTypeTransformations InfoTypeTransformations {
      get { return transformationCase_ == TransformationOneofCase.InfoTypeTransformations ? (global::Google.Cloud.Dlp.V2Beta2.InfoTypeTransformations) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.InfoTypeTransformations;
      }
    }

    /// <summary>Field number for the "record_transformations" field.</summary>
    public const int RecordTransformationsFieldNumber = 2;
    /// <summary>
    /// Treat the dataset as structured. Transformations can be applied to
    /// specific locations within structured datasets, such as transforming
    /// a column within a table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.RecordTransformations RecordTransformations {
      get { return transformationCase_ == TransformationOneofCase.RecordTransformations ? (global::Google.Cloud.Dlp.V2Beta2.RecordTransformations) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.RecordTransformations;
      }
    }

    private object transformation_;
    /// <summary>Enum of possible cases for the "transformation" oneof.</summary>
    public enum TransformationOneofCase {
      None = 0,
      InfoTypeTransformations = 1,
      RecordTransformations = 2,
    }
    private TransformationOneofCase transformationCase_ = TransformationOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformationOneofCase TransformationCase {
      get { return transformationCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTransformation() {
      transformationCase_ = TransformationOneofCase.None;
      transformation_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeidentifyConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeidentifyConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InfoTypeTransformations, other.InfoTypeTransformations)) return false;
      if (!object.Equals(RecordTransformations, other.RecordTransformations)) return false;
      if (TransformationCase != other.TransformationCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transformationCase_ == TransformationOneofCase.InfoTypeTransformations) hash ^= InfoTypeTransformations.GetHashCode();
      if (transformationCase_ == TransformationOneofCase.RecordTransformations) hash ^= RecordTransformations.GetHashCode();
      hash ^= (int) transformationCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transformationCase_ == TransformationOneofCase.InfoTypeTransformations) {
        output.WriteRawTag(10);
        output.WriteMessage(InfoTypeTransformations);
      }
      if (transformationCase_ == TransformationOneofCase.RecordTransformations) {
        output.WriteRawTag(18);
        output.WriteMessage(RecordTransformations);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transformationCase_ == TransformationOneofCase.InfoTypeTransformations) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoTypeTransformations);
      }
      if (transformationCase_ == TransformationOneofCase.RecordTransformations) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecordTransformations);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeidentifyConfig other) {
      if (other == null) {
        return;
      }
      switch (other.TransformationCase) {
        case TransformationOneofCase.InfoTypeTransformations:
          InfoTypeTransformations = other.InfoTypeTransformations;
          break;
        case TransformationOneofCase.RecordTransformations:
          RecordTransformations = other.RecordTransformations;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Cloud.Dlp.V2Beta2.InfoTypeTransformations subBuilder = new global::Google.Cloud.Dlp.V2Beta2.InfoTypeTransformations();
            if (transformationCase_ == TransformationOneofCase.InfoTypeTransformations) {
              subBuilder.MergeFrom(InfoTypeTransformations);
            }
            input.ReadMessage(subBuilder);
            InfoTypeTransformations = subBuilder;
            break;
          }
          case 18: {
            global::Google.Cloud.Dlp.V2Beta2.RecordTransformations subBuilder = new global::Google.Cloud.Dlp.V2Beta2.RecordTransformations();
            if (transformationCase_ == TransformationOneofCase.RecordTransformations) {
              subBuilder.MergeFrom(RecordTransformations);
            }
            input.ReadMessage(subBuilder);
            RecordTransformations = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A rule for transforming a value.
  /// </summary>
  public sealed partial class PrimitiveTransformation : pb::IMessage<PrimitiveTransformation> {
    private static readonly pb::MessageParser<PrimitiveTransformation> _parser = new pb::MessageParser<PrimitiveTransformation>(() => new PrimitiveTransformation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrimitiveTransformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimitiveTransformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimitiveTransformation(PrimitiveTransformation other) : this() {
      switch (other.TransformationCase) {
        case TransformationOneofCase.ReplaceConfig:
          ReplaceConfig = other.ReplaceConfig.Clone();
          break;
        case TransformationOneofCase.RedactConfig:
          RedactConfig = other.RedactConfig.Clone();
          break;
        case TransformationOneofCase.CharacterMaskConfig:
          CharacterMaskConfig = other.CharacterMaskConfig.Clone();
          break;
        case TransformationOneofCase.CryptoReplaceFfxFpeConfig:
          CryptoReplaceFfxFpeConfig = other.CryptoReplaceFfxFpeConfig.Clone();
          break;
        case TransformationOneofCase.FixedSizeBucketingConfig:
          FixedSizeBucketingConfig = other.FixedSizeBucketingConfig.Clone();
          break;
        case TransformationOneofCase.BucketingConfig:
          BucketingConfig = other.BucketingConfig.Clone();
          break;
        case TransformationOneofCase.ReplaceWithInfoTypeConfig:
          ReplaceWithInfoTypeConfig = other.ReplaceWithInfoTypeConfig.Clone();
          break;
        case TransformationOneofCase.TimePartConfig:
          TimePartConfig = other.TimePartConfig.Clone();
          break;
        case TransformationOneofCase.CryptoHashConfig:
          CryptoHashConfig = other.CryptoHashConfig.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimitiveTransformation Clone() {
      return new PrimitiveTransformation(this);
    }

    /// <summary>Field number for the "replace_config" field.</summary>
    public const int ReplaceConfigFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.ReplaceValueConfig ReplaceConfig {
      get { return transformationCase_ == TransformationOneofCase.ReplaceConfig ? (global::Google.Cloud.Dlp.V2Beta2.ReplaceValueConfig) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.ReplaceConfig;
      }
    }

    /// <summary>Field number for the "redact_config" field.</summary>
    public const int RedactConfigFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.RedactConfig RedactConfig {
      get { return transformationCase_ == TransformationOneofCase.RedactConfig ? (global::Google.Cloud.Dlp.V2Beta2.RedactConfig) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.RedactConfig;
      }
    }

    /// <summary>Field number for the "character_mask_config" field.</summary>
    public const int CharacterMaskConfigFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.CharacterMaskConfig CharacterMaskConfig {
      get { return transformationCase_ == TransformationOneofCase.CharacterMaskConfig ? (global::Google.Cloud.Dlp.V2Beta2.CharacterMaskConfig) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.CharacterMaskConfig;
      }
    }

    /// <summary>Field number for the "crypto_replace_ffx_fpe_config" field.</summary>
    public const int CryptoReplaceFfxFpeConfigFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.CryptoReplaceFfxFpeConfig CryptoReplaceFfxFpeConfig {
      get { return transformationCase_ == TransformationOneofCase.CryptoReplaceFfxFpeConfig ? (global::Google.Cloud.Dlp.V2Beta2.CryptoReplaceFfxFpeConfig) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.CryptoReplaceFfxFpeConfig;
      }
    }

    /// <summary>Field number for the "fixed_size_bucketing_config" field.</summary>
    public const int FixedSizeBucketingConfigFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.FixedSizeBucketingConfig FixedSizeBucketingConfig {
      get { return transformationCase_ == TransformationOneofCase.FixedSizeBucketingConfig ? (global::Google.Cloud.Dlp.V2Beta2.FixedSizeBucketingConfig) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.FixedSizeBucketingConfig;
      }
    }

    /// <summary>Field number for the "bucketing_config" field.</summary>
    public const int BucketingConfigFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.BucketingConfig BucketingConfig {
      get { return transformationCase_ == TransformationOneofCase.BucketingConfig ? (global::Google.Cloud.Dlp.V2Beta2.BucketingConfig) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.BucketingConfig;
      }
    }

    /// <summary>Field number for the "replace_with_info_type_config" field.</summary>
    public const int ReplaceWithInfoTypeConfigFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.ReplaceWithInfoTypeConfig ReplaceWithInfoTypeConfig {
      get { return transformationCase_ == TransformationOneofCase.ReplaceWithInfoTypeConfig ? (global::Google.Cloud.Dlp.V2Beta2.ReplaceWithInfoTypeConfig) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.ReplaceWithInfoTypeConfig;
      }
    }

    /// <summary>Field number for the "time_part_config" field.</summary>
    public const int TimePartConfigFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.TimePartConfig TimePartConfig {
      get { return transformationCase_ == TransformationOneofCase.TimePartConfig ? (global::Google.Cloud.Dlp.V2Beta2.TimePartConfig) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.TimePartConfig;
      }
    }

    /// <summary>Field number for the "crypto_hash_config" field.</summary>
    public const int CryptoHashConfigFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.CryptoHashConfig CryptoHashConfig {
      get { return transformationCase_ == TransformationOneofCase.CryptoHashConfig ? (global::Google.Cloud.Dlp.V2Beta2.CryptoHashConfig) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.CryptoHashConfig;
      }
    }

    private object transformation_;
    /// <summary>Enum of possible cases for the "transformation" oneof.</summary>
    public enum TransformationOneofCase {
      None = 0,
      ReplaceConfig = 1,
      RedactConfig = 2,
      CharacterMaskConfig = 3,
      CryptoReplaceFfxFpeConfig = 4,
      FixedSizeBucketingConfig = 5,
      BucketingConfig = 6,
      ReplaceWithInfoTypeConfig = 7,
      TimePartConfig = 8,
      CryptoHashConfig = 9,
    }
    private TransformationOneofCase transformationCase_ = TransformationOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformationOneofCase TransformationCase {
      get { return transformationCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTransformation() {
      transformationCase_ = TransformationOneofCase.None;
      transformation_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrimitiveTransformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrimitiveTransformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ReplaceConfig, other.ReplaceConfig)) return false;
      if (!object.Equals(RedactConfig, other.RedactConfig)) return false;
      if (!object.Equals(CharacterMaskConfig, other.CharacterMaskConfig)) return false;
      if (!object.Equals(CryptoReplaceFfxFpeConfig, other.CryptoReplaceFfxFpeConfig)) return false;
      if (!object.Equals(FixedSizeBucketingConfig, other.FixedSizeBucketingConfig)) return false;
      if (!object.Equals(BucketingConfig, other.BucketingConfig)) return false;
      if (!object.Equals(ReplaceWithInfoTypeConfig, other.ReplaceWithInfoTypeConfig)) return false;
      if (!object.Equals(TimePartConfig, other.TimePartConfig)) return false;
      if (!object.Equals(CryptoHashConfig, other.CryptoHashConfig)) return false;
      if (TransformationCase != other.TransformationCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transformationCase_ == TransformationOneofCase.ReplaceConfig) hash ^= ReplaceConfig.GetHashCode();
      if (transformationCase_ == TransformationOneofCase.RedactConfig) hash ^= RedactConfig.GetHashCode();
      if (transformationCase_ == TransformationOneofCase.CharacterMaskConfig) hash ^= CharacterMaskConfig.GetHashCode();
      if (transformationCase_ == TransformationOneofCase.CryptoReplaceFfxFpeConfig) hash ^= CryptoReplaceFfxFpeConfig.GetHashCode();
      if (transformationCase_ == TransformationOneofCase.FixedSizeBucketingConfig) hash ^= FixedSizeBucketingConfig.GetHashCode();
      if (transformationCase_ == TransformationOneofCase.BucketingConfig) hash ^= BucketingConfig.GetHashCode();
      if (transformationCase_ == TransformationOneofCase.ReplaceWithInfoTypeConfig) hash ^= ReplaceWithInfoTypeConfig.GetHashCode();
      if (transformationCase_ == TransformationOneofCase.TimePartConfig) hash ^= TimePartConfig.GetHashCode();
      if (transformationCase_ == TransformationOneofCase.CryptoHashConfig) hash ^= CryptoHashConfig.GetHashCode();
      hash ^= (int) transformationCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transformationCase_ == TransformationOneofCase.ReplaceConfig) {
        output.WriteRawTag(10);
        output.WriteMessage(ReplaceConfig);
      }
      if (transformationCase_ == TransformationOneofCase.RedactConfig) {
        output.WriteRawTag(18);
        output.WriteMessage(RedactConfig);
      }
      if (transformationCase_ == TransformationOneofCase.CharacterMaskConfig) {
        output.WriteRawTag(26);
        output.WriteMessage(CharacterMaskConfig);
      }
      if (transformationCase_ == TransformationOneofCase.CryptoReplaceFfxFpeConfig) {
        output.WriteRawTag(34);
        output.WriteMessage(CryptoReplaceFfxFpeConfig);
      }
      if (transformationCase_ == TransformationOneofCase.FixedSizeBucketingConfig) {
        output.WriteRawTag(42);
        output.WriteMessage(FixedSizeBucketingConfig);
      }
      if (transformationCase_ == TransformationOneofCase.BucketingConfig) {
        output.WriteRawTag(50);
        output.WriteMessage(BucketingConfig);
      }
      if (transformationCase_ == TransformationOneofCase.ReplaceWithInfoTypeConfig) {
        output.WriteRawTag(58);
        output.WriteMessage(ReplaceWithInfoTypeConfig);
      }
      if (transformationCase_ == TransformationOneofCase.TimePartConfig) {
        output.WriteRawTag(66);
        output.WriteMessage(TimePartConfig);
      }
      if (transformationCase_ == TransformationOneofCase.CryptoHashConfig) {
        output.WriteRawTag(74);
        output.WriteMessage(CryptoHashConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transformationCase_ == TransformationOneofCase.ReplaceConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReplaceConfig);
      }
      if (transformationCase_ == TransformationOneofCase.RedactConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedactConfig);
      }
      if (transformationCase_ == TransformationOneofCase.CharacterMaskConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CharacterMaskConfig);
      }
      if (transformationCase_ == TransformationOneofCase.CryptoReplaceFfxFpeConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CryptoReplaceFfxFpeConfig);
      }
      if (transformationCase_ == TransformationOneofCase.FixedSizeBucketingConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FixedSizeBucketingConfig);
      }
      if (transformationCase_ == TransformationOneofCase.BucketingConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BucketingConfig);
      }
      if (transformationCase_ == TransformationOneofCase.ReplaceWithInfoTypeConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReplaceWithInfoTypeConfig);
      }
      if (transformationCase_ == TransformationOneofCase.TimePartConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimePartConfig);
      }
      if (transformationCase_ == TransformationOneofCase.CryptoHashConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CryptoHashConfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrimitiveTransformation other) {
      if (other == null) {
        return;
      }
      switch (other.TransformationCase) {
        case TransformationOneofCase.ReplaceConfig:
          ReplaceConfig = other.ReplaceConfig;
          break;
        case TransformationOneofCase.RedactConfig:
          RedactConfig = other.RedactConfig;
          break;
        case TransformationOneofCase.CharacterMaskConfig:
          CharacterMaskConfig = other.CharacterMaskConfig;
          break;
        case TransformationOneofCase.CryptoReplaceFfxFpeConfig:
          CryptoReplaceFfxFpeConfig = other.CryptoReplaceFfxFpeConfig;
          break;
        case TransformationOneofCase.FixedSizeBucketingConfig:
          FixedSizeBucketingConfig = other.FixedSizeBucketingConfig;
          break;
        case TransformationOneofCase.BucketingConfig:
          BucketingConfig = other.BucketingConfig;
          break;
        case TransformationOneofCase.ReplaceWithInfoTypeConfig:
          ReplaceWithInfoTypeConfig = other.ReplaceWithInfoTypeConfig;
          break;
        case TransformationOneofCase.TimePartConfig:
          TimePartConfig = other.TimePartConfig;
          break;
        case TransformationOneofCase.CryptoHashConfig:
          CryptoHashConfig = other.CryptoHashConfig;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Cloud.Dlp.V2Beta2.ReplaceValueConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta2.ReplaceValueConfig();
            if (transformationCase_ == TransformationOneofCase.ReplaceConfig) {
              subBuilder.MergeFrom(ReplaceConfig);
            }
            input.ReadMessage(subBuilder);
            ReplaceConfig = subBuilder;
            break;
          }
          case 18: {
            global::Google.Cloud.Dlp.V2Beta2.RedactConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta2.RedactConfig();
            if (transformationCase_ == TransformationOneofCase.RedactConfig) {
              subBuilder.MergeFrom(RedactConfig);
            }
            input.ReadMessage(subBuilder);
            RedactConfig = subBuilder;
            break;
          }
          case 26: {
            global::Google.Cloud.Dlp.V2Beta2.CharacterMaskConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta2.CharacterMaskConfig();
            if (transformationCase_ == TransformationOneofCase.CharacterMaskConfig) {
              subBuilder.MergeFrom(CharacterMaskConfig);
            }
            input.ReadMessage(subBuilder);
            CharacterMaskConfig = subBuilder;
            break;
          }
          case 34: {
            global::Google.Cloud.Dlp.V2Beta2.CryptoReplaceFfxFpeConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta2.CryptoReplaceFfxFpeConfig();
            if (transformationCase_ == TransformationOneofCase.CryptoReplaceFfxFpeConfig) {
              subBuilder.MergeFrom(CryptoReplaceFfxFpeConfig);
            }
            input.ReadMessage(subBuilder);
            CryptoReplaceFfxFpeConfig = subBuilder;
            break;
          }
          case 42: {
            global::Google.Cloud.Dlp.V2Beta2.FixedSizeBucketingConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta2.FixedSizeBucketingConfig();
            if (transformationCase_ == TransformationOneofCase.FixedSizeBucketingConfig) {
              subBuilder.MergeFrom(FixedSizeBucketingConfig);
            }
            input.ReadMessage(subBuilder);
            FixedSizeBucketingConfig = subBuilder;
            break;
          }
          case 50: {
            global::Google.Cloud.Dlp.V2Beta2.BucketingConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta2.BucketingConfig();
            if (transformationCase_ == TransformationOneofCase.BucketingConfig) {
              subBuilder.MergeFrom(BucketingConfig);
            }
            input.ReadMessage(subBuilder);
            BucketingConfig = subBuilder;
            break;
          }
          case 58: {
            global::Google.Cloud.Dlp.V2Beta2.ReplaceWithInfoTypeConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta2.ReplaceWithInfoTypeConfig();
            if (transformationCase_ == TransformationOneofCase.ReplaceWithInfoTypeConfig) {
              subBuilder.MergeFrom(ReplaceWithInfoTypeConfig);
            }
            input.ReadMessage(subBuilder);
            ReplaceWithInfoTypeConfig = subBuilder;
            break;
          }
          case 66: {
            global::Google.Cloud.Dlp.V2Beta2.TimePartConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta2.TimePartConfig();
            if (transformationCase_ == TransformationOneofCase.TimePartConfig) {
              subBuilder.MergeFrom(TimePartConfig);
            }
            input.ReadMessage(subBuilder);
            TimePartConfig = subBuilder;
            break;
          }
          case 74: {
            global::Google.Cloud.Dlp.V2Beta2.CryptoHashConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta2.CryptoHashConfig();
            if (transformationCase_ == TransformationOneofCase.CryptoHashConfig) {
              subBuilder.MergeFrom(CryptoHashConfig);
            }
            input.ReadMessage(subBuilder);
            CryptoHashConfig = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// For use with `Date`, `Timestamp`, and `TimeOfDay`, extract or preserve a
  /// portion of the value.
  /// </summary>
  public sealed partial class TimePartConfig : pb::IMessage<TimePartConfig> {
    private static readonly pb::MessageParser<TimePartConfig> _parser = new pb::MessageParser<TimePartConfig>(() => new TimePartConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimePartConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimePartConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimePartConfig(TimePartConfig other) : this() {
      partToExtract_ = other.partToExtract_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimePartConfig Clone() {
      return new TimePartConfig(this);
    }

    /// <summary>Field number for the "part_to_extract" field.</summary>
    public const int PartToExtractFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta2.TimePartConfig.Types.TimePart partToExtract_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.TimePartConfig.Types.TimePart PartToExtract {
      get { return partToExtract_; }
      set {
        partToExtract_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimePartConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimePartConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PartToExtract != other.PartToExtract) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PartToExtract != 0) hash ^= PartToExtract.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartToExtract != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PartToExtract);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartToExtract != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PartToExtract);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimePartConfig other) {
      if (other == null) {
        return;
      }
      if (other.PartToExtract != 0) {
        PartToExtract = other.PartToExtract;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            partToExtract_ = (global::Google.Cloud.Dlp.V2Beta2.TimePartConfig.Types.TimePart) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TimePartConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TimePart {
        [pbr::OriginalName("TIME_PART_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// [0-9999]
        /// </summary>
        [pbr::OriginalName("YEAR")] Year = 1,
        /// <summary>
        /// [1-12]
        /// </summary>
        [pbr::OriginalName("MONTH")] Month = 2,
        /// <summary>
        /// [1-31]
        /// </summary>
        [pbr::OriginalName("DAY_OF_MONTH")] DayOfMonth = 3,
        /// <summary>
        /// [1-7]
        /// </summary>
        [pbr::OriginalName("DAY_OF_WEEK")] DayOfWeek = 4,
        /// <summary>
        /// [1-52]
        /// </summary>
        [pbr::OriginalName("WEEK_OF_YEAR")] WeekOfYear = 5,
        /// <summary>
        /// [0-23]
        /// </summary>
        [pbr::OriginalName("HOUR_OF_DAY")] HourOfDay = 6,
      }

    }
    #endregion

  }

  /// <summary>
  /// Pseudonymization method that generates surrogates via cryptographic hashing.
  /// Uses SHA-256.
  /// The key size must be either 32 or 64 bytes.
  /// Outputs a 32 byte digest as an uppercase hex string
  /// (for example, 41D1567F7F99F1DC2A5FAB886DEE5BEE).
  /// Currently, only string and integer values can be hashed.
  /// </summary>
  public sealed partial class CryptoHashConfig : pb::IMessage<CryptoHashConfig> {
    private static readonly pb::MessageParser<CryptoHashConfig> _parser = new pb::MessageParser<CryptoHashConfig>(() => new CryptoHashConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CryptoHashConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoHashConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoHashConfig(CryptoHashConfig other) : this() {
      CryptoKey = other.cryptoKey_ != null ? other.CryptoKey.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoHashConfig Clone() {
      return new CryptoHashConfig(this);
    }

    /// <summary>Field number for the "crypto_key" field.</summary>
    public const int CryptoKeyFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta2.CryptoKey cryptoKey_;
    /// <summary>
    /// The key used by the hash function.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.CryptoKey CryptoKey {
      get { return cryptoKey_; }
      set {
        cryptoKey_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CryptoHashConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CryptoHashConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CryptoKey, other.CryptoKey)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cryptoKey_ != null) hash ^= CryptoKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cryptoKey_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CryptoKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cryptoKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CryptoKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CryptoHashConfig other) {
      if (other == null) {
        return;
      }
      if (other.cryptoKey_ != null) {
        if (cryptoKey_ == null) {
          cryptoKey_ = new global::Google.Cloud.Dlp.V2Beta2.CryptoKey();
        }
        CryptoKey.MergeFrom(other.CryptoKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (cryptoKey_ == null) {
              cryptoKey_ = new global::Google.Cloud.Dlp.V2Beta2.CryptoKey();
            }
            input.ReadMessage(cryptoKey_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Replace each input value with a given `Value`.
  /// </summary>
  public sealed partial class ReplaceValueConfig : pb::IMessage<ReplaceValueConfig> {
    private static readonly pb::MessageParser<ReplaceValueConfig> _parser = new pb::MessageParser<ReplaceValueConfig>(() => new ReplaceValueConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplaceValueConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplaceValueConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplaceValueConfig(ReplaceValueConfig other) : this() {
      NewValue = other.newValue_ != null ? other.NewValue.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplaceValueConfig Clone() {
      return new ReplaceValueConfig(this);
    }

    /// <summary>Field number for the "new_value" field.</summary>
    public const int NewValueFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta2.Value newValue_;
    /// <summary>
    /// Value to replace it with.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.Value NewValue {
      get { return newValue_; }
      set {
        newValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplaceValueConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplaceValueConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NewValue, other.NewValue)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (newValue_ != null) hash ^= NewValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (newValue_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NewValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (newValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplaceValueConfig other) {
      if (other == null) {
        return;
      }
      if (other.newValue_ != null) {
        if (newValue_ == null) {
          newValue_ = new global::Google.Cloud.Dlp.V2Beta2.Value();
        }
        NewValue.MergeFrom(other.NewValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (newValue_ == null) {
              newValue_ = new global::Google.Cloud.Dlp.V2Beta2.Value();
            }
            input.ReadMessage(newValue_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Replace each matching finding with the name of the info_type.
  /// </summary>
  public sealed partial class ReplaceWithInfoTypeConfig : pb::IMessage<ReplaceWithInfoTypeConfig> {
    private static readonly pb::MessageParser<ReplaceWithInfoTypeConfig> _parser = new pb::MessageParser<ReplaceWithInfoTypeConfig>(() => new ReplaceWithInfoTypeConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplaceWithInfoTypeConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplaceWithInfoTypeConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplaceWithInfoTypeConfig(ReplaceWithInfoTypeConfig other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplaceWithInfoTypeConfig Clone() {
      return new ReplaceWithInfoTypeConfig(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplaceWithInfoTypeConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplaceWithInfoTypeConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplaceWithInfoTypeConfig other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// Redact a given value. For example, if used with an `InfoTypeTransformation`
  /// transforming PHONE_NUMBER, and input 'My phone number is 206-555-0123', the
  /// output would be 'My phone number is '.
  /// </summary>
  public sealed partial class RedactConfig : pb::IMessage<RedactConfig> {
    private static readonly pb::MessageParser<RedactConfig> _parser = new pb::MessageParser<RedactConfig>(() => new RedactConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedactConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedactConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedactConfig(RedactConfig other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedactConfig Clone() {
      return new RedactConfig(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedactConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedactConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedactConfig other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// Characters to skip when doing deidentification of a value. These will be left
  /// alone and skipped.
  /// </summary>
  public sealed partial class CharsToIgnore : pb::IMessage<CharsToIgnore> {
    private static readonly pb::MessageParser<CharsToIgnore> _parser = new pb::MessageParser<CharsToIgnore>(() => new CharsToIgnore());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharsToIgnore> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharsToIgnore() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharsToIgnore(CharsToIgnore other) : this() {
      switch (other.CharactersCase) {
        case CharactersOneofCase.CharactersToSkip:
          CharactersToSkip = other.CharactersToSkip;
          break;
        case CharactersOneofCase.CommonCharactersToIgnore:
          CommonCharactersToIgnore = other.CommonCharactersToIgnore;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharsToIgnore Clone() {
      return new CharsToIgnore(this);
    }

    /// <summary>Field number for the "characters_to_skip" field.</summary>
    public const int CharactersToSkipFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CharactersToSkip {
      get { return charactersCase_ == CharactersOneofCase.CharactersToSkip ? (string) characters_ : ""; }
      set {
        characters_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        charactersCase_ = CharactersOneofCase.CharactersToSkip;
      }
    }

    /// <summary>Field number for the "common_characters_to_ignore" field.</summary>
    public const int CommonCharactersToIgnoreFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.CharsToIgnore.Types.CommonCharsToIgnore CommonCharactersToIgnore {
      get { return charactersCase_ == CharactersOneofCase.CommonCharactersToIgnore ? (global::Google.Cloud.Dlp.V2Beta2.CharsToIgnore.Types.CommonCharsToIgnore) characters_ : 0; }
      set {
        characters_ = value;
        charactersCase_ = CharactersOneofCase.CommonCharactersToIgnore;
      }
    }

    private object characters_;
    /// <summary>Enum of possible cases for the "characters" oneof.</summary>
    public enum CharactersOneofCase {
      None = 0,
      CharactersToSkip = 1,
      CommonCharactersToIgnore = 2,
    }
    private CharactersOneofCase charactersCase_ = CharactersOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharactersOneofCase CharactersCase {
      get { return charactersCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCharacters() {
      charactersCase_ = CharactersOneofCase.None;
      characters_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharsToIgnore);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharsToIgnore other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CharactersToSkip != other.CharactersToSkip) return false;
      if (CommonCharactersToIgnore != other.CommonCharactersToIgnore) return false;
      if (CharactersCase != other.CharactersCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (charactersCase_ == CharactersOneofCase.CharactersToSkip) hash ^= CharactersToSkip.GetHashCode();
      if (charactersCase_ == CharactersOneofCase.CommonCharactersToIgnore) hash ^= CommonCharactersToIgnore.GetHashCode();
      hash ^= (int) charactersCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (charactersCase_ == CharactersOneofCase.CharactersToSkip) {
        output.WriteRawTag(10);
        output.WriteString(CharactersToSkip);
      }
      if (charactersCase_ == CharactersOneofCase.CommonCharactersToIgnore) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CommonCharactersToIgnore);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (charactersCase_ == CharactersOneofCase.CharactersToSkip) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CharactersToSkip);
      }
      if (charactersCase_ == CharactersOneofCase.CommonCharactersToIgnore) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommonCharactersToIgnore);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharsToIgnore other) {
      if (other == null) {
        return;
      }
      switch (other.CharactersCase) {
        case CharactersOneofCase.CharactersToSkip:
          CharactersToSkip = other.CharactersToSkip;
          break;
        case CharactersOneofCase.CommonCharactersToIgnore:
          CommonCharactersToIgnore = other.CommonCharactersToIgnore;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CharactersToSkip = input.ReadString();
            break;
          }
          case 16: {
            characters_ = input.ReadEnum();
            charactersCase_ = CharactersOneofCase.CommonCharactersToIgnore;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CharsToIgnore message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CommonCharsToIgnore {
        [pbr::OriginalName("COMMON_CHARS_TO_IGNORE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// 0-9
        /// </summary>
        [pbr::OriginalName("NUMERIC")] Numeric = 1,
        /// <summary>
        /// A-Z
        /// </summary>
        [pbr::OriginalName("ALPHA_UPPER_CASE")] AlphaUpperCase = 2,
        /// <summary>
        /// a-z
        /// </summary>
        [pbr::OriginalName("ALPHA_LOWER_CASE")] AlphaLowerCase = 3,
        /// <summary>
        /// US Punctuation, one of !"#$%&amp;'()*+,-./:;&lt;=>?@[\]^_`{|}~
        /// </summary>
        [pbr::OriginalName("PUNCTUATION")] Punctuation = 4,
        /// <summary>
        /// Whitespace character, one of [ \t\n\x0B\f\r]
        /// </summary>
        [pbr::OriginalName("WHITESPACE")] Whitespace = 5,
      }

    }
    #endregion

  }

  /// <summary>
  /// Partially mask a string by replacing a given number of characters with a
  /// fixed character. Masking can start from the beginning or end of the string.
  /// This can be used on data of any type (numbers, longs, and so on) and when
  /// de-identifying structured data we'll attempt to preserve the original data's
  /// type. (This allows you to take a long like 123 and modify it to a string like
  /// **3.
  /// </summary>
  public sealed partial class CharacterMaskConfig : pb::IMessage<CharacterMaskConfig> {
    private static readonly pb::MessageParser<CharacterMaskConfig> _parser = new pb::MessageParser<CharacterMaskConfig>(() => new CharacterMaskConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterMaskConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterMaskConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterMaskConfig(CharacterMaskConfig other) : this() {
      maskingCharacter_ = other.maskingCharacter_;
      numberToMask_ = other.numberToMask_;
      reverseOrder_ = other.reverseOrder_;
      charactersToIgnore_ = other.charactersToIgnore_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterMaskConfig Clone() {
      return new CharacterMaskConfig(this);
    }

    /// <summary>Field number for the "masking_character" field.</summary>
    public const int MaskingCharacterFieldNumber = 1;
    private string maskingCharacter_ = "";
    /// <summary>
    /// Character to mask the sensitive values&amp;mdash;for example, "*" for an
    /// alphabetic string such as name, or "0" for a numeric string such as ZIP
    /// code or credit card number. String must have length 1. If not supplied, we
    /// will default to "*" for strings, 0 for digits.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaskingCharacter {
      get { return maskingCharacter_; }
      set {
        maskingCharacter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "number_to_mask" field.</summary>
    public const int NumberToMaskFieldNumber = 2;
    private int numberToMask_;
    /// <summary>
    /// Number of characters to mask. If not set, all matching chars will be
    /// masked. Skipped characters do not count towards this tally.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberToMask {
      get { return numberToMask_; }
      set {
        numberToMask_ = value;
      }
    }

    /// <summary>Field number for the "reverse_order" field.</summary>
    public const int ReverseOrderFieldNumber = 3;
    private bool reverseOrder_;
    /// <summary>
    /// Mask characters in reverse order. For example, if `masking_character` is
    /// '0', number_to_mask is 14, and `reverse_order` is false, then
    /// 1234-5678-9012-3456 -> 00000000000000-3456
    /// If `masking_character` is '*', `number_to_mask` is 3, and `reverse_order`
    /// is true, then 12345 -> 12***
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReverseOrder {
      get { return reverseOrder_; }
      set {
        reverseOrder_ = value;
      }
    }

    /// <summary>Field number for the "characters_to_ignore" field.</summary>
    public const int CharactersToIgnoreFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.CharsToIgnore> _repeated_charactersToIgnore_codec
        = pb::FieldCodec.ForMessage(34, global::Google.Cloud.Dlp.V2Beta2.CharsToIgnore.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.CharsToIgnore> charactersToIgnore_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.CharsToIgnore>();
    /// <summary>
    /// When masking a string, items in this list will be skipped when replacing.
    /// For example, if your string is 555-555-5555 and you ask us to skip `-` and
    /// mask 5 chars with * we would produce ***-*55-5555.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.CharsToIgnore> CharactersToIgnore {
      get { return charactersToIgnore_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharacterMaskConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterMaskConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaskingCharacter != other.MaskingCharacter) return false;
      if (NumberToMask != other.NumberToMask) return false;
      if (ReverseOrder != other.ReverseOrder) return false;
      if(!charactersToIgnore_.Equals(other.charactersToIgnore_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaskingCharacter.Length != 0) hash ^= MaskingCharacter.GetHashCode();
      if (NumberToMask != 0) hash ^= NumberToMask.GetHashCode();
      if (ReverseOrder != false) hash ^= ReverseOrder.GetHashCode();
      hash ^= charactersToIgnore_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaskingCharacter.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MaskingCharacter);
      }
      if (NumberToMask != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumberToMask);
      }
      if (ReverseOrder != false) {
        output.WriteRawTag(24);
        output.WriteBool(ReverseOrder);
      }
      charactersToIgnore_.WriteTo(output, _repeated_charactersToIgnore_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaskingCharacter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaskingCharacter);
      }
      if (NumberToMask != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberToMask);
      }
      if (ReverseOrder != false) {
        size += 1 + 1;
      }
      size += charactersToIgnore_.CalculateSize(_repeated_charactersToIgnore_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterMaskConfig other) {
      if (other == null) {
        return;
      }
      if (other.MaskingCharacter.Length != 0) {
        MaskingCharacter = other.MaskingCharacter;
      }
      if (other.NumberToMask != 0) {
        NumberToMask = other.NumberToMask;
      }
      if (other.ReverseOrder != false) {
        ReverseOrder = other.ReverseOrder;
      }
      charactersToIgnore_.Add(other.charactersToIgnore_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MaskingCharacter = input.ReadString();
            break;
          }
          case 16: {
            NumberToMask = input.ReadInt32();
            break;
          }
          case 24: {
            ReverseOrder = input.ReadBool();
            break;
          }
          case 34: {
            charactersToIgnore_.AddEntriesFrom(input, _repeated_charactersToIgnore_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Buckets values based on fixed size ranges. The
  /// Bucketing transformation can provide all of this functionality,
  /// but requires more configuration. This message is provided as a convenience to
  /// the user for simple bucketing strategies.
  ///
  /// The transformed value will be a hyphenated string of
  /// &lt;lower_bound>-&lt;upper_bound>, i.e if lower_bound = 10 and upper_bound = 20
  /// all values that are within this bucket will be replaced with "10-20".
  ///
  /// This can be used on data of type: double, long.
  ///
  /// If the bound Value type differs from the type of data
  /// being transformed, we will first attempt converting the type of the data to
  /// be transformed to match the type of the bound before comparing.
  /// </summary>
  public sealed partial class FixedSizeBucketingConfig : pb::IMessage<FixedSizeBucketingConfig> {
    private static readonly pb::MessageParser<FixedSizeBucketingConfig> _parser = new pb::MessageParser<FixedSizeBucketingConfig>(() => new FixedSizeBucketingConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FixedSizeBucketingConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FixedSizeBucketingConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FixedSizeBucketingConfig(FixedSizeBucketingConfig other) : this() {
      LowerBound = other.lowerBound_ != null ? other.LowerBound.Clone() : null;
      UpperBound = other.upperBound_ != null ? other.UpperBound.Clone() : null;
      bucketSize_ = other.bucketSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FixedSizeBucketingConfig Clone() {
      return new FixedSizeBucketingConfig(this);
    }

    /// <summary>Field number for the "lower_bound" field.</summary>
    public const int LowerBoundFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta2.Value lowerBound_;
    /// <summary>
    /// Lower bound value of buckets. All values less than `lower_bound` are
    /// grouped together into a single bucket; for example if `lower_bound` = 10,
    /// then all values less than 10 are replaced with the value “-10”. [Required].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.Value LowerBound {
      get { return lowerBound_; }
      set {
        lowerBound_ = value;
      }
    }

    /// <summary>Field number for the "upper_bound" field.</summary>
    public const int UpperBoundFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta2.Value upperBound_;
    /// <summary>
    /// Upper bound value of buckets. All values greater than upper_bound are
    /// grouped together into a single bucket; for example if `upper_bound` = 89,
    /// then all values greater than 89 are replaced with the value “89+”.
    /// [Required].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.Value UpperBound {
      get { return upperBound_; }
      set {
        upperBound_ = value;
      }
    }

    /// <summary>Field number for the "bucket_size" field.</summary>
    public const int BucketSizeFieldNumber = 3;
    private double bucketSize_;
    /// <summary>
    /// Size of each bucket (except for minimum and maximum buckets). So if
    /// `lower_bound` = 10, `upper_bound` = 89, and `bucket_size` = 10, then the
    /// following buckets would be used: -10, 10-20, 20-30, 30-40, 40-50, 50-60,
    /// 60-70, 70-80, 80-89, 89+. Precision up to 2 decimals works. [Required].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BucketSize {
      get { return bucketSize_; }
      set {
        bucketSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FixedSizeBucketingConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FixedSizeBucketingConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LowerBound, other.LowerBound)) return false;
      if (!object.Equals(UpperBound, other.UpperBound)) return false;
      if (BucketSize != other.BucketSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (lowerBound_ != null) hash ^= LowerBound.GetHashCode();
      if (upperBound_ != null) hash ^= UpperBound.GetHashCode();
      if (BucketSize != 0D) hash ^= BucketSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (lowerBound_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LowerBound);
      }
      if (upperBound_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UpperBound);
      }
      if (BucketSize != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(BucketSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (lowerBound_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LowerBound);
      }
      if (upperBound_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpperBound);
      }
      if (BucketSize != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FixedSizeBucketingConfig other) {
      if (other == null) {
        return;
      }
      if (other.lowerBound_ != null) {
        if (lowerBound_ == null) {
          lowerBound_ = new global::Google.Cloud.Dlp.V2Beta2.Value();
        }
        LowerBound.MergeFrom(other.LowerBound);
      }
      if (other.upperBound_ != null) {
        if (upperBound_ == null) {
          upperBound_ = new global::Google.Cloud.Dlp.V2Beta2.Value();
        }
        UpperBound.MergeFrom(other.UpperBound);
      }
      if (other.BucketSize != 0D) {
        BucketSize = other.BucketSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (lowerBound_ == null) {
              lowerBound_ = new global::Google.Cloud.Dlp.V2Beta2.Value();
            }
            input.ReadMessage(lowerBound_);
            break;
          }
          case 18: {
            if (upperBound_ == null) {
              upperBound_ = new global::Google.Cloud.Dlp.V2Beta2.Value();
            }
            input.ReadMessage(upperBound_);
            break;
          }
          case 25: {
            BucketSize = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Generalization function that buckets values based on ranges. The ranges and
  /// replacement values are dynamically provided by the user for custom behavior,
  /// such as 1-30 -> LOW 31-65 -> MEDIUM 66-100 -> HIGH
  /// This can be used on
  /// data of type: number, long, string, timestamp.
  /// If the bound `Value` type differs from the type of data being transformed, we
  /// will first attempt converting the type of the data to be transformed to match
  /// the type of the bound before comparing.
  /// </summary>
  public sealed partial class BucketingConfig : pb::IMessage<BucketingConfig> {
    private static readonly pb::MessageParser<BucketingConfig> _parser = new pb::MessageParser<BucketingConfig>(() => new BucketingConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BucketingConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BucketingConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BucketingConfig(BucketingConfig other) : this() {
      buckets_ = other.buckets_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BucketingConfig Clone() {
      return new BucketingConfig(this);
    }

    /// <summary>Field number for the "buckets" field.</summary>
    public const int BucketsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.BucketingConfig.Types.Bucket> _repeated_buckets_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta2.BucketingConfig.Types.Bucket.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.BucketingConfig.Types.Bucket> buckets_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.BucketingConfig.Types.Bucket>();
    /// <summary>
    /// Set of buckets. Ranges must be non-overlapping.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.BucketingConfig.Types.Bucket> Buckets {
      get { return buckets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BucketingConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BucketingConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!buckets_.Equals(other.buckets_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= buckets_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      buckets_.WriteTo(output, _repeated_buckets_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += buckets_.CalculateSize(_repeated_buckets_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BucketingConfig other) {
      if (other == null) {
        return;
      }
      buckets_.Add(other.buckets_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            buckets_.AddEntriesFrom(input, _repeated_buckets_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BucketingConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Bucket is represented as a range, along with replacement values.
      /// </summary>
      public sealed partial class Bucket : pb::IMessage<Bucket> {
        private static readonly pb::MessageParser<Bucket> _parser = new pb::MessageParser<Bucket>(() => new Bucket());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Bucket> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta2.BucketingConfig.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Bucket() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Bucket(Bucket other) : this() {
          Min = other.min_ != null ? other.Min.Clone() : null;
          Max = other.max_ != null ? other.Max.Clone() : null;
          ReplacementValue = other.replacementValue_ != null ? other.ReplacementValue.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Bucket Clone() {
          return new Bucket(this);
        }

        /// <summary>Field number for the "min" field.</summary>
        public const int MinFieldNumber = 1;
        private global::Google.Cloud.Dlp.V2Beta2.Value min_;
        /// <summary>
        /// Lower bound of the range, inclusive. Type should be the same as max if
        /// used.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta2.Value Min {
          get { return min_; }
          set {
            min_ = value;
          }
        }

        /// <summary>Field number for the "max" field.</summary>
        public const int MaxFieldNumber = 2;
        private global::Google.Cloud.Dlp.V2Beta2.Value max_;
        /// <summary>
        /// Upper bound of the range, exclusive; type must match min.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta2.Value Max {
          get { return max_; }
          set {
            max_ = value;
          }
        }

        /// <summary>Field number for the "replacement_value" field.</summary>
        public const int ReplacementValueFieldNumber = 3;
        private global::Google.Cloud.Dlp.V2Beta2.Value replacementValue_;
        /// <summary>
        /// Replacement value for this bucket. If not provided
        /// the default behavior will be to hyphenate the min-max range.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta2.Value ReplacementValue {
          get { return replacementValue_; }
          set {
            replacementValue_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Bucket);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Bucket other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Min, other.Min)) return false;
          if (!object.Equals(Max, other.Max)) return false;
          if (!object.Equals(ReplacementValue, other.ReplacementValue)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (min_ != null) hash ^= Min.GetHashCode();
          if (max_ != null) hash ^= Max.GetHashCode();
          if (replacementValue_ != null) hash ^= ReplacementValue.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (min_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Min);
          }
          if (max_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Max);
          }
          if (replacementValue_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(ReplacementValue);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (min_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Min);
          }
          if (max_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Max);
          }
          if (replacementValue_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReplacementValue);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Bucket other) {
          if (other == null) {
            return;
          }
          if (other.min_ != null) {
            if (min_ == null) {
              min_ = new global::Google.Cloud.Dlp.V2Beta2.Value();
            }
            Min.MergeFrom(other.Min);
          }
          if (other.max_ != null) {
            if (max_ == null) {
              max_ = new global::Google.Cloud.Dlp.V2Beta2.Value();
            }
            Max.MergeFrom(other.Max);
          }
          if (other.replacementValue_ != null) {
            if (replacementValue_ == null) {
              replacementValue_ = new global::Google.Cloud.Dlp.V2Beta2.Value();
            }
            ReplacementValue.MergeFrom(other.ReplacementValue);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (min_ == null) {
                  min_ = new global::Google.Cloud.Dlp.V2Beta2.Value();
                }
                input.ReadMessage(min_);
                break;
              }
              case 18: {
                if (max_ == null) {
                  max_ = new global::Google.Cloud.Dlp.V2Beta2.Value();
                }
                input.ReadMessage(max_);
                break;
              }
              case 26: {
                if (replacementValue_ == null) {
                  replacementValue_ = new global::Google.Cloud.Dlp.V2Beta2.Value();
                }
                input.ReadMessage(replacementValue_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Replaces an identifier with a surrogate using FPE with the FFX
  /// mode of operation; however when used in the `ReidentifyContent` API method,
  /// it serves the opposite function by reversing the surrogate back into
  /// the original identifier.
  /// The identifier must be encoded as ASCII.
  /// For a given crypto key and context, the same identifier will be
  /// replaced with the same surrogate.
  /// Identifiers must be at least two characters long.
  /// In the case that the identifier is the empty string, it will be skipped.
  /// </summary>
  public sealed partial class CryptoReplaceFfxFpeConfig : pb::IMessage<CryptoReplaceFfxFpeConfig> {
    private static readonly pb::MessageParser<CryptoReplaceFfxFpeConfig> _parser = new pb::MessageParser<CryptoReplaceFfxFpeConfig>(() => new CryptoReplaceFfxFpeConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CryptoReplaceFfxFpeConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoReplaceFfxFpeConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoReplaceFfxFpeConfig(CryptoReplaceFfxFpeConfig other) : this() {
      CryptoKey = other.cryptoKey_ != null ? other.CryptoKey.Clone() : null;
      Context = other.context_ != null ? other.Context.Clone() : null;
      SurrogateInfoType = other.surrogateInfoType_ != null ? other.SurrogateInfoType.Clone() : null;
      switch (other.AlphabetCase) {
        case AlphabetOneofCase.CommonAlphabet:
          CommonAlphabet = other.CommonAlphabet;
          break;
        case AlphabetOneofCase.CustomAlphabet:
          CustomAlphabet = other.CustomAlphabet;
          break;
        case AlphabetOneofCase.Radix:
          Radix = other.Radix;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoReplaceFfxFpeConfig Clone() {
      return new CryptoReplaceFfxFpeConfig(this);
    }

    /// <summary>Field number for the "crypto_key" field.</summary>
    public const int CryptoKeyFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta2.CryptoKey cryptoKey_;
    /// <summary>
    /// The key used by the encryption algorithm. [required]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.CryptoKey CryptoKey {
      get { return cryptoKey_; }
      set {
        cryptoKey_ = value;
      }
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta2.FieldId context_;
    /// <summary>
    /// The 'tweak', a context may be used for higher security since the same
    /// identifier in two different contexts won't be given the same surrogate. If
    /// the context is not set, a default tweak will be used.
    ///
    /// If the context is set but:
    ///
    /// 1. there is no record present when transforming a given value or
    /// 1. the field is not present when transforming a given value,
    ///
    /// a default tweak will be used.
    ///
    /// Note that case (1) is expected when an `InfoTypeTransformation` is
    /// applied to both structured and non-structured `ContentItem`s.
    /// Currently, the referenced field may be of value type integer or string.
    ///
    /// The tweak is constructed as a sequence of bytes in big endian byte order
    /// such that:
    ///
    /// - a 64 bit integer is encoded followed by a single byte of value 1
    /// - a string is encoded in UTF-8 format followed by a single byte of value
    ///  å 2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.FieldId Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "common_alphabet" field.</summary>
    public const int CommonAlphabetFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.CryptoReplaceFfxFpeConfig.Types.FfxCommonNativeAlphabet CommonAlphabet {
      get { return alphabetCase_ == AlphabetOneofCase.CommonAlphabet ? (global::Google.Cloud.Dlp.V2Beta2.CryptoReplaceFfxFpeConfig.Types.FfxCommonNativeAlphabet) alphabet_ : 0; }
      set {
        alphabet_ = value;
        alphabetCase_ = AlphabetOneofCase.CommonAlphabet;
      }
    }

    /// <summary>Field number for the "custom_alphabet" field.</summary>
    public const int CustomAlphabetFieldNumber = 5;
    /// <summary>
    /// This is supported by mapping these to the alphanumeric characters
    /// that the FFX mode natively supports. This happens before/after
    /// encryption/decryption.
    /// Each character listed must appear only once.
    /// Number of characters must be in the range [2, 62].
    /// This must be encoded as ASCII.
    /// The order of characters does not matter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomAlphabet {
      get { return alphabetCase_ == AlphabetOneofCase.CustomAlphabet ? (string) alphabet_ : ""; }
      set {
        alphabet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        alphabetCase_ = AlphabetOneofCase.CustomAlphabet;
      }
    }

    /// <summary>Field number for the "radix" field.</summary>
    public const int RadixFieldNumber = 6;
    /// <summary>
    /// The native way to select the alphabet. Must be in the range [2, 62].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Radix {
      get { return alphabetCase_ == AlphabetOneofCase.Radix ? (int) alphabet_ : 0; }
      set {
        alphabet_ = value;
        alphabetCase_ = AlphabetOneofCase.Radix;
      }
    }

    /// <summary>Field number for the "surrogate_info_type" field.</summary>
    public const int SurrogateInfoTypeFieldNumber = 8;
    private global::Google.Cloud.Dlp.V2Beta2.InfoType surrogateInfoType_;
    /// <summary>
    /// The custom infoType to annotate the surrogate with.
    /// This annotation will be applied to the surrogate by prefixing it with
    /// the name of the custom infoType followed by the number of
    /// characters comprising the surrogate. The following scheme defines the
    /// format: info_type_name(surrogate_character_count):surrogate
    ///
    /// For example, if the name of custom infoType is 'MY_TOKEN_INFO_TYPE' and
    /// the surrogate is 'abc', the full replacement value
    /// will be: 'MY_TOKEN_INFO_TYPE(3):abc'
    ///
    /// This annotation identifies the surrogate when inspecting content using the
    /// custom infoType
    /// [`SurrogateType`](/dlp/docs/reference/rest/v2beta2/InspectConfig#surrogatetype).
    /// This facilitates reversal of the surrogate when it occurs in free text.
    ///
    /// In order for inspection to work properly, the name of this infoType must
    /// not occur naturally anywhere in your data; otherwise, inspection may
    /// find a surrogate that does not correspond to an actual identifier.
    /// Therefore, choose your custom infoType name carefully after considering
    /// what your data looks like. One way to select a name that has a high chance
    /// of yielding reliable detection is to include one or more unicode characters
    /// that are highly improbable to exist in your data.
    /// For example, assuming your data is entered from a regular ASCII keyboard,
    /// the symbol with the hex code point 29DD might be used like so:
    /// ⧝MY_TOKEN_TYPE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.InfoType SurrogateInfoType {
      get { return surrogateInfoType_; }
      set {
        surrogateInfoType_ = value;
      }
    }

    private object alphabet_;
    /// <summary>Enum of possible cases for the "alphabet" oneof.</summary>
    public enum AlphabetOneofCase {
      None = 0,
      CommonAlphabet = 4,
      CustomAlphabet = 5,
      Radix = 6,
    }
    private AlphabetOneofCase alphabetCase_ = AlphabetOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlphabetOneofCase AlphabetCase {
      get { return alphabetCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAlphabet() {
      alphabetCase_ = AlphabetOneofCase.None;
      alphabet_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CryptoReplaceFfxFpeConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CryptoReplaceFfxFpeConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CryptoKey, other.CryptoKey)) return false;
      if (!object.Equals(Context, other.Context)) return false;
      if (CommonAlphabet != other.CommonAlphabet) return false;
      if (CustomAlphabet != other.CustomAlphabet) return false;
      if (Radix != other.Radix) return false;
      if (!object.Equals(SurrogateInfoType, other.SurrogateInfoType)) return false;
      if (AlphabetCase != other.AlphabetCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cryptoKey_ != null) hash ^= CryptoKey.GetHashCode();
      if (context_ != null) hash ^= Context.GetHashCode();
      if (alphabetCase_ == AlphabetOneofCase.CommonAlphabet) hash ^= CommonAlphabet.GetHashCode();
      if (alphabetCase_ == AlphabetOneofCase.CustomAlphabet) hash ^= CustomAlphabet.GetHashCode();
      if (alphabetCase_ == AlphabetOneofCase.Radix) hash ^= Radix.GetHashCode();
      if (surrogateInfoType_ != null) hash ^= SurrogateInfoType.GetHashCode();
      hash ^= (int) alphabetCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cryptoKey_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CryptoKey);
      }
      if (context_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Context);
      }
      if (alphabetCase_ == AlphabetOneofCase.CommonAlphabet) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CommonAlphabet);
      }
      if (alphabetCase_ == AlphabetOneofCase.CustomAlphabet) {
        output.WriteRawTag(42);
        output.WriteString(CustomAlphabet);
      }
      if (alphabetCase_ == AlphabetOneofCase.Radix) {
        output.WriteRawTag(48);
        output.WriteInt32(Radix);
      }
      if (surrogateInfoType_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SurrogateInfoType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cryptoKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CryptoKey);
      }
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (alphabetCase_ == AlphabetOneofCase.CommonAlphabet) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommonAlphabet);
      }
      if (alphabetCase_ == AlphabetOneofCase.CustomAlphabet) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomAlphabet);
      }
      if (alphabetCase_ == AlphabetOneofCase.Radix) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Radix);
      }
      if (surrogateInfoType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SurrogateInfoType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CryptoReplaceFfxFpeConfig other) {
      if (other == null) {
        return;
      }
      if (other.cryptoKey_ != null) {
        if (cryptoKey_ == null) {
          cryptoKey_ = new global::Google.Cloud.Dlp.V2Beta2.CryptoKey();
        }
        CryptoKey.MergeFrom(other.CryptoKey);
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::Google.Cloud.Dlp.V2Beta2.FieldId();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.surrogateInfoType_ != null) {
        if (surrogateInfoType_ == null) {
          surrogateInfoType_ = new global::Google.Cloud.Dlp.V2Beta2.InfoType();
        }
        SurrogateInfoType.MergeFrom(other.SurrogateInfoType);
      }
      switch (other.AlphabetCase) {
        case AlphabetOneofCase.CommonAlphabet:
          CommonAlphabet = other.CommonAlphabet;
          break;
        case AlphabetOneofCase.CustomAlphabet:
          CustomAlphabet = other.CustomAlphabet;
          break;
        case AlphabetOneofCase.Radix:
          Radix = other.Radix;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (cryptoKey_ == null) {
              cryptoKey_ = new global::Google.Cloud.Dlp.V2Beta2.CryptoKey();
            }
            input.ReadMessage(cryptoKey_);
            break;
          }
          case 18: {
            if (context_ == null) {
              context_ = new global::Google.Cloud.Dlp.V2Beta2.FieldId();
            }
            input.ReadMessage(context_);
            break;
          }
          case 32: {
            alphabet_ = input.ReadEnum();
            alphabetCase_ = AlphabetOneofCase.CommonAlphabet;
            break;
          }
          case 42: {
            CustomAlphabet = input.ReadString();
            break;
          }
          case 48: {
            Radix = input.ReadInt32();
            break;
          }
          case 66: {
            if (surrogateInfoType_ == null) {
              surrogateInfoType_ = new global::Google.Cloud.Dlp.V2Beta2.InfoType();
            }
            input.ReadMessage(surrogateInfoType_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CryptoReplaceFfxFpeConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// These are commonly used subsets of the alphabet that the FFX mode
      /// natively supports. In the algorithm, the alphabet is selected using
      /// the "radix". Therefore each corresponds to particular radix.
      /// </summary>
      public enum FfxCommonNativeAlphabet {
        [pbr::OriginalName("FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// [0-9] (radix of 10)
        /// </summary>
        [pbr::OriginalName("NUMERIC")] Numeric = 1,
        /// <summary>
        /// [0-9A-F] (radix of 16)
        /// </summary>
        [pbr::OriginalName("HEXADECIMAL")] Hexadecimal = 2,
        /// <summary>
        /// [0-9A-Z] (radix of 36)
        /// </summary>
        [pbr::OriginalName("UPPER_CASE_ALPHA_NUMERIC")] UpperCaseAlphaNumeric = 3,
        /// <summary>
        /// [0-9A-Za-z] (radix of 62)
        /// </summary>
        [pbr::OriginalName("ALPHA_NUMERIC")] AlphaNumeric = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// This is a data encryption key (DEK) (as opposed to
  /// a key encryption key (KEK) stored by KMS).
  /// When using KMS to wrap/unwrap DEKs, be sure to set an appropriate
  /// IAM policy on the KMS CryptoKey (KEK) to ensure an attacker cannot
  /// unwrap the data crypto key.
  /// </summary>
  public sealed partial class CryptoKey : pb::IMessage<CryptoKey> {
    private static readonly pb::MessageParser<CryptoKey> _parser = new pb::MessageParser<CryptoKey>(() => new CryptoKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CryptoKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoKey(CryptoKey other) : this() {
      switch (other.SourceCase) {
        case SourceOneofCase.Transient:
          Transient = other.Transient.Clone();
          break;
        case SourceOneofCase.Unwrapped:
          Unwrapped = other.Unwrapped.Clone();
          break;
        case SourceOneofCase.KmsWrapped:
          KmsWrapped = other.KmsWrapped.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoKey Clone() {
      return new CryptoKey(this);
    }

    /// <summary>Field number for the "transient" field.</summary>
    public const int TransientFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.TransientCryptoKey Transient {
      get { return sourceCase_ == SourceOneofCase.Transient ? (global::Google.Cloud.Dlp.V2Beta2.TransientCryptoKey) source_ : null; }
      set {
        source_ = value;
        sourceCase_ = value == null ? SourceOneofCase.None : SourceOneofCase.Transient;
      }
    }

    /// <summary>Field number for the "unwrapped" field.</summary>
    public const int UnwrappedFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.UnwrappedCryptoKey Unwrapped {
      get { return sourceCase_ == SourceOneofCase.Unwrapped ? (global::Google.Cloud.Dlp.V2Beta2.UnwrappedCryptoKey) source_ : null; }
      set {
        source_ = value;
        sourceCase_ = value == null ? SourceOneofCase.None : SourceOneofCase.Unwrapped;
      }
    }

    /// <summary>Field number for the "kms_wrapped" field.</summary>
    public const int KmsWrappedFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.KmsWrappedCryptoKey KmsWrapped {
      get { return sourceCase_ == SourceOneofCase.KmsWrapped ? (global::Google.Cloud.Dlp.V2Beta2.KmsWrappedCryptoKey) source_ : null; }
      set {
        source_ = value;
        sourceCase_ = value == null ? SourceOneofCase.None : SourceOneofCase.KmsWrapped;
      }
    }

    private object source_;
    /// <summary>Enum of possible cases for the "source" oneof.</summary>
    public enum SourceOneofCase {
      None = 0,
      Transient = 1,
      Unwrapped = 2,
      KmsWrapped = 3,
    }
    private SourceOneofCase sourceCase_ = SourceOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceOneofCase SourceCase {
      get { return sourceCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSource() {
      sourceCase_ = SourceOneofCase.None;
      source_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CryptoKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CryptoKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Transient, other.Transient)) return false;
      if (!object.Equals(Unwrapped, other.Unwrapped)) return false;
      if (!object.Equals(KmsWrapped, other.KmsWrapped)) return false;
      if (SourceCase != other.SourceCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sourceCase_ == SourceOneofCase.Transient) hash ^= Transient.GetHashCode();
      if (sourceCase_ == SourceOneofCase.Unwrapped) hash ^= Unwrapped.GetHashCode();
      if (sourceCase_ == SourceOneofCase.KmsWrapped) hash ^= KmsWrapped.GetHashCode();
      hash ^= (int) sourceCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sourceCase_ == SourceOneofCase.Transient) {
        output.WriteRawTag(10);
        output.WriteMessage(Transient);
      }
      if (sourceCase_ == SourceOneofCase.Unwrapped) {
        output.WriteRawTag(18);
        output.WriteMessage(Unwrapped);
      }
      if (sourceCase_ == SourceOneofCase.KmsWrapped) {
        output.WriteRawTag(26);
        output.WriteMessage(KmsWrapped);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sourceCase_ == SourceOneofCase.Transient) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transient);
      }
      if (sourceCase_ == SourceOneofCase.Unwrapped) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unwrapped);
      }
      if (sourceCase_ == SourceOneofCase.KmsWrapped) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KmsWrapped);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CryptoKey other) {
      if (other == null) {
        return;
      }
      switch (other.SourceCase) {
        case SourceOneofCase.Transient:
          Transient = other.Transient;
          break;
        case SourceOneofCase.Unwrapped:
          Unwrapped = other.Unwrapped;
          break;
        case SourceOneofCase.KmsWrapped:
          KmsWrapped = other.KmsWrapped;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Cloud.Dlp.V2Beta2.TransientCryptoKey subBuilder = new global::Google.Cloud.Dlp.V2Beta2.TransientCryptoKey();
            if (sourceCase_ == SourceOneofCase.Transient) {
              subBuilder.MergeFrom(Transient);
            }
            input.ReadMessage(subBuilder);
            Transient = subBuilder;
            break;
          }
          case 18: {
            global::Google.Cloud.Dlp.V2Beta2.UnwrappedCryptoKey subBuilder = new global::Google.Cloud.Dlp.V2Beta2.UnwrappedCryptoKey();
            if (sourceCase_ == SourceOneofCase.Unwrapped) {
              subBuilder.MergeFrom(Unwrapped);
            }
            input.ReadMessage(subBuilder);
            Unwrapped = subBuilder;
            break;
          }
          case 26: {
            global::Google.Cloud.Dlp.V2Beta2.KmsWrappedCryptoKey subBuilder = new global::Google.Cloud.Dlp.V2Beta2.KmsWrappedCryptoKey();
            if (sourceCase_ == SourceOneofCase.KmsWrapped) {
              subBuilder.MergeFrom(KmsWrapped);
            }
            input.ReadMessage(subBuilder);
            KmsWrapped = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Use this to have a random data crypto key generated.
  /// It will be discarded after the request finishes.
  /// </summary>
  public sealed partial class TransientCryptoKey : pb::IMessage<TransientCryptoKey> {
    private static readonly pb::MessageParser<TransientCryptoKey> _parser = new pb::MessageParser<TransientCryptoKey>(() => new TransientCryptoKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransientCryptoKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransientCryptoKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransientCryptoKey(TransientCryptoKey other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransientCryptoKey Clone() {
      return new TransientCryptoKey(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the key. [required]
    /// This is an arbitrary string used to differentiate different keys.
    /// A unique key is generated per name: two separate `TransientCryptoKey`
    /// protos share the same generated key if their names are the same.
    /// When the data crypto key is generated, this name is not used in any way
    /// (repeating the api call will result in a different key being generated).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransientCryptoKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransientCryptoKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransientCryptoKey other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Using raw keys is prone to security risks due to accidentally
  /// leaking the key. Choose another type of key if possible.
  /// </summary>
  public sealed partial class UnwrappedCryptoKey : pb::IMessage<UnwrappedCryptoKey> {
    private static readonly pb::MessageParser<UnwrappedCryptoKey> _parser = new pb::MessageParser<UnwrappedCryptoKey>(() => new UnwrappedCryptoKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnwrappedCryptoKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnwrappedCryptoKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnwrappedCryptoKey(UnwrappedCryptoKey other) : this() {
      key_ = other.key_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnwrappedCryptoKey Clone() {
      return new UnwrappedCryptoKey(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private pb::ByteString key_ = pb::ByteString.Empty;
    /// <summary>
    /// The AES 128/192/256 bit key. [required]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnwrappedCryptoKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnwrappedCryptoKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Key);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnwrappedCryptoKey other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Include to use an existing data crypto key wrapped by KMS.
  /// Authorization requires the following IAM permissions when sending a request
  /// to perform a crypto transformation using a kms-wrapped crypto key:
  /// dlp.kms.encrypt
  /// </summary>
  public sealed partial class KmsWrappedCryptoKey : pb::IMessage<KmsWrappedCryptoKey> {
    private static readonly pb::MessageParser<KmsWrappedCryptoKey> _parser = new pb::MessageParser<KmsWrappedCryptoKey>(() => new KmsWrappedCryptoKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KmsWrappedCryptoKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KmsWrappedCryptoKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KmsWrappedCryptoKey(KmsWrappedCryptoKey other) : this() {
      wrappedKey_ = other.wrappedKey_;
      cryptoKeyName_ = other.cryptoKeyName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KmsWrappedCryptoKey Clone() {
      return new KmsWrappedCryptoKey(this);
    }

    /// <summary>Field number for the "wrapped_key" field.</summary>
    public const int WrappedKeyFieldNumber = 1;
    private pb::ByteString wrappedKey_ = pb::ByteString.Empty;
    /// <summary>
    /// The wrapped data crypto key. [required]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString WrappedKey {
      get { return wrappedKey_; }
      set {
        wrappedKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "crypto_key_name" field.</summary>
    public const int CryptoKeyNameFieldNumber = 2;
    private string cryptoKeyName_ = "";
    /// <summary>
    /// The resource name of the KMS CryptoKey to use for unwrapping. [required]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CryptoKeyName {
      get { return cryptoKeyName_; }
      set {
        cryptoKeyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KmsWrappedCryptoKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KmsWrappedCryptoKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WrappedKey != other.WrappedKey) return false;
      if (CryptoKeyName != other.CryptoKeyName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WrappedKey.Length != 0) hash ^= WrappedKey.GetHashCode();
      if (CryptoKeyName.Length != 0) hash ^= CryptoKeyName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WrappedKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(WrappedKey);
      }
      if (CryptoKeyName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CryptoKeyName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WrappedKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(WrappedKey);
      }
      if (CryptoKeyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CryptoKeyName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KmsWrappedCryptoKey other) {
      if (other == null) {
        return;
      }
      if (other.WrappedKey.Length != 0) {
        WrappedKey = other.WrappedKey;
      }
      if (other.CryptoKeyName.Length != 0) {
        CryptoKeyName = other.CryptoKeyName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WrappedKey = input.ReadBytes();
            break;
          }
          case 18: {
            CryptoKeyName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A type of transformation that will scan unstructured text and
  /// apply various `PrimitiveTransformation`s to each finding, where the
  /// transformation is applied to only values that were identified as a specific
  /// info_type.
  /// </summary>
  public sealed partial class InfoTypeTransformations : pb::IMessage<InfoTypeTransformations> {
    private static readonly pb::MessageParser<InfoTypeTransformations> _parser = new pb::MessageParser<InfoTypeTransformations>(() => new InfoTypeTransformations());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InfoTypeTransformations> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTypeTransformations() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTypeTransformations(InfoTypeTransformations other) : this() {
      transformations_ = other.transformations_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTypeTransformations Clone() {
      return new InfoTypeTransformations(this);
    }

    /// <summary>Field number for the "transformations" field.</summary>
    public const int TransformationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.InfoTypeTransformations.Types.InfoTypeTransformation> _repeated_transformations_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta2.InfoTypeTransformations.Types.InfoTypeTransformation.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.InfoTypeTransformations.Types.InfoTypeTransformation> transformations_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.InfoTypeTransformations.Types.InfoTypeTransformation>();
    /// <summary>
    /// Transformation for each infoType. Cannot specify more than one
    /// for a given infoType. [required]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.InfoTypeTransformations.Types.InfoTypeTransformation> Transformations {
      get { return transformations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InfoTypeTransformations);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InfoTypeTransformations other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!transformations_.Equals(other.transformations_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= transformations_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      transformations_.WriteTo(output, _repeated_transformations_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += transformations_.CalculateSize(_repeated_transformations_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InfoTypeTransformations other) {
      if (other == null) {
        return;
      }
      transformations_.Add(other.transformations_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            transformations_.AddEntriesFrom(input, _repeated_transformations_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the InfoTypeTransformations message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A transformation to apply to text that is identified as a specific
      /// info_type.
      /// </summary>
      public sealed partial class InfoTypeTransformation : pb::IMessage<InfoTypeTransformation> {
        private static readonly pb::MessageParser<InfoTypeTransformation> _parser = new pb::MessageParser<InfoTypeTransformation>(() => new InfoTypeTransformation());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InfoTypeTransformation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta2.InfoTypeTransformations.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InfoTypeTransformation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InfoTypeTransformation(InfoTypeTransformation other) : this() {
          infoTypes_ = other.infoTypes_.Clone();
          PrimitiveTransformation = other.primitiveTransformation_ != null ? other.PrimitiveTransformation.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InfoTypeTransformation Clone() {
          return new InfoTypeTransformation(this);
        }

        /// <summary>Field number for the "info_types" field.</summary>
        public const int InfoTypesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.InfoType> _repeated_infoTypes_codec
            = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta2.InfoType.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.InfoType> infoTypes_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.InfoType>();
        /// <summary>
        /// InfoTypes to apply the transformation to. Empty list will match all
        /// available infoTypes for this transformation.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.InfoType> InfoTypes {
          get { return infoTypes_; }
        }

        /// <summary>Field number for the "primitive_transformation" field.</summary>
        public const int PrimitiveTransformationFieldNumber = 2;
        private global::Google.Cloud.Dlp.V2Beta2.PrimitiveTransformation primitiveTransformation_;
        /// <summary>
        /// Primitive transformation to apply to the infoType. [required]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta2.PrimitiveTransformation PrimitiveTransformation {
          get { return primitiveTransformation_; }
          set {
            primitiveTransformation_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as InfoTypeTransformation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InfoTypeTransformation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!infoTypes_.Equals(other.infoTypes_)) return false;
          if (!object.Equals(PrimitiveTransformation, other.PrimitiveTransformation)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= infoTypes_.GetHashCode();
          if (primitiveTransformation_ != null) hash ^= PrimitiveTransformation.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          infoTypes_.WriteTo(output, _repeated_infoTypes_codec);
          if (primitiveTransformation_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(PrimitiveTransformation);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += infoTypes_.CalculateSize(_repeated_infoTypes_codec);
          if (primitiveTransformation_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrimitiveTransformation);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InfoTypeTransformation other) {
          if (other == null) {
            return;
          }
          infoTypes_.Add(other.infoTypes_);
          if (other.primitiveTransformation_ != null) {
            if (primitiveTransformation_ == null) {
              primitiveTransformation_ = new global::Google.Cloud.Dlp.V2Beta2.PrimitiveTransformation();
            }
            PrimitiveTransformation.MergeFrom(other.PrimitiveTransformation);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                infoTypes_.AddEntriesFrom(input, _repeated_infoTypes_codec);
                break;
              }
              case 18: {
                if (primitiveTransformation_ == null) {
                  primitiveTransformation_ = new global::Google.Cloud.Dlp.V2Beta2.PrimitiveTransformation();
                }
                input.ReadMessage(primitiveTransformation_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// The transformation to apply to the field.
  /// </summary>
  public sealed partial class FieldTransformation : pb::IMessage<FieldTransformation> {
    private static readonly pb::MessageParser<FieldTransformation> _parser = new pb::MessageParser<FieldTransformation>(() => new FieldTransformation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FieldTransformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldTransformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldTransformation(FieldTransformation other) : this() {
      fields_ = other.fields_.Clone();
      Condition = other.condition_ != null ? other.Condition.Clone() : null;
      switch (other.TransformationCase) {
        case TransformationOneofCase.PrimitiveTransformation:
          PrimitiveTransformation = other.PrimitiveTransformation.Clone();
          break;
        case TransformationOneofCase.InfoTypeTransformations:
          InfoTypeTransformations = other.InfoTypeTransformations.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldTransformation Clone() {
      return new FieldTransformation(this);
    }

    /// <summary>Field number for the "fields" field.</summary>
    public const int FieldsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.FieldId> _repeated_fields_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta2.FieldId.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.FieldId> fields_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.FieldId>();
    /// <summary>
    /// Input field(s) to apply the transformation to. [required]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.FieldId> Fields {
      get { return fields_; }
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 3;
    private global::Google.Cloud.Dlp.V2Beta2.RecordCondition condition_;
    /// <summary>
    /// Only apply the transformation if the condition evaluates to true for the
    /// given `RecordCondition`. The conditions are allowed to reference fields
    /// that are not used in the actual transformation. [optional]
    ///
    /// Example Use Cases:
    ///
    /// - Apply a different bucket transformation to an age column if the zip code
    /// column for the same record is within a specific range.
    /// - Redact a field if the date of birth field is greater than 85.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.RecordCondition Condition {
      get { return condition_; }
      set {
        condition_ = value;
      }
    }

    /// <summary>Field number for the "primitive_transformation" field.</summary>
    public const int PrimitiveTransformationFieldNumber = 4;
    /// <summary>
    /// Apply the transformation to the entire field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.PrimitiveTransformation PrimitiveTransformation {
      get { return transformationCase_ == TransformationOneofCase.PrimitiveTransformation ? (global::Google.Cloud.Dlp.V2Beta2.PrimitiveTransformation) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.PrimitiveTransformation;
      }
    }

    /// <summary>Field number for the "info_type_transformations" field.</summary>
    public const int InfoTypeTransformationsFieldNumber = 5;
    /// <summary>
    /// Treat the contents of the field as free text, and selectively
    /// transform content that matches an `InfoType`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.InfoTypeTransformations InfoTypeTransformations {
      get { return transformationCase_ == TransformationOneofCase.InfoTypeTransformations ? (global::Google.Cloud.Dlp.V2Beta2.InfoTypeTransformations) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.InfoTypeTransformations;
      }
    }

    private object transformation_;
    /// <summary>Enum of possible cases for the "transformation" oneof.</summary>
    public enum TransformationOneofCase {
      None = 0,
      PrimitiveTransformation = 4,
      InfoTypeTransformations = 5,
    }
    private TransformationOneofCase transformationCase_ = TransformationOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformationOneofCase TransformationCase {
      get { return transformationCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTransformation() {
      transformationCase_ = TransformationOneofCase.None;
      transformation_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FieldTransformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FieldTransformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fields_.Equals(other.fields_)) return false;
      if (!object.Equals(Condition, other.Condition)) return false;
      if (!object.Equals(PrimitiveTransformation, other.PrimitiveTransformation)) return false;
      if (!object.Equals(InfoTypeTransformations, other.InfoTypeTransformations)) return false;
      if (TransformationCase != other.TransformationCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fields_.GetHashCode();
      if (condition_ != null) hash ^= Condition.GetHashCode();
      if (transformationCase_ == TransformationOneofCase.PrimitiveTransformation) hash ^= PrimitiveTransformation.GetHashCode();
      if (transformationCase_ == TransformationOneofCase.InfoTypeTransformations) hash ^= InfoTypeTransformations.GetHashCode();
      hash ^= (int) transformationCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fields_.WriteTo(output, _repeated_fields_codec);
      if (condition_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Condition);
      }
      if (transformationCase_ == TransformationOneofCase.PrimitiveTransformation) {
        output.WriteRawTag(34);
        output.WriteMessage(PrimitiveTransformation);
      }
      if (transformationCase_ == TransformationOneofCase.InfoTypeTransformations) {
        output.WriteRawTag(42);
        output.WriteMessage(InfoTypeTransformations);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fields_.CalculateSize(_repeated_fields_codec);
      if (condition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Condition);
      }
      if (transformationCase_ == TransformationOneofCase.PrimitiveTransformation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrimitiveTransformation);
      }
      if (transformationCase_ == TransformationOneofCase.InfoTypeTransformations) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoTypeTransformations);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FieldTransformation other) {
      if (other == null) {
        return;
      }
      fields_.Add(other.fields_);
      if (other.condition_ != null) {
        if (condition_ == null) {
          condition_ = new global::Google.Cloud.Dlp.V2Beta2.RecordCondition();
        }
        Condition.MergeFrom(other.Condition);
      }
      switch (other.TransformationCase) {
        case TransformationOneofCase.PrimitiveTransformation:
          PrimitiveTransformation = other.PrimitiveTransformation;
          break;
        case TransformationOneofCase.InfoTypeTransformations:
          InfoTypeTransformations = other.InfoTypeTransformations;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            fields_.AddEntriesFrom(input, _repeated_fields_codec);
            break;
          }
          case 26: {
            if (condition_ == null) {
              condition_ = new global::Google.Cloud.Dlp.V2Beta2.RecordCondition();
            }
            input.ReadMessage(condition_);
            break;
          }
          case 34: {
            global::Google.Cloud.Dlp.V2Beta2.PrimitiveTransformation subBuilder = new global::Google.Cloud.Dlp.V2Beta2.PrimitiveTransformation();
            if (transformationCase_ == TransformationOneofCase.PrimitiveTransformation) {
              subBuilder.MergeFrom(PrimitiveTransformation);
            }
            input.ReadMessage(subBuilder);
            PrimitiveTransformation = subBuilder;
            break;
          }
          case 42: {
            global::Google.Cloud.Dlp.V2Beta2.InfoTypeTransformations subBuilder = new global::Google.Cloud.Dlp.V2Beta2.InfoTypeTransformations();
            if (transformationCase_ == TransformationOneofCase.InfoTypeTransformations) {
              subBuilder.MergeFrom(InfoTypeTransformations);
            }
            input.ReadMessage(subBuilder);
            InfoTypeTransformations = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A type of transformation that is applied over structured data such as a
  /// table.
  /// </summary>
  public sealed partial class RecordTransformations : pb::IMessage<RecordTransformations> {
    private static readonly pb::MessageParser<RecordTransformations> _parser = new pb::MessageParser<RecordTransformations>(() => new RecordTransformations());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordTransformations> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordTransformations() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordTransformations(RecordTransformations other) : this() {
      fieldTransformations_ = other.fieldTransformations_.Clone();
      recordSuppressions_ = other.recordSuppressions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordTransformations Clone() {
      return new RecordTransformations(this);
    }

    /// <summary>Field number for the "field_transformations" field.</summary>
    public const int FieldTransformationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.FieldTransformation> _repeated_fieldTransformations_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta2.FieldTransformation.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.FieldTransformation> fieldTransformations_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.FieldTransformation>();
    /// <summary>
    /// Transform the record by applying various field transformations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.FieldTransformation> FieldTransformations {
      get { return fieldTransformations_; }
    }

    /// <summary>Field number for the "record_suppressions" field.</summary>
    public const int RecordSuppressionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.RecordSuppression> _repeated_recordSuppressions_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Dlp.V2Beta2.RecordSuppression.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.RecordSuppression> recordSuppressions_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.RecordSuppression>();
    /// <summary>
    /// Configuration defining which records get suppressed entirely. Records that
    /// match any suppression rule are omitted from the output [optional].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.RecordSuppression> RecordSuppressions {
      get { return recordSuppressions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordTransformations);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordTransformations other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fieldTransformations_.Equals(other.fieldTransformations_)) return false;
      if(!recordSuppressions_.Equals(other.recordSuppressions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fieldTransformations_.GetHashCode();
      hash ^= recordSuppressions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fieldTransformations_.WriteTo(output, _repeated_fieldTransformations_codec);
      recordSuppressions_.WriteTo(output, _repeated_recordSuppressions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fieldTransformations_.CalculateSize(_repeated_fieldTransformations_codec);
      size += recordSuppressions_.CalculateSize(_repeated_recordSuppressions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordTransformations other) {
      if (other == null) {
        return;
      }
      fieldTransformations_.Add(other.fieldTransformations_);
      recordSuppressions_.Add(other.recordSuppressions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            fieldTransformations_.AddEntriesFrom(input, _repeated_fieldTransformations_codec);
            break;
          }
          case 18: {
            recordSuppressions_.AddEntriesFrom(input, _repeated_recordSuppressions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Configuration to suppress records whose suppression conditions evaluate to
  /// true.
  /// </summary>
  public sealed partial class RecordSuppression : pb::IMessage<RecordSuppression> {
    private static readonly pb::MessageParser<RecordSuppression> _parser = new pb::MessageParser<RecordSuppression>(() => new RecordSuppression());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordSuppression> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordSuppression() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordSuppression(RecordSuppression other) : this() {
      Condition = other.condition_ != null ? other.Condition.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordSuppression Clone() {
      return new RecordSuppression(this);
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta2.RecordCondition condition_;
    /// <summary>
    /// A condition that when it evaluates to true will result in the record being
    /// evaluated to be suppressed from the transformed content.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.RecordCondition Condition {
      get { return condition_; }
      set {
        condition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordSuppression);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordSuppression other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Condition, other.Condition)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (condition_ != null) hash ^= Condition.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (condition_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Condition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (condition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Condition);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordSuppression other) {
      if (other == null) {
        return;
      }
      if (other.condition_ != null) {
        if (condition_ == null) {
          condition_ = new global::Google.Cloud.Dlp.V2Beta2.RecordCondition();
        }
        Condition.MergeFrom(other.Condition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (condition_ == null) {
              condition_ = new global::Google.Cloud.Dlp.V2Beta2.RecordCondition();
            }
            input.ReadMessage(condition_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A condition for determining whether a transformation should be applied to
  /// a field.
  /// </summary>
  public sealed partial class RecordCondition : pb::IMessage<RecordCondition> {
    private static readonly pb::MessageParser<RecordCondition> _parser = new pb::MessageParser<RecordCondition>(() => new RecordCondition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordCondition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordCondition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordCondition(RecordCondition other) : this() {
      Expressions = other.expressions_ != null ? other.Expressions.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordCondition Clone() {
      return new RecordCondition(this);
    }

    /// <summary>Field number for the "expressions" field.</summary>
    public const int ExpressionsFieldNumber = 3;
    private global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Types.Expressions expressions_;
    /// <summary>
    /// An expression.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Types.Expressions Expressions {
      get { return expressions_; }
      set {
        expressions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordCondition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordCondition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Expressions, other.Expressions)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (expressions_ != null) hash ^= Expressions.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (expressions_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Expressions);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (expressions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expressions);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordCondition other) {
      if (other == null) {
        return;
      }
      if (other.expressions_ != null) {
        if (expressions_ == null) {
          expressions_ = new global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Types.Expressions();
        }
        Expressions.MergeFrom(other.Expressions);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            if (expressions_ == null) {
              expressions_ = new global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Types.Expressions();
            }
            input.ReadMessage(expressions_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RecordCondition message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The field type of `value` and `field` do not need to match to be
      /// considered equal, but not all comparisons are possible.
      ///
      /// A `value` of type:
      ///
      /// - `string` can be compared against all other types
      /// - `boolean` can only be compared against other booleans
      /// - `integer` can be compared against doubles or a string if the string value
      /// can be parsed as an integer.
      /// - `double` can be compared against integers or a string if the string can
      /// be parsed as a double.
      /// - `Timestamp` can be compared against strings in RFC 3339 date string
      /// format.
      /// - `TimeOfDay` can be compared against timestamps and strings in the format
      /// of 'HH:mm:ss'.
      ///
      /// If we fail to compare do to type mismatch, a warning will be given and
      /// the condition will evaluate to false.
      /// </summary>
      public sealed partial class Condition : pb::IMessage<Condition> {
        private static readonly pb::MessageParser<Condition> _parser = new pb::MessageParser<Condition>(() => new Condition());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Condition> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Condition() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Condition(Condition other) : this() {
          Field = other.field_ != null ? other.Field.Clone() : null;
          operator_ = other.operator_;
          Value = other.value_ != null ? other.Value.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Condition Clone() {
          return new Condition(this);
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 1;
        private global::Google.Cloud.Dlp.V2Beta2.FieldId field_;
        /// <summary>
        /// Field within the record this condition is evaluated against. [required]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta2.FieldId Field {
          get { return field_; }
          set {
            field_ = value;
          }
        }

        /// <summary>Field number for the "operator" field.</summary>
        public const int OperatorFieldNumber = 3;
        private global::Google.Cloud.Dlp.V2Beta2.RelationalOperator operator_ = 0;
        /// <summary>
        /// Operator used to compare the field or infoType to the value. [required]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta2.RelationalOperator Operator {
          get { return operator_; }
          set {
            operator_ = value;
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 4;
        private global::Google.Cloud.Dlp.V2Beta2.Value value_;
        /// <summary>
        /// Value to compare against. [Required, except for `EXISTS` tests.]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta2.Value Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Condition);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Condition other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Field, other.Field)) return false;
          if (Operator != other.Operator) return false;
          if (!object.Equals(Value, other.Value)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (field_ != null) hash ^= Field.GetHashCode();
          if (Operator != 0) hash ^= Operator.GetHashCode();
          if (value_ != null) hash ^= Value.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (field_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Field);
          }
          if (Operator != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Operator);
          }
          if (value_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Value);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (field_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Field);
          }
          if (Operator != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operator);
          }
          if (value_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Condition other) {
          if (other == null) {
            return;
          }
          if (other.field_ != null) {
            if (field_ == null) {
              field_ = new global::Google.Cloud.Dlp.V2Beta2.FieldId();
            }
            Field.MergeFrom(other.Field);
          }
          if (other.Operator != 0) {
            Operator = other.Operator;
          }
          if (other.value_ != null) {
            if (value_ == null) {
              value_ = new global::Google.Cloud.Dlp.V2Beta2.Value();
            }
            Value.MergeFrom(other.Value);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (field_ == null) {
                  field_ = new global::Google.Cloud.Dlp.V2Beta2.FieldId();
                }
                input.ReadMessage(field_);
                break;
              }
              case 24: {
                operator_ = (global::Google.Cloud.Dlp.V2Beta2.RelationalOperator) input.ReadEnum();
                break;
              }
              case 34: {
                if (value_ == null) {
                  value_ = new global::Google.Cloud.Dlp.V2Beta2.Value();
                }
                input.ReadMessage(value_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// A collection of conditions.
      /// </summary>
      public sealed partial class Conditions : pb::IMessage<Conditions> {
        private static readonly pb::MessageParser<Conditions> _parser = new pb::MessageParser<Conditions>(() => new Conditions());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Conditions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Conditions() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Conditions(Conditions other) : this() {
          conditions_ = other.conditions_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Conditions Clone() {
          return new Conditions(this);
        }

        /// <summary>Field number for the "conditions" field.</summary>
        public const int Conditions_FieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Types.Condition> _repeated_conditions_codec
            = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Types.Condition.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Types.Condition> conditions_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Types.Condition>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Types.Condition> Conditions_ {
          get { return conditions_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Conditions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Conditions other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!conditions_.Equals(other.conditions_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= conditions_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          conditions_.WriteTo(output, _repeated_conditions_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += conditions_.CalculateSize(_repeated_conditions_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Conditions other) {
          if (other == null) {
            return;
          }
          conditions_.Add(other.conditions_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// An expression, consisting or an operator and conditions.
      /// </summary>
      public sealed partial class Expressions : pb::IMessage<Expressions> {
        private static readonly pb::MessageParser<Expressions> _parser = new pb::MessageParser<Expressions>(() => new Expressions());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Expressions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Expressions() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Expressions(Expressions other) : this() {
          logicalOperator_ = other.logicalOperator_;
          switch (other.TypeCase) {
            case TypeOneofCase.Conditions:
              Conditions = other.Conditions.Clone();
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Expressions Clone() {
          return new Expressions(this);
        }

        /// <summary>Field number for the "logical_operator" field.</summary>
        public const int LogicalOperatorFieldNumber = 1;
        private global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Types.Expressions.Types.LogicalOperator logicalOperator_ = 0;
        /// <summary>
        /// The operator to apply to the result of conditions. Default and currently
        /// only supported value is `AND`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Types.Expressions.Types.LogicalOperator LogicalOperator {
          get { return logicalOperator_; }
          set {
            logicalOperator_ = value;
          }
        }

        /// <summary>Field number for the "conditions" field.</summary>
        public const int ConditionsFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Types.Conditions Conditions {
          get { return typeCase_ == TypeOneofCase.Conditions ? (global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Types.Conditions) type_ : null; }
          set {
            type_ = value;
            typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Conditions;
          }
        }

        private object type_;
        /// <summary>Enum of possible cases for the "type" oneof.</summary>
        public enum TypeOneofCase {
          None = 0,
          Conditions = 3,
        }
        private TypeOneofCase typeCase_ = TypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TypeOneofCase TypeCase {
          get { return typeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType() {
          typeCase_ = TypeOneofCase.None;
          type_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Expressions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Expressions other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (LogicalOperator != other.LogicalOperator) return false;
          if (!object.Equals(Conditions, other.Conditions)) return false;
          if (TypeCase != other.TypeCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (LogicalOperator != 0) hash ^= LogicalOperator.GetHashCode();
          if (typeCase_ == TypeOneofCase.Conditions) hash ^= Conditions.GetHashCode();
          hash ^= (int) typeCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (LogicalOperator != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) LogicalOperator);
          }
          if (typeCase_ == TypeOneofCase.Conditions) {
            output.WriteRawTag(26);
            output.WriteMessage(Conditions);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (LogicalOperator != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LogicalOperator);
          }
          if (typeCase_ == TypeOneofCase.Conditions) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Conditions);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Expressions other) {
          if (other == null) {
            return;
          }
          if (other.LogicalOperator != 0) {
            LogicalOperator = other.LogicalOperator;
          }
          switch (other.TypeCase) {
            case TypeOneofCase.Conditions:
              Conditions = other.Conditions;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                logicalOperator_ = (global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Types.Expressions.Types.LogicalOperator) input.ReadEnum();
                break;
              }
              case 26: {
                global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Types.Conditions subBuilder = new global::Google.Cloud.Dlp.V2Beta2.RecordCondition.Types.Conditions();
                if (typeCase_ == TypeOneofCase.Conditions) {
                  subBuilder.MergeFrom(Conditions);
                }
                input.ReadMessage(subBuilder);
                Conditions = subBuilder;
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Expressions message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum LogicalOperator {
            [pbr::OriginalName("LOGICAL_OPERATOR_UNSPECIFIED")] Unspecified = 0,
            [pbr::OriginalName("AND")] And = 1,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// Overview of the modifications that occurred.
  /// </summary>
  public sealed partial class TransformationOverview : pb::IMessage<TransformationOverview> {
    private static readonly pb::MessageParser<TransformationOverview> _parser = new pb::MessageParser<TransformationOverview>(() => new TransformationOverview());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransformationOverview> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformationOverview() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformationOverview(TransformationOverview other) : this() {
      transformedBytes_ = other.transformedBytes_;
      transformationSummaries_ = other.transformationSummaries_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformationOverview Clone() {
      return new TransformationOverview(this);
    }

    /// <summary>Field number for the "transformed_bytes" field.</summary>
    public const int TransformedBytesFieldNumber = 2;
    private long transformedBytes_;
    /// <summary>
    /// Total size in bytes that were transformed in some way.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransformedBytes {
      get { return transformedBytes_; }
      set {
        transformedBytes_ = value;
      }
    }

    /// <summary>Field number for the "transformation_summaries" field.</summary>
    public const int TransformationSummariesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.TransformationSummary> _repeated_transformationSummaries_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Dlp.V2Beta2.TransformationSummary.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.TransformationSummary> transformationSummaries_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.TransformationSummary>();
    /// <summary>
    /// Transformations applied to the dataset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.TransformationSummary> TransformationSummaries {
      get { return transformationSummaries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransformationOverview);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransformationOverview other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransformedBytes != other.TransformedBytes) return false;
      if(!transformationSummaries_.Equals(other.transformationSummaries_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransformedBytes != 0L) hash ^= TransformedBytes.GetHashCode();
      hash ^= transformationSummaries_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransformedBytes != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TransformedBytes);
      }
      transformationSummaries_.WriteTo(output, _repeated_transformationSummaries_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransformedBytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TransformedBytes);
      }
      size += transformationSummaries_.CalculateSize(_repeated_transformationSummaries_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransformationOverview other) {
      if (other == null) {
        return;
      }
      if (other.TransformedBytes != 0L) {
        TransformedBytes = other.TransformedBytes;
      }
      transformationSummaries_.Add(other.transformationSummaries_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            TransformedBytes = input.ReadInt64();
            break;
          }
          case 26: {
            transformationSummaries_.AddEntriesFrom(input, _repeated_transformationSummaries_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Summary of a single tranformation.
  /// Only one of 'transformation', 'field_transformation', or 'record_suppress'
  /// will be set.
  /// </summary>
  public sealed partial class TransformationSummary : pb::IMessage<TransformationSummary> {
    private static readonly pb::MessageParser<TransformationSummary> _parser = new pb::MessageParser<TransformationSummary>(() => new TransformationSummary());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransformationSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformationSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformationSummary(TransformationSummary other) : this() {
      InfoType = other.infoType_ != null ? other.InfoType.Clone() : null;
      Field = other.field_ != null ? other.Field.Clone() : null;
      Transformation = other.transformation_ != null ? other.Transformation.Clone() : null;
      fieldTransformations_ = other.fieldTransformations_.Clone();
      RecordSuppress = other.recordSuppress_ != null ? other.RecordSuppress.Clone() : null;
      results_ = other.results_.Clone();
      transformedBytes_ = other.transformedBytes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformationSummary Clone() {
      return new TransformationSummary(this);
    }

    /// <summary>Field number for the "info_type" field.</summary>
    public const int InfoTypeFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta2.InfoType infoType_;
    /// <summary>
    /// Set if the transformation was limited to a specific info_type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.InfoType InfoType {
      get { return infoType_; }
      set {
        infoType_ = value;
      }
    }

    /// <summary>Field number for the "field" field.</summary>
    public const int FieldFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta2.FieldId field_;
    /// <summary>
    /// Set if the transformation was limited to a specific FieldId.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.FieldId Field {
      get { return field_; }
      set {
        field_ = value;
      }
    }

    /// <summary>Field number for the "transformation" field.</summary>
    public const int TransformationFieldNumber = 3;
    private global::Google.Cloud.Dlp.V2Beta2.PrimitiveTransformation transformation_;
    /// <summary>
    /// The specific transformation these stats apply to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.PrimitiveTransformation Transformation {
      get { return transformation_; }
      set {
        transformation_ = value;
      }
    }

    /// <summary>Field number for the "field_transformations" field.</summary>
    public const int FieldTransformationsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.FieldTransformation> _repeated_fieldTransformations_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Cloud.Dlp.V2Beta2.FieldTransformation.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.FieldTransformation> fieldTransformations_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.FieldTransformation>();
    /// <summary>
    /// The field transformation that was applied.
    /// If multiple field transformations are requested for a single field,
    /// this list will contain all of them; otherwise, only one is supplied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.FieldTransformation> FieldTransformations {
      get { return fieldTransformations_; }
    }

    /// <summary>Field number for the "record_suppress" field.</summary>
    public const int RecordSuppressFieldNumber = 6;
    private global::Google.Cloud.Dlp.V2Beta2.RecordSuppression recordSuppress_;
    /// <summary>
    /// The specific suppression option these stats apply to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.RecordSuppression RecordSuppress {
      get { return recordSuppress_; }
      set {
        recordSuppress_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.TransformationSummary.Types.SummaryResult> _repeated_results_codec
        = pb::FieldCodec.ForMessage(34, global::Google.Cloud.Dlp.V2Beta2.TransformationSummary.Types.SummaryResult.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.TransformationSummary.Types.SummaryResult> results_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.TransformationSummary.Types.SummaryResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.TransformationSummary.Types.SummaryResult> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "transformed_bytes" field.</summary>
    public const int TransformedBytesFieldNumber = 7;
    private long transformedBytes_;
    /// <summary>
    /// Total size in bytes that were transformed in some way.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransformedBytes {
      get { return transformedBytes_; }
      set {
        transformedBytes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransformationSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransformationSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InfoType, other.InfoType)) return false;
      if (!object.Equals(Field, other.Field)) return false;
      if (!object.Equals(Transformation, other.Transformation)) return false;
      if(!fieldTransformations_.Equals(other.fieldTransformations_)) return false;
      if (!object.Equals(RecordSuppress, other.RecordSuppress)) return false;
      if(!results_.Equals(other.results_)) return false;
      if (TransformedBytes != other.TransformedBytes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (infoType_ != null) hash ^= InfoType.GetHashCode();
      if (field_ != null) hash ^= Field.GetHashCode();
      if (transformation_ != null) hash ^= Transformation.GetHashCode();
      hash ^= fieldTransformations_.GetHashCode();
      if (recordSuppress_ != null) hash ^= RecordSuppress.GetHashCode();
      hash ^= results_.GetHashCode();
      if (TransformedBytes != 0L) hash ^= TransformedBytes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (infoType_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InfoType);
      }
      if (field_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Field);
      }
      if (transformation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Transformation);
      }
      results_.WriteTo(output, _repeated_results_codec);
      fieldTransformations_.WriteTo(output, _repeated_fieldTransformations_codec);
      if (recordSuppress_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RecordSuppress);
      }
      if (TransformedBytes != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(TransformedBytes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (infoType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoType);
      }
      if (field_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Field);
      }
      if (transformation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transformation);
      }
      size += fieldTransformations_.CalculateSize(_repeated_fieldTransformations_codec);
      if (recordSuppress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecordSuppress);
      }
      size += results_.CalculateSize(_repeated_results_codec);
      if (TransformedBytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TransformedBytes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransformationSummary other) {
      if (other == null) {
        return;
      }
      if (other.infoType_ != null) {
        if (infoType_ == null) {
          infoType_ = new global::Google.Cloud.Dlp.V2Beta2.InfoType();
        }
        InfoType.MergeFrom(other.InfoType);
      }
      if (other.field_ != null) {
        if (field_ == null) {
          field_ = new global::Google.Cloud.Dlp.V2Beta2.FieldId();
        }
        Field.MergeFrom(other.Field);
      }
      if (other.transformation_ != null) {
        if (transformation_ == null) {
          transformation_ = new global::Google.Cloud.Dlp.V2Beta2.PrimitiveTransformation();
        }
        Transformation.MergeFrom(other.Transformation);
      }
      fieldTransformations_.Add(other.fieldTransformations_);
      if (other.recordSuppress_ != null) {
        if (recordSuppress_ == null) {
          recordSuppress_ = new global::Google.Cloud.Dlp.V2Beta2.RecordSuppression();
        }
        RecordSuppress.MergeFrom(other.RecordSuppress);
      }
      results_.Add(other.results_);
      if (other.TransformedBytes != 0L) {
        TransformedBytes = other.TransformedBytes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (infoType_ == null) {
              infoType_ = new global::Google.Cloud.Dlp.V2Beta2.InfoType();
            }
            input.ReadMessage(infoType_);
            break;
          }
          case 18: {
            if (field_ == null) {
              field_ = new global::Google.Cloud.Dlp.V2Beta2.FieldId();
            }
            input.ReadMessage(field_);
            break;
          }
          case 26: {
            if (transformation_ == null) {
              transformation_ = new global::Google.Cloud.Dlp.V2Beta2.PrimitiveTransformation();
            }
            input.ReadMessage(transformation_);
            break;
          }
          case 34: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 42: {
            fieldTransformations_.AddEntriesFrom(input, _repeated_fieldTransformations_codec);
            break;
          }
          case 50: {
            if (recordSuppress_ == null) {
              recordSuppress_ = new global::Google.Cloud.Dlp.V2Beta2.RecordSuppression();
            }
            input.ReadMessage(recordSuppress_);
            break;
          }
          case 56: {
            TransformedBytes = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TransformationSummary message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Possible outcomes of transformations.
      /// </summary>
      public enum TransformationResultCode {
        [pbr::OriginalName("TRANSFORMATION_RESULT_CODE_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("SUCCESS")] Success = 1,
        [pbr::OriginalName("ERROR")] Error = 2,
      }

      /// <summary>
      /// A collection that informs the user the number of times a particular
      /// `TransformationResultCode` and error details occurred.
      /// </summary>
      public sealed partial class SummaryResult : pb::IMessage<SummaryResult> {
        private static readonly pb::MessageParser<SummaryResult> _parser = new pb::MessageParser<SummaryResult>(() => new SummaryResult());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SummaryResult> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta2.TransformationSummary.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SummaryResult() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SummaryResult(SummaryResult other) : this() {
          count_ = other.count_;
          code_ = other.code_;
          details_ = other.details_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SummaryResult Clone() {
          return new SummaryResult(this);
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 1;
        private long count_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        /// <summary>Field number for the "code" field.</summary>
        public const int CodeFieldNumber = 2;
        private global::Google.Cloud.Dlp.V2Beta2.TransformationSummary.Types.TransformationResultCode code_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta2.TransformationSummary.Types.TransformationResultCode Code {
          get { return code_; }
          set {
            code_ = value;
          }
        }

        /// <summary>Field number for the "details" field.</summary>
        public const int DetailsFieldNumber = 3;
        private string details_ = "";
        /// <summary>
        /// A place for warnings or errors to show up if a transformation didn't
        /// work as expected.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Details {
          get { return details_; }
          set {
            details_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SummaryResult);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SummaryResult other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Count != other.Count) return false;
          if (Code != other.Code) return false;
          if (Details != other.Details) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Count != 0L) hash ^= Count.GetHashCode();
          if (Code != 0) hash ^= Code.GetHashCode();
          if (Details.Length != 0) hash ^= Details.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Count != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Count);
          }
          if (Code != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Code);
          }
          if (Details.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Details);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Count != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
          }
          if (Code != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
          }
          if (Details.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Details);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SummaryResult other) {
          if (other == null) {
            return;
          }
          if (other.Count != 0L) {
            Count = other.Count;
          }
          if (other.Code != 0) {
            Code = other.Code;
          }
          if (other.Details.Length != 0) {
            Details = other.Details;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Count = input.ReadInt64();
                break;
              }
              case 16: {
                code_ = (global::Google.Cloud.Dlp.V2Beta2.TransformationSummary.Types.TransformationResultCode) input.ReadEnum();
                break;
              }
              case 26: {
                Details = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Schedule for triggeredJobs.
  /// </summary>
  public sealed partial class Schedule : pb::IMessage<Schedule> {
    private static readonly pb::MessageParser<Schedule> _parser = new pb::MessageParser<Schedule>(() => new Schedule());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Schedule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Schedule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Schedule(Schedule other) : this() {
      switch (other.OptionCase) {
        case OptionOneofCase.ReccurrencePeriodDuration:
          ReccurrencePeriodDuration = other.ReccurrencePeriodDuration.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Schedule Clone() {
      return new Schedule(this);
    }

    /// <summary>Field number for the "reccurrence_period_duration" field.</summary>
    public const int ReccurrencePeriodDurationFieldNumber = 1;
    /// <summary>
    /// With this option a job is started a regular periodic basis. For
    /// example: every 10 minutes.
    ///
    /// A scheduled start time will be skipped if the previous
    /// execution has not ended when its scheduled time occurs.
    ///
    /// This value must be set to a time duration greater than or equal
    /// to 60 minutes and can be no longer than 60 days.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration ReccurrencePeriodDuration {
      get { return optionCase_ == OptionOneofCase.ReccurrencePeriodDuration ? (global::Google.Protobuf.WellKnownTypes.Duration) option_ : null; }
      set {
        option_ = value;
        optionCase_ = value == null ? OptionOneofCase.None : OptionOneofCase.ReccurrencePeriodDuration;
      }
    }

    private object option_;
    /// <summary>Enum of possible cases for the "option" oneof.</summary>
    public enum OptionOneofCase {
      None = 0,
      ReccurrencePeriodDuration = 1,
    }
    private OptionOneofCase optionCase_ = OptionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionOneofCase OptionCase {
      get { return optionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOption() {
      optionCase_ = OptionOneofCase.None;
      option_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Schedule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Schedule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ReccurrencePeriodDuration, other.ReccurrencePeriodDuration)) return false;
      if (OptionCase != other.OptionCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (optionCase_ == OptionOneofCase.ReccurrencePeriodDuration) hash ^= ReccurrencePeriodDuration.GetHashCode();
      hash ^= (int) optionCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (optionCase_ == OptionOneofCase.ReccurrencePeriodDuration) {
        output.WriteRawTag(10);
        output.WriteMessage(ReccurrencePeriodDuration);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (optionCase_ == OptionOneofCase.ReccurrencePeriodDuration) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReccurrencePeriodDuration);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Schedule other) {
      if (other == null) {
        return;
      }
      switch (other.OptionCase) {
        case OptionOneofCase.ReccurrencePeriodDuration:
          ReccurrencePeriodDuration = other.ReccurrencePeriodDuration;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
            if (optionCase_ == OptionOneofCase.ReccurrencePeriodDuration) {
              subBuilder.MergeFrom(ReccurrencePeriodDuration);
            }
            input.ReadMessage(subBuilder);
            ReccurrencePeriodDuration = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The inspectTemplate contains a configuration (set of types of sensitive data
  /// to be detected) to be used anywhere you otherwise would normally specify
  /// InspectConfig.
  /// </summary>
  public sealed partial class InspectTemplate : pb::IMessage<InspectTemplate> {
    private static readonly pb::MessageParser<InspectTemplate> _parser = new pb::MessageParser<InspectTemplate>(() => new InspectTemplate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InspectTemplate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectTemplate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectTemplate(InspectTemplate other) : this() {
      name_ = other.name_;
      displayName_ = other.displayName_;
      description_ = other.description_;
      CreateTime = other.createTime_ != null ? other.CreateTime.Clone() : null;
      UpdateTime = other.updateTime_ != null ? other.UpdateTime.Clone() : null;
      InspectConfig = other.inspectConfig_ != null ? other.InspectConfig.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectTemplate Clone() {
      return new InspectTemplate(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The template name. Output only.
    ///
    /// The template will have one of the following formats:
    /// `projects/PROJECT_ID/inspectTemplates/TEMPLATE_ID` OR
    /// `organizations/ORGANIZATION_ID/inspectTemplates/TEMPLATE_ID`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 2;
    private string displayName_ = "";
    /// <summary>
    /// Display name (max 256 chars).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// Short description (max 256 chars).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// The creation timestamp of a inspectTemplate, output only field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "update_time" field.</summary>
    public const int UpdateTimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updateTime_;
    /// <summary>
    /// The last update timestamp of a inspectTemplate, output only field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    /// <summary>Field number for the "inspect_config" field.</summary>
    public const int InspectConfigFieldNumber = 6;
    private global::Google.Cloud.Dlp.V2Beta2.InspectConfig inspectConfig_;
    /// <summary>
    /// The core content of the template. Configuration of the scanning process.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.InspectConfig InspectConfig {
      get { return inspectConfig_; }
      set {
        inspectConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InspectTemplate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InspectTemplate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (DisplayName != other.DisplayName) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(UpdateTime, other.UpdateTime)) return false;
      if (!object.Equals(InspectConfig, other.InspectConfig)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (updateTime_ != null) hash ^= UpdateTime.GetHashCode();
      if (inspectConfig_ != null) hash ^= InspectConfig.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (createTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CreateTime);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(UpdateTime);
      }
      if (inspectConfig_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(InspectConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (updateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateTime);
      }
      if (inspectConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InspectConfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InspectTemplate other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.updateTime_ != null) {
        if (updateTime_ == null) {
          updateTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdateTime.MergeFrom(other.UpdateTime);
      }
      if (other.inspectConfig_ != null) {
        if (inspectConfig_ == null) {
          inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta2.InspectConfig();
        }
        InspectConfig.MergeFrom(other.InspectConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            DisplayName = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            if (createTime_ == null) {
              createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(createTime_);
            break;
          }
          case 42: {
            if (updateTime_ == null) {
              updateTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(updateTime_);
            break;
          }
          case 50: {
            if (inspectConfig_ == null) {
              inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta2.InspectConfig();
            }
            input.ReadMessage(inspectConfig_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The DeidentifyTemplates contains instructions on how to deidentify content.
  /// </summary>
  public sealed partial class DeidentifyTemplate : pb::IMessage<DeidentifyTemplate> {
    private static readonly pb::MessageParser<DeidentifyTemplate> _parser = new pb::MessageParser<DeidentifyTemplate>(() => new DeidentifyTemplate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeidentifyTemplate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeidentifyTemplate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeidentifyTemplate(DeidentifyTemplate other) : this() {
      name_ = other.name_;
      displayName_ = other.displayName_;
      description_ = other.description_;
      CreateTime = other.createTime_ != null ? other.CreateTime.Clone() : null;
      UpdateTime = other.updateTime_ != null ? other.UpdateTime.Clone() : null;
      DeidentifyConfig = other.deidentifyConfig_ != null ? other.DeidentifyConfig.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeidentifyTemplate Clone() {
      return new DeidentifyTemplate(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The template name. Output only.
    ///
    /// The template will have one of the following formats:
    /// `projects/PROJECT_ID/deidentifyTemplates/TEMPLATE_ID` OR
    /// `organizations/ORGANIZATION_ID/deidentifyTemplates/TEMPLATE_ID`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 2;
    private string displayName_ = "";
    /// <summary>
    /// Display name (max 256 chars).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// Short description (max 256 chars).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// The creation timestamp of a inspectTemplate, output only field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "update_time" field.</summary>
    public const int UpdateTimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updateTime_;
    /// <summary>
    /// The last update timestamp of a inspectTemplate, output only field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    /// <summary>Field number for the "deidentify_config" field.</summary>
    public const int DeidentifyConfigFieldNumber = 6;
    private global::Google.Cloud.Dlp.V2Beta2.DeidentifyConfig deidentifyConfig_;
    /// <summary>
    /// ///////////// // The core content of the template  // ///////////////
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.DeidentifyConfig DeidentifyConfig {
      get { return deidentifyConfig_; }
      set {
        deidentifyConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeidentifyTemplate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeidentifyTemplate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (DisplayName != other.DisplayName) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(UpdateTime, other.UpdateTime)) return false;
      if (!object.Equals(DeidentifyConfig, other.DeidentifyConfig)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (updateTime_ != null) hash ^= UpdateTime.GetHashCode();
      if (deidentifyConfig_ != null) hash ^= DeidentifyConfig.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (createTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CreateTime);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(UpdateTime);
      }
      if (deidentifyConfig_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DeidentifyConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (updateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateTime);
      }
      if (deidentifyConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeidentifyConfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeidentifyTemplate other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.updateTime_ != null) {
        if (updateTime_ == null) {
          updateTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdateTime.MergeFrom(other.UpdateTime);
      }
      if (other.deidentifyConfig_ != null) {
        if (deidentifyConfig_ == null) {
          deidentifyConfig_ = new global::Google.Cloud.Dlp.V2Beta2.DeidentifyConfig();
        }
        DeidentifyConfig.MergeFrom(other.DeidentifyConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            DisplayName = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            if (createTime_ == null) {
              createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(createTime_);
            break;
          }
          case 42: {
            if (updateTime_ == null) {
              updateTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(updateTime_);
            break;
          }
          case 50: {
            if (deidentifyConfig_ == null) {
              deidentifyConfig_ = new global::Google.Cloud.Dlp.V2Beta2.DeidentifyConfig();
            }
            input.ReadMessage(deidentifyConfig_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Contains a configuration to make dlp api calls on a repeating basis.
  /// </summary>
  public sealed partial class JobTrigger : pb::IMessage<JobTrigger> {
    private static readonly pb::MessageParser<JobTrigger> _parser = new pb::MessageParser<JobTrigger>(() => new JobTrigger());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JobTrigger> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobTrigger() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobTrigger(JobTrigger other) : this() {
      name_ = other.name_;
      displayName_ = other.displayName_;
      description_ = other.description_;
      triggers_ = other.triggers_.Clone();
      errors_ = other.errors_.Clone();
      CreateTime = other.createTime_ != null ? other.CreateTime.Clone() : null;
      UpdateTime = other.updateTime_ != null ? other.UpdateTime.Clone() : null;
      LastRunTime = other.lastRunTime_ != null ? other.LastRunTime.Clone() : null;
      status_ = other.status_;
      switch (other.JobCase) {
        case JobOneofCase.InspectJob:
          InspectJob = other.InspectJob.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobTrigger Clone() {
      return new JobTrigger(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Unique resource name for the triggeredJob, assigned by the service when the
    /// triggeredJob is created, for example
    /// `projects/dlp-test-project/triggeredJobs/53234423`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 2;
    private string displayName_ = "";
    /// <summary>
    /// Display name (max 100 chars)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// User provided description (max 256 chars)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inspect_job" field.</summary>
    public const int InspectJobFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.InspectJobConfig InspectJob {
      get { return jobCase_ == JobOneofCase.InspectJob ? (global::Google.Cloud.Dlp.V2Beta2.InspectJobConfig) job_ : null; }
      set {
        job_ = value;
        jobCase_ = value == null ? JobOneofCase.None : JobOneofCase.InspectJob;
      }
    }

    /// <summary>Field number for the "triggers" field.</summary>
    public const int TriggersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.JobTrigger.Types.Trigger> _repeated_triggers_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Cloud.Dlp.V2Beta2.JobTrigger.Types.Trigger.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.JobTrigger.Types.Trigger> triggers_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.JobTrigger.Types.Trigger>();
    /// <summary>
    /// A list of triggers which will be OR'ed together. Only one in the list
    /// needs to trigger for a job to be started. The list may contain only
    /// a single Schedule trigger and must have at least one object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.JobTrigger.Types.Trigger> Triggers {
      get { return triggers_; }
    }

    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.JobTrigger.Types.Error> _repeated_errors_codec
        = pb::FieldCodec.ForMessage(50, global::Google.Cloud.Dlp.V2Beta2.JobTrigger.Types.Error.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.JobTrigger.Types.Error> errors_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.JobTrigger.Types.Error>();
    /// <summary>
    /// A stream of errors encountered when the trigger was activated. Repeated
    /// errors may result in the JobTrigger automaticaly being paused.
    /// Will return the last 100 errors. Whenever the JobTrigger is modified
    /// this list will be cleared. Output only field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.JobTrigger.Types.Error> Errors {
      get { return errors_; }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// The creation timestamp of a triggeredJob, output only field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "update_time" field.</summary>
    public const int UpdateTimeFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updateTime_;
    /// <summary>
    /// The last update timestamp of a triggeredJob, output only field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    /// <summary>Field number for the "last_run_time" field.</summary>
    public const int LastRunTimeFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastRunTime_;
    /// <summary>
    /// The timestamp of the last time this trigger executed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastRunTime {
      get { return lastRunTime_; }
      set {
        lastRunTime_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 10;
    private global::Google.Cloud.Dlp.V2Beta2.JobTrigger.Types.Status status_ = 0;
    /// <summary>
    /// A status for this trigger. [required]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.JobTrigger.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    private object job_;
    /// <summary>Enum of possible cases for the "job" oneof.</summary>
    public enum JobOneofCase {
      None = 0,
      InspectJob = 4,
    }
    private JobOneofCase jobCase_ = JobOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobOneofCase JobCase {
      get { return jobCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearJob() {
      jobCase_ = JobOneofCase.None;
      job_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JobTrigger);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JobTrigger other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (DisplayName != other.DisplayName) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(InspectJob, other.InspectJob)) return false;
      if(!triggers_.Equals(other.triggers_)) return false;
      if(!errors_.Equals(other.errors_)) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(UpdateTime, other.UpdateTime)) return false;
      if (!object.Equals(LastRunTime, other.LastRunTime)) return false;
      if (Status != other.Status) return false;
      if (JobCase != other.JobCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (jobCase_ == JobOneofCase.InspectJob) hash ^= InspectJob.GetHashCode();
      hash ^= triggers_.GetHashCode();
      hash ^= errors_.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (updateTime_ != null) hash ^= UpdateTime.GetHashCode();
      if (lastRunTime_ != null) hash ^= LastRunTime.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= (int) jobCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (jobCase_ == JobOneofCase.InspectJob) {
        output.WriteRawTag(34);
        output.WriteMessage(InspectJob);
      }
      triggers_.WriteTo(output, _repeated_triggers_codec);
      errors_.WriteTo(output, _repeated_errors_codec);
      if (createTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CreateTime);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(UpdateTime);
      }
      if (lastRunTime_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(LastRunTime);
      }
      if (Status != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (jobCase_ == JobOneofCase.InspectJob) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InspectJob);
      }
      size += triggers_.CalculateSize(_repeated_triggers_codec);
      size += errors_.CalculateSize(_repeated_errors_codec);
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (updateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateTime);
      }
      if (lastRunTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastRunTime);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JobTrigger other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      triggers_.Add(other.triggers_);
      errors_.Add(other.errors_);
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.updateTime_ != null) {
        if (updateTime_ == null) {
          updateTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdateTime.MergeFrom(other.UpdateTime);
      }
      if (other.lastRunTime_ != null) {
        if (lastRunTime_ == null) {
          lastRunTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastRunTime.MergeFrom(other.LastRunTime);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      switch (other.JobCase) {
        case JobOneofCase.InspectJob:
          InspectJob = other.InspectJob;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            DisplayName = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            global::Google.Cloud.Dlp.V2Beta2.InspectJobConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta2.InspectJobConfig();
            if (jobCase_ == JobOneofCase.InspectJob) {
              subBuilder.MergeFrom(InspectJob);
            }
            input.ReadMessage(subBuilder);
            InspectJob = subBuilder;
            break;
          }
          case 42: {
            triggers_.AddEntriesFrom(input, _repeated_triggers_codec);
            break;
          }
          case 50: {
            errors_.AddEntriesFrom(input, _repeated_errors_codec);
            break;
          }
          case 58: {
            if (createTime_ == null) {
              createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(createTime_);
            break;
          }
          case 66: {
            if (updateTime_ == null) {
              updateTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(updateTime_);
            break;
          }
          case 74: {
            if (lastRunTime_ == null) {
              lastRunTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(lastRunTime_);
            break;
          }
          case 80: {
            status_ = (global::Google.Cloud.Dlp.V2Beta2.JobTrigger.Types.Status) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the JobTrigger message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Whether the trigger is currently active. If PAUSED or CANCELLED, no jobs
      /// will be created with this configuration. The service may automatically
      /// pause triggers experiencing frequent errors. To restart a job, set the
      /// status to HEALTHY after correcting user errors.
      /// </summary>
      public enum Status {
        [pbr::OriginalName("STATUS_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Trigger is healthy.
        /// </summary>
        [pbr::OriginalName("HEALTHY")] Healthy = 1,
        /// <summary>
        /// Trigger is temporarily paused.
        /// </summary>
        [pbr::OriginalName("PAUSED")] Paused = 2,
        /// <summary>
        /// Trigger is cancelled and can not be resumed.
        /// </summary>
        [pbr::OriginalName("CANCELLED")] Cancelled = 3,
      }

      /// <summary>
      /// What event needs to occur for a new job to be started.
      /// </summary>
      public sealed partial class Trigger : pb::IMessage<Trigger> {
        private static readonly pb::MessageParser<Trigger> _parser = new pb::MessageParser<Trigger>(() => new Trigger());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Trigger> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta2.JobTrigger.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Trigger() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Trigger(Trigger other) : this() {
          switch (other.TriggerCase) {
            case TriggerOneofCase.Schedule:
              Schedule = other.Schedule.Clone();
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Trigger Clone() {
          return new Trigger(this);
        }

        /// <summary>Field number for the "schedule" field.</summary>
        public const int ScheduleFieldNumber = 1;
        /// <summary>
        /// Create a job on a repeating basis based on the elapse of time.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta2.Schedule Schedule {
          get { return triggerCase_ == TriggerOneofCase.Schedule ? (global::Google.Cloud.Dlp.V2Beta2.Schedule) trigger_ : null; }
          set {
            trigger_ = value;
            triggerCase_ = value == null ? TriggerOneofCase.None : TriggerOneofCase.Schedule;
          }
        }

        private object trigger_;
        /// <summary>Enum of possible cases for the "trigger" oneof.</summary>
        public enum TriggerOneofCase {
          None = 0,
          Schedule = 1,
        }
        private TriggerOneofCase triggerCase_ = TriggerOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TriggerOneofCase TriggerCase {
          get { return triggerCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTrigger() {
          triggerCase_ = TriggerOneofCase.None;
          trigger_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Trigger);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Trigger other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Schedule, other.Schedule)) return false;
          if (TriggerCase != other.TriggerCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (triggerCase_ == TriggerOneofCase.Schedule) hash ^= Schedule.GetHashCode();
          hash ^= (int) triggerCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (triggerCase_ == TriggerOneofCase.Schedule) {
            output.WriteRawTag(10);
            output.WriteMessage(Schedule);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (triggerCase_ == TriggerOneofCase.Schedule) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schedule);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Trigger other) {
          if (other == null) {
            return;
          }
          switch (other.TriggerCase) {
            case TriggerOneofCase.Schedule:
              Schedule = other.Schedule;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                global::Google.Cloud.Dlp.V2Beta2.Schedule subBuilder = new global::Google.Cloud.Dlp.V2Beta2.Schedule();
                if (triggerCase_ == TriggerOneofCase.Schedule) {
                  subBuilder.MergeFrom(Schedule);
                }
                input.ReadMessage(subBuilder);
                Schedule = subBuilder;
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// The results of an unsuccessful activation of the JobTrigger.
      /// </summary>
      public sealed partial class Error : pb::IMessage<Error> {
        private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Error> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta2.JobTrigger.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error(Error other) : this() {
          Details = other.details_ != null ? other.Details.Clone() : null;
          timestamps_ = other.timestamps_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error Clone() {
          return new Error(this);
        }

        /// <summary>Field number for the "details" field.</summary>
        public const int DetailsFieldNumber = 1;
        private global::Google.Rpc.Status details_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Rpc.Status Details {
          get { return details_; }
          set {
            details_ = value;
          }
        }

        /// <summary>Field number for the "timestamps" field.</summary>
        public const int TimestampsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Google.Protobuf.WellKnownTypes.Timestamp> _repeated_timestamps_codec
            = pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Timestamp.Parser);
        private readonly pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Timestamp> timestamps_ = new pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Timestamp>();
        /// <summary>
        /// The times the error occurred.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Timestamp> Timestamps {
          get { return timestamps_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Error);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Error other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Details, other.Details)) return false;
          if(!timestamps_.Equals(other.timestamps_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (details_ != null) hash ^= Details.GetHashCode();
          hash ^= timestamps_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (details_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Details);
          }
          timestamps_.WriteTo(output, _repeated_timestamps_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (details_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Details);
          }
          size += timestamps_.CalculateSize(_repeated_timestamps_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Error other) {
          if (other == null) {
            return;
          }
          if (other.details_ != null) {
            if (details_ == null) {
              details_ = new global::Google.Rpc.Status();
            }
            Details.MergeFrom(other.Details);
          }
          timestamps_.Add(other.timestamps_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (details_ == null) {
                  details_ = new global::Google.Rpc.Status();
                }
                input.ReadMessage(details_);
                break;
              }
              case 18: {
                timestamps_.AddEntriesFrom(input, _repeated_timestamps_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// A task to execute on the completion of a job.
  /// </summary>
  public sealed partial class Action : pb::IMessage<Action> {
    private static readonly pb::MessageParser<Action> _parser = new pb::MessageParser<Action>(() => new Action());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Action> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action(Action other) : this() {
      switch (other.ActionCase) {
        case ActionOneofCase.SaveFindings:
          SaveFindings = other.SaveFindings.Clone();
          break;
        case ActionOneofCase.PubSub:
          PubSub = other.PubSub.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action Clone() {
      return new Action(this);
    }

    /// <summary>Field number for the "save_findings" field.</summary>
    public const int SaveFindingsFieldNumber = 1;
    /// <summary>
    /// Save resulting findings in a provided location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.Action.Types.SaveFindings SaveFindings {
      get { return actionCase_ == ActionOneofCase.SaveFindings ? (global::Google.Cloud.Dlp.V2Beta2.Action.Types.SaveFindings) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.SaveFindings;
      }
    }

    /// <summary>Field number for the "pub_sub" field.</summary>
    public const int PubSubFieldNumber = 2;
    /// <summary>
    /// Publish a notification to a pubsub topic.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.Action.Types.PublishToPubSub PubSub {
      get { return actionCase_ == ActionOneofCase.PubSub ? (global::Google.Cloud.Dlp.V2Beta2.Action.Types.PublishToPubSub) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.PubSub;
      }
    }

    private object action_;
    /// <summary>Enum of possible cases for the "action" oneof.</summary>
    public enum ActionOneofCase {
      None = 0,
      SaveFindings = 1,
      PubSub = 2,
    }
    private ActionOneofCase actionCase_ = ActionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionOneofCase ActionCase {
      get { return actionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      actionCase_ = ActionOneofCase.None;
      action_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Action);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Action other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SaveFindings, other.SaveFindings)) return false;
      if (!object.Equals(PubSub, other.PubSub)) return false;
      if (ActionCase != other.ActionCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (actionCase_ == ActionOneofCase.SaveFindings) hash ^= SaveFindings.GetHashCode();
      if (actionCase_ == ActionOneofCase.PubSub) hash ^= PubSub.GetHashCode();
      hash ^= (int) actionCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (actionCase_ == ActionOneofCase.SaveFindings) {
        output.WriteRawTag(10);
        output.WriteMessage(SaveFindings);
      }
      if (actionCase_ == ActionOneofCase.PubSub) {
        output.WriteRawTag(18);
        output.WriteMessage(PubSub);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (actionCase_ == ActionOneofCase.SaveFindings) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SaveFindings);
      }
      if (actionCase_ == ActionOneofCase.PubSub) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PubSub);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Action other) {
      if (other == null) {
        return;
      }
      switch (other.ActionCase) {
        case ActionOneofCase.SaveFindings:
          SaveFindings = other.SaveFindings;
          break;
        case ActionOneofCase.PubSub:
          PubSub = other.PubSub;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Cloud.Dlp.V2Beta2.Action.Types.SaveFindings subBuilder = new global::Google.Cloud.Dlp.V2Beta2.Action.Types.SaveFindings();
            if (actionCase_ == ActionOneofCase.SaveFindings) {
              subBuilder.MergeFrom(SaveFindings);
            }
            input.ReadMessage(subBuilder);
            SaveFindings = subBuilder;
            break;
          }
          case 18: {
            global::Google.Cloud.Dlp.V2Beta2.Action.Types.PublishToPubSub subBuilder = new global::Google.Cloud.Dlp.V2Beta2.Action.Types.PublishToPubSub();
            if (actionCase_ == ActionOneofCase.PubSub) {
              subBuilder.MergeFrom(PubSub);
            }
            input.ReadMessage(subBuilder);
            PubSub = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Action message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// If set, the detailed findings will be persisted to the specified
      /// OutputStorageConfig. Compatible with: Inspect
      /// </summary>
      public sealed partial class SaveFindings : pb::IMessage<SaveFindings> {
        private static readonly pb::MessageParser<SaveFindings> _parser = new pb::MessageParser<SaveFindings>(() => new SaveFindings());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SaveFindings> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta2.Action.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SaveFindings() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SaveFindings(SaveFindings other) : this() {
          OutputConfig = other.outputConfig_ != null ? other.OutputConfig.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SaveFindings Clone() {
          return new SaveFindings(this);
        }

        /// <summary>Field number for the "output_config" field.</summary>
        public const int OutputConfigFieldNumber = 1;
        private global::Google.Cloud.Dlp.V2Beta2.OutputStorageConfig outputConfig_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta2.OutputStorageConfig OutputConfig {
          get { return outputConfig_; }
          set {
            outputConfig_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SaveFindings);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SaveFindings other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(OutputConfig, other.OutputConfig)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (outputConfig_ != null) hash ^= OutputConfig.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (outputConfig_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(OutputConfig);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (outputConfig_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputConfig);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SaveFindings other) {
          if (other == null) {
            return;
          }
          if (other.outputConfig_ != null) {
            if (outputConfig_ == null) {
              outputConfig_ = new global::Google.Cloud.Dlp.V2Beta2.OutputStorageConfig();
            }
            OutputConfig.MergeFrom(other.OutputConfig);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (outputConfig_ == null) {
                  outputConfig_ = new global::Google.Cloud.Dlp.V2Beta2.OutputStorageConfig();
                }
                input.ReadMessage(outputConfig_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Publish the results of a DlpJob to a pub sub channel.
      /// Compatible with: Inpect, Risk
      /// </summary>
      public sealed partial class PublishToPubSub : pb::IMessage<PublishToPubSub> {
        private static readonly pb::MessageParser<PublishToPubSub> _parser = new pb::MessageParser<PublishToPubSub>(() => new PublishToPubSub());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PublishToPubSub> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta2.Action.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PublishToPubSub() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PublishToPubSub(PublishToPubSub other) : this() {
          topic_ = other.topic_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PublishToPubSub Clone() {
          return new PublishToPubSub(this);
        }

        /// <summary>Field number for the "topic" field.</summary>
        public const int TopicFieldNumber = 1;
        private string topic_ = "";
        /// <summary>
        /// Cloud Pub/Sub topic to send notifications to. The topic must have given
        /// publishing access rights to the DLP API service account executing
        /// the long running DlpJob sending the notifications.
        /// Format is projects/{project}/topics/{topic}.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Topic {
          get { return topic_; }
          set {
            topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PublishToPubSub);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PublishToPubSub other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Topic != other.Topic) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Topic.Length != 0) hash ^= Topic.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Topic.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Topic);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Topic.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PublishToPubSub other) {
          if (other == null) {
            return;
          }
          if (other.Topic.Length != 0) {
            Topic = other.Topic;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Topic = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Request message for CreateInspectTemplate.
  /// </summary>
  public sealed partial class CreateInspectTemplateRequest : pb::IMessage<CreateInspectTemplateRequest> {
    private static readonly pb::MessageParser<CreateInspectTemplateRequest> _parser = new pb::MessageParser<CreateInspectTemplateRequest>(() => new CreateInspectTemplateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateInspectTemplateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInspectTemplateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInspectTemplateRequest(CreateInspectTemplateRequest other) : this() {
      parent_ = other.parent_;
      InspectTemplate = other.inspectTemplate_ != null ? other.InspectTemplate.Clone() : null;
      templateId_ = other.templateId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInspectTemplateRequest Clone() {
      return new CreateInspectTemplateRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The parent resource name, for example projects/my-project-id or
    /// organizations/my-org-id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inspect_template" field.</summary>
    public const int InspectTemplateFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta2.InspectTemplate inspectTemplate_;
    /// <summary>
    /// The InspectTemplate to create.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.InspectTemplate InspectTemplate {
      get { return inspectTemplate_; }
      set {
        inspectTemplate_ = value;
      }
    }

    /// <summary>Field number for the "template_id" field.</summary>
    public const int TemplateIdFieldNumber = 3;
    private string templateId_ = "";
    /// <summary>
    /// The template id can contain uppercase and lowercase letters,
    /// numbers, and hyphens; that is, it must match the regular
    /// expression: `[a-zA-Z\\d-]+`. The maximum length is 100
    /// characters. Can be empty to allow the system to generate one.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TemplateId {
      get { return templateId_; }
      set {
        templateId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateInspectTemplateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateInspectTemplateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (!object.Equals(InspectTemplate, other.InspectTemplate)) return false;
      if (TemplateId != other.TemplateId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (inspectTemplate_ != null) hash ^= InspectTemplate.GetHashCode();
      if (TemplateId.Length != 0) hash ^= TemplateId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (inspectTemplate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(InspectTemplate);
      }
      if (TemplateId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TemplateId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (inspectTemplate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InspectTemplate);
      }
      if (TemplateId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TemplateId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateInspectTemplateRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.inspectTemplate_ != null) {
        if (inspectTemplate_ == null) {
          inspectTemplate_ = new global::Google.Cloud.Dlp.V2Beta2.InspectTemplate();
        }
        InspectTemplate.MergeFrom(other.InspectTemplate);
      }
      if (other.TemplateId.Length != 0) {
        TemplateId = other.TemplateId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            if (inspectTemplate_ == null) {
              inspectTemplate_ = new global::Google.Cloud.Dlp.V2Beta2.InspectTemplate();
            }
            input.ReadMessage(inspectTemplate_);
            break;
          }
          case 26: {
            TemplateId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for UpdateInspectTemplate.
  /// </summary>
  public sealed partial class UpdateInspectTemplateRequest : pb::IMessage<UpdateInspectTemplateRequest> {
    private static readonly pb::MessageParser<UpdateInspectTemplateRequest> _parser = new pb::MessageParser<UpdateInspectTemplateRequest>(() => new UpdateInspectTemplateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateInspectTemplateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInspectTemplateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInspectTemplateRequest(UpdateInspectTemplateRequest other) : this() {
      name_ = other.name_;
      InspectTemplate = other.inspectTemplate_ != null ? other.InspectTemplate.Clone() : null;
      UpdateMask = other.updateMask_ != null ? other.UpdateMask.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInspectTemplateRequest Clone() {
      return new UpdateInspectTemplateRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Resource name of organization and inspectTemplate to be updated, for
    /// example `organizations/433245324/inspectTemplates/432452342` or
    /// projects/project-id/inspectTemplates/432452342.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inspect_template" field.</summary>
    public const int InspectTemplateFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta2.InspectTemplate inspectTemplate_;
    /// <summary>
    /// New InspectTemplate value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.InspectTemplate InspectTemplate {
      get { return inspectTemplate_; }
      set {
        inspectTemplate_ = value;
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    /// Mask to control which fields get updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateInspectTemplateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateInspectTemplateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(InspectTemplate, other.InspectTemplate)) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (inspectTemplate_ != null) hash ^= InspectTemplate.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (inspectTemplate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(InspectTemplate);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdateMask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (inspectTemplate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InspectTemplate);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateInspectTemplateRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.inspectTemplate_ != null) {
        if (inspectTemplate_ == null) {
          inspectTemplate_ = new global::Google.Cloud.Dlp.V2Beta2.InspectTemplate();
        }
        InspectTemplate.MergeFrom(other.InspectTemplate);
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (inspectTemplate_ == null) {
              inspectTemplate_ = new global::Google.Cloud.Dlp.V2Beta2.InspectTemplate();
            }
            input.ReadMessage(inspectTemplate_);
            break;
          }
          case 26: {
            if (updateMask_ == null) {
              updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(updateMask_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for GetInspectTemplate.
  /// </summary>
  public sealed partial class GetInspectTemplateRequest : pb::IMessage<GetInspectTemplateRequest> {
    private static readonly pb::MessageParser<GetInspectTemplateRequest> _parser = new pb::MessageParser<GetInspectTemplateRequest>(() => new GetInspectTemplateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetInspectTemplateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInspectTemplateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInspectTemplateRequest(GetInspectTemplateRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInspectTemplateRequest Clone() {
      return new GetInspectTemplateRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Resource name of the organization and inspectTemplate to be read, for
    /// example `organizations/433245324/inspectTemplates/432452342` or
    /// projects/project-id/inspectTemplates/432452342.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetInspectTemplateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetInspectTemplateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetInspectTemplateRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for ListInspectTemplates.
  /// </summary>
  public sealed partial class ListInspectTemplatesRequest : pb::IMessage<ListInspectTemplatesRequest> {
    private static readonly pb::MessageParser<ListInspectTemplatesRequest> _parser = new pb::MessageParser<ListInspectTemplatesRequest>(() => new ListInspectTemplatesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListInspectTemplatesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInspectTemplatesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInspectTemplatesRequest(ListInspectTemplatesRequest other) : this() {
      parent_ = other.parent_;
      pageToken_ = other.pageToken_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInspectTemplatesRequest Clone() {
      return new ListInspectTemplatesRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The parent resource name, for example projects/my-project-id or
    /// organizations/my-org-id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 2;
    private string pageToken_ = "";
    /// <summary>
    /// Optional page token to continue retrieval. Comes from previous call
    /// to `ListInspectTemplates`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    /// Optional size of the page, can be limited by server. If zero server returns
    /// a page of max size 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListInspectTemplatesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListInspectTemplatesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (PageToken != other.PageToken) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PageToken);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListInspectTemplatesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            PageToken = input.ReadString();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response message for ListInspectTemplates.
  /// </summary>
  public sealed partial class ListInspectTemplatesResponse : pb::IMessage<ListInspectTemplatesResponse> {
    private static readonly pb::MessageParser<ListInspectTemplatesResponse> _parser = new pb::MessageParser<ListInspectTemplatesResponse>(() => new ListInspectTemplatesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListInspectTemplatesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInspectTemplatesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInspectTemplatesResponse(ListInspectTemplatesResponse other) : this() {
      inspectTemplates_ = other.inspectTemplates_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInspectTemplatesResponse Clone() {
      return new ListInspectTemplatesResponse(this);
    }

    /// <summary>Field number for the "inspect_templates" field.</summary>
    public const int InspectTemplatesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.InspectTemplate> _repeated_inspectTemplates_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta2.InspectTemplate.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.InspectTemplate> inspectTemplates_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.InspectTemplate>();
    /// <summary>
    /// List of inspectTemplates, up to page_size in ListInspectTemplatesRequest.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.InspectTemplate> InspectTemplates {
      get { return inspectTemplates_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// If the next page is available then the next page token to be used
    /// in following ListInspectTemplates request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListInspectTemplatesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListInspectTemplatesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!inspectTemplates_.Equals(other.inspectTemplates_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= inspectTemplates_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      inspectTemplates_.WriteTo(output, _repeated_inspectTemplates_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += inspectTemplates_.CalculateSize(_repeated_inspectTemplates_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListInspectTemplatesResponse other) {
      if (other == null) {
        return;
      }
      inspectTemplates_.Add(other.inspectTemplates_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            inspectTemplates_.AddEntriesFrom(input, _repeated_inspectTemplates_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for DeleteInspectTemplate.
  /// </summary>
  public sealed partial class DeleteInspectTemplateRequest : pb::IMessage<DeleteInspectTemplateRequest> {
    private static readonly pb::MessageParser<DeleteInspectTemplateRequest> _parser = new pb::MessageParser<DeleteInspectTemplateRequest>(() => new DeleteInspectTemplateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteInspectTemplateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteInspectTemplateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteInspectTemplateRequest(DeleteInspectTemplateRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteInspectTemplateRequest Clone() {
      return new DeleteInspectTemplateRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Resource name of the organization and inspectTemplate to be deleted, for
    /// example `organizations/433245324/inspectTemplates/432452342` or
    /// projects/project-id/inspectTemplates/432452342.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteInspectTemplateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteInspectTemplateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteInspectTemplateRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for CreateJobTrigger.
  /// </summary>
  public sealed partial class CreateJobTriggerRequest : pb::IMessage<CreateJobTriggerRequest> {
    private static readonly pb::MessageParser<CreateJobTriggerRequest> _parser = new pb::MessageParser<CreateJobTriggerRequest>(() => new CreateJobTriggerRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateJobTriggerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateJobTriggerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateJobTriggerRequest(CreateJobTriggerRequest other) : this() {
      parent_ = other.parent_;
      JobTrigger = other.jobTrigger_ != null ? other.JobTrigger.Clone() : null;
      triggerId_ = other.triggerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateJobTriggerRequest Clone() {
      return new CreateJobTriggerRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The parent resource name, for example projects/my-project-id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "job_trigger" field.</summary>
    public const int JobTriggerFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta2.JobTrigger jobTrigger_;
    /// <summary>
    /// The JobTrigger to create.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.JobTrigger JobTrigger {
      get { return jobTrigger_; }
      set {
        jobTrigger_ = value;
      }
    }

    /// <summary>Field number for the "trigger_id" field.</summary>
    public const int TriggerIdFieldNumber = 3;
    private string triggerId_ = "";
    /// <summary>
    /// The trigger id can contain uppercase and lowercase letters,
    /// numbers, and hyphens; that is, it must match the regular
    /// expression: `[a-zA-Z\\d-]+`. The maximum length is 100
    /// characters. Can be empty to allow the system to generate one.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TriggerId {
      get { return triggerId_; }
      set {
        triggerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateJobTriggerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateJobTriggerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (!object.Equals(JobTrigger, other.JobTrigger)) return false;
      if (TriggerId != other.TriggerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (jobTrigger_ != null) hash ^= JobTrigger.GetHashCode();
      if (TriggerId.Length != 0) hash ^= TriggerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (jobTrigger_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(JobTrigger);
      }
      if (TriggerId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TriggerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (jobTrigger_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JobTrigger);
      }
      if (TriggerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TriggerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateJobTriggerRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.jobTrigger_ != null) {
        if (jobTrigger_ == null) {
          jobTrigger_ = new global::Google.Cloud.Dlp.V2Beta2.JobTrigger();
        }
        JobTrigger.MergeFrom(other.JobTrigger);
      }
      if (other.TriggerId.Length != 0) {
        TriggerId = other.TriggerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            if (jobTrigger_ == null) {
              jobTrigger_ = new global::Google.Cloud.Dlp.V2Beta2.JobTrigger();
            }
            input.ReadMessage(jobTrigger_);
            break;
          }
          case 26: {
            TriggerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for UpdateJobTrigger.
  /// </summary>
  public sealed partial class UpdateJobTriggerRequest : pb::IMessage<UpdateJobTriggerRequest> {
    private static readonly pb::MessageParser<UpdateJobTriggerRequest> _parser = new pb::MessageParser<UpdateJobTriggerRequest>(() => new UpdateJobTriggerRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateJobTriggerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateJobTriggerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateJobTriggerRequest(UpdateJobTriggerRequest other) : this() {
      name_ = other.name_;
      JobTrigger = other.jobTrigger_ != null ? other.JobTrigger.Clone() : null;
      UpdateMask = other.updateMask_ != null ? other.UpdateMask.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateJobTriggerRequest Clone() {
      return new UpdateJobTriggerRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Resource name of the project and the triggeredJob, for example
    /// `projects/dlp-test-project/jobTriggers/53234423`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "job_trigger" field.</summary>
    public const int JobTriggerFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta2.JobTrigger jobTrigger_;
    /// <summary>
    /// New JobTrigger value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.JobTrigger JobTrigger {
      get { return jobTrigger_; }
      set {
        jobTrigger_ = value;
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    /// Mask to control which fields get updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateJobTriggerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateJobTriggerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(JobTrigger, other.JobTrigger)) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (jobTrigger_ != null) hash ^= JobTrigger.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (jobTrigger_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(JobTrigger);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdateMask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (jobTrigger_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JobTrigger);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateJobTriggerRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.jobTrigger_ != null) {
        if (jobTrigger_ == null) {
          jobTrigger_ = new global::Google.Cloud.Dlp.V2Beta2.JobTrigger();
        }
        JobTrigger.MergeFrom(other.JobTrigger);
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (jobTrigger_ == null) {
              jobTrigger_ = new global::Google.Cloud.Dlp.V2Beta2.JobTrigger();
            }
            input.ReadMessage(jobTrigger_);
            break;
          }
          case 26: {
            if (updateMask_ == null) {
              updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(updateMask_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for GetJobTrigger.
  /// </summary>
  public sealed partial class GetJobTriggerRequest : pb::IMessage<GetJobTriggerRequest> {
    private static readonly pb::MessageParser<GetJobTriggerRequest> _parser = new pb::MessageParser<GetJobTriggerRequest>(() => new GetJobTriggerRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetJobTriggerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetJobTriggerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetJobTriggerRequest(GetJobTriggerRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetJobTriggerRequest Clone() {
      return new GetJobTriggerRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Resource name of the project and the triggeredJob, for example
    /// `projects/dlp-test-project/jobTriggers/53234423`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetJobTriggerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetJobTriggerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetJobTriggerRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for ListJobTriggers.
  /// </summary>
  public sealed partial class ListJobTriggersRequest : pb::IMessage<ListJobTriggersRequest> {
    private static readonly pb::MessageParser<ListJobTriggersRequest> _parser = new pb::MessageParser<ListJobTriggersRequest>(() => new ListJobTriggersRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListJobTriggersRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListJobTriggersRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListJobTriggersRequest(ListJobTriggersRequest other) : this() {
      parent_ = other.parent_;
      pageToken_ = other.pageToken_;
      pageSize_ = other.pageSize_;
      orderBy_ = other.orderBy_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListJobTriggersRequest Clone() {
      return new ListJobTriggersRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The parent resource name, for example projects/my-project-id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 2;
    private string pageToken_ = "";
    /// <summary>
    /// Optional page token to continue retrieval. Comes from previous call
    /// to ListJobTriggers. `order_by` and `filter` should not change for
    /// subsequent calls, but can be omitted if token is specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    /// Optional size of the page, can be limited by a server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "order_by" field.</summary>
    public const int OrderByFieldNumber = 4;
    private string orderBy_ = "";
    /// <summary>
    /// Optional comma separated list of triggeredJob fields to order by,
    /// followed by 'asc/desc' postfix, i.e.
    /// `"create_time asc,name desc,schedule_mode asc"`. This list is
    /// case-insensitive.
    ///
    /// Example: `"name asc,schedule_mode desc, status desc"`
    ///
    /// Supported filters keys and values are:
    ///
    /// - `create_time`: corresponds to time the triggeredJob was created.
    /// - `update_time`: corresponds to time the triggeredJob was last updated.
    /// - `name`: corresponds to JobTrigger's display name.
    /// - `status`: corresponds to the triggeredJob status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderBy {
      get { return orderBy_; }
      set {
        orderBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListJobTriggersRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListJobTriggersRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (PageToken != other.PageToken) return false;
      if (PageSize != other.PageSize) return false;
      if (OrderBy != other.OrderBy) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (OrderBy.Length != 0) hash ^= OrderBy.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PageToken);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
      if (OrderBy.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(OrderBy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (OrderBy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderBy);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListJobTriggersRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.OrderBy.Length != 0) {
        OrderBy = other.OrderBy;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            PageToken = input.ReadString();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
          case 34: {
            OrderBy = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response message for ListJobTriggers.
  /// </summary>
  public sealed partial class ListJobTriggersResponse : pb::IMessage<ListJobTriggersResponse> {
    private static readonly pb::MessageParser<ListJobTriggersResponse> _parser = new pb::MessageParser<ListJobTriggersResponse>(() => new ListJobTriggersResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListJobTriggersResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListJobTriggersResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListJobTriggersResponse(ListJobTriggersResponse other) : this() {
      jobTriggers_ = other.jobTriggers_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListJobTriggersResponse Clone() {
      return new ListJobTriggersResponse(this);
    }

    /// <summary>Field number for the "job_triggers" field.</summary>
    public const int JobTriggersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.JobTrigger> _repeated_jobTriggers_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta2.JobTrigger.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.JobTrigger> jobTriggers_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.JobTrigger>();
    /// <summary>
    /// List of triggeredJobs, up to page_size in ListJobTriggersRequest.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.JobTrigger> JobTriggers {
      get { return jobTriggers_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// If the next page is available then the next page token to be used
    /// in following ListJobTriggers request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListJobTriggersResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListJobTriggersResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!jobTriggers_.Equals(other.jobTriggers_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= jobTriggers_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      jobTriggers_.WriteTo(output, _repeated_jobTriggers_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += jobTriggers_.CalculateSize(_repeated_jobTriggers_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListJobTriggersResponse other) {
      if (other == null) {
        return;
      }
      jobTriggers_.Add(other.jobTriggers_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            jobTriggers_.AddEntriesFrom(input, _repeated_jobTriggers_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for DeleteJobTrigger.
  /// </summary>
  public sealed partial class DeleteJobTriggerRequest : pb::IMessage<DeleteJobTriggerRequest> {
    private static readonly pb::MessageParser<DeleteJobTriggerRequest> _parser = new pb::MessageParser<DeleteJobTriggerRequest>(() => new DeleteJobTriggerRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteJobTriggerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteJobTriggerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteJobTriggerRequest(DeleteJobTriggerRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteJobTriggerRequest Clone() {
      return new DeleteJobTriggerRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Resource name of the project and the triggeredJob, for example
    /// `projects/dlp-test-project/jobTriggers/53234423`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteJobTriggerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteJobTriggerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteJobTriggerRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InspectJobConfig : pb::IMessage<InspectJobConfig> {
    private static readonly pb::MessageParser<InspectJobConfig> _parser = new pb::MessageParser<InspectJobConfig>(() => new InspectJobConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InspectJobConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectJobConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectJobConfig(InspectJobConfig other) : this() {
      StorageConfig = other.storageConfig_ != null ? other.StorageConfig.Clone() : null;
      OutputConfig = other.outputConfig_ != null ? other.OutputConfig.Clone() : null;
      InspectConfig = other.inspectConfig_ != null ? other.InspectConfig.Clone() : null;
      inspectTemplateName_ = other.inspectTemplateName_;
      actions_ = other.actions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectJobConfig Clone() {
      return new InspectJobConfig(this);
    }

    /// <summary>Field number for the "storage_config" field.</summary>
    public const int StorageConfigFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta2.StorageConfig storageConfig_;
    /// <summary>
    /// The data to scan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.StorageConfig StorageConfig {
      get { return storageConfig_; }
      set {
        storageConfig_ = value;
      }
    }

    /// <summary>Field number for the "output_config" field.</summary>
    public const int OutputConfigFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta2.OutputStorageConfig outputConfig_;
    /// <summary>
    /// Where to put the findings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.OutputStorageConfig OutputConfig {
      get { return outputConfig_; }
      set {
        outputConfig_ = value;
      }
    }

    /// <summary>Field number for the "inspect_config" field.</summary>
    public const int InspectConfigFieldNumber = 3;
    private global::Google.Cloud.Dlp.V2Beta2.InspectConfig inspectConfig_;
    /// <summary>
    /// How and what to scan for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.InspectConfig InspectConfig {
      get { return inspectConfig_; }
      set {
        inspectConfig_ = value;
      }
    }

    /// <summary>Field number for the "inspect_template_name" field.</summary>
    public const int InspectTemplateNameFieldNumber = 4;
    private string inspectTemplateName_ = "";
    /// <summary>
    /// If provided, will be used as the default for all values in InspectConfig.
    /// `inspect_config` will be merged into the values persisted as part of the
    /// template.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InspectTemplateName {
      get { return inspectTemplateName_; }
      set {
        inspectTemplateName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "actions" field.</summary>
    public const int ActionsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.Action> _repeated_actions_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Cloud.Dlp.V2Beta2.Action.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Action> actions_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Action>();
    /// <summary>
    /// Actions to execute at the completion of the job. Are executed in the order
    /// provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.Action> Actions {
      get { return actions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InspectJobConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InspectJobConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StorageConfig, other.StorageConfig)) return false;
      if (!object.Equals(OutputConfig, other.OutputConfig)) return false;
      if (!object.Equals(InspectConfig, other.InspectConfig)) return false;
      if (InspectTemplateName != other.InspectTemplateName) return false;
      if(!actions_.Equals(other.actions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (storageConfig_ != null) hash ^= StorageConfig.GetHashCode();
      if (outputConfig_ != null) hash ^= OutputConfig.GetHashCode();
      if (inspectConfig_ != null) hash ^= InspectConfig.GetHashCode();
      if (InspectTemplateName.Length != 0) hash ^= InspectTemplateName.GetHashCode();
      hash ^= actions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (storageConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StorageConfig);
      }
      if (outputConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OutputConfig);
      }
      if (inspectConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(InspectConfig);
      }
      if (InspectTemplateName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(InspectTemplateName);
      }
      actions_.WriteTo(output, _repeated_actions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (storageConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StorageConfig);
      }
      if (outputConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputConfig);
      }
      if (inspectConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InspectConfig);
      }
      if (InspectTemplateName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InspectTemplateName);
      }
      size += actions_.CalculateSize(_repeated_actions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InspectJobConfig other) {
      if (other == null) {
        return;
      }
      if (other.storageConfig_ != null) {
        if (storageConfig_ == null) {
          storageConfig_ = new global::Google.Cloud.Dlp.V2Beta2.StorageConfig();
        }
        StorageConfig.MergeFrom(other.StorageConfig);
      }
      if (other.outputConfig_ != null) {
        if (outputConfig_ == null) {
          outputConfig_ = new global::Google.Cloud.Dlp.V2Beta2.OutputStorageConfig();
        }
        OutputConfig.MergeFrom(other.OutputConfig);
      }
      if (other.inspectConfig_ != null) {
        if (inspectConfig_ == null) {
          inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta2.InspectConfig();
        }
        InspectConfig.MergeFrom(other.InspectConfig);
      }
      if (other.InspectTemplateName.Length != 0) {
        InspectTemplateName = other.InspectTemplateName;
      }
      actions_.Add(other.actions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (storageConfig_ == null) {
              storageConfig_ = new global::Google.Cloud.Dlp.V2Beta2.StorageConfig();
            }
            input.ReadMessage(storageConfig_);
            break;
          }
          case 18: {
            if (outputConfig_ == null) {
              outputConfig_ = new global::Google.Cloud.Dlp.V2Beta2.OutputStorageConfig();
            }
            input.ReadMessage(outputConfig_);
            break;
          }
          case 26: {
            if (inspectConfig_ == null) {
              inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta2.InspectConfig();
            }
            input.ReadMessage(inspectConfig_);
            break;
          }
          case 34: {
            InspectTemplateName = input.ReadString();
            break;
          }
          case 42: {
            actions_.AddEntriesFrom(input, _repeated_actions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Combines all of the information about a DLP job.
  /// </summary>
  public sealed partial class DlpJob : pb::IMessage<DlpJob> {
    private static readonly pb::MessageParser<DlpJob> _parser = new pb::MessageParser<DlpJob>(() => new DlpJob());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DlpJob> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DlpJob() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DlpJob(DlpJob other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      state_ = other.state_;
      CreateTime = other.createTime_ != null ? other.CreateTime.Clone() : null;
      StartTime = other.startTime_ != null ? other.StartTime.Clone() : null;
      EndTime = other.endTime_ != null ? other.EndTime.Clone() : null;
      errorResults_ = other.errorResults_.Clone();
      jobTriggerName_ = other.jobTriggerName_;
      switch (other.DetailsCase) {
        case DetailsOneofCase.RiskDetails:
          RiskDetails = other.RiskDetails.Clone();
          break;
        case DetailsOneofCase.InspectDetails:
          InspectDetails = other.InspectDetails.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DlpJob Clone() {
      return new DlpJob(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The server-assigned name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta2.DlpJobType type_ = 0;
    /// <summary>
    /// The type of job.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.DlpJobType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private global::Google.Cloud.Dlp.V2Beta2.DlpJob.Types.JobState state_ = 0;
    /// <summary>
    /// State of a job.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.DlpJob.Types.JobState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "risk_details" field.</summary>
    public const int RiskDetailsFieldNumber = 4;
    /// <summary>
    /// Results from analyzing risk of a data source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails RiskDetails {
      get { return detailsCase_ == DetailsOneofCase.RiskDetails ? (global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.RiskDetails;
      }
    }

    /// <summary>Field number for the "inspect_details" field.</summary>
    public const int InspectDetailsFieldNumber = 5;
    /// <summary>
    /// Results from inspecting a data source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.InspectDataSourceDetails InspectDetails {
      get { return detailsCase_ == DetailsOneofCase.InspectDetails ? (global::Google.Cloud.Dlp.V2Beta2.InspectDataSourceDetails) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.InspectDetails;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// Time when the job was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    /// <summary>
    /// Time when the job started.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
    /// <summary>
    /// Time when the job finished.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "error_results" field.</summary>
    public const int ErrorResultsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Google.Rpc.Status> _repeated_errorResults_codec
        = pb::FieldCodec.ForMessage(74, global::Google.Rpc.Status.Parser);
    private readonly pbc::RepeatedField<global::Google.Rpc.Status> errorResults_ = new pbc::RepeatedField<global::Google.Rpc.Status>();
    /// <summary>
    /// A stream of errors encountered running the job.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Rpc.Status> ErrorResults {
      get { return errorResults_; }
    }

    /// <summary>Field number for the "job_trigger_name" field.</summary>
    public const int JobTriggerNameFieldNumber = 10;
    private string jobTriggerName_ = "";
    /// <summary>
    /// If created by a job trigger, the resource name of the trigger that
    /// instantiated the job.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JobTriggerName {
      get { return jobTriggerName_; }
      set {
        jobTriggerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object details_;
    /// <summary>Enum of possible cases for the "details" oneof.</summary>
    public enum DetailsOneofCase {
      None = 0,
      RiskDetails = 4,
      InspectDetails = 5,
    }
    private DetailsOneofCase detailsCase_ = DetailsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetailsOneofCase DetailsCase {
      get { return detailsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDetails() {
      detailsCase_ = DetailsOneofCase.None;
      details_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DlpJob);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DlpJob other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (State != other.State) return false;
      if (!object.Equals(RiskDetails, other.RiskDetails)) return false;
      if (!object.Equals(InspectDetails, other.InspectDetails)) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if(!errorResults_.Equals(other.errorResults_)) return false;
      if (JobTriggerName != other.JobTriggerName) return false;
      if (DetailsCase != other.DetailsCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.RiskDetails) hash ^= RiskDetails.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.InspectDetails) hash ^= InspectDetails.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      hash ^= errorResults_.GetHashCode();
      if (JobTriggerName.Length != 0) hash ^= JobTriggerName.GetHashCode();
      hash ^= (int) detailsCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      if (detailsCase_ == DetailsOneofCase.RiskDetails) {
        output.WriteRawTag(34);
        output.WriteMessage(RiskDetails);
      }
      if (detailsCase_ == DetailsOneofCase.InspectDetails) {
        output.WriteRawTag(42);
        output.WriteMessage(InspectDetails);
      }
      if (createTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CreateTime);
      }
      if (startTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(EndTime);
      }
      errorResults_.WriteTo(output, _repeated_errorResults_codec);
      if (JobTriggerName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(JobTriggerName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (detailsCase_ == DetailsOneofCase.RiskDetails) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RiskDetails);
      }
      if (detailsCase_ == DetailsOneofCase.InspectDetails) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InspectDetails);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      size += errorResults_.CalculateSize(_repeated_errorResults_codec);
      if (JobTriggerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JobTriggerName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DlpJob other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          startTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          endTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      errorResults_.Add(other.errorResults_);
      if (other.JobTriggerName.Length != 0) {
        JobTriggerName = other.JobTriggerName;
      }
      switch (other.DetailsCase) {
        case DetailsOneofCase.RiskDetails:
          RiskDetails = other.RiskDetails;
          break;
        case DetailsOneofCase.InspectDetails:
          InspectDetails = other.InspectDetails;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            type_ = (global::Google.Cloud.Dlp.V2Beta2.DlpJobType) input.ReadEnum();
            break;
          }
          case 24: {
            state_ = (global::Google.Cloud.Dlp.V2Beta2.DlpJob.Types.JobState) input.ReadEnum();
            break;
          }
          case 34: {
            global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails subBuilder = new global::Google.Cloud.Dlp.V2Beta2.AnalyzeDataSourceRiskDetails();
            if (detailsCase_ == DetailsOneofCase.RiskDetails) {
              subBuilder.MergeFrom(RiskDetails);
            }
            input.ReadMessage(subBuilder);
            RiskDetails = subBuilder;
            break;
          }
          case 42: {
            global::Google.Cloud.Dlp.V2Beta2.InspectDataSourceDetails subBuilder = new global::Google.Cloud.Dlp.V2Beta2.InspectDataSourceDetails();
            if (detailsCase_ == DetailsOneofCase.InspectDetails) {
              subBuilder.MergeFrom(InspectDetails);
            }
            input.ReadMessage(subBuilder);
            InspectDetails = subBuilder;
            break;
          }
          case 50: {
            if (createTime_ == null) {
              createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(createTime_);
            break;
          }
          case 58: {
            if (startTime_ == null) {
              startTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(startTime_);
            break;
          }
          case 66: {
            if (endTime_ == null) {
              endTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(endTime_);
            break;
          }
          case 74: {
            errorResults_.AddEntriesFrom(input, _repeated_errorResults_codec);
            break;
          }
          case 82: {
            JobTriggerName = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DlpJob message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum JobState {
        [pbr::OriginalName("JOB_STATE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// The job has not yet started.
        /// </summary>
        [pbr::OriginalName("PENDING")] Pending = 1,
        /// <summary>
        /// The job is currently running.
        /// </summary>
        [pbr::OriginalName("RUNNING")] Running = 2,
        /// <summary>
        /// The job is no longer running.
        /// </summary>
        [pbr::OriginalName("DONE")] Done = 3,
        /// <summary>
        /// The job was canceled before it could complete.
        /// </summary>
        [pbr::OriginalName("CANCELED")] Canceled = 4,
        /// <summary>
        /// The job had an error and did not complete.
        /// </summary>
        [pbr::OriginalName("FAILED")] Failed = 5,
      }

    }
    #endregion

  }

  /// <summary>
  /// The request message for [DlpJobs.GetDlpJob][].
  /// </summary>
  public sealed partial class GetDlpJobRequest : pb::IMessage<GetDlpJobRequest> {
    private static readonly pb::MessageParser<GetDlpJobRequest> _parser = new pb::MessageParser<GetDlpJobRequest>(() => new GetDlpJobRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDlpJobRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDlpJobRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDlpJobRequest(GetDlpJobRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDlpJobRequest Clone() {
      return new GetDlpJobRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the DlpJob resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDlpJobRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDlpJobRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDlpJobRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The request message for listing DLP jobs.
  /// </summary>
  public sealed partial class ListDlpJobsRequest : pb::IMessage<ListDlpJobsRequest> {
    private static readonly pb::MessageParser<ListDlpJobsRequest> _parser = new pb::MessageParser<ListDlpJobsRequest>(() => new ListDlpJobsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDlpJobsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDlpJobsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDlpJobsRequest(ListDlpJobsRequest other) : this() {
      parent_ = other.parent_;
      filter_ = other.filter_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDlpJobsRequest Clone() {
      return new ListDlpJobsRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 4;
    private string parent_ = "";
    /// <summary>
    /// The parent resource name, for example projects/my-project-id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 1;
    private string filter_ = "";
    /// <summary>
    /// Optional. Allows filtering.
    ///
    /// Supported syntax:
    ///
    /// * Filter expressions are made up of one or more restrictions.
    /// * Restrictions can be combined by `AND` or `OR` logical operators. A
    /// sequence of restrictions implicitly uses `AND`.
    /// * A restriction has the form of `&lt;field> &lt;operator> &lt;value>`.
    /// * Supported fields/values for inspect jobs:
    ///     - `state` - PENDING|RUNNING|CANCELED|FINISHED|FAILED
    ///     - `inspected_storage` - DATASTORE|CLOUD_STORAGE|BIGQUERY
    ///     - `trigger_name` - The resource name of the trigger that created job.
    /// * Supported fields for risk analysis jobs:
    ///     - `state` - RUNNING|CANCELED|FINISHED|FAILED
    /// * The operator must be `=` or `!=`.
    ///
    /// Examples:
    ///
    /// * inspected_storage = cloud_storage AND state = done
    /// * inspected_storage = cloud_storage OR inspected_storage = bigquery
    /// * inspected_storage = cloud_storage AND (state = done OR state = canceled)
    ///
    /// The length of this field should be no more than 500 characters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    /// The standard list page size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// The standard list page token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::Google.Cloud.Dlp.V2Beta2.DlpJobType type_ = 0;
    /// <summary>
    /// The type of job. Defaults to `DlpJobType.INSPECT`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.DlpJobType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDlpJobsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDlpJobsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (Filter != other.Filter) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Filter.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Filter);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (Parent.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Parent);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDlpJobsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Filter = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
          case 34: {
            Parent = input.ReadString();
            break;
          }
          case 40: {
            type_ = (global::Google.Cloud.Dlp.V2Beta2.DlpJobType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The response message for listing DLP jobs.
  /// </summary>
  public sealed partial class ListDlpJobsResponse : pb::IMessage<ListDlpJobsResponse> {
    private static readonly pb::MessageParser<ListDlpJobsResponse> _parser = new pb::MessageParser<ListDlpJobsResponse>(() => new ListDlpJobsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDlpJobsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDlpJobsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDlpJobsResponse(ListDlpJobsResponse other) : this() {
      jobs_ = other.jobs_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDlpJobsResponse Clone() {
      return new ListDlpJobsResponse(this);
    }

    /// <summary>Field number for the "jobs" field.</summary>
    public const int JobsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.DlpJob> _repeated_jobs_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta2.DlpJob.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.DlpJob> jobs_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.DlpJob>();
    /// <summary>
    /// A list of DlpJobs that matches the specified filter in the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.DlpJob> Jobs {
      get { return jobs_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// The standard List next-page token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDlpJobsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDlpJobsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!jobs_.Equals(other.jobs_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= jobs_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      jobs_.WriteTo(output, _repeated_jobs_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += jobs_.CalculateSize(_repeated_jobs_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDlpJobsResponse other) {
      if (other == null) {
        return;
      }
      jobs_.Add(other.jobs_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            jobs_.AddEntriesFrom(input, _repeated_jobs_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The request message for canceling a DLP job.
  /// </summary>
  public sealed partial class CancelDlpJobRequest : pb::IMessage<CancelDlpJobRequest> {
    private static readonly pb::MessageParser<CancelDlpJobRequest> _parser = new pb::MessageParser<CancelDlpJobRequest>(() => new CancelDlpJobRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelDlpJobRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelDlpJobRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelDlpJobRequest(CancelDlpJobRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelDlpJobRequest Clone() {
      return new CancelDlpJobRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the DlpJob resource to be cancelled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelDlpJobRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelDlpJobRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelDlpJobRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The request message for deleting a DLP job.
  /// </summary>
  public sealed partial class DeleteDlpJobRequest : pb::IMessage<DeleteDlpJobRequest> {
    private static readonly pb::MessageParser<DeleteDlpJobRequest> _parser = new pb::MessageParser<DeleteDlpJobRequest>(() => new DeleteDlpJobRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteDlpJobRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDlpJobRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDlpJobRequest(DeleteDlpJobRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDlpJobRequest Clone() {
      return new DeleteDlpJobRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the DlpJob resource to be deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteDlpJobRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteDlpJobRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteDlpJobRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for CreateDeidentifyTemplate.
  /// </summary>
  public sealed partial class CreateDeidentifyTemplateRequest : pb::IMessage<CreateDeidentifyTemplateRequest> {
    private static readonly pb::MessageParser<CreateDeidentifyTemplateRequest> _parser = new pb::MessageParser<CreateDeidentifyTemplateRequest>(() => new CreateDeidentifyTemplateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateDeidentifyTemplateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDeidentifyTemplateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDeidentifyTemplateRequest(CreateDeidentifyTemplateRequest other) : this() {
      parent_ = other.parent_;
      DeidentifyTemplate = other.deidentifyTemplate_ != null ? other.DeidentifyTemplate.Clone() : null;
      templateId_ = other.templateId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDeidentifyTemplateRequest Clone() {
      return new CreateDeidentifyTemplateRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The parent resource name, for example projects/my-project-id or
    /// organizations/my-org-id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deidentify_template" field.</summary>
    public const int DeidentifyTemplateFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta2.DeidentifyTemplate deidentifyTemplate_;
    /// <summary>
    /// The DeidentifyTemplate to create.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.DeidentifyTemplate DeidentifyTemplate {
      get { return deidentifyTemplate_; }
      set {
        deidentifyTemplate_ = value;
      }
    }

    /// <summary>Field number for the "template_id" field.</summary>
    public const int TemplateIdFieldNumber = 3;
    private string templateId_ = "";
    /// <summary>
    /// The template id can contain uppercase and lowercase letters,
    /// numbers, and hyphens; that is, it must match the regular
    /// expression: `[a-zA-Z\\d-]+`. The maximum length is 100
    /// characters. Can be empty to allow the system to generate one.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TemplateId {
      get { return templateId_; }
      set {
        templateId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateDeidentifyTemplateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateDeidentifyTemplateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (!object.Equals(DeidentifyTemplate, other.DeidentifyTemplate)) return false;
      if (TemplateId != other.TemplateId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (deidentifyTemplate_ != null) hash ^= DeidentifyTemplate.GetHashCode();
      if (TemplateId.Length != 0) hash ^= TemplateId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (deidentifyTemplate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DeidentifyTemplate);
      }
      if (TemplateId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TemplateId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (deidentifyTemplate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeidentifyTemplate);
      }
      if (TemplateId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TemplateId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateDeidentifyTemplateRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.deidentifyTemplate_ != null) {
        if (deidentifyTemplate_ == null) {
          deidentifyTemplate_ = new global::Google.Cloud.Dlp.V2Beta2.DeidentifyTemplate();
        }
        DeidentifyTemplate.MergeFrom(other.DeidentifyTemplate);
      }
      if (other.TemplateId.Length != 0) {
        TemplateId = other.TemplateId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            if (deidentifyTemplate_ == null) {
              deidentifyTemplate_ = new global::Google.Cloud.Dlp.V2Beta2.DeidentifyTemplate();
            }
            input.ReadMessage(deidentifyTemplate_);
            break;
          }
          case 26: {
            TemplateId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for UpdateDeidentifyTemplate.
  /// </summary>
  public sealed partial class UpdateDeidentifyTemplateRequest : pb::IMessage<UpdateDeidentifyTemplateRequest> {
    private static readonly pb::MessageParser<UpdateDeidentifyTemplateRequest> _parser = new pb::MessageParser<UpdateDeidentifyTemplateRequest>(() => new UpdateDeidentifyTemplateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateDeidentifyTemplateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDeidentifyTemplateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDeidentifyTemplateRequest(UpdateDeidentifyTemplateRequest other) : this() {
      name_ = other.name_;
      DeidentifyTemplate = other.deidentifyTemplate_ != null ? other.DeidentifyTemplate.Clone() : null;
      UpdateMask = other.updateMask_ != null ? other.UpdateMask.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDeidentifyTemplateRequest Clone() {
      return new UpdateDeidentifyTemplateRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Resource name of organization and deidentify template to be updated, for
    /// example `organizations/433245324/deidentifyTemplates/432452342` or
    /// projects/project-id/deidentifyTemplates/432452342.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deidentify_template" field.</summary>
    public const int DeidentifyTemplateFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta2.DeidentifyTemplate deidentifyTemplate_;
    /// <summary>
    /// New DeidentifyTemplate value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta2.DeidentifyTemplate DeidentifyTemplate {
      get { return deidentifyTemplate_; }
      set {
        deidentifyTemplate_ = value;
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    /// Mask to control which fields get updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateDeidentifyTemplateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateDeidentifyTemplateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(DeidentifyTemplate, other.DeidentifyTemplate)) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (deidentifyTemplate_ != null) hash ^= DeidentifyTemplate.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (deidentifyTemplate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DeidentifyTemplate);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdateMask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (deidentifyTemplate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeidentifyTemplate);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateDeidentifyTemplateRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.deidentifyTemplate_ != null) {
        if (deidentifyTemplate_ == null) {
          deidentifyTemplate_ = new global::Google.Cloud.Dlp.V2Beta2.DeidentifyTemplate();
        }
        DeidentifyTemplate.MergeFrom(other.DeidentifyTemplate);
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (deidentifyTemplate_ == null) {
              deidentifyTemplate_ = new global::Google.Cloud.Dlp.V2Beta2.DeidentifyTemplate();
            }
            input.ReadMessage(deidentifyTemplate_);
            break;
          }
          case 26: {
            if (updateMask_ == null) {
              updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(updateMask_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for GetDeidentifyTemplate.
  /// </summary>
  public sealed partial class GetDeidentifyTemplateRequest : pb::IMessage<GetDeidentifyTemplateRequest> {
    private static readonly pb::MessageParser<GetDeidentifyTemplateRequest> _parser = new pb::MessageParser<GetDeidentifyTemplateRequest>(() => new GetDeidentifyTemplateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDeidentifyTemplateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeidentifyTemplateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeidentifyTemplateRequest(GetDeidentifyTemplateRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeidentifyTemplateRequest Clone() {
      return new GetDeidentifyTemplateRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Resource name of the organization and deidentify template to be read, for
    /// example `organizations/433245324/deidentifyTemplates/432452342` or
    /// projects/project-id/deidentifyTemplates/432452342.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDeidentifyTemplateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDeidentifyTemplateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDeidentifyTemplateRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for ListDeidentifyTemplates.
  /// </summary>
  public sealed partial class ListDeidentifyTemplatesRequest : pb::IMessage<ListDeidentifyTemplatesRequest> {
    private static readonly pb::MessageParser<ListDeidentifyTemplatesRequest> _parser = new pb::MessageParser<ListDeidentifyTemplatesRequest>(() => new ListDeidentifyTemplatesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDeidentifyTemplatesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDeidentifyTemplatesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDeidentifyTemplatesRequest(ListDeidentifyTemplatesRequest other) : this() {
      parent_ = other.parent_;
      pageToken_ = other.pageToken_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDeidentifyTemplatesRequest Clone() {
      return new ListDeidentifyTemplatesRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The parent resource name, for example projects/my-project-id or
    /// organizations/my-org-id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 2;
    private string pageToken_ = "";
    /// <summary>
    /// Optional page token to continue retrieval. Comes from previous call
    /// to `ListDeidentifyTemplates`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    /// Optional size of the page, can be limited by server. If zero server returns
    /// a page of max size 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDeidentifyTemplatesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDeidentifyTemplatesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (PageToken != other.PageToken) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PageToken);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDeidentifyTemplatesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            PageToken = input.ReadString();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response message for ListDeidentifyTemplates.
  /// </summary>
  public sealed partial class ListDeidentifyTemplatesResponse : pb::IMessage<ListDeidentifyTemplatesResponse> {
    private static readonly pb::MessageParser<ListDeidentifyTemplatesResponse> _parser = new pb::MessageParser<ListDeidentifyTemplatesResponse>(() => new ListDeidentifyTemplatesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDeidentifyTemplatesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDeidentifyTemplatesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDeidentifyTemplatesResponse(ListDeidentifyTemplatesResponse other) : this() {
      deidentifyTemplates_ = other.deidentifyTemplates_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDeidentifyTemplatesResponse Clone() {
      return new ListDeidentifyTemplatesResponse(this);
    }

    /// <summary>Field number for the "deidentify_templates" field.</summary>
    public const int DeidentifyTemplatesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta2.DeidentifyTemplate> _repeated_deidentifyTemplates_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta2.DeidentifyTemplate.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.DeidentifyTemplate> deidentifyTemplates_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.DeidentifyTemplate>();
    /// <summary>
    /// List of deidentify templates, up to page_size in
    /// ListDeidentifyTemplatesRequest.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta2.DeidentifyTemplate> DeidentifyTemplates {
      get { return deidentifyTemplates_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// If the next page is available then the next page token to be used
    /// in following ListDeidentifyTemplates request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDeidentifyTemplatesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDeidentifyTemplatesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!deidentifyTemplates_.Equals(other.deidentifyTemplates_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= deidentifyTemplates_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      deidentifyTemplates_.WriteTo(output, _repeated_deidentifyTemplates_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += deidentifyTemplates_.CalculateSize(_repeated_deidentifyTemplates_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDeidentifyTemplatesResponse other) {
      if (other == null) {
        return;
      }
      deidentifyTemplates_.Add(other.deidentifyTemplates_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            deidentifyTemplates_.AddEntriesFrom(input, _repeated_deidentifyTemplates_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for DeleteDeidentifyTemplate.
  /// </summary>
  public sealed partial class DeleteDeidentifyTemplateRequest : pb::IMessage<DeleteDeidentifyTemplateRequest> {
    private static readonly pb::MessageParser<DeleteDeidentifyTemplateRequest> _parser = new pb::MessageParser<DeleteDeidentifyTemplateRequest>(() => new DeleteDeidentifyTemplateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteDeidentifyTemplateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta2.DlpReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDeidentifyTemplateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDeidentifyTemplateRequest(DeleteDeidentifyTemplateRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDeidentifyTemplateRequest Clone() {
      return new DeleteDeidentifyTemplateRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Resource name of the organization and deidentify template to be deleted,
    /// for example `organizations/433245324/deidentifyTemplates/432452342` or
    /// projects/project-id/deidentifyTemplates/432452342.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteDeidentifyTemplateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteDeidentifyTemplateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteDeidentifyTemplateRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
