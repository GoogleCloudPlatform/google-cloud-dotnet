// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/bigquery/datatransfer/v1/datatransfer.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.BigQuery.DataTransfer.V1 {

  /// <summary>Holder for reflection information generated from google/cloud/bigquery/datatransfer/v1/datatransfer.proto</summary>
  public static partial class DatatransferReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/bigquery/datatransfer/v1/datatransfer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DatatransferReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjhnb29nbGUvY2xvdWQvYmlncXVlcnkvZGF0YXRyYW5zZmVyL3YxL2RhdGF0",
            "cmFuc2Zlci5wcm90bxIlZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LmRhdGF0cmFu",
            "c2Zlci52MRocZ29vZ2xlL2FwaS9hbm5vdGF0aW9ucy5wcm90bxo0Z29vZ2xl",
            "L2Nsb3VkL2JpZ3F1ZXJ5L2RhdGF0cmFuc2Zlci92MS90cmFuc2Zlci5wcm90",
            "bxoeZ29vZ2xlL3Byb3RvYnVmL2R1cmF0aW9uLnByb3RvGhtnb29nbGUvcHJv",
            "dG9idWYvZW1wdHkucHJvdG8aIGdvb2dsZS9wcm90b2J1Zi9maWVsZF9tYXNr",
            "LnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvGh5nb29n",
            "bGUvcHJvdG9idWYvd3JhcHBlcnMucHJvdG8aF2dvb2dsZS9hcGkvY2xpZW50",
            "LnByb3RvIvEEChNEYXRhU291cmNlUGFyYW1ldGVyEhAKCHBhcmFtX2lkGAEg",
            "ASgJEhQKDGRpc3BsYXlfbmFtZRgCIAEoCRITCgtkZXNjcmlwdGlvbhgDIAEo",
            "CRJNCgR0eXBlGAQgASgOMj8uZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LmRhdGF0",
            "cmFuc2Zlci52MS5EYXRhU291cmNlUGFyYW1ldGVyLlR5cGUSEAoIcmVxdWly",
            "ZWQYBSABKAgSEAoIcmVwZWF0ZWQYBiABKAgSGAoQdmFsaWRhdGlvbl9yZWdl",
            "eBgHIAEoCRIWCg5hbGxvd2VkX3ZhbHVlcxgIIAMoCRIvCgltaW5fdmFsdWUY",
            "CSABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSLwoJbWF4X3Zh",
            "bHVlGAogASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEkoKBmZp",
            "ZWxkcxgLIAMoCzI6Lmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5kYXRhdHJhbnNm",
            "ZXIudjEuRGF0YVNvdXJjZVBhcmFtZXRlchIeChZ2YWxpZGF0aW9uX2Rlc2Ny",
            "aXB0aW9uGAwgASgJEhsKE3ZhbGlkYXRpb25faGVscF91cmwYDSABKAkSEQoJ",
            "aW1tdXRhYmxlGA4gASgIEg8KB3JlY3Vyc2UYDyABKAgiaQoEVHlwZRIUChBU",
            "WVBFX1VOU1BFQ0lGSUVEEAASCgoGU1RSSU5HEAESCwoHSU5URUdFUhACEgoK",
            "BkRPVUJMRRADEgsKB0JPT0xFQU4QBBIKCgZSRUNPUkQQBRINCglQTFVTX1BB",
            "R0UQBiKJCAoKRGF0YVNvdXJjZRIMCgRuYW1lGAEgASgJEhYKDmRhdGFfc291",
            "cmNlX2lkGAIgASgJEhQKDGRpc3BsYXlfbmFtZRgDIAEoCRITCgtkZXNjcmlw",
            "dGlvbhgEIAEoCRIRCgljbGllbnRfaWQYBSABKAkSDgoGc2NvcGVzGAYgAygJ",
            "Ek4KDXRyYW5zZmVyX3R5cGUYByABKA4yMy5nb29nbGUuY2xvdWQuYmlncXVl",
            "cnkuZGF0YXRyYW5zZmVyLnYxLlRyYW5zZmVyVHlwZUICGAESJwobc3VwcG9y",
            "dHNfbXVsdGlwbGVfdHJhbnNmZXJzGAggASgIQgIYARIfChd1cGRhdGVfZGVh",
            "ZGxpbmVfc2Vjb25kcxgJIAEoBRIYChBkZWZhdWx0X3NjaGVkdWxlGAogASgJ",
            "EiAKGHN1cHBvcnRzX2N1c3RvbV9zY2hlZHVsZRgLIAEoCBJOCgpwYXJhbWV0",
            "ZXJzGAwgAygLMjouZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LmRhdGF0cmFuc2Zl",
            "ci52MS5EYXRhU291cmNlUGFyYW1ldGVyEhAKCGhlbHBfdXJsGA0gASgJEl8K",
            "EmF1dGhvcml6YXRpb25fdHlwZRgOIAEoDjJDLmdvb2dsZS5jbG91ZC5iaWdx",
            "dWVyeS5kYXRhdHJhbnNmZXIudjEuRGF0YVNvdXJjZS5BdXRob3JpemF0aW9u",
            "VHlwZRJcChFkYXRhX3JlZnJlc2hfdHlwZRgPIAEoDjJBLmdvb2dsZS5jbG91",
            "ZC5iaWdxdWVyeS5kYXRhdHJhbnNmZXIudjEuRGF0YVNvdXJjZS5EYXRhUmVm",
            "cmVzaFR5cGUSKAogZGVmYXVsdF9kYXRhX3JlZnJlc2hfd2luZG93X2RheXMY",
            "ECABKAUSHAoUbWFudWFsX3J1bnNfZGlzYWJsZWQYESABKAgSPAoZbWluaW11",
            "bV9zY2hlZHVsZV9pbnRlcnZhbBgSIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5E",
            "dXJhdGlvbhIaChJwYXJ0bmVyX2xlZ2FsX25hbWUYFiABKAkSFAoMcmVkaXJl",
            "Y3RfdXJsGBcgASgJInMKEUF1dGhvcml6YXRpb25UeXBlEiIKHkFVVEhPUkla",
            "QVRJT05fVFlQRV9VTlNQRUNJRklFRBAAEhYKEkFVVEhPUklaQVRJT05fQ09E",
            "RRABEiIKHkdPT0dMRV9QTFVTX0FVVEhPUklaQVRJT05fQ09ERRACImMKD0Rh",
            "dGFSZWZyZXNoVHlwZRIhCh1EQVRBX1JFRlJFU0hfVFlQRV9VTlNQRUNJRklF",
            "RBAAEhIKDlNMSURJTkdfV0lORE9XEAESGQoVQ1VTVE9NX1NMSURJTkdfV0lO",
            "RE9XEAIiJAoUR2V0RGF0YVNvdXJjZVJlcXVlc3QSDAoEbmFtZRgBIAEoCSJP",
            "ChZMaXN0RGF0YVNvdXJjZXNSZXF1ZXN0Eg4KBnBhcmVudBgBIAEoCRISCgpw",
            "YWdlX3Rva2VuGAMgASgJEhEKCXBhZ2Vfc2l6ZRgEIAEoBSJ7ChdMaXN0RGF0",
            "YVNvdXJjZXNSZXNwb25zZRJHCgxkYXRhX3NvdXJjZXMYASADKAsyMS5nb29n",
            "bGUuY2xvdWQuYmlncXVlcnkuZGF0YXRyYW5zZmVyLnYxLkRhdGFTb3VyY2US",
            "FwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJIq8BChtDcmVhdGVUcmFuc2ZlckNv",
            "bmZpZ1JlcXVlc3QSDgoGcGFyZW50GAEgASgJEk4KD3RyYW5zZmVyX2NvbmZp",
            "ZxgCIAEoCzI1Lmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5kYXRhdHJhbnNmZXIu",
            "djEuVHJhbnNmZXJDb25maWcSGgoSYXV0aG9yaXphdGlvbl9jb2RlGAMgASgJ",
            "EhQKDHZlcnNpb25faW5mbxgFIAEoCSLQAQobVXBkYXRlVHJhbnNmZXJDb25m",
            "aWdSZXF1ZXN0Ek4KD3RyYW5zZmVyX2NvbmZpZxgBIAEoCzI1Lmdvb2dsZS5j",
            "bG91ZC5iaWdxdWVyeS5kYXRhdHJhbnNmZXIudjEuVHJhbnNmZXJDb25maWcS",
            "GgoSYXV0aG9yaXphdGlvbl9jb2RlGAMgASgJEi8KC3VwZGF0ZV9tYXNrGAQg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLkZpZWxkTWFzaxIUCgx2ZXJzaW9uX2lu",
            "Zm8YBSABKAkiKAoYR2V0VHJhbnNmZXJDb25maWdSZXF1ZXN0EgwKBG5hbWUY",
            "ASABKAkiKwobRGVsZXRlVHJhbnNmZXJDb25maWdSZXF1ZXN0EgwKBG5hbWUY",
            "ASABKAkiJQoVR2V0VHJhbnNmZXJSdW5SZXF1ZXN0EgwKBG5hbWUYASABKAki",
            "KAoYRGVsZXRlVHJhbnNmZXJSdW5SZXF1ZXN0EgwKBG5hbWUYASABKAkibAoa",
            "TGlzdFRyYW5zZmVyQ29uZmlnc1JlcXVlc3QSDgoGcGFyZW50GAEgASgJEhcK",
            "D2RhdGFfc291cmNlX2lkcxgCIAMoCRISCgpwYWdlX3Rva2VuGAMgASgJEhEK",
            "CXBhZ2Vfc2l6ZRgEIAEoBSKHAQobTGlzdFRyYW5zZmVyQ29uZmlnc1Jlc3Bv",
            "bnNlEk8KEHRyYW5zZmVyX2NvbmZpZ3MYASADKAsyNS5nb29nbGUuY2xvdWQu",
            "YmlncXVlcnkuZGF0YXRyYW5zZmVyLnYxLlRyYW5zZmVyQ29uZmlnEhcKD25l",
            "eHRfcGFnZV90b2tlbhgCIAEoCSKtAgoXTGlzdFRyYW5zZmVyUnVuc1JlcXVl",
            "c3QSDgoGcGFyZW50GAEgASgJEkQKBnN0YXRlcxgCIAMoDjI0Lmdvb2dsZS5j",
            "bG91ZC5iaWdxdWVyeS5kYXRhdHJhbnNmZXIudjEuVHJhbnNmZXJTdGF0ZRIS",
            "CgpwYWdlX3Rva2VuGAMgASgJEhEKCXBhZ2Vfc2l6ZRgEIAEoBRJeCgtydW5f",
            "YXR0ZW1wdBgFIAEoDjJJLmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5kYXRhdHJh",
            "bnNmZXIudjEuTGlzdFRyYW5zZmVyUnVuc1JlcXVlc3QuUnVuQXR0ZW1wdCI1",
            "CgpSdW5BdHRlbXB0EhsKF1JVTl9BVFRFTVBUX1VOU1BFQ0lGSUVEEAASCgoG",
            "TEFURVNUEAEifgoYTGlzdFRyYW5zZmVyUnVuc1Jlc3BvbnNlEkkKDXRyYW5z",
            "ZmVyX3J1bnMYASADKAsyMi5nb29nbGUuY2xvdWQuYmlncXVlcnkuZGF0YXRy",
            "YW5zZmVyLnYxLlRyYW5zZmVyUnVuEhcKD25leHRfcGFnZV90b2tlbhgCIAEo",
            "CSKvAQoXTGlzdFRyYW5zZmVyTG9nc1JlcXVlc3QSDgoGcGFyZW50GAEgASgJ",
            "EhIKCnBhZ2VfdG9rZW4YBCABKAkSEQoJcGFnZV9zaXplGAUgASgFEl0KDW1l",
            "c3NhZ2VfdHlwZXMYBiADKA4yRi5nb29nbGUuY2xvdWQuYmlncXVlcnkuZGF0",
            "YXRyYW5zZmVyLnYxLlRyYW5zZmVyTWVzc2FnZS5NZXNzYWdlU2V2ZXJpdHki",
            "hgEKGExpc3RUcmFuc2ZlckxvZ3NSZXNwb25zZRJRChF0cmFuc2Zlcl9tZXNz",
            "YWdlcxgBIAMoCzI2Lmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5kYXRhdHJhbnNm",
            "ZXIudjEuVHJhbnNmZXJNZXNzYWdlEhcKD25leHRfcGFnZV90b2tlbhgCIAEo",
            "CSImChZDaGVja1ZhbGlkQ3JlZHNSZXF1ZXN0EgwKBG5hbWUYASABKAkiMgoX",
            "Q2hlY2tWYWxpZENyZWRzUmVzcG9uc2USFwoPaGFzX3ZhbGlkX2NyZWRzGAEg",
            "ASgIIpoCChtTY2hlZHVsZVRyYW5zZmVyUnVuc1JlcXVlc3QSDgoGcGFyZW50",
            "GAEgASgJEl4KBmxhYmVscxgGIAMoCzJOLmdvb2dsZS5jbG91ZC5iaWdxdWVy",
            "eS5kYXRhdHJhbnNmZXIudjEuU2NoZWR1bGVUcmFuc2ZlclJ1bnNSZXF1ZXN0",
            "LkxhYmVsc0VudHJ5Ei4KCnN0YXJ0X3RpbWUYAiABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEiwKCGVuZF90aW1lGAMgASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLlRpbWVzdGFtcBotCgtMYWJlbHNFbnRyeRILCgNrZXkYASABKAkS",
            "DQoFdmFsdWUYAiABKAk6AjgBImAKHFNjaGVkdWxlVHJhbnNmZXJSdW5zUmVz",
            "cG9uc2USQAoEcnVucxgBIAMoCzIyLmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5k",
            "YXRhdHJhbnNmZXIudjEuVHJhbnNmZXJSdW4i4AMKHlN0YXJ0TWFudWFsVHJh",
            "bnNmZXJSdW5zUmVxdWVzdBIOCgZwYXJlbnQYASABKAkSYQoGbGFiZWxzGAIg",
            "AygLMlEuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LmRhdGF0cmFuc2Zlci52MS5T",
            "dGFydE1hbnVhbFRyYW5zZmVyUnVuc1JlcXVlc3QuTGFiZWxzRW50cnkSbwoU",
            "cmVxdWVzdGVkX3RpbWVfcmFuZ2UYAyABKAsyTy5nb29nbGUuY2xvdWQuYmln",
            "cXVlcnkuZGF0YXRyYW5zZmVyLnYxLlN0YXJ0TWFudWFsVHJhbnNmZXJSdW5z",
            "UmVxdWVzdC5UaW1lUmFuZ2VIABI4ChJyZXF1ZXN0ZWRfcnVuX3RpbWUYBCAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wSAAaaQoJVGltZVJhbmdl",
            "Ei4KCnN0YXJ0X3RpbWUYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0",
            "YW1wEiwKCGVuZF90aW1lGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVz",
            "dGFtcBotCgtMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiAB",
            "KAk6AjgBQgYKBHRpbWUiYwofU3RhcnRNYW51YWxUcmFuc2ZlclJ1bnNSZXNw",
            "b25zZRJACgRydW5zGAEgAygLMjIuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LmRh",
            "dGF0cmFuc2Zlci52MS5UcmFuc2ZlclJ1biIwCiBFbmFibGVEYXRhVHJhbnNm",
            "ZXJTZXJ2aWNlUmVxdWVzdBIMCgRuYW1lGAEgASgJIjMKI0lzRGF0YVRyYW5z",
            "ZmVyU2VydmljZUVuYWJsZWRSZXF1ZXN0EgwKBG5hbWUYASABKAkiRwokSXNE",
            "YXRhVHJhbnNmZXJTZXJ2aWNlRW5hYmxlZFJlc3BvbnNlEg8KB2VuYWJsZWQY",
            "ASABKAgSDgoGcmVhc29uGAIgASgJMuIhChNEYXRhVHJhbnNmZXJTZXJ2aWNl",
            "Et8BCg1HZXREYXRhU291cmNlEjsuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LmRh",
            "dGF0cmFuc2Zlci52MS5HZXREYXRhU291cmNlUmVxdWVzdBoxLmdvb2dsZS5j",
            "bG91ZC5iaWdxdWVyeS5kYXRhdHJhbnNmZXIudjEuRGF0YVNvdXJjZSJegtPk",
            "kwJYEi8vdjEve25hbWU9cHJvamVjdHMvKi9sb2NhdGlvbnMvKi9kYXRhU291",
            "cmNlcy8qfVolEiMvdjEve25hbWU9cHJvamVjdHMvKi9kYXRhU291cmNlcy8q",
            "fRLwAQoPTGlzdERhdGFTb3VyY2VzEj0uZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5",
            "LmRhdGF0cmFuc2Zlci52MS5MaXN0RGF0YVNvdXJjZXNSZXF1ZXN0Gj4uZ29v",
            "Z2xlLmNsb3VkLmJpZ3F1ZXJ5LmRhdGF0cmFuc2Zlci52MS5MaXN0RGF0YVNv",
            "dXJjZXNSZXNwb25zZSJegtPkkwJYEi8vdjEve3BhcmVudD1wcm9qZWN0cy8q",
            "L2xvY2F0aW9ucy8qfS9kYXRhU291cmNlc1olEiMvdjEve3BhcmVudD1wcm9q",
            "ZWN0cy8qfS9kYXRhU291cmNlcxKdAgoUQ3JlYXRlVHJhbnNmZXJDb25maWcS",
            "Qi5nb29nbGUuY2xvdWQuYmlncXVlcnkuZGF0YXRyYW5zZmVyLnYxLkNyZWF0",
            "ZVRyYW5zZmVyQ29uZmlnUmVxdWVzdBo1Lmdvb2dsZS5jbG91ZC5iaWdxdWVy",
            "eS5kYXRhdHJhbnNmZXIudjEuVHJhbnNmZXJDb25maWciiQGC0+STAoIBIjMv",
            "djEve3BhcmVudD1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qfS90cmFuc2ZlckNv",
            "bmZpZ3M6D3RyYW5zZmVyX2NvbmZpZ1o6IicvdjEve3BhcmVudD1wcm9qZWN0",
            "cy8qfS90cmFuc2ZlckNvbmZpZ3M6D3RyYW5zZmVyX2NvbmZpZxK9AgoUVXBk",
            "YXRlVHJhbnNmZXJDb25maWcSQi5nb29nbGUuY2xvdWQuYmlncXVlcnkuZGF0",
            "YXRyYW5zZmVyLnYxLlVwZGF0ZVRyYW5zZmVyQ29uZmlnUmVxdWVzdBo1Lmdv",
            "b2dsZS5jbG91ZC5iaWdxdWVyeS5kYXRhdHJhbnNmZXIudjEuVHJhbnNmZXJD",
            "b25maWciqQGC0+STAqIBMkMvdjEve3RyYW5zZmVyX2NvbmZpZy5uYW1lPXBy",
            "b2plY3RzLyovbG9jYXRpb25zLyovdHJhbnNmZXJDb25maWdzLyp9Og90cmFu",
            "c2Zlcl9jb25maWdaSjI3L3YxL3t0cmFuc2Zlcl9jb25maWcubmFtZT1wcm9q",
            "ZWN0cy8qL3RyYW5zZmVyQ29uZmlncy8qfToPdHJhbnNmZXJfY29uZmlnEtoB",
            "ChREZWxldGVUcmFuc2ZlckNvbmZpZxJCLmdvb2dsZS5jbG91ZC5iaWdxdWVy",
            "eS5kYXRhdHJhbnNmZXIudjEuRGVsZXRlVHJhbnNmZXJDb25maWdSZXF1ZXN0",
            "GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5ImaC0+STAmAqMy92MS97bmFtZT1w",
            "cm9qZWN0cy8qL2xvY2F0aW9ucy8qL3RyYW5zZmVyQ29uZmlncy8qfVopKicv",
            "djEve25hbWU9cHJvamVjdHMvKi90cmFuc2ZlckNvbmZpZ3MvKn0S8wEKEUdl",
            "dFRyYW5zZmVyQ29uZmlnEj8uZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LmRhdGF0",
            "cmFuc2Zlci52MS5HZXRUcmFuc2ZlckNvbmZpZ1JlcXVlc3QaNS5nb29nbGUu",
            "Y2xvdWQuYmlncXVlcnkuZGF0YXRyYW5zZmVyLnYxLlRyYW5zZmVyQ29uZmln",
            "ImaC0+STAmASMy92MS97bmFtZT1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL3Ry",
            "YW5zZmVyQ29uZmlncy8qfVopEicvdjEve25hbWU9cHJvamVjdHMvKi90cmFu",
            "c2ZlckNvbmZpZ3MvKn0ShAIKE0xpc3RUcmFuc2ZlckNvbmZpZ3MSQS5nb29n",
            "bGUuY2xvdWQuYmlncXVlcnkuZGF0YXRyYW5zZmVyLnYxLkxpc3RUcmFuc2Zl",
            "ckNvbmZpZ3NSZXF1ZXN0GkIuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LmRhdGF0",
            "cmFuc2Zlci52MS5MaXN0VHJhbnNmZXJDb25maWdzUmVzcG9uc2UiZoLT5JMC",
            "YBIzL3YxL3twYXJlbnQ9cHJvamVjdHMvKi9sb2NhdGlvbnMvKn0vdHJhbnNm",
            "ZXJDb25maWdzWikSJy92MS97cGFyZW50PXByb2plY3RzLyp9L3RyYW5zZmVy",
            "Q29uZmlncxKwAgoUU2NoZWR1bGVUcmFuc2ZlclJ1bnMSQi5nb29nbGUuY2xv",
            "dWQuYmlncXVlcnkuZGF0YXRyYW5zZmVyLnYxLlNjaGVkdWxlVHJhbnNmZXJS",
            "dW5zUmVxdWVzdBpDLmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5kYXRhdHJhbnNm",
            "ZXIudjEuU2NoZWR1bGVUcmFuc2ZlclJ1bnNSZXNwb25zZSKOAYgCAYLT5JMC",
            "hAEiQi92MS97cGFyZW50PXByb2plY3RzLyovbG9jYXRpb25zLyovdHJhbnNm",
            "ZXJDb25maWdzLyp9OnNjaGVkdWxlUnVuczoBKlo7IjYvdjEve3BhcmVudD1w",
            "cm9qZWN0cy8qL3RyYW5zZmVyQ29uZmlncy8qfTpzY2hlZHVsZVJ1bnM6ASoS",
            "vAIKF1N0YXJ0TWFudWFsVHJhbnNmZXJSdW5zEkUuZ29vZ2xlLmNsb3VkLmJp",
            "Z3F1ZXJ5LmRhdGF0cmFuc2Zlci52MS5TdGFydE1hbnVhbFRyYW5zZmVyUnVu",
            "c1JlcXVlc3QaRi5nb29nbGUuY2xvdWQuYmlncXVlcnkuZGF0YXRyYW5zZmVy",
            "LnYxLlN0YXJ0TWFudWFsVHJhbnNmZXJSdW5zUmVzcG9uc2UikQGC0+STAooB",
            "IkUvdjEve3BhcmVudD1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL3RyYW5zZmVy",
            "Q29uZmlncy8qfTpzdGFydE1hbnVhbFJ1bnM6ASpaPiI5L3YxL3twYXJlbnQ9",
            "cHJvamVjdHMvKi90cmFuc2ZlckNvbmZpZ3MvKn06c3RhcnRNYW51YWxSdW5z",
            "OgEqEvgBCg5HZXRUcmFuc2ZlclJ1bhI8Lmdvb2dsZS5jbG91ZC5iaWdxdWVy",
            "eS5kYXRhdHJhbnNmZXIudjEuR2V0VHJhbnNmZXJSdW5SZXF1ZXN0GjIuZ29v",
            "Z2xlLmNsb3VkLmJpZ3F1ZXJ5LmRhdGF0cmFuc2Zlci52MS5UcmFuc2ZlclJ1",
            "biJ0gtPkkwJuEjovdjEve25hbWU9cHJvamVjdHMvKi9sb2NhdGlvbnMvKi90",
            "cmFuc2ZlckNvbmZpZ3MvKi9ydW5zLyp9WjASLi92MS97bmFtZT1wcm9qZWN0",
            "cy8qL3RyYW5zZmVyQ29uZmlncy8qL3J1bnMvKn0S4gEKEURlbGV0ZVRyYW5z",
            "ZmVyUnVuEj8uZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LmRhdGF0cmFuc2Zlci52",
            "MS5EZWxldGVUcmFuc2ZlclJ1blJlcXVlc3QaFi5nb29nbGUucHJvdG9idWYu",
            "RW1wdHkidILT5JMCbio6L3YxL3tuYW1lPXByb2plY3RzLyovbG9jYXRpb25z",
            "LyovdHJhbnNmZXJDb25maWdzLyovcnVucy8qfVowKi4vdjEve25hbWU9cHJv",
            "amVjdHMvKi90cmFuc2ZlckNvbmZpZ3MvKi9ydW5zLyp9EokCChBMaXN0VHJh",
            "bnNmZXJSdW5zEj4uZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LmRhdGF0cmFuc2Zl",
            "ci52MS5MaXN0VHJhbnNmZXJSdW5zUmVxdWVzdBo/Lmdvb2dsZS5jbG91ZC5i",
            "aWdxdWVyeS5kYXRhdHJhbnNmZXIudjEuTGlzdFRyYW5zZmVyUnVuc1Jlc3Bv",
            "bnNlInSC0+STAm4SOi92MS97cGFyZW50PXByb2plY3RzLyovbG9jYXRpb25z",
            "LyovdHJhbnNmZXJDb25maWdzLyp9L3J1bnNaMBIuL3YxL3twYXJlbnQ9cHJv",
            "amVjdHMvKi90cmFuc2ZlckNvbmZpZ3MvKn0vcnVucxKpAgoQTGlzdFRyYW5z",
            "ZmVyTG9ncxI+Lmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5kYXRhdHJhbnNmZXIu",
            "djEuTGlzdFRyYW5zZmVyTG9nc1JlcXVlc3QaPy5nb29nbGUuY2xvdWQuYmln",
            "cXVlcnkuZGF0YXRyYW5zZmVyLnYxLkxpc3RUcmFuc2ZlckxvZ3NSZXNwb25z",
            "ZSKTAYLT5JMCjAESSS92MS97cGFyZW50PXByb2plY3RzLyovbG9jYXRpb25z",
            "LyovdHJhbnNmZXJDb25maWdzLyovcnVucy8qfS90cmFuc2ZlckxvZ3NaPxI9",
            "L3YxL3twYXJlbnQ9cHJvamVjdHMvKi90cmFuc2ZlckNvbmZpZ3MvKi9ydW5z",
            "Lyp9L3RyYW5zZmVyTG9ncxKXAgoPQ2hlY2tWYWxpZENyZWRzEj0uZ29vZ2xl",
            "LmNsb3VkLmJpZ3F1ZXJ5LmRhdGF0cmFuc2Zlci52MS5DaGVja1ZhbGlkQ3Jl",
            "ZHNSZXF1ZXN0Gj4uZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LmRhdGF0cmFuc2Zl",
            "ci52MS5DaGVja1ZhbGlkQ3JlZHNSZXNwb25zZSKEAYLT5JMCfiI/L3YxL3tu",
            "YW1lPXByb2plY3RzLyovbG9jYXRpb25zLyovZGF0YVNvdXJjZXMvKn06Y2hl",
            "Y2tWYWxpZENyZWRzOgEqWjgiMy92MS97bmFtZT1wcm9qZWN0cy8qL2RhdGFT",
            "b3VyY2VzLyp9OmNoZWNrVmFsaWRDcmVkczoBKhLEAQoZRW5hYmxlRGF0YVRy",
            "YW5zZmVyU2VydmljZRJHLmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5kYXRhdHJh",
            "bnNmZXIudjEuRW5hYmxlRGF0YVRyYW5zZmVyU2VydmljZVJlcXVlc3QaFi5n",
            "b29nbGUucHJvdG9idWYuRW1wdHkiRoLT5JMCQCI7L3YxL3tuYW1lPXByb2pl",
            "Y3RzLyovbG9jYXRpb25zLyp9OmVuYWJsZURhdGFUcmFuc2ZlclNlcnZpY2U6",
            "ASoSqAIKHElzRGF0YVRyYW5zZmVyU2VydmljZUVuYWJsZWQSSi5nb29nbGUu",
            "Y2xvdWQuYmlncXVlcnkuZGF0YXRyYW5zZmVyLnYxLklzRGF0YVRyYW5zZmVy",
            "U2VydmljZUVuYWJsZWRSZXF1ZXN0GksuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5",
            "LmRhdGF0cmFuc2Zlci52MS5Jc0RhdGFUcmFuc2ZlclNlcnZpY2VFbmFibGVk",
            "UmVzcG9uc2Uib4LT5JMCaSI+L3YxL3tuYW1lPXByb2plY3RzLyovbG9jYXRp",
            "b25zLyp9OmlzRGF0YVRyYW5zZmVyU2VydmljZUVuYWJsZWQ6ASpaJCIfL3Yx",
            "L3tuYW1lPXByb2plY3RzLyp9OmlzRW5hYmxlZDoBKhomykEjYmlncXVlcnlk",
            "YXRhdHJhbnNmZXIuZ29vZ2xlYXBpcy5jb21C4wEKKWNvbS5nb29nbGUuY2xv",
            "dWQuYmlncXVlcnkuZGF0YXRyYW5zZmVyLnYxQhFEYXRhVHJhbnNmZXJQcm90",
            "b1ABWlFnb29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVhcGlzL2Ns",
            "b3VkL2JpZ3F1ZXJ5L2RhdGF0cmFuc2Zlci92MTtkYXRhdHJhbnNmZXKqAiVH",
            "b29nbGUuQ2xvdWQuQmlnUXVlcnkuRGF0YVRyYW5zZmVyLlYxygIlR29vZ2xl",
            "XENsb3VkXEJpZ1F1ZXJ5XERhdGFUcmFuc2ZlclxWMWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Cloud.BigQuery.DataTransfer.V1.TransferReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.FieldMaskReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Api.ClientReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceParameter), global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceParameter.Parser, new[]{ "ParamId", "DisplayName", "Description", "Type", "Required", "Repeated", "ValidationRegex", "AllowedValues", "MinValue", "MaxValue", "Fields", "ValidationDescription", "ValidationHelpUrl", "Immutable", "Recurse" }, null, new[]{ typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceParameter.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.DataSource), global::Google.Cloud.BigQuery.DataTransfer.V1.DataSource.Parser, new[]{ "Name", "DataSourceId", "DisplayName", "Description", "ClientId", "Scopes", "TransferType", "SupportsMultipleTransfers", "UpdateDeadlineSeconds", "DefaultSchedule", "SupportsCustomSchedule", "Parameters", "HelpUrl", "AuthorizationType", "DataRefreshType", "DefaultDataRefreshWindowDays", "ManualRunsDisabled", "MinimumScheduleInterval", "PartnerLegalName", "RedirectUrl" }, null, new[]{ typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.DataSource.Types.AuthorizationType), typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.DataSource.Types.DataRefreshType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.GetDataSourceRequest), global::Google.Cloud.BigQuery.DataTransfer.V1.GetDataSourceRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourcesRequest), global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourcesRequest.Parser, new[]{ "Parent", "PageToken", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourcesResponse), global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourcesResponse.Parser, new[]{ "DataSources", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.CreateTransferConfigRequest), global::Google.Cloud.BigQuery.DataTransfer.V1.CreateTransferConfigRequest.Parser, new[]{ "Parent", "TransferConfig", "AuthorizationCode", "VersionInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateTransferConfigRequest), global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateTransferConfigRequest.Parser, new[]{ "TransferConfig", "AuthorizationCode", "UpdateMask", "VersionInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.GetTransferConfigRequest), global::Google.Cloud.BigQuery.DataTransfer.V1.GetTransferConfigRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.DeleteTransferConfigRequest), global::Google.Cloud.BigQuery.DataTransfer.V1.DeleteTransferConfigRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.GetTransferRunRequest), global::Google.Cloud.BigQuery.DataTransfer.V1.GetTransferRunRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.DeleteTransferRunRequest), global::Google.Cloud.BigQuery.DataTransfer.V1.DeleteTransferRunRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.ListTransferConfigsRequest), global::Google.Cloud.BigQuery.DataTransfer.V1.ListTransferConfigsRequest.Parser, new[]{ "Parent", "DataSourceIds", "PageToken", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.ListTransferConfigsResponse), global::Google.Cloud.BigQuery.DataTransfer.V1.ListTransferConfigsResponse.Parser, new[]{ "TransferConfigs", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.ListTransferRunsRequest), global::Google.Cloud.BigQuery.DataTransfer.V1.ListTransferRunsRequest.Parser, new[]{ "Parent", "States", "PageToken", "PageSize", "RunAttempt" }, null, new[]{ typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.ListTransferRunsRequest.Types.RunAttempt) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.ListTransferRunsResponse), global::Google.Cloud.BigQuery.DataTransfer.V1.ListTransferRunsResponse.Parser, new[]{ "TransferRuns", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.ListTransferLogsRequest), global::Google.Cloud.BigQuery.DataTransfer.V1.ListTransferLogsRequest.Parser, new[]{ "Parent", "PageToken", "PageSize", "MessageTypes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.ListTransferLogsResponse), global::Google.Cloud.BigQuery.DataTransfer.V1.ListTransferLogsResponse.Parser, new[]{ "TransferMessages", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.CheckValidCredsRequest), global::Google.Cloud.BigQuery.DataTransfer.V1.CheckValidCredsRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.CheckValidCredsResponse), global::Google.Cloud.BigQuery.DataTransfer.V1.CheckValidCredsResponse.Parser, new[]{ "HasValidCreds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.ScheduleTransferRunsRequest), global::Google.Cloud.BigQuery.DataTransfer.V1.ScheduleTransferRunsRequest.Parser, new[]{ "Parent", "Labels", "StartTime", "EndTime" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.ScheduleTransferRunsResponse), global::Google.Cloud.BigQuery.DataTransfer.V1.ScheduleTransferRunsResponse.Parser, new[]{ "Runs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.StartManualTransferRunsRequest), global::Google.Cloud.BigQuery.DataTransfer.V1.StartManualTransferRunsRequest.Parser, new[]{ "Parent", "Labels", "RequestedTimeRange", "RequestedRunTime" }, new[]{ "Time" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.StartManualTransferRunsRequest.Types.TimeRange), global::Google.Cloud.BigQuery.DataTransfer.V1.StartManualTransferRunsRequest.Types.TimeRange.Parser, new[]{ "StartTime", "EndTime" }, null, null, null),
            null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.StartManualTransferRunsResponse), global::Google.Cloud.BigQuery.DataTransfer.V1.StartManualTransferRunsResponse.Parser, new[]{ "Runs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.EnableDataTransferServiceRequest), global::Google.Cloud.BigQuery.DataTransfer.V1.EnableDataTransferServiceRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.IsDataTransferServiceEnabledRequest), global::Google.Cloud.BigQuery.DataTransfer.V1.IsDataTransferServiceEnabledRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.IsDataTransferServiceEnabledResponse), global::Google.Cloud.BigQuery.DataTransfer.V1.IsDataTransferServiceEnabledResponse.Parser, new[]{ "Enabled", "Reason" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Represents a data source parameter with validation rules, so that
  /// parameters can be rendered in the UI. These parameters are given to us by
  /// supported data sources, and include all needed information for rendering
  /// and validation.
  /// Thus, whoever uses this api can decide to generate either generic ui,
  /// or custom data source specific forms.
  /// </summary>
  public sealed partial class DataSourceParameter : pb::IMessage<DataSourceParameter> {
    private static readonly pb::MessageParser<DataSourceParameter> _parser = new pb::MessageParser<DataSourceParameter>(() => new DataSourceParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataSourceParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSourceParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSourceParameter(DataSourceParameter other) : this() {
      paramId_ = other.paramId_;
      displayName_ = other.displayName_;
      description_ = other.description_;
      type_ = other.type_;
      required_ = other.required_;
      repeated_ = other.repeated_;
      validationRegex_ = other.validationRegex_;
      allowedValues_ = other.allowedValues_.Clone();
      MinValue = other.MinValue;
      MaxValue = other.MaxValue;
      fields_ = other.fields_.Clone();
      validationDescription_ = other.validationDescription_;
      validationHelpUrl_ = other.validationHelpUrl_;
      immutable_ = other.immutable_;
      recurse_ = other.recurse_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSourceParameter Clone() {
      return new DataSourceParameter(this);
    }

    /// <summary>Field number for the "param_id" field.</summary>
    public const int ParamIdFieldNumber = 1;
    private string paramId_ = "";
    /// <summary>
    /// Parameter identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParamId {
      get { return paramId_; }
      set {
        paramId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 2;
    private string displayName_ = "";
    /// <summary>
    /// Parameter display name in the user interface.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// Parameter description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceParameter.Types.Type type_ = 0;
    /// <summary>
    /// Parameter type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceParameter.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "required" field.</summary>
    public const int RequiredFieldNumber = 5;
    private bool required_;
    /// <summary>
    /// Is parameter required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Required {
      get { return required_; }
      set {
        required_ = value;
      }
    }

    /// <summary>Field number for the "repeated" field.</summary>
    public const int RepeatedFieldNumber = 6;
    private bool repeated_;
    /// <summary>
    /// Deprecated. This field has no effect.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Repeated {
      get { return repeated_; }
      set {
        repeated_ = value;
      }
    }

    /// <summary>Field number for the "validation_regex" field.</summary>
    public const int ValidationRegexFieldNumber = 7;
    private string validationRegex_ = "";
    /// <summary>
    /// Regular expression which can be used for parameter validation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ValidationRegex {
      get { return validationRegex_; }
      set {
        validationRegex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allowed_values" field.</summary>
    public const int AllowedValuesFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_allowedValues_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> allowedValues_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// All possible values for the parameter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AllowedValues {
      get { return allowedValues_; }
    }

    /// <summary>Field number for the "min_value" field.</summary>
    public const int MinValueFieldNumber = 9;
    private static readonly pb::FieldCodec<double?> _single_minValue_codec = pb::FieldCodec.ForStructWrapper<double>(74);
    private double? minValue_;
    /// <summary>
    /// For integer and double values specifies minimum allowed value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? MinValue {
      get { return minValue_; }
      set {
        minValue_ = value;
      }
    }

    /// <summary>Field number for the "max_value" field.</summary>
    public const int MaxValueFieldNumber = 10;
    private static readonly pb::FieldCodec<double?> _single_maxValue_codec = pb::FieldCodec.ForStructWrapper<double>(82);
    private double? maxValue_;
    /// <summary>
    /// For integer and double values specifies maxminum allowed value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? MaxValue {
      get { return maxValue_; }
      set {
        maxValue_ = value;
      }
    }

    /// <summary>Field number for the "fields" field.</summary>
    public const int FieldsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceParameter> _repeated_fields_codec
        = pb::FieldCodec.ForMessage(90, global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceParameter.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceParameter> fields_ = new pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceParameter>();
    /// <summary>
    /// Deprecated. This field has no effect.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceParameter> Fields {
      get { return fields_; }
    }

    /// <summary>Field number for the "validation_description" field.</summary>
    public const int ValidationDescriptionFieldNumber = 12;
    private string validationDescription_ = "";
    /// <summary>
    /// Description of the requirements for this field, in case the user input does
    /// not fulfill the regex pattern or min/max values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ValidationDescription {
      get { return validationDescription_; }
      set {
        validationDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "validation_help_url" field.</summary>
    public const int ValidationHelpUrlFieldNumber = 13;
    private string validationHelpUrl_ = "";
    /// <summary>
    /// URL to a help document to further explain the naming requirements.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ValidationHelpUrl {
      get { return validationHelpUrl_; }
      set {
        validationHelpUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "immutable" field.</summary>
    public const int ImmutableFieldNumber = 14;
    private bool immutable_;
    /// <summary>
    /// Cannot be changed after initial creation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Immutable {
      get { return immutable_; }
      set {
        immutable_ = value;
      }
    }

    /// <summary>Field number for the "recurse" field.</summary>
    public const int RecurseFieldNumber = 15;
    private bool recurse_;
    /// <summary>
    /// Deprecated. This field has no effect.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Recurse {
      get { return recurse_; }
      set {
        recurse_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataSourceParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataSourceParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ParamId != other.ParamId) return false;
      if (DisplayName != other.DisplayName) return false;
      if (Description != other.Description) return false;
      if (Type != other.Type) return false;
      if (Required != other.Required) return false;
      if (Repeated != other.Repeated) return false;
      if (ValidationRegex != other.ValidationRegex) return false;
      if(!allowedValues_.Equals(other.allowedValues_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MinValue, other.MinValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MaxValue, other.MaxValue)) return false;
      if(!fields_.Equals(other.fields_)) return false;
      if (ValidationDescription != other.ValidationDescription) return false;
      if (ValidationHelpUrl != other.ValidationHelpUrl) return false;
      if (Immutable != other.Immutable) return false;
      if (Recurse != other.Recurse) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ParamId.Length != 0) hash ^= ParamId.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Required != false) hash ^= Required.GetHashCode();
      if (Repeated != false) hash ^= Repeated.GetHashCode();
      if (ValidationRegex.Length != 0) hash ^= ValidationRegex.GetHashCode();
      hash ^= allowedValues_.GetHashCode();
      if (minValue_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MinValue);
      if (maxValue_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MaxValue);
      hash ^= fields_.GetHashCode();
      if (ValidationDescription.Length != 0) hash ^= ValidationDescription.GetHashCode();
      if (ValidationHelpUrl.Length != 0) hash ^= ValidationHelpUrl.GetHashCode();
      if (Immutable != false) hash ^= Immutable.GetHashCode();
      if (Recurse != false) hash ^= Recurse.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ParamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ParamId);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (Required != false) {
        output.WriteRawTag(40);
        output.WriteBool(Required);
      }
      if (Repeated != false) {
        output.WriteRawTag(48);
        output.WriteBool(Repeated);
      }
      if (ValidationRegex.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ValidationRegex);
      }
      allowedValues_.WriteTo(output, _repeated_allowedValues_codec);
      if (minValue_ != null) {
        _single_minValue_codec.WriteTagAndValue(output, MinValue);
      }
      if (maxValue_ != null) {
        _single_maxValue_codec.WriteTagAndValue(output, MaxValue);
      }
      fields_.WriteTo(output, _repeated_fields_codec);
      if (ValidationDescription.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ValidationDescription);
      }
      if (ValidationHelpUrl.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ValidationHelpUrl);
      }
      if (Immutable != false) {
        output.WriteRawTag(112);
        output.WriteBool(Immutable);
      }
      if (Recurse != false) {
        output.WriteRawTag(120);
        output.WriteBool(Recurse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ParamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParamId);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Required != false) {
        size += 1 + 1;
      }
      if (Repeated != false) {
        size += 1 + 1;
      }
      if (ValidationRegex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ValidationRegex);
      }
      size += allowedValues_.CalculateSize(_repeated_allowedValues_codec);
      if (minValue_ != null) {
        size += _single_minValue_codec.CalculateSizeWithTag(MinValue);
      }
      if (maxValue_ != null) {
        size += _single_maxValue_codec.CalculateSizeWithTag(MaxValue);
      }
      size += fields_.CalculateSize(_repeated_fields_codec);
      if (ValidationDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ValidationDescription);
      }
      if (ValidationHelpUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ValidationHelpUrl);
      }
      if (Immutable != false) {
        size += 1 + 1;
      }
      if (Recurse != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataSourceParameter other) {
      if (other == null) {
        return;
      }
      if (other.ParamId.Length != 0) {
        ParamId = other.ParamId;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Required != false) {
        Required = other.Required;
      }
      if (other.Repeated != false) {
        Repeated = other.Repeated;
      }
      if (other.ValidationRegex.Length != 0) {
        ValidationRegex = other.ValidationRegex;
      }
      allowedValues_.Add(other.allowedValues_);
      if (other.minValue_ != null) {
        if (minValue_ == null || other.MinValue != 0D) {
          MinValue = other.MinValue;
        }
      }
      if (other.maxValue_ != null) {
        if (maxValue_ == null || other.MaxValue != 0D) {
          MaxValue = other.MaxValue;
        }
      }
      fields_.Add(other.fields_);
      if (other.ValidationDescription.Length != 0) {
        ValidationDescription = other.ValidationDescription;
      }
      if (other.ValidationHelpUrl.Length != 0) {
        ValidationHelpUrl = other.ValidationHelpUrl;
      }
      if (other.Immutable != false) {
        Immutable = other.Immutable;
      }
      if (other.Recurse != false) {
        Recurse = other.Recurse;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ParamId = input.ReadString();
            break;
          }
          case 18: {
            DisplayName = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 32: {
            type_ = (global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceParameter.Types.Type) input.ReadEnum();
            break;
          }
          case 40: {
            Required = input.ReadBool();
            break;
          }
          case 48: {
            Repeated = input.ReadBool();
            break;
          }
          case 58: {
            ValidationRegex = input.ReadString();
            break;
          }
          case 66: {
            allowedValues_.AddEntriesFrom(input, _repeated_allowedValues_codec);
            break;
          }
          case 74: {
            double? value = _single_minValue_codec.Read(input);
            if (minValue_ == null || value != 0D) {
              MinValue = value;
            }
            break;
          }
          case 82: {
            double? value = _single_maxValue_codec.Read(input);
            if (maxValue_ == null || value != 0D) {
              MaxValue = value;
            }
            break;
          }
          case 90: {
            fields_.AddEntriesFrom(input, _repeated_fields_codec);
            break;
          }
          case 98: {
            ValidationDescription = input.ReadString();
            break;
          }
          case 106: {
            ValidationHelpUrl = input.ReadString();
            break;
          }
          case 112: {
            Immutable = input.ReadBool();
            break;
          }
          case 120: {
            Recurse = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DataSourceParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Parameter type.
      /// </summary>
      public enum Type {
        /// <summary>
        /// Type unspecified.
        /// </summary>
        [pbr::OriginalName("TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// String parameter.
        /// </summary>
        [pbr::OriginalName("STRING")] String = 1,
        /// <summary>
        /// Integer parameter (64-bits).
        /// Will be serialized to json as string.
        /// </summary>
        [pbr::OriginalName("INTEGER")] Integer = 2,
        /// <summary>
        /// Double precision floating point parameter.
        /// </summary>
        [pbr::OriginalName("DOUBLE")] Double = 3,
        /// <summary>
        /// Boolean parameter.
        /// </summary>
        [pbr::OriginalName("BOOLEAN")] Boolean = 4,
        /// <summary>
        /// Deprecated. This field has no effect.
        /// </summary>
        [pbr::OriginalName("RECORD")] Record = 5,
        /// <summary>
        /// Page ID for a Google+ Page.
        /// </summary>
        [pbr::OriginalName("PLUS_PAGE")] PlusPage = 6,
      }

    }
    #endregion

  }

  /// <summary>
  /// Represents data source metadata. Metadata is sufficient to
  /// render UI and request proper OAuth tokens.
  /// </summary>
  public sealed partial class DataSource : pb::IMessage<DataSource> {
    private static readonly pb::MessageParser<DataSource> _parser = new pb::MessageParser<DataSource>(() => new DataSource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSource(DataSource other) : this() {
      name_ = other.name_;
      dataSourceId_ = other.dataSourceId_;
      displayName_ = other.displayName_;
      description_ = other.description_;
      clientId_ = other.clientId_;
      scopes_ = other.scopes_.Clone();
      transferType_ = other.transferType_;
      supportsMultipleTransfers_ = other.supportsMultipleTransfers_;
      updateDeadlineSeconds_ = other.updateDeadlineSeconds_;
      defaultSchedule_ = other.defaultSchedule_;
      supportsCustomSchedule_ = other.supportsCustomSchedule_;
      parameters_ = other.parameters_.Clone();
      helpUrl_ = other.helpUrl_;
      authorizationType_ = other.authorizationType_;
      dataRefreshType_ = other.dataRefreshType_;
      defaultDataRefreshWindowDays_ = other.defaultDataRefreshWindowDays_;
      manualRunsDisabled_ = other.manualRunsDisabled_;
      minimumScheduleInterval_ = other.minimumScheduleInterval_ != null ? other.minimumScheduleInterval_.Clone() : null;
      partnerLegalName_ = other.partnerLegalName_;
      redirectUrl_ = other.redirectUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSource Clone() {
      return new DataSource(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Output only. Data source resource name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_source_id" field.</summary>
    public const int DataSourceIdFieldNumber = 2;
    private string dataSourceId_ = "";
    /// <summary>
    /// Data source id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataSourceId {
      get { return dataSourceId_; }
      set {
        dataSourceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 3;
    private string displayName_ = "";
    /// <summary>
    /// User friendly data source name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    /// <summary>
    /// User friendly data source description string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_id" field.</summary>
    public const int ClientIdFieldNumber = 5;
    private string clientId_ = "";
    /// <summary>
    /// Data source client id which should be used to receive refresh token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientId {
      get { return clientId_; }
      set {
        clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scopes" field.</summary>
    public const int ScopesFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_scopes_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> scopes_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Api auth scopes for which refresh token needs to be obtained. These are
    /// scopes needed by a data source to prepare data and ingest them into
    /// BigQuery, e.g., https://www.googleapis.com/auth/bigquery
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Scopes {
      get { return scopes_; }
    }

    /// <summary>Field number for the "transfer_type" field.</summary>
    public const int TransferTypeFieldNumber = 7;
    private global::Google.Cloud.BigQuery.DataTransfer.V1.TransferType transferType_ = 0;
    /// <summary>
    /// Deprecated. This field has no effect.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.BigQuery.DataTransfer.V1.TransferType TransferType {
      get { return transferType_; }
      set {
        transferType_ = value;
      }
    }

    /// <summary>Field number for the "supports_multiple_transfers" field.</summary>
    public const int SupportsMultipleTransfersFieldNumber = 8;
    private bool supportsMultipleTransfers_;
    /// <summary>
    /// Deprecated. This field has no effect.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SupportsMultipleTransfers {
      get { return supportsMultipleTransfers_; }
      set {
        supportsMultipleTransfers_ = value;
      }
    }

    /// <summary>Field number for the "update_deadline_seconds" field.</summary>
    public const int UpdateDeadlineSecondsFieldNumber = 9;
    private int updateDeadlineSeconds_;
    /// <summary>
    /// The number of seconds to wait for an update from the data source
    /// before the Data Transfer Service marks the transfer as FAILED.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpdateDeadlineSeconds {
      get { return updateDeadlineSeconds_; }
      set {
        updateDeadlineSeconds_ = value;
      }
    }

    /// <summary>Field number for the "default_schedule" field.</summary>
    public const int DefaultScheduleFieldNumber = 10;
    private string defaultSchedule_ = "";
    /// <summary>
    /// Default data transfer schedule.
    /// Examples of valid schedules include:
    /// `1st,3rd monday of month 15:30`,
    /// `every wed,fri of jan,jun 13:15`, and
    /// `first sunday of quarter 00:00`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultSchedule {
      get { return defaultSchedule_; }
      set {
        defaultSchedule_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "supports_custom_schedule" field.</summary>
    public const int SupportsCustomScheduleFieldNumber = 11;
    private bool supportsCustomSchedule_;
    /// <summary>
    /// Specifies whether the data source supports a user defined schedule, or
    /// operates on the default schedule.
    /// When set to `true`, user can override default schedule.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SupportsCustomSchedule {
      get { return supportsCustomSchedule_; }
      set {
        supportsCustomSchedule_ = value;
      }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceParameter> _repeated_parameters_codec
        = pb::FieldCodec.ForMessage(98, global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceParameter.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceParameter> parameters_ = new pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceParameter>();
    /// <summary>
    /// Data source parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceParameter> Parameters {
      get { return parameters_; }
    }

    /// <summary>Field number for the "help_url" field.</summary>
    public const int HelpUrlFieldNumber = 13;
    private string helpUrl_ = "";
    /// <summary>
    /// Url for the help document for this data source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HelpUrl {
      get { return helpUrl_; }
      set {
        helpUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authorization_type" field.</summary>
    public const int AuthorizationTypeFieldNumber = 14;
    private global::Google.Cloud.BigQuery.DataTransfer.V1.DataSource.Types.AuthorizationType authorizationType_ = 0;
    /// <summary>
    /// Indicates the type of authorization.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.BigQuery.DataTransfer.V1.DataSource.Types.AuthorizationType AuthorizationType {
      get { return authorizationType_; }
      set {
        authorizationType_ = value;
      }
    }

    /// <summary>Field number for the "data_refresh_type" field.</summary>
    public const int DataRefreshTypeFieldNumber = 15;
    private global::Google.Cloud.BigQuery.DataTransfer.V1.DataSource.Types.DataRefreshType dataRefreshType_ = 0;
    /// <summary>
    /// Specifies whether the data source supports automatic data refresh for the
    /// past few days, and how it's supported.
    /// For some data sources, data might not be complete until a few days later,
    /// so it's useful to refresh data automatically.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.BigQuery.DataTransfer.V1.DataSource.Types.DataRefreshType DataRefreshType {
      get { return dataRefreshType_; }
      set {
        dataRefreshType_ = value;
      }
    }

    /// <summary>Field number for the "default_data_refresh_window_days" field.</summary>
    public const int DefaultDataRefreshWindowDaysFieldNumber = 16;
    private int defaultDataRefreshWindowDays_;
    /// <summary>
    /// Default data refresh window on days.
    /// Only meaningful when `data_refresh_type` = `SLIDING_WINDOW`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultDataRefreshWindowDays {
      get { return defaultDataRefreshWindowDays_; }
      set {
        defaultDataRefreshWindowDays_ = value;
      }
    }

    /// <summary>Field number for the "manual_runs_disabled" field.</summary>
    public const int ManualRunsDisabledFieldNumber = 17;
    private bool manualRunsDisabled_;
    /// <summary>
    /// Disables backfilling and manual run scheduling
    /// for the data source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ManualRunsDisabled {
      get { return manualRunsDisabled_; }
      set {
        manualRunsDisabled_ = value;
      }
    }

    /// <summary>Field number for the "minimum_schedule_interval" field.</summary>
    public const int MinimumScheduleIntervalFieldNumber = 18;
    private global::Google.Protobuf.WellKnownTypes.Duration minimumScheduleInterval_;
    /// <summary>
    /// The minimum interval for scheduler to schedule runs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration MinimumScheduleInterval {
      get { return minimumScheduleInterval_; }
      set {
        minimumScheduleInterval_ = value;
      }
    }

    /// <summary>Field number for the "partner_legal_name" field.</summary>
    public const int PartnerLegalNameFieldNumber = 22;
    private string partnerLegalName_ = "";
    /// <summary>
    /// Partner's legal name of this data source
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartnerLegalName {
      get { return partnerLegalName_; }
      set {
        partnerLegalName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "redirect_url" field.</summary>
    public const int RedirectUrlFieldNumber = 23;
    private string redirectUrl_ = "";
    /// <summary>
    /// Redirect URL to complete transfer config setup for 3rd party data sources.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RedirectUrl {
      get { return redirectUrl_; }
      set {
        redirectUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (DataSourceId != other.DataSourceId) return false;
      if (DisplayName != other.DisplayName) return false;
      if (Description != other.Description) return false;
      if (ClientId != other.ClientId) return false;
      if(!scopes_.Equals(other.scopes_)) return false;
      if (TransferType != other.TransferType) return false;
      if (SupportsMultipleTransfers != other.SupportsMultipleTransfers) return false;
      if (UpdateDeadlineSeconds != other.UpdateDeadlineSeconds) return false;
      if (DefaultSchedule != other.DefaultSchedule) return false;
      if (SupportsCustomSchedule != other.SupportsCustomSchedule) return false;
      if(!parameters_.Equals(other.parameters_)) return false;
      if (HelpUrl != other.HelpUrl) return false;
      if (AuthorizationType != other.AuthorizationType) return false;
      if (DataRefreshType != other.DataRefreshType) return false;
      if (DefaultDataRefreshWindowDays != other.DefaultDataRefreshWindowDays) return false;
      if (ManualRunsDisabled != other.ManualRunsDisabled) return false;
      if (!object.Equals(MinimumScheduleInterval, other.MinimumScheduleInterval)) return false;
      if (PartnerLegalName != other.PartnerLegalName) return false;
      if (RedirectUrl != other.RedirectUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DataSourceId.Length != 0) hash ^= DataSourceId.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (ClientId.Length != 0) hash ^= ClientId.GetHashCode();
      hash ^= scopes_.GetHashCode();
      if (TransferType != 0) hash ^= TransferType.GetHashCode();
      if (SupportsMultipleTransfers != false) hash ^= SupportsMultipleTransfers.GetHashCode();
      if (UpdateDeadlineSeconds != 0) hash ^= UpdateDeadlineSeconds.GetHashCode();
      if (DefaultSchedule.Length != 0) hash ^= DefaultSchedule.GetHashCode();
      if (SupportsCustomSchedule != false) hash ^= SupportsCustomSchedule.GetHashCode();
      hash ^= parameters_.GetHashCode();
      if (HelpUrl.Length != 0) hash ^= HelpUrl.GetHashCode();
      if (AuthorizationType != 0) hash ^= AuthorizationType.GetHashCode();
      if (DataRefreshType != 0) hash ^= DataRefreshType.GetHashCode();
      if (DefaultDataRefreshWindowDays != 0) hash ^= DefaultDataRefreshWindowDays.GetHashCode();
      if (ManualRunsDisabled != false) hash ^= ManualRunsDisabled.GetHashCode();
      if (minimumScheduleInterval_ != null) hash ^= MinimumScheduleInterval.GetHashCode();
      if (PartnerLegalName.Length != 0) hash ^= PartnerLegalName.GetHashCode();
      if (RedirectUrl.Length != 0) hash ^= RedirectUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (DataSourceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DataSourceId);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DisplayName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (ClientId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ClientId);
      }
      scopes_.WriteTo(output, _repeated_scopes_codec);
      if (TransferType != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) TransferType);
      }
      if (SupportsMultipleTransfers != false) {
        output.WriteRawTag(64);
        output.WriteBool(SupportsMultipleTransfers);
      }
      if (UpdateDeadlineSeconds != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(UpdateDeadlineSeconds);
      }
      if (DefaultSchedule.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(DefaultSchedule);
      }
      if (SupportsCustomSchedule != false) {
        output.WriteRawTag(88);
        output.WriteBool(SupportsCustomSchedule);
      }
      parameters_.WriteTo(output, _repeated_parameters_codec);
      if (HelpUrl.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(HelpUrl);
      }
      if (AuthorizationType != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) AuthorizationType);
      }
      if (DataRefreshType != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) DataRefreshType);
      }
      if (DefaultDataRefreshWindowDays != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(DefaultDataRefreshWindowDays);
      }
      if (ManualRunsDisabled != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(ManualRunsDisabled);
      }
      if (minimumScheduleInterval_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(MinimumScheduleInterval);
      }
      if (PartnerLegalName.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(PartnerLegalName);
      }
      if (RedirectUrl.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(RedirectUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DataSourceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataSourceId);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (ClientId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
      }
      size += scopes_.CalculateSize(_repeated_scopes_codec);
      if (TransferType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TransferType);
      }
      if (SupportsMultipleTransfers != false) {
        size += 1 + 1;
      }
      if (UpdateDeadlineSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpdateDeadlineSeconds);
      }
      if (DefaultSchedule.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefaultSchedule);
      }
      if (SupportsCustomSchedule != false) {
        size += 1 + 1;
      }
      size += parameters_.CalculateSize(_repeated_parameters_codec);
      if (HelpUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HelpUrl);
      }
      if (AuthorizationType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AuthorizationType);
      }
      if (DataRefreshType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataRefreshType);
      }
      if (DefaultDataRefreshWindowDays != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultDataRefreshWindowDays);
      }
      if (ManualRunsDisabled != false) {
        size += 2 + 1;
      }
      if (minimumScheduleInterval_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinimumScheduleInterval);
      }
      if (PartnerLegalName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PartnerLegalName);
      }
      if (RedirectUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RedirectUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataSource other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DataSourceId.Length != 0) {
        DataSourceId = other.DataSourceId;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.ClientId.Length != 0) {
        ClientId = other.ClientId;
      }
      scopes_.Add(other.scopes_);
      if (other.TransferType != 0) {
        TransferType = other.TransferType;
      }
      if (other.SupportsMultipleTransfers != false) {
        SupportsMultipleTransfers = other.SupportsMultipleTransfers;
      }
      if (other.UpdateDeadlineSeconds != 0) {
        UpdateDeadlineSeconds = other.UpdateDeadlineSeconds;
      }
      if (other.DefaultSchedule.Length != 0) {
        DefaultSchedule = other.DefaultSchedule;
      }
      if (other.SupportsCustomSchedule != false) {
        SupportsCustomSchedule = other.SupportsCustomSchedule;
      }
      parameters_.Add(other.parameters_);
      if (other.HelpUrl.Length != 0) {
        HelpUrl = other.HelpUrl;
      }
      if (other.AuthorizationType != 0) {
        AuthorizationType = other.AuthorizationType;
      }
      if (other.DataRefreshType != 0) {
        DataRefreshType = other.DataRefreshType;
      }
      if (other.DefaultDataRefreshWindowDays != 0) {
        DefaultDataRefreshWindowDays = other.DefaultDataRefreshWindowDays;
      }
      if (other.ManualRunsDisabled != false) {
        ManualRunsDisabled = other.ManualRunsDisabled;
      }
      if (other.minimumScheduleInterval_ != null) {
        if (minimumScheduleInterval_ == null) {
          minimumScheduleInterval_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        MinimumScheduleInterval.MergeFrom(other.MinimumScheduleInterval);
      }
      if (other.PartnerLegalName.Length != 0) {
        PartnerLegalName = other.PartnerLegalName;
      }
      if (other.RedirectUrl.Length != 0) {
        RedirectUrl = other.RedirectUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            DataSourceId = input.ReadString();
            break;
          }
          case 26: {
            DisplayName = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            ClientId = input.ReadString();
            break;
          }
          case 50: {
            scopes_.AddEntriesFrom(input, _repeated_scopes_codec);
            break;
          }
          case 56: {
            transferType_ = (global::Google.Cloud.BigQuery.DataTransfer.V1.TransferType) input.ReadEnum();
            break;
          }
          case 64: {
            SupportsMultipleTransfers = input.ReadBool();
            break;
          }
          case 72: {
            UpdateDeadlineSeconds = input.ReadInt32();
            break;
          }
          case 82: {
            DefaultSchedule = input.ReadString();
            break;
          }
          case 88: {
            SupportsCustomSchedule = input.ReadBool();
            break;
          }
          case 98: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
          case 106: {
            HelpUrl = input.ReadString();
            break;
          }
          case 112: {
            authorizationType_ = (global::Google.Cloud.BigQuery.DataTransfer.V1.DataSource.Types.AuthorizationType) input.ReadEnum();
            break;
          }
          case 120: {
            dataRefreshType_ = (global::Google.Cloud.BigQuery.DataTransfer.V1.DataSource.Types.DataRefreshType) input.ReadEnum();
            break;
          }
          case 128: {
            DefaultDataRefreshWindowDays = input.ReadInt32();
            break;
          }
          case 136: {
            ManualRunsDisabled = input.ReadBool();
            break;
          }
          case 146: {
            if (minimumScheduleInterval_ == null) {
              minimumScheduleInterval_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(minimumScheduleInterval_);
            break;
          }
          case 178: {
            PartnerLegalName = input.ReadString();
            break;
          }
          case 186: {
            RedirectUrl = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DataSource message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The type of authorization needed for this data source.
      /// </summary>
      public enum AuthorizationType {
        /// <summary>
        /// Type unspecified.
        /// </summary>
        [pbr::OriginalName("AUTHORIZATION_TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Use OAuth 2 authorization codes that can be exchanged
        /// for a refresh token on the backend.
        /// </summary>
        [pbr::OriginalName("AUTHORIZATION_CODE")] AuthorizationCode = 1,
        /// <summary>
        /// Return an authorization code for a given Google+ page that can then be
        /// exchanged for a refresh token on the backend.
        /// </summary>
        [pbr::OriginalName("GOOGLE_PLUS_AUTHORIZATION_CODE")] GooglePlusAuthorizationCode = 2,
      }

      /// <summary>
      /// Represents how the data source supports data auto refresh.
      /// </summary>
      public enum DataRefreshType {
        /// <summary>
        /// The data source won't support data auto refresh, which is default value.
        /// </summary>
        [pbr::OriginalName("DATA_REFRESH_TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// The data source supports data auto refresh, and runs will be scheduled
        /// for the past few days. Does not allow custom values to be set for each
        /// transfer config.
        /// </summary>
        [pbr::OriginalName("SLIDING_WINDOW")] SlidingWindow = 1,
        /// <summary>
        /// The data source supports data auto refresh, and runs will be scheduled
        /// for the past few days. Allows custom values to be set for each transfer
        /// config.
        /// </summary>
        [pbr::OriginalName("CUSTOM_SLIDING_WINDOW")] CustomSlidingWindow = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// A request to get data source info.
  /// </summary>
  public sealed partial class GetDataSourceRequest : pb::IMessage<GetDataSourceRequest> {
    private static readonly pb::MessageParser<GetDataSourceRequest> _parser = new pb::MessageParser<GetDataSourceRequest>(() => new GetDataSourceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDataSourceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDataSourceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDataSourceRequest(GetDataSourceRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDataSourceRequest Clone() {
      return new GetDataSourceRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The field will contain name of the resource requested, for example:
    /// `projects/{project_id}/dataSources/{data_source_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDataSourceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDataSourceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDataSourceRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to list supported data sources and their data transfer settings.
  /// </summary>
  public sealed partial class ListDataSourcesRequest : pb::IMessage<ListDataSourcesRequest> {
    private static readonly pb::MessageParser<ListDataSourcesRequest> _parser = new pb::MessageParser<ListDataSourcesRequest>(() => new ListDataSourcesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDataSourcesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDataSourcesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDataSourcesRequest(ListDataSourcesRequest other) : this() {
      parent_ = other.parent_;
      pageToken_ = other.pageToken_;
      pageSize_ = other.pageSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDataSourcesRequest Clone() {
      return new ListDataSourcesRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The BigQuery project id for which data sources should be returned.
    /// Must be in the form: `projects/{project_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Pagination token, which can be used to request a specific page
    /// of `ListDataSourcesRequest` list results. For multiple-page
    /// results, `ListDataSourcesResponse` outputs
    /// a `next_page` token, which can be used as the
    /// `page_token` value to request the next page of list results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 4;
    private int pageSize_;
    /// <summary>
    /// Page size. The default page size is the maximum value of 1000 results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDataSourcesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDataSourcesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (PageToken != other.PageToken) return false;
      if (PageSize != other.PageSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (PageSize != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PageSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDataSourcesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
          case 32: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Returns list of supported data sources and their metadata.
  /// </summary>
  public sealed partial class ListDataSourcesResponse : pb::IMessage<ListDataSourcesResponse> {
    private static readonly pb::MessageParser<ListDataSourcesResponse> _parser = new pb::MessageParser<ListDataSourcesResponse>(() => new ListDataSourcesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDataSourcesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDataSourcesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDataSourcesResponse(ListDataSourcesResponse other) : this() {
      dataSources_ = other.dataSources_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDataSourcesResponse Clone() {
      return new ListDataSourcesResponse(this);
    }

    /// <summary>Field number for the "data_sources" field.</summary>
    public const int DataSourcesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSource> _repeated_dataSources_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.BigQuery.DataTransfer.V1.DataSource.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSource> dataSources_ = new pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSource>();
    /// <summary>
    /// List of supported data sources and their transfer settings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSource> DataSources {
      get { return dataSources_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// Output only. The next-pagination token. For multiple-page list results,
    /// this token can be used as the
    /// `ListDataSourcesRequest.page_token`
    /// to request the next page of list results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDataSourcesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDataSourcesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dataSources_.Equals(other.dataSources_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dataSources_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dataSources_.WriteTo(output, _repeated_dataSources_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dataSources_.CalculateSize(_repeated_dataSources_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDataSourcesResponse other) {
      if (other == null) {
        return;
      }
      dataSources_.Add(other.dataSources_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dataSources_.AddEntriesFrom(input, _repeated_dataSources_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A request to create a data transfer configuration. If new credentials are
  /// needed for this transfer configuration, an authorization code must be
  /// provided. If an authorization code is provided, the transfer configuration
  /// will be associated with the user id corresponding to the
  /// authorization code. Otherwise, the transfer configuration will be associated
  /// with the calling user.
  /// </summary>
  public sealed partial class CreateTransferConfigRequest : pb::IMessage<CreateTransferConfigRequest> {
    private static readonly pb::MessageParser<CreateTransferConfigRequest> _parser = new pb::MessageParser<CreateTransferConfigRequest>(() => new CreateTransferConfigRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateTransferConfigRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTransferConfigRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTransferConfigRequest(CreateTransferConfigRequest other) : this() {
      parent_ = other.parent_;
      transferConfig_ = other.transferConfig_ != null ? other.transferConfig_.Clone() : null;
      authorizationCode_ = other.authorizationCode_;
      versionInfo_ = other.versionInfo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTransferConfigRequest Clone() {
      return new CreateTransferConfigRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The BigQuery project id where the transfer configuration should be created.
    /// Must be in the format projects/{project_id}/locations/{location_id}
    /// If specified location and location of the destination bigquery dataset
    /// do not match - the request will fail.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transfer_config" field.</summary>
    public const int TransferConfigFieldNumber = 2;
    private global::Google.Cloud.BigQuery.DataTransfer.V1.TransferConfig transferConfig_;
    /// <summary>
    /// Data transfer configuration to create.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.BigQuery.DataTransfer.V1.TransferConfig TransferConfig {
      get { return transferConfig_; }
      set {
        transferConfig_ = value;
      }
    }

    /// <summary>Field number for the "authorization_code" field.</summary>
    public const int AuthorizationCodeFieldNumber = 3;
    private string authorizationCode_ = "";
    /// <summary>
    /// Optional OAuth2 authorization code to use with this transfer configuration.
    /// This is required if new credentials are needed, as indicated by
    /// `CheckValidCreds`.
    /// In order to obtain authorization_code, please make a
    /// request to
    /// https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?client_id=&lt;datatransferapiclientid>&amp;scope=&lt;data_source_scopes>&amp;redirect_uri=&lt;redirect_uri>
    ///
    /// * client_id should be OAuth client_id of BigQuery DTS API for the given
    ///   data source returned by ListDataSources method.
    /// * data_source_scopes are the scopes returned by ListDataSources method.
    /// * redirect_uri is an optional parameter. If not specified, then
    ///   authorization code is posted to the opener of authorization flow window.
    ///   Otherwise it will be sent to the redirect uri. A special value of
    ///   urn:ietf:wg:oauth:2.0:oob means that authorization code should be
    ///   returned in the title bar of the browser, with the page text prompting
    ///   the user to copy the code and paste it in the application.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthorizationCode {
      get { return authorizationCode_; }
      set {
        authorizationCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version_info" field.</summary>
    public const int VersionInfoFieldNumber = 5;
    private string versionInfo_ = "";
    /// <summary>
    /// Optional version info. If users want to find a very recent access token,
    /// that is, immediately after approving access, users have to set the
    /// version_info claim in the token request. To obtain the version_info, users
    /// must use the "none+gsession" response type. which be return a
    /// version_info back in the authorization response which be be put in a JWT
    /// claim in the token request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionInfo {
      get { return versionInfo_; }
      set {
        versionInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateTransferConfigRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateTransferConfigRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (!object.Equals(TransferConfig, other.TransferConfig)) return false;
      if (AuthorizationCode != other.AuthorizationCode) return false;
      if (VersionInfo != other.VersionInfo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (transferConfig_ != null) hash ^= TransferConfig.GetHashCode();
      if (AuthorizationCode.Length != 0) hash ^= AuthorizationCode.GetHashCode();
      if (VersionInfo.Length != 0) hash ^= VersionInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (transferConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TransferConfig);
      }
      if (AuthorizationCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AuthorizationCode);
      }
      if (VersionInfo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(VersionInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (transferConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransferConfig);
      }
      if (AuthorizationCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthorizationCode);
      }
      if (VersionInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateTransferConfigRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.transferConfig_ != null) {
        if (transferConfig_ == null) {
          transferConfig_ = new global::Google.Cloud.BigQuery.DataTransfer.V1.TransferConfig();
        }
        TransferConfig.MergeFrom(other.TransferConfig);
      }
      if (other.AuthorizationCode.Length != 0) {
        AuthorizationCode = other.AuthorizationCode;
      }
      if (other.VersionInfo.Length != 0) {
        VersionInfo = other.VersionInfo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            if (transferConfig_ == null) {
              transferConfig_ = new global::Google.Cloud.BigQuery.DataTransfer.V1.TransferConfig();
            }
            input.ReadMessage(transferConfig_);
            break;
          }
          case 26: {
            AuthorizationCode = input.ReadString();
            break;
          }
          case 42: {
            VersionInfo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A request to update a transfer configuration. To update the user id of the
  /// transfer configuration, an authorization code needs to be provided.
  /// </summary>
  public sealed partial class UpdateTransferConfigRequest : pb::IMessage<UpdateTransferConfigRequest> {
    private static readonly pb::MessageParser<UpdateTransferConfigRequest> _parser = new pb::MessageParser<UpdateTransferConfigRequest>(() => new UpdateTransferConfigRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateTransferConfigRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTransferConfigRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTransferConfigRequest(UpdateTransferConfigRequest other) : this() {
      transferConfig_ = other.transferConfig_ != null ? other.transferConfig_.Clone() : null;
      authorizationCode_ = other.authorizationCode_;
      updateMask_ = other.updateMask_ != null ? other.updateMask_.Clone() : null;
      versionInfo_ = other.versionInfo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTransferConfigRequest Clone() {
      return new UpdateTransferConfigRequest(this);
    }

    /// <summary>Field number for the "transfer_config" field.</summary>
    public const int TransferConfigFieldNumber = 1;
    private global::Google.Cloud.BigQuery.DataTransfer.V1.TransferConfig transferConfig_;
    /// <summary>
    /// Data transfer configuration to create.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.BigQuery.DataTransfer.V1.TransferConfig TransferConfig {
      get { return transferConfig_; }
      set {
        transferConfig_ = value;
      }
    }

    /// <summary>Field number for the "authorization_code" field.</summary>
    public const int AuthorizationCodeFieldNumber = 3;
    private string authorizationCode_ = "";
    /// <summary>
    /// Optional OAuth2 authorization code to use with this transfer configuration.
    /// If it is provided, the transfer configuration will be associated with the
    /// authorizing user.
    /// In order to obtain authorization_code, please make a
    /// request to
    /// https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?client_id=&lt;datatransferapiclientid>&amp;scope=&lt;data_source_scopes>&amp;redirect_uri=&lt;redirect_uri>
    ///
    /// * client_id should be OAuth client_id of BigQuery DTS API for the given
    ///   data source returned by ListDataSources method.
    /// * data_source_scopes are the scopes returned by ListDataSources method.
    /// * redirect_uri is an optional parameter. If not specified, then
    ///   authorization code is posted to the opener of authorization flow window.
    ///   Otherwise it will be sent to the redirect uri. A special value of
    ///   urn:ietf:wg:oauth:2.0:oob means that authorization code should be
    ///   returned in the title bar of the browser, with the page text prompting
    ///   the user to copy the code and paste it in the application.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthorizationCode {
      get { return authorizationCode_; }
      set {
        authorizationCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    /// Required list of fields to be updated in this request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    /// <summary>Field number for the "version_info" field.</summary>
    public const int VersionInfoFieldNumber = 5;
    private string versionInfo_ = "";
    /// <summary>
    /// Optional version info. If users want to find a very recent access token,
    /// that is, immediately after approving access, users have to set the
    /// version_info claim in the token request. To obtain the version_info, users
    /// must use the "none+gsession" response type. which be return a
    /// version_info back in the authorization response which be be put in a JWT
    /// claim in the token request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionInfo {
      get { return versionInfo_; }
      set {
        versionInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateTransferConfigRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateTransferConfigRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TransferConfig, other.TransferConfig)) return false;
      if (AuthorizationCode != other.AuthorizationCode) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      if (VersionInfo != other.VersionInfo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transferConfig_ != null) hash ^= TransferConfig.GetHashCode();
      if (AuthorizationCode.Length != 0) hash ^= AuthorizationCode.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      if (VersionInfo.Length != 0) hash ^= VersionInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transferConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TransferConfig);
      }
      if (AuthorizationCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AuthorizationCode);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UpdateMask);
      }
      if (VersionInfo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(VersionInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transferConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransferConfig);
      }
      if (AuthorizationCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthorizationCode);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      if (VersionInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateTransferConfigRequest other) {
      if (other == null) {
        return;
      }
      if (other.transferConfig_ != null) {
        if (transferConfig_ == null) {
          transferConfig_ = new global::Google.Cloud.BigQuery.DataTransfer.V1.TransferConfig();
        }
        TransferConfig.MergeFrom(other.TransferConfig);
      }
      if (other.AuthorizationCode.Length != 0) {
        AuthorizationCode = other.AuthorizationCode;
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
      if (other.VersionInfo.Length != 0) {
        VersionInfo = other.VersionInfo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (transferConfig_ == null) {
              transferConfig_ = new global::Google.Cloud.BigQuery.DataTransfer.V1.TransferConfig();
            }
            input.ReadMessage(transferConfig_);
            break;
          }
          case 26: {
            AuthorizationCode = input.ReadString();
            break;
          }
          case 34: {
            if (updateMask_ == null) {
              updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(updateMask_);
            break;
          }
          case 42: {
            VersionInfo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A request to get data transfer information.
  /// </summary>
  public sealed partial class GetTransferConfigRequest : pb::IMessage<GetTransferConfigRequest> {
    private static readonly pb::MessageParser<GetTransferConfigRequest> _parser = new pb::MessageParser<GetTransferConfigRequest>(() => new GetTransferConfigRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTransferConfigRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransferConfigRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransferConfigRequest(GetTransferConfigRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransferConfigRequest Clone() {
      return new GetTransferConfigRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The field will contain name of the resource requested, for example:
    /// `projects/{project_id}/transferConfigs/{config_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTransferConfigRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTransferConfigRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTransferConfigRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A request to delete data transfer information. All associated transfer runs
  /// and log messages will be deleted as well.
  /// </summary>
  public sealed partial class DeleteTransferConfigRequest : pb::IMessage<DeleteTransferConfigRequest> {
    private static readonly pb::MessageParser<DeleteTransferConfigRequest> _parser = new pb::MessageParser<DeleteTransferConfigRequest>(() => new DeleteTransferConfigRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteTransferConfigRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteTransferConfigRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteTransferConfigRequest(DeleteTransferConfigRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteTransferConfigRequest Clone() {
      return new DeleteTransferConfigRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The field will contain name of the resource requested, for example:
    /// `projects/{project_id}/transferConfigs/{config_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteTransferConfigRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteTransferConfigRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteTransferConfigRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A request to get data transfer run information.
  /// </summary>
  public sealed partial class GetTransferRunRequest : pb::IMessage<GetTransferRunRequest> {
    private static readonly pb::MessageParser<GetTransferRunRequest> _parser = new pb::MessageParser<GetTransferRunRequest>(() => new GetTransferRunRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTransferRunRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransferRunRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransferRunRequest(GetTransferRunRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransferRunRequest Clone() {
      return new GetTransferRunRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The field will contain name of the resource requested, for example:
    /// `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTransferRunRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTransferRunRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTransferRunRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A request to delete data transfer run information.
  /// </summary>
  public sealed partial class DeleteTransferRunRequest : pb::IMessage<DeleteTransferRunRequest> {
    private static readonly pb::MessageParser<DeleteTransferRunRequest> _parser = new pb::MessageParser<DeleteTransferRunRequest>(() => new DeleteTransferRunRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteTransferRunRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteTransferRunRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteTransferRunRequest(DeleteTransferRunRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteTransferRunRequest Clone() {
      return new DeleteTransferRunRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The field will contain name of the resource requested, for example:
    /// `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteTransferRunRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteTransferRunRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteTransferRunRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A request to list data transfers configured for a BigQuery project.
  /// </summary>
  public sealed partial class ListTransferConfigsRequest : pb::IMessage<ListTransferConfigsRequest> {
    private static readonly pb::MessageParser<ListTransferConfigsRequest> _parser = new pb::MessageParser<ListTransferConfigsRequest>(() => new ListTransferConfigsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListTransferConfigsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTransferConfigsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTransferConfigsRequest(ListTransferConfigsRequest other) : this() {
      parent_ = other.parent_;
      dataSourceIds_ = other.dataSourceIds_.Clone();
      pageToken_ = other.pageToken_;
      pageSize_ = other.pageSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTransferConfigsRequest Clone() {
      return new ListTransferConfigsRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The BigQuery project id for which data sources
    /// should be returned: `projects/{project_id}`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_source_ids" field.</summary>
    public const int DataSourceIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_dataSourceIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> dataSourceIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// When specified, only configurations of requested data sources are returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DataSourceIds {
      get { return dataSourceIds_; }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Pagination token, which can be used to request a specific page
    /// of `ListTransfersRequest` list results. For multiple-page
    /// results, `ListTransfersResponse` outputs
    /// a `next_page` token, which can be used as the
    /// `page_token` value to request the next page of list results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 4;
    private int pageSize_;
    /// <summary>
    /// Page size. The default page size is the maximum value of 1000 results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListTransferConfigsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListTransferConfigsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if(!dataSourceIds_.Equals(other.dataSourceIds_)) return false;
      if (PageToken != other.PageToken) return false;
      if (PageSize != other.PageSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      hash ^= dataSourceIds_.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      dataSourceIds_.WriteTo(output, _repeated_dataSourceIds_codec);
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (PageSize != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PageSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      size += dataSourceIds_.CalculateSize(_repeated_dataSourceIds_codec);
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListTransferConfigsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      dataSourceIds_.Add(other.dataSourceIds_);
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            dataSourceIds_.AddEntriesFrom(input, _repeated_dataSourceIds_codec);
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
          case 32: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The returned list of pipelines in the project.
  /// </summary>
  public sealed partial class ListTransferConfigsResponse : pb::IMessage<ListTransferConfigsResponse> {
    private static readonly pb::MessageParser<ListTransferConfigsResponse> _parser = new pb::MessageParser<ListTransferConfigsResponse>(() => new ListTransferConfigsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListTransferConfigsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTransferConfigsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTransferConfigsResponse(ListTransferConfigsResponse other) : this() {
      transferConfigs_ = other.transferConfigs_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTransferConfigsResponse Clone() {
      return new ListTransferConfigsResponse(this);
    }

    /// <summary>Field number for the "transfer_configs" field.</summary>
    public const int TransferConfigsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferConfig> _repeated_transferConfigs_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.BigQuery.DataTransfer.V1.TransferConfig.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferConfig> transferConfigs_ = new pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferConfig>();
    /// <summary>
    /// Output only. The stored pipeline transfer configurations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferConfig> TransferConfigs {
      get { return transferConfigs_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// Output only. The next-pagination token. For multiple-page list results,
    /// this token can be used as the
    /// `ListTransferConfigsRequest.page_token`
    /// to request the next page of list results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListTransferConfigsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListTransferConfigsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!transferConfigs_.Equals(other.transferConfigs_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= transferConfigs_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      transferConfigs_.WriteTo(output, _repeated_transferConfigs_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += transferConfigs_.CalculateSize(_repeated_transferConfigs_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListTransferConfigsResponse other) {
      if (other == null) {
        return;
      }
      transferConfigs_.Add(other.transferConfigs_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            transferConfigs_.AddEntriesFrom(input, _repeated_transferConfigs_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A request to list data transfer runs. UI can use this method to show/filter
  /// specific data transfer runs. The data source can use this method to request
  /// all scheduled transfer runs.
  /// </summary>
  public sealed partial class ListTransferRunsRequest : pb::IMessage<ListTransferRunsRequest> {
    private static readonly pb::MessageParser<ListTransferRunsRequest> _parser = new pb::MessageParser<ListTransferRunsRequest>(() => new ListTransferRunsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListTransferRunsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTransferRunsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTransferRunsRequest(ListTransferRunsRequest other) : this() {
      parent_ = other.parent_;
      states_ = other.states_.Clone();
      pageToken_ = other.pageToken_;
      pageSize_ = other.pageSize_;
      runAttempt_ = other.runAttempt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTransferRunsRequest Clone() {
      return new ListTransferRunsRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// Name of transfer configuration for which transfer runs should be retrieved.
    /// Format of transfer configuration resource name is:
    /// `projects/{project_id}/transferConfigs/{config_id}`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "states" field.</summary>
    public const int StatesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferState> _repeated_states_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::Google.Cloud.BigQuery.DataTransfer.V1.TransferState) x);
    private readonly pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferState> states_ = new pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferState>();
    /// <summary>
    /// When specified, only transfer runs with requested states are returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferState> States {
      get { return states_; }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Pagination token, which can be used to request a specific page
    /// of `ListTransferRunsRequest` list results. For multiple-page
    /// results, `ListTransferRunsResponse` outputs
    /// a `next_page` token, which can be used as the
    /// `page_token` value to request the next page of list results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 4;
    private int pageSize_;
    /// <summary>
    /// Page size. The default page size is the maximum value of 1000 results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "run_attempt" field.</summary>
    public const int RunAttemptFieldNumber = 5;
    private global::Google.Cloud.BigQuery.DataTransfer.V1.ListTransferRunsRequest.Types.RunAttempt runAttempt_ = 0;
    /// <summary>
    /// Indicates how run attempts are to be pulled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.BigQuery.DataTransfer.V1.ListTransferRunsRequest.Types.RunAttempt RunAttempt {
      get { return runAttempt_; }
      set {
        runAttempt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListTransferRunsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListTransferRunsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if(!states_.Equals(other.states_)) return false;
      if (PageToken != other.PageToken) return false;
      if (PageSize != other.PageSize) return false;
      if (RunAttempt != other.RunAttempt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      hash ^= states_.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (RunAttempt != 0) hash ^= RunAttempt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      states_.WriteTo(output, _repeated_states_codec);
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (PageSize != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PageSize);
      }
      if (RunAttempt != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) RunAttempt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      size += states_.CalculateSize(_repeated_states_codec);
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (RunAttempt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RunAttempt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListTransferRunsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      states_.Add(other.states_);
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.RunAttempt != 0) {
        RunAttempt = other.RunAttempt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            states_.AddEntriesFrom(input, _repeated_states_codec);
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
          case 32: {
            PageSize = input.ReadInt32();
            break;
          }
          case 40: {
            runAttempt_ = (global::Google.Cloud.BigQuery.DataTransfer.V1.ListTransferRunsRequest.Types.RunAttempt) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ListTransferRunsRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Represents which runs should be pulled.
      /// </summary>
      public enum RunAttempt {
        /// <summary>
        /// All runs should be returned.
        /// </summary>
        [pbr::OriginalName("RUN_ATTEMPT_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Only latest run per day should be returned.
        /// </summary>
        [pbr::OriginalName("LATEST")] Latest = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// The returned list of pipelines in the project.
  /// </summary>
  public sealed partial class ListTransferRunsResponse : pb::IMessage<ListTransferRunsResponse> {
    private static readonly pb::MessageParser<ListTransferRunsResponse> _parser = new pb::MessageParser<ListTransferRunsResponse>(() => new ListTransferRunsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListTransferRunsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTransferRunsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTransferRunsResponse(ListTransferRunsResponse other) : this() {
      transferRuns_ = other.transferRuns_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTransferRunsResponse Clone() {
      return new ListTransferRunsResponse(this);
    }

    /// <summary>Field number for the "transfer_runs" field.</summary>
    public const int TransferRunsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun> _repeated_transferRuns_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun> transferRuns_ = new pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun>();
    /// <summary>
    /// Output only. The stored pipeline transfer runs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun> TransferRuns {
      get { return transferRuns_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// Output only. The next-pagination token. For multiple-page list results,
    /// this token can be used as the
    /// `ListTransferRunsRequest.page_token`
    /// to request the next page of list results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListTransferRunsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListTransferRunsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!transferRuns_.Equals(other.transferRuns_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= transferRuns_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      transferRuns_.WriteTo(output, _repeated_transferRuns_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += transferRuns_.CalculateSize(_repeated_transferRuns_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListTransferRunsResponse other) {
      if (other == null) {
        return;
      }
      transferRuns_.Add(other.transferRuns_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            transferRuns_.AddEntriesFrom(input, _repeated_transferRuns_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A request to get user facing log messages associated with data transfer run.
  /// </summary>
  public sealed partial class ListTransferLogsRequest : pb::IMessage<ListTransferLogsRequest> {
    private static readonly pb::MessageParser<ListTransferLogsRequest> _parser = new pb::MessageParser<ListTransferLogsRequest>(() => new ListTransferLogsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListTransferLogsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTransferLogsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTransferLogsRequest(ListTransferLogsRequest other) : this() {
      parent_ = other.parent_;
      pageToken_ = other.pageToken_;
      pageSize_ = other.pageSize_;
      messageTypes_ = other.messageTypes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTransferLogsRequest Clone() {
      return new ListTransferLogsRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// Transfer run name in the form:
    /// `projects/{project_id}/transferConfigs/{config_Id}/runs/{run_id}`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 4;
    private string pageToken_ = "";
    /// <summary>
    /// Pagination token, which can be used to request a specific page
    /// of `ListTransferLogsRequest` list results. For multiple-page
    /// results, `ListTransferLogsResponse` outputs
    /// a `next_page` token, which can be used as the
    /// `page_token` value to request the next page of list results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 5;
    private int pageSize_;
    /// <summary>
    /// Page size. The default page size is the maximum value of 1000 results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "message_types" field.</summary>
    public const int MessageTypesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferMessage.Types.MessageSeverity> _repeated_messageTypes_codec
        = pb::FieldCodec.ForEnum(50, x => (int) x, x => (global::Google.Cloud.BigQuery.DataTransfer.V1.TransferMessage.Types.MessageSeverity) x);
    private readonly pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferMessage.Types.MessageSeverity> messageTypes_ = new pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferMessage.Types.MessageSeverity>();
    /// <summary>
    /// Message types to return. If not populated - INFO, WARNING and ERROR
    /// messages are returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferMessage.Types.MessageSeverity> MessageTypes {
      get { return messageTypes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListTransferLogsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListTransferLogsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (PageToken != other.PageToken) return false;
      if (PageSize != other.PageSize) return false;
      if(!messageTypes_.Equals(other.messageTypes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      hash ^= messageTypes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PageToken);
      }
      if (PageSize != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PageSize);
      }
      messageTypes_.WriteTo(output, _repeated_messageTypes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      size += messageTypes_.CalculateSize(_repeated_messageTypes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListTransferLogsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      messageTypes_.Add(other.messageTypes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 34: {
            PageToken = input.ReadString();
            break;
          }
          case 40: {
            PageSize = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            messageTypes_.AddEntriesFrom(input, _repeated_messageTypes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The returned list transfer run messages.
  /// </summary>
  public sealed partial class ListTransferLogsResponse : pb::IMessage<ListTransferLogsResponse> {
    private static readonly pb::MessageParser<ListTransferLogsResponse> _parser = new pb::MessageParser<ListTransferLogsResponse>(() => new ListTransferLogsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListTransferLogsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTransferLogsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTransferLogsResponse(ListTransferLogsResponse other) : this() {
      transferMessages_ = other.transferMessages_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTransferLogsResponse Clone() {
      return new ListTransferLogsResponse(this);
    }

    /// <summary>Field number for the "transfer_messages" field.</summary>
    public const int TransferMessagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferMessage> _repeated_transferMessages_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.BigQuery.DataTransfer.V1.TransferMessage.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferMessage> transferMessages_ = new pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferMessage>();
    /// <summary>
    /// Output only. The stored pipeline transfer messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferMessage> TransferMessages {
      get { return transferMessages_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// Output only. The next-pagination token. For multiple-page list results,
    /// this token can be used as the
    /// `GetTransferRunLogRequest.page_token`
    /// to request the next page of list results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListTransferLogsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListTransferLogsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!transferMessages_.Equals(other.transferMessages_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= transferMessages_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      transferMessages_.WriteTo(output, _repeated_transferMessages_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += transferMessages_.CalculateSize(_repeated_transferMessages_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListTransferLogsResponse other) {
      if (other == null) {
        return;
      }
      transferMessages_.Add(other.transferMessages_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            transferMessages_.AddEntriesFrom(input, _repeated_transferMessages_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A request to determine whether the user has valid credentials. This method
  /// is used to limit the number of OAuth popups in the user interface. The
  /// user id is inferred from the API call context.
  /// If the data source has the Google+ authorization type, this method
  /// returns false, as it cannot be determined whether the credentials are
  /// already valid merely based on the user id.
  /// </summary>
  public sealed partial class CheckValidCredsRequest : pb::IMessage<CheckValidCredsRequest> {
    private static readonly pb::MessageParser<CheckValidCredsRequest> _parser = new pb::MessageParser<CheckValidCredsRequest>(() => new CheckValidCredsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckValidCredsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckValidCredsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckValidCredsRequest(CheckValidCredsRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckValidCredsRequest Clone() {
      return new CheckValidCredsRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The data source in the form:
    /// `projects/{project_id}/dataSources/{data_source_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckValidCredsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckValidCredsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckValidCredsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A response indicating whether the credentials exist and are valid.
  /// </summary>
  public sealed partial class CheckValidCredsResponse : pb::IMessage<CheckValidCredsResponse> {
    private static readonly pb::MessageParser<CheckValidCredsResponse> _parser = new pb::MessageParser<CheckValidCredsResponse>(() => new CheckValidCredsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckValidCredsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckValidCredsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckValidCredsResponse(CheckValidCredsResponse other) : this() {
      hasValidCreds_ = other.hasValidCreds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckValidCredsResponse Clone() {
      return new CheckValidCredsResponse(this);
    }

    /// <summary>Field number for the "has_valid_creds" field.</summary>
    public const int HasValidCredsFieldNumber = 1;
    private bool hasValidCreds_;
    /// <summary>
    /// If set to `true`, the credentials exist and are valid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValidCreds {
      get { return hasValidCreds_; }
      set {
        hasValidCreds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckValidCredsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckValidCredsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HasValidCreds != other.HasValidCreds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasValidCreds != false) hash ^= HasValidCreds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasValidCreds != false) {
        output.WriteRawTag(8);
        output.WriteBool(HasValidCreds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasValidCreds != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckValidCredsResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasValidCreds != false) {
        HasValidCreds = other.HasValidCreds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HasValidCreds = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A request to schedule transfer runs for a time range.
  /// </summary>
  public sealed partial class ScheduleTransferRunsRequest : pb::IMessage<ScheduleTransferRunsRequest> {
    private static readonly pb::MessageParser<ScheduleTransferRunsRequest> _parser = new pb::MessageParser<ScheduleTransferRunsRequest>(() => new ScheduleTransferRunsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScheduleTransferRunsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScheduleTransferRunsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScheduleTransferRunsRequest(ScheduleTransferRunsRequest other) : this() {
      parent_ = other.parent_;
      labels_ = other.labels_.Clone();
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScheduleTransferRunsRequest Clone() {
      return new ScheduleTransferRunsRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// Transfer configuration name in the form:
    /// `projects/{project_id}/transferConfigs/{config_id}`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 50);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// User labels to add to the scheduled runs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    /// <summary>
    /// Start time of the range of transfer runs. For example,
    /// `"2017-05-25T00:00:00+00:00"`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
    /// <summary>
    /// End time of the range of transfer runs. For example,
    /// `"2017-05-30T00:00:00+00:00"`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScheduleTransferRunsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScheduleTransferRunsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (startTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EndTime);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScheduleTransferRunsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      labels_.Add(other.labels_);
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          startTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          endTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            if (startTime_ == null) {
              startTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(startTime_);
            break;
          }
          case 26: {
            if (endTime_ == null) {
              endTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(endTime_);
            break;
          }
          case 50: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A response to schedule transfer runs for a time range.
  /// </summary>
  public sealed partial class ScheduleTransferRunsResponse : pb::IMessage<ScheduleTransferRunsResponse> {
    private static readonly pb::MessageParser<ScheduleTransferRunsResponse> _parser = new pb::MessageParser<ScheduleTransferRunsResponse>(() => new ScheduleTransferRunsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScheduleTransferRunsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScheduleTransferRunsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScheduleTransferRunsResponse(ScheduleTransferRunsResponse other) : this() {
      runs_ = other.runs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScheduleTransferRunsResponse Clone() {
      return new ScheduleTransferRunsResponse(this);
    }

    /// <summary>Field number for the "runs" field.</summary>
    public const int RunsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun> _repeated_runs_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun> runs_ = new pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun>();
    /// <summary>
    /// The transfer runs that were scheduled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun> Runs {
      get { return runs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScheduleTransferRunsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScheduleTransferRunsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!runs_.Equals(other.runs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= runs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      runs_.WriteTo(output, _repeated_runs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += runs_.CalculateSize(_repeated_runs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScheduleTransferRunsResponse other) {
      if (other == null) {
        return;
      }
      runs_.Add(other.runs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            runs_.AddEntriesFrom(input, _repeated_runs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A request to start manual transfer runs.
  /// </summary>
  public sealed partial class StartManualTransferRunsRequest : pb::IMessage<StartManualTransferRunsRequest> {
    private static readonly pb::MessageParser<StartManualTransferRunsRequest> _parser = new pb::MessageParser<StartManualTransferRunsRequest>(() => new StartManualTransferRunsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartManualTransferRunsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartManualTransferRunsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartManualTransferRunsRequest(StartManualTransferRunsRequest other) : this() {
      parent_ = other.parent_;
      labels_ = other.labels_.Clone();
      switch (other.TimeCase) {
        case TimeOneofCase.RequestedTimeRange:
          RequestedTimeRange = other.RequestedTimeRange.Clone();
          break;
        case TimeOneofCase.RequestedRunTime:
          RequestedRunTime = other.RequestedRunTime.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartManualTransferRunsRequest Clone() {
      return new StartManualTransferRunsRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// Transfer configuration name in the form:
    /// `projects/{project_id}/transferConfigs/{config_id}`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// User labels to add to the backfilled runs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "requested_time_range" field.</summary>
    public const int RequestedTimeRangeFieldNumber = 3;
    /// <summary>
    /// Time range for the transfer runs that should be started.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.BigQuery.DataTransfer.V1.StartManualTransferRunsRequest.Types.TimeRange RequestedTimeRange {
      get { return timeCase_ == TimeOneofCase.RequestedTimeRange ? (global::Google.Cloud.BigQuery.DataTransfer.V1.StartManualTransferRunsRequest.Types.TimeRange) time_ : null; }
      set {
        time_ = value;
        timeCase_ = value == null ? TimeOneofCase.None : TimeOneofCase.RequestedTimeRange;
      }
    }

    /// <summary>Field number for the "requested_run_time" field.</summary>
    public const int RequestedRunTimeFieldNumber = 4;
    /// <summary>
    /// Specific run_time for a transfer run to be started. The
    /// requested_run_time must not be in the future.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp RequestedRunTime {
      get { return timeCase_ == TimeOneofCase.RequestedRunTime ? (global::Google.Protobuf.WellKnownTypes.Timestamp) time_ : null; }
      set {
        time_ = value;
        timeCase_ = value == null ? TimeOneofCase.None : TimeOneofCase.RequestedRunTime;
      }
    }

    private object time_;
    /// <summary>Enum of possible cases for the "time" oneof.</summary>
    public enum TimeOneofCase {
      None = 0,
      RequestedTimeRange = 3,
      RequestedRunTime = 4,
    }
    private TimeOneofCase timeCase_ = TimeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeOneofCase TimeCase {
      get { return timeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTime() {
      timeCase_ = TimeOneofCase.None;
      time_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartManualTransferRunsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartManualTransferRunsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (!object.Equals(RequestedTimeRange, other.RequestedTimeRange)) return false;
      if (!object.Equals(RequestedRunTime, other.RequestedRunTime)) return false;
      if (TimeCase != other.TimeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (timeCase_ == TimeOneofCase.RequestedTimeRange) hash ^= RequestedTimeRange.GetHashCode();
      if (timeCase_ == TimeOneofCase.RequestedRunTime) hash ^= RequestedRunTime.GetHashCode();
      hash ^= (int) timeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (timeCase_ == TimeOneofCase.RequestedTimeRange) {
        output.WriteRawTag(26);
        output.WriteMessage(RequestedTimeRange);
      }
      if (timeCase_ == TimeOneofCase.RequestedRunTime) {
        output.WriteRawTag(34);
        output.WriteMessage(RequestedRunTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (timeCase_ == TimeOneofCase.RequestedTimeRange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestedTimeRange);
      }
      if (timeCase_ == TimeOneofCase.RequestedRunTime) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestedRunTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartManualTransferRunsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      labels_.Add(other.labels_);
      switch (other.TimeCase) {
        case TimeOneofCase.RequestedTimeRange:
          if (RequestedTimeRange == null) {
            RequestedTimeRange = new global::Google.Cloud.BigQuery.DataTransfer.V1.StartManualTransferRunsRequest.Types.TimeRange();
          }
          RequestedTimeRange.MergeFrom(other.RequestedTimeRange);
          break;
        case TimeOneofCase.RequestedRunTime:
          if (RequestedRunTime == null) {
            RequestedRunTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          RequestedRunTime.MergeFrom(other.RequestedRunTime);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 26: {
            global::Google.Cloud.BigQuery.DataTransfer.V1.StartManualTransferRunsRequest.Types.TimeRange subBuilder = new global::Google.Cloud.BigQuery.DataTransfer.V1.StartManualTransferRunsRequest.Types.TimeRange();
            if (timeCase_ == TimeOneofCase.RequestedTimeRange) {
              subBuilder.MergeFrom(RequestedTimeRange);
            }
            input.ReadMessage(subBuilder);
            RequestedTimeRange = subBuilder;
            break;
          }
          case 34: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (timeCase_ == TimeOneofCase.RequestedRunTime) {
              subBuilder.MergeFrom(RequestedRunTime);
            }
            input.ReadMessage(subBuilder);
            RequestedRunTime = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the StartManualTransferRunsRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A specification for a time range, this will request transfer runs with
      /// run_time between start_time (inclusive) and end_time (exclusive).
      /// </summary>
      public sealed partial class TimeRange : pb::IMessage<TimeRange> {
        private static readonly pb::MessageParser<TimeRange> _parser = new pb::MessageParser<TimeRange>(() => new TimeRange());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TimeRange> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.BigQuery.DataTransfer.V1.StartManualTransferRunsRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimeRange() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimeRange(TimeRange other) : this() {
          startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
          endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimeRange Clone() {
          return new TimeRange(this);
        }

        /// <summary>Field number for the "start_time" field.</summary>
        public const int StartTimeFieldNumber = 1;
        private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
        /// <summary>
        /// Start time of the range of transfer runs. For example,
        /// `"2017-05-25T00:00:00+00:00"`. The start_time must be strictly less than
        /// the end_time. Creates transfer runs where run_time is in the range betwen
        /// start_time (inclusive) and end_time (exlusive).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
          get { return startTime_; }
          set {
            startTime_ = value;
          }
        }

        /// <summary>Field number for the "end_time" field.</summary>
        public const int EndTimeFieldNumber = 2;
        private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
        /// <summary>
        /// End time of the range of transfer runs. For example,
        /// `"2017-05-30T00:00:00+00:00"`. The end_time must not be in the future.
        /// Creates transfer runs where run_time is in the range betwen start_time
        /// (inclusive) and end_time (exlusive).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
          get { return endTime_; }
          set {
            endTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TimeRange);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TimeRange other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(StartTime, other.StartTime)) return false;
          if (!object.Equals(EndTime, other.EndTime)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (startTime_ != null) hash ^= StartTime.GetHashCode();
          if (endTime_ != null) hash ^= EndTime.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (startTime_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(StartTime);
          }
          if (endTime_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(EndTime);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (startTime_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
          }
          if (endTime_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TimeRange other) {
          if (other == null) {
            return;
          }
          if (other.startTime_ != null) {
            if (startTime_ == null) {
              startTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            StartTime.MergeFrom(other.StartTime);
          }
          if (other.endTime_ != null) {
            if (endTime_ == null) {
              endTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            EndTime.MergeFrom(other.EndTime);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (startTime_ == null) {
                  startTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(startTime_);
                break;
              }
              case 18: {
                if (endTime_ == null) {
                  endTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(endTime_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// A response to start manual transfer runs.
  /// </summary>
  public sealed partial class StartManualTransferRunsResponse : pb::IMessage<StartManualTransferRunsResponse> {
    private static readonly pb::MessageParser<StartManualTransferRunsResponse> _parser = new pb::MessageParser<StartManualTransferRunsResponse>(() => new StartManualTransferRunsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartManualTransferRunsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartManualTransferRunsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartManualTransferRunsResponse(StartManualTransferRunsResponse other) : this() {
      runs_ = other.runs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartManualTransferRunsResponse Clone() {
      return new StartManualTransferRunsResponse(this);
    }

    /// <summary>Field number for the "runs" field.</summary>
    public const int RunsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun> _repeated_runs_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun> runs_ = new pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun>();
    /// <summary>
    /// The transfer runs that were created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun> Runs {
      get { return runs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartManualTransferRunsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartManualTransferRunsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!runs_.Equals(other.runs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= runs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      runs_.WriteTo(output, _repeated_runs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += runs_.CalculateSize(_repeated_runs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartManualTransferRunsResponse other) {
      if (other == null) {
        return;
      }
      runs_.Add(other.runs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            runs_.AddEntriesFrom(input, _repeated_runs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A request to enable data transfer service for a project.
  /// </summary>
  public sealed partial class EnableDataTransferServiceRequest : pb::IMessage<EnableDataTransferServiceRequest> {
    private static readonly pb::MessageParser<EnableDataTransferServiceRequest> _parser = new pb::MessageParser<EnableDataTransferServiceRequest>(() => new EnableDataTransferServiceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnableDataTransferServiceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableDataTransferServiceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableDataTransferServiceRequest(EnableDataTransferServiceRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableDataTransferServiceRequest Clone() {
      return new EnableDataTransferServiceRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the project resource in the form:
    /// `projects/{project_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnableDataTransferServiceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnableDataTransferServiceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnableDataTransferServiceRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A request to determine whether data transfer is enabled for the project.
  /// </summary>
  public sealed partial class IsDataTransferServiceEnabledRequest : pb::IMessage<IsDataTransferServiceEnabledRequest> {
    private static readonly pb::MessageParser<IsDataTransferServiceEnabledRequest> _parser = new pb::MessageParser<IsDataTransferServiceEnabledRequest>(() => new IsDataTransferServiceEnabledRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IsDataTransferServiceEnabledRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsDataTransferServiceEnabledRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsDataTransferServiceEnabledRequest(IsDataTransferServiceEnabledRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsDataTransferServiceEnabledRequest Clone() {
      return new IsDataTransferServiceEnabledRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the project resource in the form:
    /// `projects/{project_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IsDataTransferServiceEnabledRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IsDataTransferServiceEnabledRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IsDataTransferServiceEnabledRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A response to indicate whether data transfer service is enabled
  /// for the project.
  /// </summary>
  public sealed partial class IsDataTransferServiceEnabledResponse : pb::IMessage<IsDataTransferServiceEnabledResponse> {
    private static readonly pb::MessageParser<IsDataTransferServiceEnabledResponse> _parser = new pb::MessageParser<IsDataTransferServiceEnabledResponse>(() => new IsDataTransferServiceEnabledResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IsDataTransferServiceEnabledResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsDataTransferServiceEnabledResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsDataTransferServiceEnabledResponse(IsDataTransferServiceEnabledResponse other) : this() {
      enabled_ = other.enabled_;
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsDataTransferServiceEnabledResponse Clone() {
      return new IsDataTransferServiceEnabledResponse(this);
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 1;
    private bool enabled_;
    /// <summary>
    /// Indicates whether the data transfer service is enabled for the project.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private string reason_ = "";
    /// <summary>
    /// A string that contains additional information about why the service is
    /// deemed not enabled. This is only available when `enable` is false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IsDataTransferServiceEnabledResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IsDataTransferServiceEnabledResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enabled != other.Enabled) return false;
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enabled);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IsDataTransferServiceEnabledResponse other) {
      if (other == null) {
        return;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Enabled = input.ReadBool();
            break;
          }
          case 18: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
