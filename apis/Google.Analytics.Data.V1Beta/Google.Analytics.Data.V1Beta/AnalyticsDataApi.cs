// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/analytics/data/v1beta/analytics_data_api.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Analytics.Data.V1Beta {

  /// <summary>Holder for reflection information generated from google/analytics/data/v1beta/analytics_data_api.proto</summary>
  public static partial class AnalyticsDataApiReflection {

    #region Descriptor
    /// <summary>File descriptor for google/analytics/data/v1beta/analytics_data_api.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AnalyticsDataApiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjVnb29nbGUvYW5hbHl0aWNzL2RhdGEvdjFiZXRhL2FuYWx5dGljc19kYXRh",
            "X2FwaS5wcm90bxIcZ29vZ2xlLmFuYWx5dGljcy5kYXRhLnYxYmV0YRonZ29v",
            "Z2xlL2FuYWx5dGljcy9kYXRhL3YxYmV0YS9kYXRhLnByb3RvGhxnb29nbGUv",
            "YXBpL2Fubm90YXRpb25zLnByb3RvGhdnb29nbGUvYXBpL2NsaWVudC5wcm90",
            "bxofZ29vZ2xlL2FwaS9maWVsZF9iZWhhdmlvci5wcm90bxoZZ29vZ2xlL2Fw",
            "aS9yZXNvdXJjZS5wcm90byLoAQoITWV0YWRhdGESDAoEbmFtZRgDIAEoCRJD",
            "CgpkaW1lbnNpb25zGAEgAygLMi8uZ29vZ2xlLmFuYWx5dGljcy5kYXRhLnYx",
            "YmV0YS5EaW1lbnNpb25NZXRhZGF0YRI9CgdtZXRyaWNzGAIgAygLMiwuZ29v",
            "Z2xlLmFuYWx5dGljcy5kYXRhLnYxYmV0YS5NZXRyaWNNZXRhZGF0YTpK6kFH",
            "CiVhbmFseXRpY3NkYXRhLmdvb2dsZWFwaXMuY29tL01ldGFkYXRhEh5wcm9w",
            "ZXJ0aWVzL3twcm9wZXJ0eX0vbWV0YWRhdGEipAUKEFJ1blJlcG9ydFJlcXVl",
            "c3QSEAoIcHJvcGVydHkYASABKAkSOwoKZGltZW5zaW9ucxgCIAMoCzInLmdv",
            "b2dsZS5hbmFseXRpY3MuZGF0YS52MWJldGEuRGltZW5zaW9uEjUKB21ldHJp",
            "Y3MYAyADKAsyJC5nb29nbGUuYW5hbHl0aWNzLmRhdGEudjFiZXRhLk1ldHJp",
            "YxI8CgtkYXRlX3JhbmdlcxgEIAMoCzInLmdvb2dsZS5hbmFseXRpY3MuZGF0",
            "YS52MWJldGEuRGF0ZVJhbmdlEkgKEGRpbWVuc2lvbl9maWx0ZXIYBSABKAsy",
            "Li5nb29nbGUuYW5hbHl0aWNzLmRhdGEudjFiZXRhLkZpbHRlckV4cHJlc3Np",
            "b24SRQoNbWV0cmljX2ZpbHRlchgGIAEoCzIuLmdvb2dsZS5hbmFseXRpY3Mu",
            "ZGF0YS52MWJldGEuRmlsdGVyRXhwcmVzc2lvbhIRCglwYWdlX3NpemUYByAB",
            "KAUSEgoKcGFnZV90b2tlbhgIIAEoCRJMChNtZXRyaWNfYWdncmVnYXRpb25z",
            "GAkgAygOMi8uZ29vZ2xlLmFuYWx5dGljcy5kYXRhLnYxYmV0YS5NZXRyaWNB",
            "Z2dyZWdhdGlvbhI4CglvcmRlcl9ieXMYCiADKAsyJS5nb29nbGUuYW5hbHl0",
            "aWNzLmRhdGEudjFiZXRhLk9yZGVyQnkSFQoNY3VycmVuY3lfY29kZRgLIAEo",
            "CRI9Cgtjb2hvcnRfc3BlYxgMIAEoCzIoLmdvb2dsZS5hbmFseXRpY3MuZGF0",
            "YS52MWJldGEuQ29ob3J0U3BlYxIXCg9rZWVwX2VtcHR5X3Jvd3MYDSABKAgS",
            "HQoVcmV0dXJuX3Byb3BlcnR5X3F1b3RhGA4gASgIIqMEChFSdW5SZXBvcnRS",
            "ZXNwb25zZRJIChFkaW1lbnNpb25faGVhZGVycxgBIAMoCzItLmdvb2dsZS5h",
            "bmFseXRpY3MuZGF0YS52MWJldGEuRGltZW5zaW9uSGVhZGVyEkIKDm1ldHJp",
            "Y19oZWFkZXJzGAIgAygLMiouZ29vZ2xlLmFuYWx5dGljcy5kYXRhLnYxYmV0",
            "YS5NZXRyaWNIZWFkZXISLwoEcm93cxgDIAMoCzIhLmdvb2dsZS5hbmFseXRp",
            "Y3MuZGF0YS52MWJldGEuUm93EjEKBnRvdGFscxgEIAMoCzIhLmdvb2dsZS5h",
            "bmFseXRpY3MuZGF0YS52MWJldGEuUm93EjMKCG1heGltdW1zGAUgAygLMiEu",
            "Z29vZ2xlLmFuYWx5dGljcy5kYXRhLnYxYmV0YS5Sb3cSMwoIbWluaW11bXMY",
            "BiADKAsyIS5nb29nbGUuYW5hbHl0aWNzLmRhdGEudjFiZXRhLlJvdxIXCg9u",
            "ZXh0X3BhZ2VfdG9rZW4YByABKAkSEgoKdG90YWxfc2l6ZRgIIAEoBRJACght",
            "ZXRhZGF0YRgJIAEoCzIuLmdvb2dsZS5hbmFseXRpY3MuZGF0YS52MWJldGEu",
            "UmVzcG9uc2VNZXRhRGF0YRJDCg5wcm9wZXJ0eV9xdW90YRgKIAEoCzIrLmdv",
            "b2dsZS5hbmFseXRpY3MuZGF0YS52MWJldGEuUHJvcGVydHlRdW90YSKvBAoV",
            "UnVuUGl2b3RSZXBvcnRSZXF1ZXN0EhAKCHByb3BlcnR5GAEgASgJEjsKCmRp",
            "bWVuc2lvbnMYAiADKAsyJy5nb29nbGUuYW5hbHl0aWNzLmRhdGEudjFiZXRh",
            "LkRpbWVuc2lvbhI1CgdtZXRyaWNzGAMgAygLMiQuZ29vZ2xlLmFuYWx5dGlj",
            "cy5kYXRhLnYxYmV0YS5NZXRyaWMSPAoLZGF0ZV9yYW5nZXMYBCADKAsyJy5n",
            "b29nbGUuYW5hbHl0aWNzLmRhdGEudjFiZXRhLkRhdGVSYW5nZRIzCgZwaXZv",
            "dHMYBSADKAsyIy5nb29nbGUuYW5hbHl0aWNzLmRhdGEudjFiZXRhLlBpdm90",
            "EkgKEGRpbWVuc2lvbl9maWx0ZXIYBiABKAsyLi5nb29nbGUuYW5hbHl0aWNz",
            "LmRhdGEudjFiZXRhLkZpbHRlckV4cHJlc3Npb24SRQoNbWV0cmljX2ZpbHRl",
            "chgHIAEoCzIuLmdvb2dsZS5hbmFseXRpY3MuZGF0YS52MWJldGEuRmlsdGVy",
            "RXhwcmVzc2lvbhIVCg1jdXJyZW5jeV9jb2RlGAggASgJEj0KC2NvaG9ydF9z",
            "cGVjGAkgASgLMiguZ29vZ2xlLmFuYWx5dGljcy5kYXRhLnYxYmV0YS5Db2hv",
            "cnRTcGVjEhcKD2tlZXBfZW1wdHlfcm93cxgKIAEoCBIdChVyZXR1cm5fcHJv",
            "cGVydHlfcXVvdGEYCyABKAgi1wMKFlJ1blBpdm90UmVwb3J0UmVzcG9uc2US",
            "QAoNcGl2b3RfaGVhZGVycxgBIAMoCzIpLmdvb2dsZS5hbmFseXRpY3MuZGF0",
            "YS52MWJldGEuUGl2b3RIZWFkZXISSAoRZGltZW5zaW9uX2hlYWRlcnMYAiAD",
            "KAsyLS5nb29nbGUuYW5hbHl0aWNzLmRhdGEudjFiZXRhLkRpbWVuc2lvbkhl",
            "YWRlchJCCg5tZXRyaWNfaGVhZGVycxgDIAMoCzIqLmdvb2dsZS5hbmFseXRp",
            "Y3MuZGF0YS52MWJldGEuTWV0cmljSGVhZGVyEi8KBHJvd3MYBCADKAsyIS5n",
            "b29nbGUuYW5hbHl0aWNzLmRhdGEudjFiZXRhLlJvdxI1CgphZ2dyZWdhdGVz",
            "GAUgAygLMiEuZ29vZ2xlLmFuYWx5dGljcy5kYXRhLnYxYmV0YS5Sb3cSQAoI",
            "bWV0YWRhdGEYBiABKAsyLi5nb29nbGUuYW5hbHl0aWNzLmRhdGEudjFiZXRh",
            "LlJlc3BvbnNlTWV0YURhdGESQwoOcHJvcGVydHlfcXVvdGEYByABKAsyKy5n",
            "b29nbGUuYW5hbHl0aWNzLmRhdGEudjFiZXRhLlByb3BlcnR5UXVvdGEibAoW",
            "QmF0Y2hSdW5SZXBvcnRzUmVxdWVzdBIQCghwcm9wZXJ0eRgBIAEoCRJACghy",
            "ZXF1ZXN0cxgCIAMoCzIuLmdvb2dsZS5hbmFseXRpY3MuZGF0YS52MWJldGEu",
            "UnVuUmVwb3J0UmVxdWVzdCJbChdCYXRjaFJ1blJlcG9ydHNSZXNwb25zZRJA",
            "CgdyZXBvcnRzGAEgAygLMi8uZ29vZ2xlLmFuYWx5dGljcy5kYXRhLnYxYmV0",
            "YS5SdW5SZXBvcnRSZXNwb25zZSJ2ChtCYXRjaFJ1blBpdm90UmVwb3J0c1Jl",
            "cXVlc3QSEAoIcHJvcGVydHkYASABKAkSRQoIcmVxdWVzdHMYAiADKAsyMy5n",
            "b29nbGUuYW5hbHl0aWNzLmRhdGEudjFiZXRhLlJ1blBpdm90UmVwb3J0UmVx",
            "dWVzdCJrChxCYXRjaFJ1blBpdm90UmVwb3J0c1Jlc3BvbnNlEksKDXBpdm90",
            "X3JlcG9ydHMYASADKAsyNC5nb29nbGUuYW5hbHl0aWNzLmRhdGEudjFiZXRh",
            "LlJ1blBpdm90UmVwb3J0UmVzcG9uc2UiUQoSR2V0TWV0YWRhdGFSZXF1ZXN0",
            "EjsKBG5hbWUYASABKAlCLeBBAvpBJwolYW5hbHl0aWNzZGF0YS5nb29nbGVh",
            "cGlzLmNvbS9NZXRhZGF0YSLrAwoYUnVuUmVhbHRpbWVSZXBvcnRSZXF1ZXN0",
            "EhAKCHByb3BlcnR5GAEgASgJEjsKCmRpbWVuc2lvbnMYAiADKAsyJy5nb29n",
            "bGUuYW5hbHl0aWNzLmRhdGEudjFiZXRhLkRpbWVuc2lvbhI1CgdtZXRyaWNz",
            "GAMgAygLMiQuZ29vZ2xlLmFuYWx5dGljcy5kYXRhLnYxYmV0YS5NZXRyaWMS",
            "SAoQZGltZW5zaW9uX2ZpbHRlchgEIAEoCzIuLmdvb2dsZS5hbmFseXRpY3Mu",
            "ZGF0YS52MWJldGEuRmlsdGVyRXhwcmVzc2lvbhJFCg1tZXRyaWNfZmlsdGVy",
            "GAUgASgLMi4uZ29vZ2xlLmFuYWx5dGljcy5kYXRhLnYxYmV0YS5GaWx0ZXJF",
            "eHByZXNzaW9uEhEKCXBhZ2Vfc2l6ZRgGIAEoBRJMChNtZXRyaWNfYWdncmVn",
            "YXRpb25zGAcgAygOMi8uZ29vZ2xlLmFuYWx5dGljcy5kYXRhLnYxYmV0YS5N",
            "ZXRyaWNBZ2dyZWdhdGlvbhI4CglvcmRlcl9ieXMYCCADKAsyJS5nb29nbGUu",
            "YW5hbHl0aWNzLmRhdGEudjFiZXRhLk9yZGVyQnkSHQoVcmV0dXJuX3Byb3Bl",
            "cnR5X3F1b3RhGAkgASgIItADChlSdW5SZWFsdGltZVJlcG9ydFJlc3BvbnNl",
            "EkgKEWRpbWVuc2lvbl9oZWFkZXJzGAEgAygLMi0uZ29vZ2xlLmFuYWx5dGlj",
            "cy5kYXRhLnYxYmV0YS5EaW1lbnNpb25IZWFkZXISQgoObWV0cmljX2hlYWRl",
            "cnMYAiADKAsyKi5nb29nbGUuYW5hbHl0aWNzLmRhdGEudjFiZXRhLk1ldHJp",
            "Y0hlYWRlchIvCgRyb3dzGAMgAygLMiEuZ29vZ2xlLmFuYWx5dGljcy5kYXRh",
            "LnYxYmV0YS5Sb3cSMQoGdG90YWxzGAQgAygLMiEuZ29vZ2xlLmFuYWx5dGlj",
            "cy5kYXRhLnYxYmV0YS5Sb3cSMwoIbWF4aW11bXMYBSADKAsyIS5nb29nbGUu",
            "YW5hbHl0aWNzLmRhdGEudjFiZXRhLlJvdxIzCghtaW5pbXVtcxgGIAMoCzIh",
            "Lmdvb2dsZS5hbmFseXRpY3MuZGF0YS52MWJldGEuUm93EhIKCnRvdGFsX3Np",
            "emUYByABKAUSQwoOcHJvcGVydHlfcXVvdGEYCCABKAsyKy5nb29nbGUuYW5h",
            "bHl0aWNzLmRhdGEudjFiZXRhLlByb3BlcnR5UXVvdGEy4wkKEUJldGFBbmFs",
            "eXRpY3NEYXRhEqIBCglSdW5SZXBvcnQSLi5nb29nbGUuYW5hbHl0aWNzLmRh",
            "dGEudjFiZXRhLlJ1blJlcG9ydFJlcXVlc3QaLy5nb29nbGUuYW5hbHl0aWNz",
            "LmRhdGEudjFiZXRhLlJ1blJlcG9ydFJlc3BvbnNlIjSC0+STAi4iKS92MWJl",
            "dGEve3Byb3BlcnR5PXByb3BlcnRpZXMvKn06cnVuUmVwb3J0OgEqErYBCg5S",
            "dW5QaXZvdFJlcG9ydBIzLmdvb2dsZS5hbmFseXRpY3MuZGF0YS52MWJldGEu",
            "UnVuUGl2b3RSZXBvcnRSZXF1ZXN0GjQuZ29vZ2xlLmFuYWx5dGljcy5kYXRh",
            "LnYxYmV0YS5SdW5QaXZvdFJlcG9ydFJlc3BvbnNlIjmC0+STAjMiLi92MWJl",
            "dGEve3Byb3BlcnR5PXByb3BlcnRpZXMvKn06cnVuUGl2b3RSZXBvcnQ6ASoS",
            "ugEKD0JhdGNoUnVuUmVwb3J0cxI0Lmdvb2dsZS5hbmFseXRpY3MuZGF0YS52",
            "MWJldGEuQmF0Y2hSdW5SZXBvcnRzUmVxdWVzdBo1Lmdvb2dsZS5hbmFseXRp",
            "Y3MuZGF0YS52MWJldGEuQmF0Y2hSdW5SZXBvcnRzUmVzcG9uc2UiOoLT5JMC",
            "NCIvL3YxYmV0YS97cHJvcGVydHk9cHJvcGVydGllcy8qfTpiYXRjaFJ1blJl",
            "cG9ydHM6ASoSzgEKFEJhdGNoUnVuUGl2b3RSZXBvcnRzEjkuZ29vZ2xlLmFu",
            "YWx5dGljcy5kYXRhLnYxYmV0YS5CYXRjaFJ1blBpdm90UmVwb3J0c1JlcXVl",
            "c3QaOi5nb29nbGUuYW5hbHl0aWNzLmRhdGEudjFiZXRhLkJhdGNoUnVuUGl2",
            "b3RSZXBvcnRzUmVzcG9uc2UiP4LT5JMCOSI0L3YxYmV0YS97cHJvcGVydHk9",
            "cHJvcGVydGllcy8qfTpiYXRjaFJ1blBpdm90UmVwb3J0czoBKhKcAQoLR2V0",
            "TWV0YWRhdGESMC5nb29nbGUuYW5hbHl0aWNzLmRhdGEudjFiZXRhLkdldE1l",
            "dGFkYXRhUmVxdWVzdBomLmdvb2dsZS5hbmFseXRpY3MuZGF0YS52MWJldGEu",
            "TWV0YWRhdGEiM4LT5JMCJhIkL3YxYmV0YS97bmFtZT1wcm9wZXJ0aWVzLyov",
            "bWV0YWRhdGF92kEEbmFtZRLCAQoRUnVuUmVhbHRpbWVSZXBvcnQSNi5nb29n",
            "bGUuYW5hbHl0aWNzLmRhdGEudjFiZXRhLlJ1blJlYWx0aW1lUmVwb3J0UmVx",
            "dWVzdBo3Lmdvb2dsZS5hbmFseXRpY3MuZGF0YS52MWJldGEuUnVuUmVhbHRp",
            "bWVSZXBvcnRSZXNwb25zZSI8gtPkkwI2IjEvdjFiZXRhL3twcm9wZXJ0eT1w",
            "cm9wZXJ0aWVzLyp9OnJ1blJlYWx0aW1lUmVwb3J0OgEqGn7KQRxhbmFseXRp",
            "Y3NkYXRhLmdvb2dsZWFwaXMuY29t0kFcaHR0cHM6Ly93d3cuZ29vZ2xlYXBp",
            "cy5jb20vYXV0aC9hbmFseXRpY3MsaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5j",
            "b20vYXV0aC9hbmFseXRpY3MucmVhZG9ubHlCfQogY29tLmdvb2dsZS5hbmFs",
            "eXRpY3MuZGF0YS52MWJldGFCFUFuYWx5dGljc0RhdGFBcGlQcm90b1ABWkBn",
            "b29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVhcGlzL2FuYWx5dGlj",
            "cy9kYXRhL3YxYmV0YTtkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Analytics.Data.V1Beta.DataReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Api.ClientReflection.Descriptor, global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Api.ResourceReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Analytics.Data.V1Beta.Metadata), global::Google.Analytics.Data.V1Beta.Metadata.Parser, new[]{ "Name", "Dimensions", "Metrics" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Analytics.Data.V1Beta.RunReportRequest), global::Google.Analytics.Data.V1Beta.RunReportRequest.Parser, new[]{ "Property", "Dimensions", "Metrics", "DateRanges", "DimensionFilter", "MetricFilter", "PageSize", "PageToken", "MetricAggregations", "OrderBys", "CurrencyCode", "CohortSpec", "KeepEmptyRows", "ReturnPropertyQuota" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Analytics.Data.V1Beta.RunReportResponse), global::Google.Analytics.Data.V1Beta.RunReportResponse.Parser, new[]{ "DimensionHeaders", "MetricHeaders", "Rows", "Totals", "Maximums", "Minimums", "NextPageToken", "TotalSize", "Metadata", "PropertyQuota" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Analytics.Data.V1Beta.RunPivotReportRequest), global::Google.Analytics.Data.V1Beta.RunPivotReportRequest.Parser, new[]{ "Property", "Dimensions", "Metrics", "DateRanges", "Pivots", "DimensionFilter", "MetricFilter", "CurrencyCode", "CohortSpec", "KeepEmptyRows", "ReturnPropertyQuota" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Analytics.Data.V1Beta.RunPivotReportResponse), global::Google.Analytics.Data.V1Beta.RunPivotReportResponse.Parser, new[]{ "PivotHeaders", "DimensionHeaders", "MetricHeaders", "Rows", "Aggregates", "Metadata", "PropertyQuota" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Analytics.Data.V1Beta.BatchRunReportsRequest), global::Google.Analytics.Data.V1Beta.BatchRunReportsRequest.Parser, new[]{ "Property", "Requests" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Analytics.Data.V1Beta.BatchRunReportsResponse), global::Google.Analytics.Data.V1Beta.BatchRunReportsResponse.Parser, new[]{ "Reports" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Analytics.Data.V1Beta.BatchRunPivotReportsRequest), global::Google.Analytics.Data.V1Beta.BatchRunPivotReportsRequest.Parser, new[]{ "Property", "Requests" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Analytics.Data.V1Beta.BatchRunPivotReportsResponse), global::Google.Analytics.Data.V1Beta.BatchRunPivotReportsResponse.Parser, new[]{ "PivotReports" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Analytics.Data.V1Beta.GetMetadataRequest), global::Google.Analytics.Data.V1Beta.GetMetadataRequest.Parser, new[]{ "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Analytics.Data.V1Beta.RunRealtimeReportRequest), global::Google.Analytics.Data.V1Beta.RunRealtimeReportRequest.Parser, new[]{ "Property", "Dimensions", "Metrics", "DimensionFilter", "MetricFilter", "PageSize", "MetricAggregations", "OrderBys", "ReturnPropertyQuota" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Analytics.Data.V1Beta.RunRealtimeReportResponse), global::Google.Analytics.Data.V1Beta.RunRealtimeReportResponse.Parser, new[]{ "DimensionHeaders", "MetricHeaders", "Rows", "Totals", "Maximums", "Minimums", "TotalSize", "PropertyQuota" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// The dimensions and metrics currently accepted in reporting methods.
  /// </summary>
  public sealed partial class Metadata : pb::IMessage<Metadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Metadata> _parser = new pb::MessageParser<Metadata>(() => new Metadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Metadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Analytics.Data.V1Beta.AnalyticsDataApiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metadata(Metadata other) : this() {
      name_ = other.name_;
      dimensions_ = other.dimensions_.Clone();
      metrics_ = other.metrics_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metadata Clone() {
      return new Metadata(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// Resource name of this metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dimensions" field.</summary>
    public const int DimensionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.DimensionMetadata> _repeated_dimensions_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Analytics.Data.V1Beta.DimensionMetadata.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.DimensionMetadata> dimensions_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.DimensionMetadata>();
    /// <summary>
    /// The dimension descriptions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.DimensionMetadata> Dimensions {
      get { return dimensions_; }
    }

    /// <summary>Field number for the "metrics" field.</summary>
    public const int MetricsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.MetricMetadata> _repeated_metrics_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Analytics.Data.V1Beta.MetricMetadata.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.MetricMetadata> metrics_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.MetricMetadata>();
    /// <summary>
    /// The metric descriptions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.MetricMetadata> Metrics {
      get { return metrics_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Metadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Metadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!dimensions_.Equals(other.dimensions_)) return false;
      if(!metrics_.Equals(other.metrics_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= dimensions_.GetHashCode();
      hash ^= metrics_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      dimensions_.WriteTo(output, _repeated_dimensions_codec);
      metrics_.WriteTo(output, _repeated_metrics_codec);
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      dimensions_.WriteTo(ref output, _repeated_dimensions_codec);
      metrics_.WriteTo(ref output, _repeated_metrics_codec);
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += dimensions_.CalculateSize(_repeated_dimensions_codec);
      size += metrics_.CalculateSize(_repeated_metrics_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Metadata other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      dimensions_.Add(other.dimensions_);
      metrics_.Add(other.metrics_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dimensions_.AddEntriesFrom(input, _repeated_dimensions_codec);
            break;
          }
          case 18: {
            metrics_.AddEntriesFrom(input, _repeated_metrics_codec);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            dimensions_.AddEntriesFrom(ref input, _repeated_dimensions_codec);
            break;
          }
          case 18: {
            metrics_.AddEntriesFrom(ref input, _repeated_metrics_codec);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The request to generate a report.
  /// </summary>
  public sealed partial class RunReportRequest : pb::IMessage<RunReportRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RunReportRequest> _parser = new pb::MessageParser<RunReportRequest>(() => new RunReportRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunReportRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Analytics.Data.V1Beta.AnalyticsDataApiReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunReportRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunReportRequest(RunReportRequest other) : this() {
      property_ = other.property_;
      dimensions_ = other.dimensions_.Clone();
      metrics_ = other.metrics_.Clone();
      dateRanges_ = other.dateRanges_.Clone();
      dimensionFilter_ = other.dimensionFilter_ != null ? other.dimensionFilter_.Clone() : null;
      metricFilter_ = other.metricFilter_ != null ? other.metricFilter_.Clone() : null;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      metricAggregations_ = other.metricAggregations_.Clone();
      orderBys_ = other.orderBys_.Clone();
      currencyCode_ = other.currencyCode_;
      cohortSpec_ = other.cohortSpec_ != null ? other.cohortSpec_.Clone() : null;
      keepEmptyRows_ = other.keepEmptyRows_;
      returnPropertyQuota_ = other.returnPropertyQuota_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunReportRequest Clone() {
      return new RunReportRequest(this);
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 1;
    private string property_ = "";
    /// <summary>
    /// A Google Analytics GA4 property identifier whose events are tracked.
    /// Specified in the URL path and not the body. To learn more, see [where to
    /// find your Property
    /// ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).
    /// Within a batch request, this property should either be unspecified or
    /// consistent with the batch-level property.
    ///
    /// Example: properties/1234
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Property {
      get { return property_; }
      set {
        property_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dimensions" field.</summary>
    public const int DimensionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.Dimension> _repeated_dimensions_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Analytics.Data.V1Beta.Dimension.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Dimension> dimensions_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Dimension>();
    /// <summary>
    /// The dimensions requested and displayed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Dimension> Dimensions {
      get { return dimensions_; }
    }

    /// <summary>Field number for the "metrics" field.</summary>
    public const int MetricsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.Metric> _repeated_metrics_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Analytics.Data.V1Beta.Metric.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Metric> metrics_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Metric>();
    /// <summary>
    /// The metrics requested and displayed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Metric> Metrics {
      get { return metrics_; }
    }

    /// <summary>Field number for the "date_ranges" field.</summary>
    public const int DateRangesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.DateRange> _repeated_dateRanges_codec
        = pb::FieldCodec.ForMessage(34, global::Google.Analytics.Data.V1Beta.DateRange.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.DateRange> dateRanges_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.DateRange>();
    /// <summary>
    /// Date ranges of data to read. If multiple date ranges are requested, each
    /// response row will contain a zero based date range index. If two date
    /// ranges overlap, the event data for the overlapping days is included in the
    /// response rows for both date ranges. In a cohort request, this `dateRanges`
    /// must be unspecified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.DateRange> DateRanges {
      get { return dateRanges_; }
    }

    /// <summary>Field number for the "dimension_filter" field.</summary>
    public const int DimensionFilterFieldNumber = 5;
    private global::Google.Analytics.Data.V1Beta.FilterExpression dimensionFilter_;
    /// <summary>
    /// The filter clause of dimensions. Dimensions must be requested to be used in
    /// this filter. Metrics cannot be used in this filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Analytics.Data.V1Beta.FilterExpression DimensionFilter {
      get { return dimensionFilter_; }
      set {
        dimensionFilter_ = value;
      }
    }

    /// <summary>Field number for the "metric_filter" field.</summary>
    public const int MetricFilterFieldNumber = 6;
    private global::Google.Analytics.Data.V1Beta.FilterExpression metricFilter_;
    /// <summary>
    /// The filter clause of metrics. Applied at post aggregation phase, similar to
    /// SQL having-clause. Metrics must be requested to be used in this filter.
    /// Dimensions cannot be used in this filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Analytics.Data.V1Beta.FilterExpression MetricFilter {
      get { return metricFilter_; }
      set {
        metricFilter_ = value;
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 7;
    private int pageSize_;
    /// <summary>
    /// Page size is for paging and specifies maximum number of rows to return. The
    /// API returns a maximum of 200,000 rows per request, no matter how many you
    /// ask for. Page size must be positive.
    ///
    /// The API can also return fewer rows than the requested `pageSize`, if there
    /// aren't as many dimension values as the `pageSize`. For instance, there are
    /// fewer than 300 possible values for the dimension `country`, so when
    /// reporting on only `country`, you can't get more than 300 rows, even if you
    /// set `pageSize` to a higher value.
    ///
    /// To learn more about this pagination parameter, see
    /// [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 8;
    private string pageToken_ = "";
    /// <summary>
    /// A continuation token to get the next page of the results. Adding this to
    /// the request will return the next page of rows after the `pageToken`. The
    /// `pageToken` should be the value returned in the `nextPageToken` parameter
    /// in the response.
    ///
    /// When paginating, all other parameters specified in `RunReportRequest` must
    /// match the call that provided the page token.
    ///
    /// To learn more about this pagination parameter, see
    /// [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metric_aggregations" field.</summary>
    public const int MetricAggregationsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.MetricAggregation> _repeated_metricAggregations_codec
        = pb::FieldCodec.ForEnum(74, x => (int) x, x => (global::Google.Analytics.Data.V1Beta.MetricAggregation) x);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.MetricAggregation> metricAggregations_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.MetricAggregation>();
    /// <summary>
    /// Aggregation of metrics. Aggregated metric values will be shown in rows
    /// where the dimension_values are set to "RESERVED_(MetricAggregation)".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.MetricAggregation> MetricAggregations {
      get { return metricAggregations_; }
    }

    /// <summary>Field number for the "order_bys" field.</summary>
    public const int OrderBysFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.OrderBy> _repeated_orderBys_codec
        = pb::FieldCodec.ForMessage(82, global::Google.Analytics.Data.V1Beta.OrderBy.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.OrderBy> orderBys_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.OrderBy>();
    /// <summary>
    /// Specifies how rows are ordered in the response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.OrderBy> OrderBys {
      get { return orderBys_; }
    }

    /// <summary>Field number for the "currency_code" field.</summary>
    public const int CurrencyCodeFieldNumber = 11;
    private string currencyCode_ = "";
    /// <summary>
    /// A currency code in ISO4217 format, such as "AED", "USD", "JPY".
    /// If the field is empty, the report uses the property's default currency.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrencyCode {
      get { return currencyCode_; }
      set {
        currencyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cohort_spec" field.</summary>
    public const int CohortSpecFieldNumber = 12;
    private global::Google.Analytics.Data.V1Beta.CohortSpec cohortSpec_;
    /// <summary>
    /// Cohort group associated with this request. If there is a cohort group
    /// in the request the 'cohort' dimension must be present.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Analytics.Data.V1Beta.CohortSpec CohortSpec {
      get { return cohortSpec_; }
      set {
        cohortSpec_ = value;
      }
    }

    /// <summary>Field number for the "keep_empty_rows" field.</summary>
    public const int KeepEmptyRowsFieldNumber = 13;
    private bool keepEmptyRows_;
    /// <summary>
    /// If false or unspecified, each row with all metrics equal to 0 will not be
    /// returned. If true, these rows will be returned if they are not separately
    /// removed by a filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool KeepEmptyRows {
      get { return keepEmptyRows_; }
      set {
        keepEmptyRows_ = value;
      }
    }

    /// <summary>Field number for the "return_property_quota" field.</summary>
    public const int ReturnPropertyQuotaFieldNumber = 14;
    private bool returnPropertyQuota_;
    /// <summary>
    /// Toggles whether to return the current state of this Analytics Property's
    /// quota. Quota is returned in [PropertyQuota](#PropertyQuota).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReturnPropertyQuota {
      get { return returnPropertyQuota_; }
      set {
        returnPropertyQuota_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunReportRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunReportRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Property != other.Property) return false;
      if(!dimensions_.Equals(other.dimensions_)) return false;
      if(!metrics_.Equals(other.metrics_)) return false;
      if(!dateRanges_.Equals(other.dateRanges_)) return false;
      if (!object.Equals(DimensionFilter, other.DimensionFilter)) return false;
      if (!object.Equals(MetricFilter, other.MetricFilter)) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      if(!metricAggregations_.Equals(other.metricAggregations_)) return false;
      if(!orderBys_.Equals(other.orderBys_)) return false;
      if (CurrencyCode != other.CurrencyCode) return false;
      if (!object.Equals(CohortSpec, other.CohortSpec)) return false;
      if (KeepEmptyRows != other.KeepEmptyRows) return false;
      if (ReturnPropertyQuota != other.ReturnPropertyQuota) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Property.Length != 0) hash ^= Property.GetHashCode();
      hash ^= dimensions_.GetHashCode();
      hash ^= metrics_.GetHashCode();
      hash ^= dateRanges_.GetHashCode();
      if (dimensionFilter_ != null) hash ^= DimensionFilter.GetHashCode();
      if (metricFilter_ != null) hash ^= MetricFilter.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      hash ^= metricAggregations_.GetHashCode();
      hash ^= orderBys_.GetHashCode();
      if (CurrencyCode.Length != 0) hash ^= CurrencyCode.GetHashCode();
      if (cohortSpec_ != null) hash ^= CohortSpec.GetHashCode();
      if (KeepEmptyRows != false) hash ^= KeepEmptyRows.GetHashCode();
      if (ReturnPropertyQuota != false) hash ^= ReturnPropertyQuota.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Property.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Property);
      }
      dimensions_.WriteTo(output, _repeated_dimensions_codec);
      metrics_.WriteTo(output, _repeated_metrics_codec);
      dateRanges_.WriteTo(output, _repeated_dateRanges_codec);
      if (dimensionFilter_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DimensionFilter);
      }
      if (metricFilter_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(MetricFilter);
      }
      if (PageSize != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PageToken);
      }
      metricAggregations_.WriteTo(output, _repeated_metricAggregations_codec);
      orderBys_.WriteTo(output, _repeated_orderBys_codec);
      if (CurrencyCode.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CurrencyCode);
      }
      if (cohortSpec_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(CohortSpec);
      }
      if (KeepEmptyRows != false) {
        output.WriteRawTag(104);
        output.WriteBool(KeepEmptyRows);
      }
      if (ReturnPropertyQuota != false) {
        output.WriteRawTag(112);
        output.WriteBool(ReturnPropertyQuota);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Property.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Property);
      }
      dimensions_.WriteTo(ref output, _repeated_dimensions_codec);
      metrics_.WriteTo(ref output, _repeated_metrics_codec);
      dateRanges_.WriteTo(ref output, _repeated_dateRanges_codec);
      if (dimensionFilter_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DimensionFilter);
      }
      if (metricFilter_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(MetricFilter);
      }
      if (PageSize != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PageToken);
      }
      metricAggregations_.WriteTo(ref output, _repeated_metricAggregations_codec);
      orderBys_.WriteTo(ref output, _repeated_orderBys_codec);
      if (CurrencyCode.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CurrencyCode);
      }
      if (cohortSpec_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(CohortSpec);
      }
      if (KeepEmptyRows != false) {
        output.WriteRawTag(104);
        output.WriteBool(KeepEmptyRows);
      }
      if (ReturnPropertyQuota != false) {
        output.WriteRawTag(112);
        output.WriteBool(ReturnPropertyQuota);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Property.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Property);
      }
      size += dimensions_.CalculateSize(_repeated_dimensions_codec);
      size += metrics_.CalculateSize(_repeated_metrics_codec);
      size += dateRanges_.CalculateSize(_repeated_dateRanges_codec);
      if (dimensionFilter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DimensionFilter);
      }
      if (metricFilter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MetricFilter);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      size += metricAggregations_.CalculateSize(_repeated_metricAggregations_codec);
      size += orderBys_.CalculateSize(_repeated_orderBys_codec);
      if (CurrencyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrencyCode);
      }
      if (cohortSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CohortSpec);
      }
      if (KeepEmptyRows != false) {
        size += 1 + 1;
      }
      if (ReturnPropertyQuota != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunReportRequest other) {
      if (other == null) {
        return;
      }
      if (other.Property.Length != 0) {
        Property = other.Property;
      }
      dimensions_.Add(other.dimensions_);
      metrics_.Add(other.metrics_);
      dateRanges_.Add(other.dateRanges_);
      if (other.dimensionFilter_ != null) {
        if (dimensionFilter_ == null) {
          DimensionFilter = new global::Google.Analytics.Data.V1Beta.FilterExpression();
        }
        DimensionFilter.MergeFrom(other.DimensionFilter);
      }
      if (other.metricFilter_ != null) {
        if (metricFilter_ == null) {
          MetricFilter = new global::Google.Analytics.Data.V1Beta.FilterExpression();
        }
        MetricFilter.MergeFrom(other.MetricFilter);
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      metricAggregations_.Add(other.metricAggregations_);
      orderBys_.Add(other.orderBys_);
      if (other.CurrencyCode.Length != 0) {
        CurrencyCode = other.CurrencyCode;
      }
      if (other.cohortSpec_ != null) {
        if (cohortSpec_ == null) {
          CohortSpec = new global::Google.Analytics.Data.V1Beta.CohortSpec();
        }
        CohortSpec.MergeFrom(other.CohortSpec);
      }
      if (other.KeepEmptyRows != false) {
        KeepEmptyRows = other.KeepEmptyRows;
      }
      if (other.ReturnPropertyQuota != false) {
        ReturnPropertyQuota = other.ReturnPropertyQuota;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Property = input.ReadString();
            break;
          }
          case 18: {
            dimensions_.AddEntriesFrom(input, _repeated_dimensions_codec);
            break;
          }
          case 26: {
            metrics_.AddEntriesFrom(input, _repeated_metrics_codec);
            break;
          }
          case 34: {
            dateRanges_.AddEntriesFrom(input, _repeated_dateRanges_codec);
            break;
          }
          case 42: {
            if (dimensionFilter_ == null) {
              DimensionFilter = new global::Google.Analytics.Data.V1Beta.FilterExpression();
            }
            input.ReadMessage(DimensionFilter);
            break;
          }
          case 50: {
            if (metricFilter_ == null) {
              MetricFilter = new global::Google.Analytics.Data.V1Beta.FilterExpression();
            }
            input.ReadMessage(MetricFilter);
            break;
          }
          case 56: {
            PageSize = input.ReadInt32();
            break;
          }
          case 66: {
            PageToken = input.ReadString();
            break;
          }
          case 74:
          case 72: {
            metricAggregations_.AddEntriesFrom(input, _repeated_metricAggregations_codec);
            break;
          }
          case 82: {
            orderBys_.AddEntriesFrom(input, _repeated_orderBys_codec);
            break;
          }
          case 90: {
            CurrencyCode = input.ReadString();
            break;
          }
          case 98: {
            if (cohortSpec_ == null) {
              CohortSpec = new global::Google.Analytics.Data.V1Beta.CohortSpec();
            }
            input.ReadMessage(CohortSpec);
            break;
          }
          case 104: {
            KeepEmptyRows = input.ReadBool();
            break;
          }
          case 112: {
            ReturnPropertyQuota = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Property = input.ReadString();
            break;
          }
          case 18: {
            dimensions_.AddEntriesFrom(ref input, _repeated_dimensions_codec);
            break;
          }
          case 26: {
            metrics_.AddEntriesFrom(ref input, _repeated_metrics_codec);
            break;
          }
          case 34: {
            dateRanges_.AddEntriesFrom(ref input, _repeated_dateRanges_codec);
            break;
          }
          case 42: {
            if (dimensionFilter_ == null) {
              DimensionFilter = new global::Google.Analytics.Data.V1Beta.FilterExpression();
            }
            input.ReadMessage(DimensionFilter);
            break;
          }
          case 50: {
            if (metricFilter_ == null) {
              MetricFilter = new global::Google.Analytics.Data.V1Beta.FilterExpression();
            }
            input.ReadMessage(MetricFilter);
            break;
          }
          case 56: {
            PageSize = input.ReadInt32();
            break;
          }
          case 66: {
            PageToken = input.ReadString();
            break;
          }
          case 74:
          case 72: {
            metricAggregations_.AddEntriesFrom(ref input, _repeated_metricAggregations_codec);
            break;
          }
          case 82: {
            orderBys_.AddEntriesFrom(ref input, _repeated_orderBys_codec);
            break;
          }
          case 90: {
            CurrencyCode = input.ReadString();
            break;
          }
          case 98: {
            if (cohortSpec_ == null) {
              CohortSpec = new global::Google.Analytics.Data.V1Beta.CohortSpec();
            }
            input.ReadMessage(CohortSpec);
            break;
          }
          case 104: {
            KeepEmptyRows = input.ReadBool();
            break;
          }
          case 112: {
            ReturnPropertyQuota = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The response report table corresponding to a request.
  /// </summary>
  public sealed partial class RunReportResponse : pb::IMessage<RunReportResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RunReportResponse> _parser = new pb::MessageParser<RunReportResponse>(() => new RunReportResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunReportResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Analytics.Data.V1Beta.AnalyticsDataApiReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunReportResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunReportResponse(RunReportResponse other) : this() {
      dimensionHeaders_ = other.dimensionHeaders_.Clone();
      metricHeaders_ = other.metricHeaders_.Clone();
      rows_ = other.rows_.Clone();
      totals_ = other.totals_.Clone();
      maximums_ = other.maximums_.Clone();
      minimums_ = other.minimums_.Clone();
      nextPageToken_ = other.nextPageToken_;
      totalSize_ = other.totalSize_;
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      propertyQuota_ = other.propertyQuota_ != null ? other.propertyQuota_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunReportResponse Clone() {
      return new RunReportResponse(this);
    }

    /// <summary>Field number for the "dimension_headers" field.</summary>
    public const int DimensionHeadersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.DimensionHeader> _repeated_dimensionHeaders_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Analytics.Data.V1Beta.DimensionHeader.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.DimensionHeader> dimensionHeaders_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.DimensionHeader>();
    /// <summary>
    /// Describes dimension columns. The number of DimensionHeaders and ordering of
    /// DimensionHeaders matches the dimensions present in rows.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.DimensionHeader> DimensionHeaders {
      get { return dimensionHeaders_; }
    }

    /// <summary>Field number for the "metric_headers" field.</summary>
    public const int MetricHeadersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.MetricHeader> _repeated_metricHeaders_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Analytics.Data.V1Beta.MetricHeader.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.MetricHeader> metricHeaders_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.MetricHeader>();
    /// <summary>
    /// Describes metric columns. The number of MetricHeaders and ordering of
    /// MetricHeaders matches the metrics present in rows.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.MetricHeader> MetricHeaders {
      get { return metricHeaders_; }
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.Row> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Analytics.Data.V1Beta.Row.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row> rows_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row>();
    /// <summary>
    /// Rows of dimension value combinations and metric values in the report.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row> Rows {
      get { return rows_; }
    }

    /// <summary>Field number for the "totals" field.</summary>
    public const int TotalsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.Row> _repeated_totals_codec
        = pb::FieldCodec.ForMessage(34, global::Google.Analytics.Data.V1Beta.Row.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row> totals_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row>();
    /// <summary>
    /// If requested, the totaled values of metrics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row> Totals {
      get { return totals_; }
    }

    /// <summary>Field number for the "maximums" field.</summary>
    public const int MaximumsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.Row> _repeated_maximums_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Analytics.Data.V1Beta.Row.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row> maximums_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row>();
    /// <summary>
    /// If requested, the maximum values of metrics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row> Maximums {
      get { return maximums_; }
    }

    /// <summary>Field number for the "minimums" field.</summary>
    public const int MinimumsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.Row> _repeated_minimums_codec
        = pb::FieldCodec.ForMessage(50, global::Google.Analytics.Data.V1Beta.Row.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row> minimums_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row>();
    /// <summary>
    /// If requested, the minimum values of metrics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row> Minimums {
      get { return minimums_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 7;
    private string nextPageToken_ = "";
    /// <summary>
    /// A token that can be sent as `pageToken` in a subsequent `RunReportRequest`
    /// call to retrieve the next page of report rows. If this field is omitted,
    /// there are no subsequent pages of report rows.
    ///
    /// To learn more about this pagination parameter, see
    /// [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_size" field.</summary>
    public const int TotalSizeFieldNumber = 8;
    private int totalSize_;
    /// <summary>
    /// The total number of rows in the query result. `totalSize` is independent of
    /// the number of rows returned in the response, the `pageSize` request
    /// parameter, and the `pageToken` request parameter. For example if a query
    /// returns 175 rows and includes `pageSize` of 50 in the API request, the
    /// response will contain `totalSize` of 175 but only 50 rows.
    ///
    /// To learn more about this pagination parameter, see
    /// [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalSize {
      get { return totalSize_; }
      set {
        totalSize_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 9;
    private global::Google.Analytics.Data.V1Beta.ResponseMetaData metadata_;
    /// <summary>
    /// Metadata for the report.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Analytics.Data.V1Beta.ResponseMetaData Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "property_quota" field.</summary>
    public const int PropertyQuotaFieldNumber = 10;
    private global::Google.Analytics.Data.V1Beta.PropertyQuota propertyQuota_;
    /// <summary>
    /// This Analytics Property's quota state including this request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Analytics.Data.V1Beta.PropertyQuota PropertyQuota {
      get { return propertyQuota_; }
      set {
        propertyQuota_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunReportResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunReportResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dimensionHeaders_.Equals(other.dimensionHeaders_)) return false;
      if(!metricHeaders_.Equals(other.metricHeaders_)) return false;
      if(!rows_.Equals(other.rows_)) return false;
      if(!totals_.Equals(other.totals_)) return false;
      if(!maximums_.Equals(other.maximums_)) return false;
      if(!minimums_.Equals(other.minimums_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      if (TotalSize != other.TotalSize) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (!object.Equals(PropertyQuota, other.PropertyQuota)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dimensionHeaders_.GetHashCode();
      hash ^= metricHeaders_.GetHashCode();
      hash ^= rows_.GetHashCode();
      hash ^= totals_.GetHashCode();
      hash ^= maximums_.GetHashCode();
      hash ^= minimums_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (TotalSize != 0) hash ^= TotalSize.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (propertyQuota_ != null) hash ^= PropertyQuota.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      dimensionHeaders_.WriteTo(output, _repeated_dimensionHeaders_codec);
      metricHeaders_.WriteTo(output, _repeated_metricHeaders_codec);
      rows_.WriteTo(output, _repeated_rows_codec);
      totals_.WriteTo(output, _repeated_totals_codec);
      maximums_.WriteTo(output, _repeated_maximums_codec);
      minimums_.WriteTo(output, _repeated_minimums_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(NextPageToken);
      }
      if (TotalSize != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(TotalSize);
      }
      if (metadata_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Metadata);
      }
      if (propertyQuota_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(PropertyQuota);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      dimensionHeaders_.WriteTo(ref output, _repeated_dimensionHeaders_codec);
      metricHeaders_.WriteTo(ref output, _repeated_metricHeaders_codec);
      rows_.WriteTo(ref output, _repeated_rows_codec);
      totals_.WriteTo(ref output, _repeated_totals_codec);
      maximums_.WriteTo(ref output, _repeated_maximums_codec);
      minimums_.WriteTo(ref output, _repeated_minimums_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(NextPageToken);
      }
      if (TotalSize != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(TotalSize);
      }
      if (metadata_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Metadata);
      }
      if (propertyQuota_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(PropertyQuota);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dimensionHeaders_.CalculateSize(_repeated_dimensionHeaders_codec);
      size += metricHeaders_.CalculateSize(_repeated_metricHeaders_codec);
      size += rows_.CalculateSize(_repeated_rows_codec);
      size += totals_.CalculateSize(_repeated_totals_codec);
      size += maximums_.CalculateSize(_repeated_maximums_codec);
      size += minimums_.CalculateSize(_repeated_minimums_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (TotalSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalSize);
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (propertyQuota_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PropertyQuota);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunReportResponse other) {
      if (other == null) {
        return;
      }
      dimensionHeaders_.Add(other.dimensionHeaders_);
      metricHeaders_.Add(other.metricHeaders_);
      rows_.Add(other.rows_);
      totals_.Add(other.totals_);
      maximums_.Add(other.maximums_);
      minimums_.Add(other.minimums_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      if (other.TotalSize != 0) {
        TotalSize = other.TotalSize;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::Google.Analytics.Data.V1Beta.ResponseMetaData();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.propertyQuota_ != null) {
        if (propertyQuota_ == null) {
          PropertyQuota = new global::Google.Analytics.Data.V1Beta.PropertyQuota();
        }
        PropertyQuota.MergeFrom(other.PropertyQuota);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dimensionHeaders_.AddEntriesFrom(input, _repeated_dimensionHeaders_codec);
            break;
          }
          case 18: {
            metricHeaders_.AddEntriesFrom(input, _repeated_metricHeaders_codec);
            break;
          }
          case 26: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
          case 34: {
            totals_.AddEntriesFrom(input, _repeated_totals_codec);
            break;
          }
          case 42: {
            maximums_.AddEntriesFrom(input, _repeated_maximums_codec);
            break;
          }
          case 50: {
            minimums_.AddEntriesFrom(input, _repeated_minimums_codec);
            break;
          }
          case 58: {
            NextPageToken = input.ReadString();
            break;
          }
          case 64: {
            TotalSize = input.ReadInt32();
            break;
          }
          case 74: {
            if (metadata_ == null) {
              Metadata = new global::Google.Analytics.Data.V1Beta.ResponseMetaData();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 82: {
            if (propertyQuota_ == null) {
              PropertyQuota = new global::Google.Analytics.Data.V1Beta.PropertyQuota();
            }
            input.ReadMessage(PropertyQuota);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            dimensionHeaders_.AddEntriesFrom(ref input, _repeated_dimensionHeaders_codec);
            break;
          }
          case 18: {
            metricHeaders_.AddEntriesFrom(ref input, _repeated_metricHeaders_codec);
            break;
          }
          case 26: {
            rows_.AddEntriesFrom(ref input, _repeated_rows_codec);
            break;
          }
          case 34: {
            totals_.AddEntriesFrom(ref input, _repeated_totals_codec);
            break;
          }
          case 42: {
            maximums_.AddEntriesFrom(ref input, _repeated_maximums_codec);
            break;
          }
          case 50: {
            minimums_.AddEntriesFrom(ref input, _repeated_minimums_codec);
            break;
          }
          case 58: {
            NextPageToken = input.ReadString();
            break;
          }
          case 64: {
            TotalSize = input.ReadInt32();
            break;
          }
          case 74: {
            if (metadata_ == null) {
              Metadata = new global::Google.Analytics.Data.V1Beta.ResponseMetaData();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 82: {
            if (propertyQuota_ == null) {
              PropertyQuota = new global::Google.Analytics.Data.V1Beta.PropertyQuota();
            }
            input.ReadMessage(PropertyQuota);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The request to generate a pivot report.
  /// </summary>
  public sealed partial class RunPivotReportRequest : pb::IMessage<RunPivotReportRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RunPivotReportRequest> _parser = new pb::MessageParser<RunPivotReportRequest>(() => new RunPivotReportRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunPivotReportRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Analytics.Data.V1Beta.AnalyticsDataApiReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunPivotReportRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunPivotReportRequest(RunPivotReportRequest other) : this() {
      property_ = other.property_;
      dimensions_ = other.dimensions_.Clone();
      metrics_ = other.metrics_.Clone();
      dateRanges_ = other.dateRanges_.Clone();
      pivots_ = other.pivots_.Clone();
      dimensionFilter_ = other.dimensionFilter_ != null ? other.dimensionFilter_.Clone() : null;
      metricFilter_ = other.metricFilter_ != null ? other.metricFilter_.Clone() : null;
      currencyCode_ = other.currencyCode_;
      cohortSpec_ = other.cohortSpec_ != null ? other.cohortSpec_.Clone() : null;
      keepEmptyRows_ = other.keepEmptyRows_;
      returnPropertyQuota_ = other.returnPropertyQuota_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunPivotReportRequest Clone() {
      return new RunPivotReportRequest(this);
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 1;
    private string property_ = "";
    /// <summary>
    /// A Google Analytics GA4 property identifier whose events are tracked.
    /// Specified in the URL path and not the body. To learn more, see [where to
    /// find your Property
    /// ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).
    /// Within a batch request, this property should either be unspecified or
    /// consistent with the batch-level property.
    ///
    /// Example: properties/1234
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Property {
      get { return property_; }
      set {
        property_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dimensions" field.</summary>
    public const int DimensionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.Dimension> _repeated_dimensions_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Analytics.Data.V1Beta.Dimension.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Dimension> dimensions_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Dimension>();
    /// <summary>
    /// The dimensions requested. All defined dimensions must be used by one of the
    /// following: dimension_expression, dimension_filter, pivots, order_bys.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Dimension> Dimensions {
      get { return dimensions_; }
    }

    /// <summary>Field number for the "metrics" field.</summary>
    public const int MetricsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.Metric> _repeated_metrics_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Analytics.Data.V1Beta.Metric.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Metric> metrics_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Metric>();
    /// <summary>
    /// The metrics requested, at least one metric needs to be specified. All
    /// defined metrics must be used by one of the following: metric_expression,
    /// metric_filter, order_bys.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Metric> Metrics {
      get { return metrics_; }
    }

    /// <summary>Field number for the "date_ranges" field.</summary>
    public const int DateRangesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.DateRange> _repeated_dateRanges_codec
        = pb::FieldCodec.ForMessage(34, global::Google.Analytics.Data.V1Beta.DateRange.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.DateRange> dateRanges_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.DateRange>();
    /// <summary>
    /// The date range to retrieve event data for the report. If multiple date
    /// ranges are specified, event data from each date range is used in the
    /// report. A special dimension with field name "dateRange" can be included in
    /// a Pivot's field names; if included, the report compares between date
    /// ranges. In a cohort request, this `dateRanges` must be unspecified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.DateRange> DateRanges {
      get { return dateRanges_; }
    }

    /// <summary>Field number for the "pivots" field.</summary>
    public const int PivotsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.Pivot> _repeated_pivots_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Analytics.Data.V1Beta.Pivot.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Pivot> pivots_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Pivot>();
    /// <summary>
    /// Describes the visual format of the report's dimensions in columns or rows.
    /// The union of the fieldNames (dimension names) in all pivots must be a
    /// subset of dimension names defined in Dimensions. No two pivots can share a
    /// dimension. A dimension is only visible if it appears in a pivot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Pivot> Pivots {
      get { return pivots_; }
    }

    /// <summary>Field number for the "dimension_filter" field.</summary>
    public const int DimensionFilterFieldNumber = 6;
    private global::Google.Analytics.Data.V1Beta.FilterExpression dimensionFilter_;
    /// <summary>
    /// The filter clause of dimensions. Dimensions must be requested to be used in
    /// this filter. Metrics cannot be used in this filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Analytics.Data.V1Beta.FilterExpression DimensionFilter {
      get { return dimensionFilter_; }
      set {
        dimensionFilter_ = value;
      }
    }

    /// <summary>Field number for the "metric_filter" field.</summary>
    public const int MetricFilterFieldNumber = 7;
    private global::Google.Analytics.Data.V1Beta.FilterExpression metricFilter_;
    /// <summary>
    /// The filter clause of metrics. Applied at post aggregation phase, similar to
    /// SQL having-clause. Metrics must be requested to be used in this filter.
    /// Dimensions cannot be used in this filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Analytics.Data.V1Beta.FilterExpression MetricFilter {
      get { return metricFilter_; }
      set {
        metricFilter_ = value;
      }
    }

    /// <summary>Field number for the "currency_code" field.</summary>
    public const int CurrencyCodeFieldNumber = 8;
    private string currencyCode_ = "";
    /// <summary>
    /// A currency code in ISO4217 format, such as "AED", "USD", "JPY".
    /// If the field is empty, the report uses the property's default currency.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrencyCode {
      get { return currencyCode_; }
      set {
        currencyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cohort_spec" field.</summary>
    public const int CohortSpecFieldNumber = 9;
    private global::Google.Analytics.Data.V1Beta.CohortSpec cohortSpec_;
    /// <summary>
    /// Cohort group associated with this request. If there is a cohort group
    /// in the request the 'cohort' dimension must be present.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Analytics.Data.V1Beta.CohortSpec CohortSpec {
      get { return cohortSpec_; }
      set {
        cohortSpec_ = value;
      }
    }

    /// <summary>Field number for the "keep_empty_rows" field.</summary>
    public const int KeepEmptyRowsFieldNumber = 10;
    private bool keepEmptyRows_;
    /// <summary>
    /// If false or unspecified, each row with all metrics equal to 0 will not be
    /// returned. If true, these rows will be returned if they are not separately
    /// removed by a filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool KeepEmptyRows {
      get { return keepEmptyRows_; }
      set {
        keepEmptyRows_ = value;
      }
    }

    /// <summary>Field number for the "return_property_quota" field.</summary>
    public const int ReturnPropertyQuotaFieldNumber = 11;
    private bool returnPropertyQuota_;
    /// <summary>
    /// Toggles whether to return the current state of this Analytics Property's
    /// quota. Quota is returned in [PropertyQuota](#PropertyQuota).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReturnPropertyQuota {
      get { return returnPropertyQuota_; }
      set {
        returnPropertyQuota_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunPivotReportRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunPivotReportRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Property != other.Property) return false;
      if(!dimensions_.Equals(other.dimensions_)) return false;
      if(!metrics_.Equals(other.metrics_)) return false;
      if(!dateRanges_.Equals(other.dateRanges_)) return false;
      if(!pivots_.Equals(other.pivots_)) return false;
      if (!object.Equals(DimensionFilter, other.DimensionFilter)) return false;
      if (!object.Equals(MetricFilter, other.MetricFilter)) return false;
      if (CurrencyCode != other.CurrencyCode) return false;
      if (!object.Equals(CohortSpec, other.CohortSpec)) return false;
      if (KeepEmptyRows != other.KeepEmptyRows) return false;
      if (ReturnPropertyQuota != other.ReturnPropertyQuota) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Property.Length != 0) hash ^= Property.GetHashCode();
      hash ^= dimensions_.GetHashCode();
      hash ^= metrics_.GetHashCode();
      hash ^= dateRanges_.GetHashCode();
      hash ^= pivots_.GetHashCode();
      if (dimensionFilter_ != null) hash ^= DimensionFilter.GetHashCode();
      if (metricFilter_ != null) hash ^= MetricFilter.GetHashCode();
      if (CurrencyCode.Length != 0) hash ^= CurrencyCode.GetHashCode();
      if (cohortSpec_ != null) hash ^= CohortSpec.GetHashCode();
      if (KeepEmptyRows != false) hash ^= KeepEmptyRows.GetHashCode();
      if (ReturnPropertyQuota != false) hash ^= ReturnPropertyQuota.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Property.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Property);
      }
      dimensions_.WriteTo(output, _repeated_dimensions_codec);
      metrics_.WriteTo(output, _repeated_metrics_codec);
      dateRanges_.WriteTo(output, _repeated_dateRanges_codec);
      pivots_.WriteTo(output, _repeated_pivots_codec);
      if (dimensionFilter_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DimensionFilter);
      }
      if (metricFilter_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(MetricFilter);
      }
      if (CurrencyCode.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CurrencyCode);
      }
      if (cohortSpec_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(CohortSpec);
      }
      if (KeepEmptyRows != false) {
        output.WriteRawTag(80);
        output.WriteBool(KeepEmptyRows);
      }
      if (ReturnPropertyQuota != false) {
        output.WriteRawTag(88);
        output.WriteBool(ReturnPropertyQuota);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Property.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Property);
      }
      dimensions_.WriteTo(ref output, _repeated_dimensions_codec);
      metrics_.WriteTo(ref output, _repeated_metrics_codec);
      dateRanges_.WriteTo(ref output, _repeated_dateRanges_codec);
      pivots_.WriteTo(ref output, _repeated_pivots_codec);
      if (dimensionFilter_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DimensionFilter);
      }
      if (metricFilter_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(MetricFilter);
      }
      if (CurrencyCode.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CurrencyCode);
      }
      if (cohortSpec_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(CohortSpec);
      }
      if (KeepEmptyRows != false) {
        output.WriteRawTag(80);
        output.WriteBool(KeepEmptyRows);
      }
      if (ReturnPropertyQuota != false) {
        output.WriteRawTag(88);
        output.WriteBool(ReturnPropertyQuota);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Property.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Property);
      }
      size += dimensions_.CalculateSize(_repeated_dimensions_codec);
      size += metrics_.CalculateSize(_repeated_metrics_codec);
      size += dateRanges_.CalculateSize(_repeated_dateRanges_codec);
      size += pivots_.CalculateSize(_repeated_pivots_codec);
      if (dimensionFilter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DimensionFilter);
      }
      if (metricFilter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MetricFilter);
      }
      if (CurrencyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrencyCode);
      }
      if (cohortSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CohortSpec);
      }
      if (KeepEmptyRows != false) {
        size += 1 + 1;
      }
      if (ReturnPropertyQuota != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunPivotReportRequest other) {
      if (other == null) {
        return;
      }
      if (other.Property.Length != 0) {
        Property = other.Property;
      }
      dimensions_.Add(other.dimensions_);
      metrics_.Add(other.metrics_);
      dateRanges_.Add(other.dateRanges_);
      pivots_.Add(other.pivots_);
      if (other.dimensionFilter_ != null) {
        if (dimensionFilter_ == null) {
          DimensionFilter = new global::Google.Analytics.Data.V1Beta.FilterExpression();
        }
        DimensionFilter.MergeFrom(other.DimensionFilter);
      }
      if (other.metricFilter_ != null) {
        if (metricFilter_ == null) {
          MetricFilter = new global::Google.Analytics.Data.V1Beta.FilterExpression();
        }
        MetricFilter.MergeFrom(other.MetricFilter);
      }
      if (other.CurrencyCode.Length != 0) {
        CurrencyCode = other.CurrencyCode;
      }
      if (other.cohortSpec_ != null) {
        if (cohortSpec_ == null) {
          CohortSpec = new global::Google.Analytics.Data.V1Beta.CohortSpec();
        }
        CohortSpec.MergeFrom(other.CohortSpec);
      }
      if (other.KeepEmptyRows != false) {
        KeepEmptyRows = other.KeepEmptyRows;
      }
      if (other.ReturnPropertyQuota != false) {
        ReturnPropertyQuota = other.ReturnPropertyQuota;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Property = input.ReadString();
            break;
          }
          case 18: {
            dimensions_.AddEntriesFrom(input, _repeated_dimensions_codec);
            break;
          }
          case 26: {
            metrics_.AddEntriesFrom(input, _repeated_metrics_codec);
            break;
          }
          case 34: {
            dateRanges_.AddEntriesFrom(input, _repeated_dateRanges_codec);
            break;
          }
          case 42: {
            pivots_.AddEntriesFrom(input, _repeated_pivots_codec);
            break;
          }
          case 50: {
            if (dimensionFilter_ == null) {
              DimensionFilter = new global::Google.Analytics.Data.V1Beta.FilterExpression();
            }
            input.ReadMessage(DimensionFilter);
            break;
          }
          case 58: {
            if (metricFilter_ == null) {
              MetricFilter = new global::Google.Analytics.Data.V1Beta.FilterExpression();
            }
            input.ReadMessage(MetricFilter);
            break;
          }
          case 66: {
            CurrencyCode = input.ReadString();
            break;
          }
          case 74: {
            if (cohortSpec_ == null) {
              CohortSpec = new global::Google.Analytics.Data.V1Beta.CohortSpec();
            }
            input.ReadMessage(CohortSpec);
            break;
          }
          case 80: {
            KeepEmptyRows = input.ReadBool();
            break;
          }
          case 88: {
            ReturnPropertyQuota = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Property = input.ReadString();
            break;
          }
          case 18: {
            dimensions_.AddEntriesFrom(ref input, _repeated_dimensions_codec);
            break;
          }
          case 26: {
            metrics_.AddEntriesFrom(ref input, _repeated_metrics_codec);
            break;
          }
          case 34: {
            dateRanges_.AddEntriesFrom(ref input, _repeated_dateRanges_codec);
            break;
          }
          case 42: {
            pivots_.AddEntriesFrom(ref input, _repeated_pivots_codec);
            break;
          }
          case 50: {
            if (dimensionFilter_ == null) {
              DimensionFilter = new global::Google.Analytics.Data.V1Beta.FilterExpression();
            }
            input.ReadMessage(DimensionFilter);
            break;
          }
          case 58: {
            if (metricFilter_ == null) {
              MetricFilter = new global::Google.Analytics.Data.V1Beta.FilterExpression();
            }
            input.ReadMessage(MetricFilter);
            break;
          }
          case 66: {
            CurrencyCode = input.ReadString();
            break;
          }
          case 74: {
            if (cohortSpec_ == null) {
              CohortSpec = new global::Google.Analytics.Data.V1Beta.CohortSpec();
            }
            input.ReadMessage(CohortSpec);
            break;
          }
          case 80: {
            KeepEmptyRows = input.ReadBool();
            break;
          }
          case 88: {
            ReturnPropertyQuota = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The response pivot report table corresponding to a pivot request.
  /// </summary>
  public sealed partial class RunPivotReportResponse : pb::IMessage<RunPivotReportResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RunPivotReportResponse> _parser = new pb::MessageParser<RunPivotReportResponse>(() => new RunPivotReportResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunPivotReportResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Analytics.Data.V1Beta.AnalyticsDataApiReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunPivotReportResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunPivotReportResponse(RunPivotReportResponse other) : this() {
      pivotHeaders_ = other.pivotHeaders_.Clone();
      dimensionHeaders_ = other.dimensionHeaders_.Clone();
      metricHeaders_ = other.metricHeaders_.Clone();
      rows_ = other.rows_.Clone();
      aggregates_ = other.aggregates_.Clone();
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      propertyQuota_ = other.propertyQuota_ != null ? other.propertyQuota_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunPivotReportResponse Clone() {
      return new RunPivotReportResponse(this);
    }

    /// <summary>Field number for the "pivot_headers" field.</summary>
    public const int PivotHeadersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.PivotHeader> _repeated_pivotHeaders_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Analytics.Data.V1Beta.PivotHeader.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.PivotHeader> pivotHeaders_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.PivotHeader>();
    /// <summary>
    /// Summarizes the columns and rows created by a pivot. Each pivot in the
    /// request produces one header in the response. If we have a request like
    /// this:
    ///
    ///     "pivots": [{
    ///       "fieldNames": ["country",
    ///         "city"]
    ///     },
    ///     {
    ///       "fieldNames": "eventName"
    ///     }]
    ///
    /// We will have the following `pivotHeaders` in the response:
    ///
    ///     "pivotHeaders" : [{
    ///       "dimensionHeaders": [{
    ///         "dimensionValues": [
    ///            { "value": "United Kingdom" },
    ///            { "value": "London" }
    ///          ]
    ///       },
    ///       {
    ///         "dimensionValues": [
    ///         { "value": "Japan" },
    ///         { "value": "Osaka" }
    ///         ]
    ///       }]
    ///     },
    ///     {
    ///       "dimensionHeaders": [{
    ///         "dimensionValues": [{ "value": "session_start" }]
    ///       },
    ///       {
    ///         "dimensionValues": [{ "value": "scroll" }]
    ///       }]
    ///     }]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.PivotHeader> PivotHeaders {
      get { return pivotHeaders_; }
    }

    /// <summary>Field number for the "dimension_headers" field.</summary>
    public const int DimensionHeadersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.DimensionHeader> _repeated_dimensionHeaders_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Analytics.Data.V1Beta.DimensionHeader.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.DimensionHeader> dimensionHeaders_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.DimensionHeader>();
    /// <summary>
    /// Describes dimension columns. The number of DimensionHeaders and ordering of
    /// DimensionHeaders matches the dimensions present in rows.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.DimensionHeader> DimensionHeaders {
      get { return dimensionHeaders_; }
    }

    /// <summary>Field number for the "metric_headers" field.</summary>
    public const int MetricHeadersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.MetricHeader> _repeated_metricHeaders_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Analytics.Data.V1Beta.MetricHeader.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.MetricHeader> metricHeaders_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.MetricHeader>();
    /// <summary>
    /// Describes metric columns. The number of MetricHeaders and ordering of
    /// MetricHeaders matches the metrics present in rows.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.MetricHeader> MetricHeaders {
      get { return metricHeaders_; }
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.Row> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(34, global::Google.Analytics.Data.V1Beta.Row.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row> rows_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row>();
    /// <summary>
    /// Rows of dimension value combinations and metric values in the report.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row> Rows {
      get { return rows_; }
    }

    /// <summary>Field number for the "aggregates" field.</summary>
    public const int AggregatesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.Row> _repeated_aggregates_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Analytics.Data.V1Beta.Row.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row> aggregates_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row>();
    /// <summary>
    /// Aggregation of metric values. Can be totals, minimums, or maximums. The
    /// returned aggregations are controlled by the metric_aggregations in the
    /// pivot. The type of aggregation returned in each row is shown by the
    /// dimension_values which are set to "RESERVED_&lt;MetricAggregation>".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row> Aggregates {
      get { return aggregates_; }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 6;
    private global::Google.Analytics.Data.V1Beta.ResponseMetaData metadata_;
    /// <summary>
    /// Metadata for the report.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Analytics.Data.V1Beta.ResponseMetaData Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "property_quota" field.</summary>
    public const int PropertyQuotaFieldNumber = 7;
    private global::Google.Analytics.Data.V1Beta.PropertyQuota propertyQuota_;
    /// <summary>
    /// This Analytics Property's quota state including this request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Analytics.Data.V1Beta.PropertyQuota PropertyQuota {
      get { return propertyQuota_; }
      set {
        propertyQuota_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunPivotReportResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunPivotReportResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pivotHeaders_.Equals(other.pivotHeaders_)) return false;
      if(!dimensionHeaders_.Equals(other.dimensionHeaders_)) return false;
      if(!metricHeaders_.Equals(other.metricHeaders_)) return false;
      if(!rows_.Equals(other.rows_)) return false;
      if(!aggregates_.Equals(other.aggregates_)) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (!object.Equals(PropertyQuota, other.PropertyQuota)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pivotHeaders_.GetHashCode();
      hash ^= dimensionHeaders_.GetHashCode();
      hash ^= metricHeaders_.GetHashCode();
      hash ^= rows_.GetHashCode();
      hash ^= aggregates_.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (propertyQuota_ != null) hash ^= PropertyQuota.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      pivotHeaders_.WriteTo(output, _repeated_pivotHeaders_codec);
      dimensionHeaders_.WriteTo(output, _repeated_dimensionHeaders_codec);
      metricHeaders_.WriteTo(output, _repeated_metricHeaders_codec);
      rows_.WriteTo(output, _repeated_rows_codec);
      aggregates_.WriteTo(output, _repeated_aggregates_codec);
      if (metadata_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Metadata);
      }
      if (propertyQuota_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PropertyQuota);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      pivotHeaders_.WriteTo(ref output, _repeated_pivotHeaders_codec);
      dimensionHeaders_.WriteTo(ref output, _repeated_dimensionHeaders_codec);
      metricHeaders_.WriteTo(ref output, _repeated_metricHeaders_codec);
      rows_.WriteTo(ref output, _repeated_rows_codec);
      aggregates_.WriteTo(ref output, _repeated_aggregates_codec);
      if (metadata_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Metadata);
      }
      if (propertyQuota_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PropertyQuota);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pivotHeaders_.CalculateSize(_repeated_pivotHeaders_codec);
      size += dimensionHeaders_.CalculateSize(_repeated_dimensionHeaders_codec);
      size += metricHeaders_.CalculateSize(_repeated_metricHeaders_codec);
      size += rows_.CalculateSize(_repeated_rows_codec);
      size += aggregates_.CalculateSize(_repeated_aggregates_codec);
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (propertyQuota_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PropertyQuota);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunPivotReportResponse other) {
      if (other == null) {
        return;
      }
      pivotHeaders_.Add(other.pivotHeaders_);
      dimensionHeaders_.Add(other.dimensionHeaders_);
      metricHeaders_.Add(other.metricHeaders_);
      rows_.Add(other.rows_);
      aggregates_.Add(other.aggregates_);
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::Google.Analytics.Data.V1Beta.ResponseMetaData();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.propertyQuota_ != null) {
        if (propertyQuota_ == null) {
          PropertyQuota = new global::Google.Analytics.Data.V1Beta.PropertyQuota();
        }
        PropertyQuota.MergeFrom(other.PropertyQuota);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            pivotHeaders_.AddEntriesFrom(input, _repeated_pivotHeaders_codec);
            break;
          }
          case 18: {
            dimensionHeaders_.AddEntriesFrom(input, _repeated_dimensionHeaders_codec);
            break;
          }
          case 26: {
            metricHeaders_.AddEntriesFrom(input, _repeated_metricHeaders_codec);
            break;
          }
          case 34: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
          case 42: {
            aggregates_.AddEntriesFrom(input, _repeated_aggregates_codec);
            break;
          }
          case 50: {
            if (metadata_ == null) {
              Metadata = new global::Google.Analytics.Data.V1Beta.ResponseMetaData();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 58: {
            if (propertyQuota_ == null) {
              PropertyQuota = new global::Google.Analytics.Data.V1Beta.PropertyQuota();
            }
            input.ReadMessage(PropertyQuota);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            pivotHeaders_.AddEntriesFrom(ref input, _repeated_pivotHeaders_codec);
            break;
          }
          case 18: {
            dimensionHeaders_.AddEntriesFrom(ref input, _repeated_dimensionHeaders_codec);
            break;
          }
          case 26: {
            metricHeaders_.AddEntriesFrom(ref input, _repeated_metricHeaders_codec);
            break;
          }
          case 34: {
            rows_.AddEntriesFrom(ref input, _repeated_rows_codec);
            break;
          }
          case 42: {
            aggregates_.AddEntriesFrom(ref input, _repeated_aggregates_codec);
            break;
          }
          case 50: {
            if (metadata_ == null) {
              Metadata = new global::Google.Analytics.Data.V1Beta.ResponseMetaData();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 58: {
            if (propertyQuota_ == null) {
              PropertyQuota = new global::Google.Analytics.Data.V1Beta.PropertyQuota();
            }
            input.ReadMessage(PropertyQuota);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The batch request containing multiple report requests.
  /// </summary>
  public sealed partial class BatchRunReportsRequest : pb::IMessage<BatchRunReportsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BatchRunReportsRequest> _parser = new pb::MessageParser<BatchRunReportsRequest>(() => new BatchRunReportsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchRunReportsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Analytics.Data.V1Beta.AnalyticsDataApiReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchRunReportsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchRunReportsRequest(BatchRunReportsRequest other) : this() {
      property_ = other.property_;
      requests_ = other.requests_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchRunReportsRequest Clone() {
      return new BatchRunReportsRequest(this);
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 1;
    private string property_ = "";
    /// <summary>
    /// A Google Analytics GA4 property identifier whose events are tracked.
    /// Specified in the URL path and not the body. To learn more, see [where to
    /// find your Property
    /// ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).
    /// This property must be specified for the batch. The property within
    /// RunReportRequest may either be unspecified or consistent with this
    /// property.
    ///
    /// Example: properties/1234
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Property {
      get { return property_; }
      set {
        property_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "requests" field.</summary>
    public const int RequestsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.RunReportRequest> _repeated_requests_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Analytics.Data.V1Beta.RunReportRequest.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.RunReportRequest> requests_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.RunReportRequest>();
    /// <summary>
    /// Individual requests. Each request has a separate report response. Each
    /// batch request is allowed up to 5 requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.RunReportRequest> Requests {
      get { return requests_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchRunReportsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchRunReportsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Property != other.Property) return false;
      if(!requests_.Equals(other.requests_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Property.Length != 0) hash ^= Property.GetHashCode();
      hash ^= requests_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Property.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Property);
      }
      requests_.WriteTo(output, _repeated_requests_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Property.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Property);
      }
      requests_.WriteTo(ref output, _repeated_requests_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Property.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Property);
      }
      size += requests_.CalculateSize(_repeated_requests_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchRunReportsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Property.Length != 0) {
        Property = other.Property;
      }
      requests_.Add(other.requests_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Property = input.ReadString();
            break;
          }
          case 18: {
            requests_.AddEntriesFrom(input, _repeated_requests_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Property = input.ReadString();
            break;
          }
          case 18: {
            requests_.AddEntriesFrom(ref input, _repeated_requests_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The batch response containing multiple reports.
  /// </summary>
  public sealed partial class BatchRunReportsResponse : pb::IMessage<BatchRunReportsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BatchRunReportsResponse> _parser = new pb::MessageParser<BatchRunReportsResponse>(() => new BatchRunReportsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchRunReportsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Analytics.Data.V1Beta.AnalyticsDataApiReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchRunReportsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchRunReportsResponse(BatchRunReportsResponse other) : this() {
      reports_ = other.reports_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchRunReportsResponse Clone() {
      return new BatchRunReportsResponse(this);
    }

    /// <summary>Field number for the "reports" field.</summary>
    public const int ReportsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.RunReportResponse> _repeated_reports_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Analytics.Data.V1Beta.RunReportResponse.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.RunReportResponse> reports_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.RunReportResponse>();
    /// <summary>
    /// Individual responses. Each response has a separate report request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.RunReportResponse> Reports {
      get { return reports_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchRunReportsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchRunReportsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!reports_.Equals(other.reports_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= reports_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      reports_.WriteTo(output, _repeated_reports_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      reports_.WriteTo(ref output, _repeated_reports_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += reports_.CalculateSize(_repeated_reports_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchRunReportsResponse other) {
      if (other == null) {
        return;
      }
      reports_.Add(other.reports_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            reports_.AddEntriesFrom(input, _repeated_reports_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            reports_.AddEntriesFrom(ref input, _repeated_reports_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The batch request containing multiple pivot report requests.
  /// </summary>
  public sealed partial class BatchRunPivotReportsRequest : pb::IMessage<BatchRunPivotReportsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BatchRunPivotReportsRequest> _parser = new pb::MessageParser<BatchRunPivotReportsRequest>(() => new BatchRunPivotReportsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchRunPivotReportsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Analytics.Data.V1Beta.AnalyticsDataApiReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchRunPivotReportsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchRunPivotReportsRequest(BatchRunPivotReportsRequest other) : this() {
      property_ = other.property_;
      requests_ = other.requests_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchRunPivotReportsRequest Clone() {
      return new BatchRunPivotReportsRequest(this);
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 1;
    private string property_ = "";
    /// <summary>
    /// A Google Analytics GA4 property identifier whose events are tracked.
    /// Specified in the URL path and not the body. To learn more, see [where to
    /// find your Property
    /// ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).
    /// This property must be specified for the batch. The property within
    /// RunPivotReportRequest may either be unspecified or consistent with this
    /// property.
    ///
    /// Example: properties/1234
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Property {
      get { return property_; }
      set {
        property_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "requests" field.</summary>
    public const int RequestsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.RunPivotReportRequest> _repeated_requests_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Analytics.Data.V1Beta.RunPivotReportRequest.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.RunPivotReportRequest> requests_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.RunPivotReportRequest>();
    /// <summary>
    /// Individual requests. Each request has a separate pivot report response.
    /// Each batch request is allowed up to 5 requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.RunPivotReportRequest> Requests {
      get { return requests_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchRunPivotReportsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchRunPivotReportsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Property != other.Property) return false;
      if(!requests_.Equals(other.requests_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Property.Length != 0) hash ^= Property.GetHashCode();
      hash ^= requests_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Property.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Property);
      }
      requests_.WriteTo(output, _repeated_requests_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Property.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Property);
      }
      requests_.WriteTo(ref output, _repeated_requests_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Property.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Property);
      }
      size += requests_.CalculateSize(_repeated_requests_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchRunPivotReportsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Property.Length != 0) {
        Property = other.Property;
      }
      requests_.Add(other.requests_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Property = input.ReadString();
            break;
          }
          case 18: {
            requests_.AddEntriesFrom(input, _repeated_requests_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Property = input.ReadString();
            break;
          }
          case 18: {
            requests_.AddEntriesFrom(ref input, _repeated_requests_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The batch response containing multiple pivot reports.
  /// </summary>
  public sealed partial class BatchRunPivotReportsResponse : pb::IMessage<BatchRunPivotReportsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BatchRunPivotReportsResponse> _parser = new pb::MessageParser<BatchRunPivotReportsResponse>(() => new BatchRunPivotReportsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchRunPivotReportsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Analytics.Data.V1Beta.AnalyticsDataApiReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchRunPivotReportsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchRunPivotReportsResponse(BatchRunPivotReportsResponse other) : this() {
      pivotReports_ = other.pivotReports_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchRunPivotReportsResponse Clone() {
      return new BatchRunPivotReportsResponse(this);
    }

    /// <summary>Field number for the "pivot_reports" field.</summary>
    public const int PivotReportsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.RunPivotReportResponse> _repeated_pivotReports_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Analytics.Data.V1Beta.RunPivotReportResponse.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.RunPivotReportResponse> pivotReports_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.RunPivotReportResponse>();
    /// <summary>
    /// Individual responses. Each response has a separate pivot report request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.RunPivotReportResponse> PivotReports {
      get { return pivotReports_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchRunPivotReportsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchRunPivotReportsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pivotReports_.Equals(other.pivotReports_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pivotReports_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      pivotReports_.WriteTo(output, _repeated_pivotReports_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      pivotReports_.WriteTo(ref output, _repeated_pivotReports_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pivotReports_.CalculateSize(_repeated_pivotReports_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchRunPivotReportsResponse other) {
      if (other == null) {
        return;
      }
      pivotReports_.Add(other.pivotReports_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            pivotReports_.AddEntriesFrom(input, _repeated_pivotReports_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            pivotReports_.AddEntriesFrom(ref input, _repeated_pivotReports_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request for a property's dimension and metric metadata.
  /// </summary>
  public sealed partial class GetMetadataRequest : pb::IMessage<GetMetadataRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetMetadataRequest> _parser = new pb::MessageParser<GetMetadataRequest>(() => new GetMetadataRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMetadataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Analytics.Data.V1Beta.AnalyticsDataApiReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMetadataRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMetadataRequest(GetMetadataRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMetadataRequest Clone() {
      return new GetMetadataRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Required. The resource name of the metadata to retrieve. This name field is
    /// specified in the URL path and not URL parameters. Property is a numeric
    /// Google Analytics GA4 Property identifier. To learn more, see [where to find
    /// your Property
    /// ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).
    ///
    /// Example: properties/1234/metadata
    ///
    /// Set the Property ID to 0 for dimensions and metrics common to all
    /// properties. In this special mode, this method will not return custom
    /// dimensions and metrics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMetadataRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMetadataRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMetadataRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The request to generate a realtime report.
  /// </summary>
  public sealed partial class RunRealtimeReportRequest : pb::IMessage<RunRealtimeReportRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RunRealtimeReportRequest> _parser = new pb::MessageParser<RunRealtimeReportRequest>(() => new RunRealtimeReportRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunRealtimeReportRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Analytics.Data.V1Beta.AnalyticsDataApiReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunRealtimeReportRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunRealtimeReportRequest(RunRealtimeReportRequest other) : this() {
      property_ = other.property_;
      dimensions_ = other.dimensions_.Clone();
      metrics_ = other.metrics_.Clone();
      dimensionFilter_ = other.dimensionFilter_ != null ? other.dimensionFilter_.Clone() : null;
      metricFilter_ = other.metricFilter_ != null ? other.metricFilter_.Clone() : null;
      pageSize_ = other.pageSize_;
      metricAggregations_ = other.metricAggregations_.Clone();
      orderBys_ = other.orderBys_.Clone();
      returnPropertyQuota_ = other.returnPropertyQuota_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunRealtimeReportRequest Clone() {
      return new RunRealtimeReportRequest(this);
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 1;
    private string property_ = "";
    /// <summary>
    /// A Google Analytics GA4 property identifier whose events are tracked.
    /// Specified in the URL path and not the body. To learn more, see [where to
    /// find your Property
    /// ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).
    ///
    /// Example: properties/1234
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Property {
      get { return property_; }
      set {
        property_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dimensions" field.</summary>
    public const int DimensionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.Dimension> _repeated_dimensions_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Analytics.Data.V1Beta.Dimension.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Dimension> dimensions_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Dimension>();
    /// <summary>
    /// The dimensions requested and displayed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Dimension> Dimensions {
      get { return dimensions_; }
    }

    /// <summary>Field number for the "metrics" field.</summary>
    public const int MetricsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.Metric> _repeated_metrics_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Analytics.Data.V1Beta.Metric.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Metric> metrics_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Metric>();
    /// <summary>
    /// The metrics requested and displayed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Metric> Metrics {
      get { return metrics_; }
    }

    /// <summary>Field number for the "dimension_filter" field.</summary>
    public const int DimensionFilterFieldNumber = 4;
    private global::Google.Analytics.Data.V1Beta.FilterExpression dimensionFilter_;
    /// <summary>
    /// The filter clause of dimensions. Dimensions must be requested to be used in
    /// this filter. Metrics cannot be used in this filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Analytics.Data.V1Beta.FilterExpression DimensionFilter {
      get { return dimensionFilter_; }
      set {
        dimensionFilter_ = value;
      }
    }

    /// <summary>Field number for the "metric_filter" field.</summary>
    public const int MetricFilterFieldNumber = 5;
    private global::Google.Analytics.Data.V1Beta.FilterExpression metricFilter_;
    /// <summary>
    /// The filter clause of metrics. Applied at post aggregation phase, similar to
    /// SQL having-clause. Metrics must be requested to be used in this filter.
    /// Dimensions cannot be used in this filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Analytics.Data.V1Beta.FilterExpression MetricFilter {
      get { return metricFilter_; }
      set {
        metricFilter_ = value;
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 6;
    private int pageSize_;
    /// <summary>
    /// Page size specifies maximum number of rows to return. If unspecified, up to
    /// 10,000 rows are returned. The API returns a maximum of 100,000 rows per
    /// request, no matter how many you ask for. Page size must be positive.
    ///
    /// The API can also return fewer rows than the requested `pageSize`, if there
    /// aren't as many dimension values as the `pageSize`. For instance, there are
    /// fewer than 300 possible values for the dimension `country`, so when
    /// reporting on only `country`, you can't get more than 300 rows, even if you
    /// set `pageSize` to a higher value.
    ///
    /// To learn more about this pagination parameter, see
    /// [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/realtime-basics#pagination).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "metric_aggregations" field.</summary>
    public const int MetricAggregationsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.MetricAggregation> _repeated_metricAggregations_codec
        = pb::FieldCodec.ForEnum(58, x => (int) x, x => (global::Google.Analytics.Data.V1Beta.MetricAggregation) x);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.MetricAggregation> metricAggregations_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.MetricAggregation>();
    /// <summary>
    /// Aggregation of metrics. Aggregated metric values will be shown in rows
    /// where the dimension_values are set to "RESERVED_(MetricAggregation)".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.MetricAggregation> MetricAggregations {
      get { return metricAggregations_; }
    }

    /// <summary>Field number for the "order_bys" field.</summary>
    public const int OrderBysFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.OrderBy> _repeated_orderBys_codec
        = pb::FieldCodec.ForMessage(66, global::Google.Analytics.Data.V1Beta.OrderBy.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.OrderBy> orderBys_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.OrderBy>();
    /// <summary>
    /// Specifies how rows are ordered in the response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.OrderBy> OrderBys {
      get { return orderBys_; }
    }

    /// <summary>Field number for the "return_property_quota" field.</summary>
    public const int ReturnPropertyQuotaFieldNumber = 9;
    private bool returnPropertyQuota_;
    /// <summary>
    /// Toggles whether to return the current state of this Analytics Property's
    /// Realtime quota. Quota is returned in [PropertyQuota](#PropertyQuota).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReturnPropertyQuota {
      get { return returnPropertyQuota_; }
      set {
        returnPropertyQuota_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunRealtimeReportRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunRealtimeReportRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Property != other.Property) return false;
      if(!dimensions_.Equals(other.dimensions_)) return false;
      if(!metrics_.Equals(other.metrics_)) return false;
      if (!object.Equals(DimensionFilter, other.DimensionFilter)) return false;
      if (!object.Equals(MetricFilter, other.MetricFilter)) return false;
      if (PageSize != other.PageSize) return false;
      if(!metricAggregations_.Equals(other.metricAggregations_)) return false;
      if(!orderBys_.Equals(other.orderBys_)) return false;
      if (ReturnPropertyQuota != other.ReturnPropertyQuota) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Property.Length != 0) hash ^= Property.GetHashCode();
      hash ^= dimensions_.GetHashCode();
      hash ^= metrics_.GetHashCode();
      if (dimensionFilter_ != null) hash ^= DimensionFilter.GetHashCode();
      if (metricFilter_ != null) hash ^= MetricFilter.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      hash ^= metricAggregations_.GetHashCode();
      hash ^= orderBys_.GetHashCode();
      if (ReturnPropertyQuota != false) hash ^= ReturnPropertyQuota.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Property.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Property);
      }
      dimensions_.WriteTo(output, _repeated_dimensions_codec);
      metrics_.WriteTo(output, _repeated_metrics_codec);
      if (dimensionFilter_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DimensionFilter);
      }
      if (metricFilter_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(MetricFilter);
      }
      if (PageSize != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PageSize);
      }
      metricAggregations_.WriteTo(output, _repeated_metricAggregations_codec);
      orderBys_.WriteTo(output, _repeated_orderBys_codec);
      if (ReturnPropertyQuota != false) {
        output.WriteRawTag(72);
        output.WriteBool(ReturnPropertyQuota);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Property.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Property);
      }
      dimensions_.WriteTo(ref output, _repeated_dimensions_codec);
      metrics_.WriteTo(ref output, _repeated_metrics_codec);
      if (dimensionFilter_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DimensionFilter);
      }
      if (metricFilter_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(MetricFilter);
      }
      if (PageSize != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PageSize);
      }
      metricAggregations_.WriteTo(ref output, _repeated_metricAggregations_codec);
      orderBys_.WriteTo(ref output, _repeated_orderBys_codec);
      if (ReturnPropertyQuota != false) {
        output.WriteRawTag(72);
        output.WriteBool(ReturnPropertyQuota);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Property.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Property);
      }
      size += dimensions_.CalculateSize(_repeated_dimensions_codec);
      size += metrics_.CalculateSize(_repeated_metrics_codec);
      if (dimensionFilter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DimensionFilter);
      }
      if (metricFilter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MetricFilter);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      size += metricAggregations_.CalculateSize(_repeated_metricAggregations_codec);
      size += orderBys_.CalculateSize(_repeated_orderBys_codec);
      if (ReturnPropertyQuota != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunRealtimeReportRequest other) {
      if (other == null) {
        return;
      }
      if (other.Property.Length != 0) {
        Property = other.Property;
      }
      dimensions_.Add(other.dimensions_);
      metrics_.Add(other.metrics_);
      if (other.dimensionFilter_ != null) {
        if (dimensionFilter_ == null) {
          DimensionFilter = new global::Google.Analytics.Data.V1Beta.FilterExpression();
        }
        DimensionFilter.MergeFrom(other.DimensionFilter);
      }
      if (other.metricFilter_ != null) {
        if (metricFilter_ == null) {
          MetricFilter = new global::Google.Analytics.Data.V1Beta.FilterExpression();
        }
        MetricFilter.MergeFrom(other.MetricFilter);
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      metricAggregations_.Add(other.metricAggregations_);
      orderBys_.Add(other.orderBys_);
      if (other.ReturnPropertyQuota != false) {
        ReturnPropertyQuota = other.ReturnPropertyQuota;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Property = input.ReadString();
            break;
          }
          case 18: {
            dimensions_.AddEntriesFrom(input, _repeated_dimensions_codec);
            break;
          }
          case 26: {
            metrics_.AddEntriesFrom(input, _repeated_metrics_codec);
            break;
          }
          case 34: {
            if (dimensionFilter_ == null) {
              DimensionFilter = new global::Google.Analytics.Data.V1Beta.FilterExpression();
            }
            input.ReadMessage(DimensionFilter);
            break;
          }
          case 42: {
            if (metricFilter_ == null) {
              MetricFilter = new global::Google.Analytics.Data.V1Beta.FilterExpression();
            }
            input.ReadMessage(MetricFilter);
            break;
          }
          case 48: {
            PageSize = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            metricAggregations_.AddEntriesFrom(input, _repeated_metricAggregations_codec);
            break;
          }
          case 66: {
            orderBys_.AddEntriesFrom(input, _repeated_orderBys_codec);
            break;
          }
          case 72: {
            ReturnPropertyQuota = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Property = input.ReadString();
            break;
          }
          case 18: {
            dimensions_.AddEntriesFrom(ref input, _repeated_dimensions_codec);
            break;
          }
          case 26: {
            metrics_.AddEntriesFrom(ref input, _repeated_metrics_codec);
            break;
          }
          case 34: {
            if (dimensionFilter_ == null) {
              DimensionFilter = new global::Google.Analytics.Data.V1Beta.FilterExpression();
            }
            input.ReadMessage(DimensionFilter);
            break;
          }
          case 42: {
            if (metricFilter_ == null) {
              MetricFilter = new global::Google.Analytics.Data.V1Beta.FilterExpression();
            }
            input.ReadMessage(MetricFilter);
            break;
          }
          case 48: {
            PageSize = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            metricAggregations_.AddEntriesFrom(ref input, _repeated_metricAggregations_codec);
            break;
          }
          case 66: {
            orderBys_.AddEntriesFrom(ref input, _repeated_orderBys_codec);
            break;
          }
          case 72: {
            ReturnPropertyQuota = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The response realtime report table corresponding to a request.
  /// </summary>
  public sealed partial class RunRealtimeReportResponse : pb::IMessage<RunRealtimeReportResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RunRealtimeReportResponse> _parser = new pb::MessageParser<RunRealtimeReportResponse>(() => new RunRealtimeReportResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunRealtimeReportResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Analytics.Data.V1Beta.AnalyticsDataApiReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunRealtimeReportResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunRealtimeReportResponse(RunRealtimeReportResponse other) : this() {
      dimensionHeaders_ = other.dimensionHeaders_.Clone();
      metricHeaders_ = other.metricHeaders_.Clone();
      rows_ = other.rows_.Clone();
      totals_ = other.totals_.Clone();
      maximums_ = other.maximums_.Clone();
      minimums_ = other.minimums_.Clone();
      totalSize_ = other.totalSize_;
      propertyQuota_ = other.propertyQuota_ != null ? other.propertyQuota_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunRealtimeReportResponse Clone() {
      return new RunRealtimeReportResponse(this);
    }

    /// <summary>Field number for the "dimension_headers" field.</summary>
    public const int DimensionHeadersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.DimensionHeader> _repeated_dimensionHeaders_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Analytics.Data.V1Beta.DimensionHeader.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.DimensionHeader> dimensionHeaders_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.DimensionHeader>();
    /// <summary>
    /// Describes dimension columns. The number of DimensionHeaders and ordering of
    /// DimensionHeaders matches the dimensions present in rows.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.DimensionHeader> DimensionHeaders {
      get { return dimensionHeaders_; }
    }

    /// <summary>Field number for the "metric_headers" field.</summary>
    public const int MetricHeadersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.MetricHeader> _repeated_metricHeaders_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Analytics.Data.V1Beta.MetricHeader.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.MetricHeader> metricHeaders_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.MetricHeader>();
    /// <summary>
    /// Describes metric columns. The number of MetricHeaders and ordering of
    /// MetricHeaders matches the metrics present in rows.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.MetricHeader> MetricHeaders {
      get { return metricHeaders_; }
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.Row> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Analytics.Data.V1Beta.Row.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row> rows_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row>();
    /// <summary>
    /// Rows of dimension value combinations and metric values in the report.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row> Rows {
      get { return rows_; }
    }

    /// <summary>Field number for the "totals" field.</summary>
    public const int TotalsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.Row> _repeated_totals_codec
        = pb::FieldCodec.ForMessage(34, global::Google.Analytics.Data.V1Beta.Row.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row> totals_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row>();
    /// <summary>
    /// If requested, the totaled values of metrics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row> Totals {
      get { return totals_; }
    }

    /// <summary>Field number for the "maximums" field.</summary>
    public const int MaximumsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.Row> _repeated_maximums_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Analytics.Data.V1Beta.Row.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row> maximums_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row>();
    /// <summary>
    /// If requested, the maximum values of metrics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row> Maximums {
      get { return maximums_; }
    }

    /// <summary>Field number for the "minimums" field.</summary>
    public const int MinimumsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Google.Analytics.Data.V1Beta.Row> _repeated_minimums_codec
        = pb::FieldCodec.ForMessage(50, global::Google.Analytics.Data.V1Beta.Row.Parser);
    private readonly pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row> minimums_ = new pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row>();
    /// <summary>
    /// If requested, the minimum values of metrics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Analytics.Data.V1Beta.Row> Minimums {
      get { return minimums_; }
    }

    /// <summary>Field number for the "total_size" field.</summary>
    public const int TotalSizeFieldNumber = 7;
    private int totalSize_;
    /// <summary>
    /// The total number of rows in the query result. `totalSize` is independent of
    /// the number of rows returned in the response and the `pageSize` request
    /// parameter. For example if a query returns 175 rows and includes `pageSize`
    /// of 50 in the API request, the response will contain `totalSize` of 175 but
    /// only 50 rows.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalSize {
      get { return totalSize_; }
      set {
        totalSize_ = value;
      }
    }

    /// <summary>Field number for the "property_quota" field.</summary>
    public const int PropertyQuotaFieldNumber = 8;
    private global::Google.Analytics.Data.V1Beta.PropertyQuota propertyQuota_;
    /// <summary>
    /// This Analytics Property's Realtime quota state including this request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Analytics.Data.V1Beta.PropertyQuota PropertyQuota {
      get { return propertyQuota_; }
      set {
        propertyQuota_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunRealtimeReportResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunRealtimeReportResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dimensionHeaders_.Equals(other.dimensionHeaders_)) return false;
      if(!metricHeaders_.Equals(other.metricHeaders_)) return false;
      if(!rows_.Equals(other.rows_)) return false;
      if(!totals_.Equals(other.totals_)) return false;
      if(!maximums_.Equals(other.maximums_)) return false;
      if(!minimums_.Equals(other.minimums_)) return false;
      if (TotalSize != other.TotalSize) return false;
      if (!object.Equals(PropertyQuota, other.PropertyQuota)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dimensionHeaders_.GetHashCode();
      hash ^= metricHeaders_.GetHashCode();
      hash ^= rows_.GetHashCode();
      hash ^= totals_.GetHashCode();
      hash ^= maximums_.GetHashCode();
      hash ^= minimums_.GetHashCode();
      if (TotalSize != 0) hash ^= TotalSize.GetHashCode();
      if (propertyQuota_ != null) hash ^= PropertyQuota.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      dimensionHeaders_.WriteTo(output, _repeated_dimensionHeaders_codec);
      metricHeaders_.WriteTo(output, _repeated_metricHeaders_codec);
      rows_.WriteTo(output, _repeated_rows_codec);
      totals_.WriteTo(output, _repeated_totals_codec);
      maximums_.WriteTo(output, _repeated_maximums_codec);
      minimums_.WriteTo(output, _repeated_minimums_codec);
      if (TotalSize != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TotalSize);
      }
      if (propertyQuota_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PropertyQuota);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      dimensionHeaders_.WriteTo(ref output, _repeated_dimensionHeaders_codec);
      metricHeaders_.WriteTo(ref output, _repeated_metricHeaders_codec);
      rows_.WriteTo(ref output, _repeated_rows_codec);
      totals_.WriteTo(ref output, _repeated_totals_codec);
      maximums_.WriteTo(ref output, _repeated_maximums_codec);
      minimums_.WriteTo(ref output, _repeated_minimums_codec);
      if (TotalSize != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TotalSize);
      }
      if (propertyQuota_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PropertyQuota);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dimensionHeaders_.CalculateSize(_repeated_dimensionHeaders_codec);
      size += metricHeaders_.CalculateSize(_repeated_metricHeaders_codec);
      size += rows_.CalculateSize(_repeated_rows_codec);
      size += totals_.CalculateSize(_repeated_totals_codec);
      size += maximums_.CalculateSize(_repeated_maximums_codec);
      size += minimums_.CalculateSize(_repeated_minimums_codec);
      if (TotalSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalSize);
      }
      if (propertyQuota_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PropertyQuota);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunRealtimeReportResponse other) {
      if (other == null) {
        return;
      }
      dimensionHeaders_.Add(other.dimensionHeaders_);
      metricHeaders_.Add(other.metricHeaders_);
      rows_.Add(other.rows_);
      totals_.Add(other.totals_);
      maximums_.Add(other.maximums_);
      minimums_.Add(other.minimums_);
      if (other.TotalSize != 0) {
        TotalSize = other.TotalSize;
      }
      if (other.propertyQuota_ != null) {
        if (propertyQuota_ == null) {
          PropertyQuota = new global::Google.Analytics.Data.V1Beta.PropertyQuota();
        }
        PropertyQuota.MergeFrom(other.PropertyQuota);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dimensionHeaders_.AddEntriesFrom(input, _repeated_dimensionHeaders_codec);
            break;
          }
          case 18: {
            metricHeaders_.AddEntriesFrom(input, _repeated_metricHeaders_codec);
            break;
          }
          case 26: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
          case 34: {
            totals_.AddEntriesFrom(input, _repeated_totals_codec);
            break;
          }
          case 42: {
            maximums_.AddEntriesFrom(input, _repeated_maximums_codec);
            break;
          }
          case 50: {
            minimums_.AddEntriesFrom(input, _repeated_minimums_codec);
            break;
          }
          case 56: {
            TotalSize = input.ReadInt32();
            break;
          }
          case 66: {
            if (propertyQuota_ == null) {
              PropertyQuota = new global::Google.Analytics.Data.V1Beta.PropertyQuota();
            }
            input.ReadMessage(PropertyQuota);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            dimensionHeaders_.AddEntriesFrom(ref input, _repeated_dimensionHeaders_codec);
            break;
          }
          case 18: {
            metricHeaders_.AddEntriesFrom(ref input, _repeated_metricHeaders_codec);
            break;
          }
          case 26: {
            rows_.AddEntriesFrom(ref input, _repeated_rows_codec);
            break;
          }
          case 34: {
            totals_.AddEntriesFrom(ref input, _repeated_totals_codec);
            break;
          }
          case 42: {
            maximums_.AddEntriesFrom(ref input, _repeated_maximums_codec);
            break;
          }
          case 50: {
            minimums_.AddEntriesFrom(ref input, _repeated_minimums_codec);
            break;
          }
          case 56: {
            TotalSize = input.ReadInt32();
            break;
          }
          case 66: {
            if (propertyQuota_ == null) {
              PropertyQuota = new global::Google.Analytics.Data.V1Beta.PropertyQuota();
            }
            input.ReadMessage(PropertyQuota);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
