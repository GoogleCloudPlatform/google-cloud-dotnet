// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/admin/instance/v1/spanner_instance_admin.proto
// Original file comments:
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Google.Cloud.Spanner.Admin.Instance.V1 {
  /// <summary>
  ///  Cloud Spanner Instance Admin API
  ///
  ///  The Cloud Spanner Instance Admin API can be used to create, delete,
  ///  modify and list instances. Instances are dedicated Cloud Spanner serving
  ///  and storage resources to be used by Cloud Spanner databases.
  ///
  ///  Each instance has a "configuration", which dictates where the
  ///  serving resources for the Cloud Spanner instance are located (e.g.,
  ///  US-central, Europe). Configurations are created by Google based on
  ///  resource availability.
  ///
  ///  Cloud Spanner billing is based on the instances that exist and their
  ///  sizes. After an instance exists, there are no additional
  ///  per-database or per-operation charges for use of the instance
  ///  (though there may be additional network bandwidth charges).
  ///  Instances offer isolation: problems with databases in one instance
  ///  will not affect other instances. However, within an instance
  ///  databases can affect each other. For example, if one database in an
  ///  instance receives a lot of requests and consumes most of the
  ///  instance resources, fewer resources are available for other
  ///  databases in that instance, and their performance may suffer.
  /// </summary>
  public static class InstanceAdmin
  {
    static readonly string __ServiceName = "google.spanner.admin.instance.v1.InstanceAdmin";

    static readonly Marshaller<global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstanceConfigsRequest> __Marshaller_ListInstanceConfigsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstanceConfigsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstanceConfigsResponse> __Marshaller_ListInstanceConfigsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstanceConfigsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Spanner.Admin.Instance.V1.GetInstanceConfigRequest> __Marshaller_GetInstanceConfigRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.Admin.Instance.V1.GetInstanceConfigRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Spanner.Admin.Instance.V1.InstanceConfig> __Marshaller_InstanceConfig = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.Admin.Instance.V1.InstanceConfig.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstancesRequest> __Marshaller_ListInstancesRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstancesRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstancesResponse> __Marshaller_ListInstancesResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstancesResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Spanner.Admin.Instance.V1.GetInstanceRequest> __Marshaller_GetInstanceRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.Admin.Instance.V1.GetInstanceRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Spanner.Admin.Instance.V1.Instance> __Marshaller_Instance = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.Admin.Instance.V1.Instance.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Spanner.Admin.Instance.V1.CreateInstanceRequest> __Marshaller_CreateInstanceRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.Admin.Instance.V1.CreateInstanceRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.LongRunning.Operation> __Marshaller_Operation = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.LongRunning.Operation.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Spanner.Admin.Instance.V1.UpdateInstanceRequest> __Marshaller_UpdateInstanceRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.Admin.Instance.V1.UpdateInstanceRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Spanner.Admin.Instance.V1.DeleteInstanceRequest> __Marshaller_DeleteInstanceRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.Admin.Instance.V1.DeleteInstanceRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Iam.V1.SetIamPolicyRequest> __Marshaller_SetIamPolicyRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.SetIamPolicyRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Iam.V1.Policy> __Marshaller_Policy = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.Policy.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Iam.V1.GetIamPolicyRequest> __Marshaller_GetIamPolicyRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.GetIamPolicyRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest> __Marshaller_TestIamPermissionsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.TestIamPermissionsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Marshaller_TestIamPermissionsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.TestIamPermissionsResponse.Parser.ParseFrom);

    static readonly Method<global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstanceConfigsRequest, global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstanceConfigsResponse> __Method_ListInstanceConfigs = new Method<global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstanceConfigsRequest, global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstanceConfigsResponse>(
        MethodType.Unary,
        __ServiceName,
        "ListInstanceConfigs",
        __Marshaller_ListInstanceConfigsRequest,
        __Marshaller_ListInstanceConfigsResponse);

    static readonly Method<global::Google.Cloud.Spanner.Admin.Instance.V1.GetInstanceConfigRequest, global::Google.Cloud.Spanner.Admin.Instance.V1.InstanceConfig> __Method_GetInstanceConfig = new Method<global::Google.Cloud.Spanner.Admin.Instance.V1.GetInstanceConfigRequest, global::Google.Cloud.Spanner.Admin.Instance.V1.InstanceConfig>(
        MethodType.Unary,
        __ServiceName,
        "GetInstanceConfig",
        __Marshaller_GetInstanceConfigRequest,
        __Marshaller_InstanceConfig);

    static readonly Method<global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstancesRequest, global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstancesResponse> __Method_ListInstances = new Method<global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstancesRequest, global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstancesResponse>(
        MethodType.Unary,
        __ServiceName,
        "ListInstances",
        __Marshaller_ListInstancesRequest,
        __Marshaller_ListInstancesResponse);

    static readonly Method<global::Google.Cloud.Spanner.Admin.Instance.V1.GetInstanceRequest, global::Google.Cloud.Spanner.Admin.Instance.V1.Instance> __Method_GetInstance = new Method<global::Google.Cloud.Spanner.Admin.Instance.V1.GetInstanceRequest, global::Google.Cloud.Spanner.Admin.Instance.V1.Instance>(
        MethodType.Unary,
        __ServiceName,
        "GetInstance",
        __Marshaller_GetInstanceRequest,
        __Marshaller_Instance);

    static readonly Method<global::Google.Cloud.Spanner.Admin.Instance.V1.CreateInstanceRequest, global::Google.LongRunning.Operation> __Method_CreateInstance = new Method<global::Google.Cloud.Spanner.Admin.Instance.V1.CreateInstanceRequest, global::Google.LongRunning.Operation>(
        MethodType.Unary,
        __ServiceName,
        "CreateInstance",
        __Marshaller_CreateInstanceRequest,
        __Marshaller_Operation);

    static readonly Method<global::Google.Cloud.Spanner.Admin.Instance.V1.UpdateInstanceRequest, global::Google.LongRunning.Operation> __Method_UpdateInstance = new Method<global::Google.Cloud.Spanner.Admin.Instance.V1.UpdateInstanceRequest, global::Google.LongRunning.Operation>(
        MethodType.Unary,
        __ServiceName,
        "UpdateInstance",
        __Marshaller_UpdateInstanceRequest,
        __Marshaller_Operation);

    static readonly Method<global::Google.Cloud.Spanner.Admin.Instance.V1.DeleteInstanceRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteInstance = new Method<global::Google.Cloud.Spanner.Admin.Instance.V1.DeleteInstanceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        MethodType.Unary,
        __ServiceName,
        "DeleteInstance",
        __Marshaller_DeleteInstanceRequest,
        __Marshaller_Empty);

    static readonly Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_SetIamPolicy = new Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_SetIamPolicyRequest,
        __Marshaller_Policy);

    static readonly Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_GetIamPolicy = new Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_GetIamPolicyRequest,
        __Marshaller_Policy);

    static readonly Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Method_TestIamPermissions = new Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse>(
        MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_TestIamPermissionsRequest,
        __Marshaller_TestIamPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Spanner.Admin.Instance.V1.SpannerInstanceAdminReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of InstanceAdmin</summary>
    public abstract class InstanceAdminBase
    {
      /// <summary>
      ///  Lists the supported instance configurations for a given project.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstanceConfigsResponse> ListInstanceConfigs(global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstanceConfigsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Gets information about a particular instance configuration.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.Admin.Instance.V1.InstanceConfig> GetInstanceConfig(global::Google.Cloud.Spanner.Admin.Instance.V1.GetInstanceConfigRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Lists all instances in the given project.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstancesResponse> ListInstances(global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstancesRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Gets information about a particular instance.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.Admin.Instance.V1.Instance> GetInstance(global::Google.Cloud.Spanner.Admin.Instance.V1.GetInstanceRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Creates an instance and begins preparing it to begin serving. The
      ///  returned [long-running operation][google.longrunning.Operation]
      ///  can be used to track the progress of preparing the new
      ///  instance. The instance name is assigned by the caller. If the
      ///  named instance already exists, `CreateInstance` returns
      ///  `ALREADY_EXISTS`.
      ///
      ///  Immediately upon completion of this request:
      ///
      ///    * The instance is readable via the API, with all requested attributes
      ///      but no allocated resources. Its state is `CREATING`.
      ///
      ///  Until completion of the returned operation:
      ///
      ///    * Cancelling the operation renders the instance immediately unreadable
      ///      via the API.
      ///    * The instance can be deleted.
      ///    * All other attempts to modify the instance are rejected.
      ///
      ///  Upon completion of the returned operation:
      ///
      ///    * Billing for all successfully-allocated resources begins (some types
      ///      may have lower than the requested levels).
      ///    * Databases can be created in the instance.
      ///    * The instance's allocated resource levels are readable via the API.
      ///    * The instance's state becomes `READY`.
      ///
      ///  The returned [long-running operation][google.longrunning.Operation] will
      ///  have a name of the format `&lt;instance_name>/operations/&lt;operation_id>` and
      ///  can be used to track creation of the instance.  The
      ///  [metadata][google.longrunning.Operation.metadata] field type is
      ///  [CreateInstanceMetadata][google.spanner.admin.instance.v1.CreateInstanceMetadata].
      ///  The [response][google.longrunning.Operation.response] field type is
      ///  [Instance][google.spanner.admin.instance.v1.Instance], if successful.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateInstance(global::Google.Cloud.Spanner.Admin.Instance.V1.CreateInstanceRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Updates an instance, and begins allocating or releasing resources
      ///  as requested. The returned [long-running
      ///  operation][google.longrunning.Operation] can be used to track the
      ///  progress of updating the instance. If the named instance does not
      ///  exist, returns `NOT_FOUND`.
      ///
      ///  Immediately upon completion of this request:
      ///
      ///    * For resource types for which a decrease in the instance's allocation
      ///      has been requested, billing is based on the newly-requested level.
      ///
      ///  Until completion of the returned operation:
      ///
      ///    * Cancelling the operation sets its metadata's
      ///      [cancel_time][google.spanner.admin.instance.v1.UpdateInstanceMetadata.cancel_time], and begins
      ///      restoring resources to their pre-request values. The operation
      ///      is guaranteed to succeed at undoing all resource changes,
      ///      after which point it terminates with a `CANCELLED` status.
      ///    * All other attempts to modify the instance are rejected.
      ///    * Reading the instance via the API continues to give the pre-request
      ///      resource levels.
      ///
      ///  Upon completion of the returned operation:
      ///
      ///    * Billing begins for all successfully-allocated resources (some types
      ///      may have lower than the requested levels).
      ///    * All newly-reserved resources are available for serving the instance's
      ///      tables.
      ///    * The instance's new resource levels are readable via the API.
      ///
      ///  The returned [long-running operation][google.longrunning.Operation] will
      ///  have a name of the format `&lt;instance_name>/operations/&lt;operation_id>` and
      ///  can be used to track the instance modification.  The
      ///  [metadata][google.longrunning.Operation.metadata] field type is
      ///  [UpdateInstanceMetadata][google.spanner.admin.instance.v1.UpdateInstanceMetadata].
      ///  The [response][google.longrunning.Operation.response] field type is
      ///  [Instance][google.spanner.admin.instance.v1.Instance], if successful.
      ///
      ///  Authorization requires `spanner.instances.update` permission on
      ///  resource [name][google.spanner.admin.instance.v1.Instance.name].
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateInstance(global::Google.Cloud.Spanner.Admin.Instance.V1.UpdateInstanceRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Deletes an instance.
      ///
      ///  Immediately upon completion of the request:
      ///
      ///    * Billing ceases for all of the instance's reserved resources.
      ///
      ///  Soon afterward:
      ///
      ///    * The instance and *all of its databases* immediately and
      ///      irrevocably disappear from the API. All data in the databases
      ///      is permanently deleted.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteInstance(global::Google.Cloud.Spanner.Admin.Instance.V1.DeleteInstanceRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Sets the access control policy on an instance resource. Replaces any
      ///  existing policy.
      ///
      ///  Authorization requires `spanner.instances.setIamPolicy` on
      ///  [resource][google.iam.v1.SetIamPolicyRequest.resource].
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Gets the access control policy for an instance resource. Returns an empty
      ///  policy if an instance exists but does not have a policy set.
      ///
      ///  Authorization requires `spanner.instances.getIamPolicy` on
      ///  [resource][google.iam.v1.GetIamPolicyRequest.resource].
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Returns permissions that the caller has on the specified instance resource.
      ///
      ///  Attempting this RPC on a non-existent Cloud Spanner instance resource will
      ///  result in a NOT_FOUND error if the user has `spanner.instances.list`
      ///  permission on the containing Google Cloud Project. Otherwise returns an
      ///  empty set of permissions.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for InstanceAdmin</summary>
    public class InstanceAdminClient : ClientBase<InstanceAdminClient>
    {
      /// <summary>Creates a new client for InstanceAdmin</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public InstanceAdminClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for InstanceAdmin that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public InstanceAdminClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected InstanceAdminClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected InstanceAdminClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Lists the supported instance configurations for a given project.
      /// </summary>
      public virtual global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstanceConfigsResponse ListInstanceConfigs(global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstanceConfigsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListInstanceConfigs(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists the supported instance configurations for a given project.
      /// </summary>
      public virtual global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstanceConfigsResponse ListInstanceConfigs(global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstanceConfigsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListInstanceConfigs, null, options, request);
      }
      /// <summary>
      ///  Lists the supported instance configurations for a given project.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstanceConfigsResponse> ListInstanceConfigsAsync(global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstanceConfigsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListInstanceConfigsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists the supported instance configurations for a given project.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstanceConfigsResponse> ListInstanceConfigsAsync(global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstanceConfigsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListInstanceConfigs, null, options, request);
      }
      /// <summary>
      ///  Gets information about a particular instance configuration.
      /// </summary>
      public virtual global::Google.Cloud.Spanner.Admin.Instance.V1.InstanceConfig GetInstanceConfig(global::Google.Cloud.Spanner.Admin.Instance.V1.GetInstanceConfigRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetInstanceConfig(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets information about a particular instance configuration.
      /// </summary>
      public virtual global::Google.Cloud.Spanner.Admin.Instance.V1.InstanceConfig GetInstanceConfig(global::Google.Cloud.Spanner.Admin.Instance.V1.GetInstanceConfigRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInstanceConfig, null, options, request);
      }
      /// <summary>
      ///  Gets information about a particular instance configuration.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Instance.V1.InstanceConfig> GetInstanceConfigAsync(global::Google.Cloud.Spanner.Admin.Instance.V1.GetInstanceConfigRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetInstanceConfigAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets information about a particular instance configuration.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Instance.V1.InstanceConfig> GetInstanceConfigAsync(global::Google.Cloud.Spanner.Admin.Instance.V1.GetInstanceConfigRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInstanceConfig, null, options, request);
      }
      /// <summary>
      ///  Lists all instances in the given project.
      /// </summary>
      public virtual global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstancesResponse ListInstances(global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstancesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListInstances(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists all instances in the given project.
      /// </summary>
      public virtual global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstancesResponse ListInstances(global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstancesRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListInstances, null, options, request);
      }
      /// <summary>
      ///  Lists all instances in the given project.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstancesResponse> ListInstancesAsync(global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstancesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListInstancesAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists all instances in the given project.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstancesResponse> ListInstancesAsync(global::Google.Cloud.Spanner.Admin.Instance.V1.ListInstancesRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListInstances, null, options, request);
      }
      /// <summary>
      ///  Gets information about a particular instance.
      /// </summary>
      public virtual global::Google.Cloud.Spanner.Admin.Instance.V1.Instance GetInstance(global::Google.Cloud.Spanner.Admin.Instance.V1.GetInstanceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetInstance(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets information about a particular instance.
      /// </summary>
      public virtual global::Google.Cloud.Spanner.Admin.Instance.V1.Instance GetInstance(global::Google.Cloud.Spanner.Admin.Instance.V1.GetInstanceRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInstance, null, options, request);
      }
      /// <summary>
      ///  Gets information about a particular instance.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Instance.V1.Instance> GetInstanceAsync(global::Google.Cloud.Spanner.Admin.Instance.V1.GetInstanceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetInstanceAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets information about a particular instance.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Instance.V1.Instance> GetInstanceAsync(global::Google.Cloud.Spanner.Admin.Instance.V1.GetInstanceRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInstance, null, options, request);
      }
      /// <summary>
      ///  Creates an instance and begins preparing it to begin serving. The
      ///  returned [long-running operation][google.longrunning.Operation]
      ///  can be used to track the progress of preparing the new
      ///  instance. The instance name is assigned by the caller. If the
      ///  named instance already exists, `CreateInstance` returns
      ///  `ALREADY_EXISTS`.
      ///
      ///  Immediately upon completion of this request:
      ///
      ///    * The instance is readable via the API, with all requested attributes
      ///      but no allocated resources. Its state is `CREATING`.
      ///
      ///  Until completion of the returned operation:
      ///
      ///    * Cancelling the operation renders the instance immediately unreadable
      ///      via the API.
      ///    * The instance can be deleted.
      ///    * All other attempts to modify the instance are rejected.
      ///
      ///  Upon completion of the returned operation:
      ///
      ///    * Billing for all successfully-allocated resources begins (some types
      ///      may have lower than the requested levels).
      ///    * Databases can be created in the instance.
      ///    * The instance's allocated resource levels are readable via the API.
      ///    * The instance's state becomes `READY`.
      ///
      ///  The returned [long-running operation][google.longrunning.Operation] will
      ///  have a name of the format `&lt;instance_name>/operations/&lt;operation_id>` and
      ///  can be used to track creation of the instance.  The
      ///  [metadata][google.longrunning.Operation.metadata] field type is
      ///  [CreateInstanceMetadata][google.spanner.admin.instance.v1.CreateInstanceMetadata].
      ///  The [response][google.longrunning.Operation.response] field type is
      ///  [Instance][google.spanner.admin.instance.v1.Instance], if successful.
      /// </summary>
      public virtual global::Google.LongRunning.Operation CreateInstance(global::Google.Cloud.Spanner.Admin.Instance.V1.CreateInstanceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateInstance(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates an instance and begins preparing it to begin serving. The
      ///  returned [long-running operation][google.longrunning.Operation]
      ///  can be used to track the progress of preparing the new
      ///  instance. The instance name is assigned by the caller. If the
      ///  named instance already exists, `CreateInstance` returns
      ///  `ALREADY_EXISTS`.
      ///
      ///  Immediately upon completion of this request:
      ///
      ///    * The instance is readable via the API, with all requested attributes
      ///      but no allocated resources. Its state is `CREATING`.
      ///
      ///  Until completion of the returned operation:
      ///
      ///    * Cancelling the operation renders the instance immediately unreadable
      ///      via the API.
      ///    * The instance can be deleted.
      ///    * All other attempts to modify the instance are rejected.
      ///
      ///  Upon completion of the returned operation:
      ///
      ///    * Billing for all successfully-allocated resources begins (some types
      ///      may have lower than the requested levels).
      ///    * Databases can be created in the instance.
      ///    * The instance's allocated resource levels are readable via the API.
      ///    * The instance's state becomes `READY`.
      ///
      ///  The returned [long-running operation][google.longrunning.Operation] will
      ///  have a name of the format `&lt;instance_name>/operations/&lt;operation_id>` and
      ///  can be used to track creation of the instance.  The
      ///  [metadata][google.longrunning.Operation.metadata] field type is
      ///  [CreateInstanceMetadata][google.spanner.admin.instance.v1.CreateInstanceMetadata].
      ///  The [response][google.longrunning.Operation.response] field type is
      ///  [Instance][google.spanner.admin.instance.v1.Instance], if successful.
      /// </summary>
      public virtual global::Google.LongRunning.Operation CreateInstance(global::Google.Cloud.Spanner.Admin.Instance.V1.CreateInstanceRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateInstance, null, options, request);
      }
      /// <summary>
      ///  Creates an instance and begins preparing it to begin serving. The
      ///  returned [long-running operation][google.longrunning.Operation]
      ///  can be used to track the progress of preparing the new
      ///  instance. The instance name is assigned by the caller. If the
      ///  named instance already exists, `CreateInstance` returns
      ///  `ALREADY_EXISTS`.
      ///
      ///  Immediately upon completion of this request:
      ///
      ///    * The instance is readable via the API, with all requested attributes
      ///      but no allocated resources. Its state is `CREATING`.
      ///
      ///  Until completion of the returned operation:
      ///
      ///    * Cancelling the operation renders the instance immediately unreadable
      ///      via the API.
      ///    * The instance can be deleted.
      ///    * All other attempts to modify the instance are rejected.
      ///
      ///  Upon completion of the returned operation:
      ///
      ///    * Billing for all successfully-allocated resources begins (some types
      ///      may have lower than the requested levels).
      ///    * Databases can be created in the instance.
      ///    * The instance's allocated resource levels are readable via the API.
      ///    * The instance's state becomes `READY`.
      ///
      ///  The returned [long-running operation][google.longrunning.Operation] will
      ///  have a name of the format `&lt;instance_name>/operations/&lt;operation_id>` and
      ///  can be used to track creation of the instance.  The
      ///  [metadata][google.longrunning.Operation.metadata] field type is
      ///  [CreateInstanceMetadata][google.spanner.admin.instance.v1.CreateInstanceMetadata].
      ///  The [response][google.longrunning.Operation.response] field type is
      ///  [Instance][google.spanner.admin.instance.v1.Instance], if successful.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> CreateInstanceAsync(global::Google.Cloud.Spanner.Admin.Instance.V1.CreateInstanceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateInstanceAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates an instance and begins preparing it to begin serving. The
      ///  returned [long-running operation][google.longrunning.Operation]
      ///  can be used to track the progress of preparing the new
      ///  instance. The instance name is assigned by the caller. If the
      ///  named instance already exists, `CreateInstance` returns
      ///  `ALREADY_EXISTS`.
      ///
      ///  Immediately upon completion of this request:
      ///
      ///    * The instance is readable via the API, with all requested attributes
      ///      but no allocated resources. Its state is `CREATING`.
      ///
      ///  Until completion of the returned operation:
      ///
      ///    * Cancelling the operation renders the instance immediately unreadable
      ///      via the API.
      ///    * The instance can be deleted.
      ///    * All other attempts to modify the instance are rejected.
      ///
      ///  Upon completion of the returned operation:
      ///
      ///    * Billing for all successfully-allocated resources begins (some types
      ///      may have lower than the requested levels).
      ///    * Databases can be created in the instance.
      ///    * The instance's allocated resource levels are readable via the API.
      ///    * The instance's state becomes `READY`.
      ///
      ///  The returned [long-running operation][google.longrunning.Operation] will
      ///  have a name of the format `&lt;instance_name>/operations/&lt;operation_id>` and
      ///  can be used to track creation of the instance.  The
      ///  [metadata][google.longrunning.Operation.metadata] field type is
      ///  [CreateInstanceMetadata][google.spanner.admin.instance.v1.CreateInstanceMetadata].
      ///  The [response][google.longrunning.Operation.response] field type is
      ///  [Instance][google.spanner.admin.instance.v1.Instance], if successful.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> CreateInstanceAsync(global::Google.Cloud.Spanner.Admin.Instance.V1.CreateInstanceRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateInstance, null, options, request);
      }
      /// <summary>
      ///  Updates an instance, and begins allocating or releasing resources
      ///  as requested. The returned [long-running
      ///  operation][google.longrunning.Operation] can be used to track the
      ///  progress of updating the instance. If the named instance does not
      ///  exist, returns `NOT_FOUND`.
      ///
      ///  Immediately upon completion of this request:
      ///
      ///    * For resource types for which a decrease in the instance's allocation
      ///      has been requested, billing is based on the newly-requested level.
      ///
      ///  Until completion of the returned operation:
      ///
      ///    * Cancelling the operation sets its metadata's
      ///      [cancel_time][google.spanner.admin.instance.v1.UpdateInstanceMetadata.cancel_time], and begins
      ///      restoring resources to their pre-request values. The operation
      ///      is guaranteed to succeed at undoing all resource changes,
      ///      after which point it terminates with a `CANCELLED` status.
      ///    * All other attempts to modify the instance are rejected.
      ///    * Reading the instance via the API continues to give the pre-request
      ///      resource levels.
      ///
      ///  Upon completion of the returned operation:
      ///
      ///    * Billing begins for all successfully-allocated resources (some types
      ///      may have lower than the requested levels).
      ///    * All newly-reserved resources are available for serving the instance's
      ///      tables.
      ///    * The instance's new resource levels are readable via the API.
      ///
      ///  The returned [long-running operation][google.longrunning.Operation] will
      ///  have a name of the format `&lt;instance_name>/operations/&lt;operation_id>` and
      ///  can be used to track the instance modification.  The
      ///  [metadata][google.longrunning.Operation.metadata] field type is
      ///  [UpdateInstanceMetadata][google.spanner.admin.instance.v1.UpdateInstanceMetadata].
      ///  The [response][google.longrunning.Operation.response] field type is
      ///  [Instance][google.spanner.admin.instance.v1.Instance], if successful.
      ///
      ///  Authorization requires `spanner.instances.update` permission on
      ///  resource [name][google.spanner.admin.instance.v1.Instance.name].
      /// </summary>
      public virtual global::Google.LongRunning.Operation UpdateInstance(global::Google.Cloud.Spanner.Admin.Instance.V1.UpdateInstanceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateInstance(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Updates an instance, and begins allocating or releasing resources
      ///  as requested. The returned [long-running
      ///  operation][google.longrunning.Operation] can be used to track the
      ///  progress of updating the instance. If the named instance does not
      ///  exist, returns `NOT_FOUND`.
      ///
      ///  Immediately upon completion of this request:
      ///
      ///    * For resource types for which a decrease in the instance's allocation
      ///      has been requested, billing is based on the newly-requested level.
      ///
      ///  Until completion of the returned operation:
      ///
      ///    * Cancelling the operation sets its metadata's
      ///      [cancel_time][google.spanner.admin.instance.v1.UpdateInstanceMetadata.cancel_time], and begins
      ///      restoring resources to their pre-request values. The operation
      ///      is guaranteed to succeed at undoing all resource changes,
      ///      after which point it terminates with a `CANCELLED` status.
      ///    * All other attempts to modify the instance are rejected.
      ///    * Reading the instance via the API continues to give the pre-request
      ///      resource levels.
      ///
      ///  Upon completion of the returned operation:
      ///
      ///    * Billing begins for all successfully-allocated resources (some types
      ///      may have lower than the requested levels).
      ///    * All newly-reserved resources are available for serving the instance's
      ///      tables.
      ///    * The instance's new resource levels are readable via the API.
      ///
      ///  The returned [long-running operation][google.longrunning.Operation] will
      ///  have a name of the format `&lt;instance_name>/operations/&lt;operation_id>` and
      ///  can be used to track the instance modification.  The
      ///  [metadata][google.longrunning.Operation.metadata] field type is
      ///  [UpdateInstanceMetadata][google.spanner.admin.instance.v1.UpdateInstanceMetadata].
      ///  The [response][google.longrunning.Operation.response] field type is
      ///  [Instance][google.spanner.admin.instance.v1.Instance], if successful.
      ///
      ///  Authorization requires `spanner.instances.update` permission on
      ///  resource [name][google.spanner.admin.instance.v1.Instance.name].
      /// </summary>
      public virtual global::Google.LongRunning.Operation UpdateInstance(global::Google.Cloud.Spanner.Admin.Instance.V1.UpdateInstanceRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateInstance, null, options, request);
      }
      /// <summary>
      ///  Updates an instance, and begins allocating or releasing resources
      ///  as requested. The returned [long-running
      ///  operation][google.longrunning.Operation] can be used to track the
      ///  progress of updating the instance. If the named instance does not
      ///  exist, returns `NOT_FOUND`.
      ///
      ///  Immediately upon completion of this request:
      ///
      ///    * For resource types for which a decrease in the instance's allocation
      ///      has been requested, billing is based on the newly-requested level.
      ///
      ///  Until completion of the returned operation:
      ///
      ///    * Cancelling the operation sets its metadata's
      ///      [cancel_time][google.spanner.admin.instance.v1.UpdateInstanceMetadata.cancel_time], and begins
      ///      restoring resources to their pre-request values. The operation
      ///      is guaranteed to succeed at undoing all resource changes,
      ///      after which point it terminates with a `CANCELLED` status.
      ///    * All other attempts to modify the instance are rejected.
      ///    * Reading the instance via the API continues to give the pre-request
      ///      resource levels.
      ///
      ///  Upon completion of the returned operation:
      ///
      ///    * Billing begins for all successfully-allocated resources (some types
      ///      may have lower than the requested levels).
      ///    * All newly-reserved resources are available for serving the instance's
      ///      tables.
      ///    * The instance's new resource levels are readable via the API.
      ///
      ///  The returned [long-running operation][google.longrunning.Operation] will
      ///  have a name of the format `&lt;instance_name>/operations/&lt;operation_id>` and
      ///  can be used to track the instance modification.  The
      ///  [metadata][google.longrunning.Operation.metadata] field type is
      ///  [UpdateInstanceMetadata][google.spanner.admin.instance.v1.UpdateInstanceMetadata].
      ///  The [response][google.longrunning.Operation.response] field type is
      ///  [Instance][google.spanner.admin.instance.v1.Instance], if successful.
      ///
      ///  Authorization requires `spanner.instances.update` permission on
      ///  resource [name][google.spanner.admin.instance.v1.Instance.name].
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateInstanceAsync(global::Google.Cloud.Spanner.Admin.Instance.V1.UpdateInstanceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateInstanceAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Updates an instance, and begins allocating or releasing resources
      ///  as requested. The returned [long-running
      ///  operation][google.longrunning.Operation] can be used to track the
      ///  progress of updating the instance. If the named instance does not
      ///  exist, returns `NOT_FOUND`.
      ///
      ///  Immediately upon completion of this request:
      ///
      ///    * For resource types for which a decrease in the instance's allocation
      ///      has been requested, billing is based on the newly-requested level.
      ///
      ///  Until completion of the returned operation:
      ///
      ///    * Cancelling the operation sets its metadata's
      ///      [cancel_time][google.spanner.admin.instance.v1.UpdateInstanceMetadata.cancel_time], and begins
      ///      restoring resources to their pre-request values. The operation
      ///      is guaranteed to succeed at undoing all resource changes,
      ///      after which point it terminates with a `CANCELLED` status.
      ///    * All other attempts to modify the instance are rejected.
      ///    * Reading the instance via the API continues to give the pre-request
      ///      resource levels.
      ///
      ///  Upon completion of the returned operation:
      ///
      ///    * Billing begins for all successfully-allocated resources (some types
      ///      may have lower than the requested levels).
      ///    * All newly-reserved resources are available for serving the instance's
      ///      tables.
      ///    * The instance's new resource levels are readable via the API.
      ///
      ///  The returned [long-running operation][google.longrunning.Operation] will
      ///  have a name of the format `&lt;instance_name>/operations/&lt;operation_id>` and
      ///  can be used to track the instance modification.  The
      ///  [metadata][google.longrunning.Operation.metadata] field type is
      ///  [UpdateInstanceMetadata][google.spanner.admin.instance.v1.UpdateInstanceMetadata].
      ///  The [response][google.longrunning.Operation.response] field type is
      ///  [Instance][google.spanner.admin.instance.v1.Instance], if successful.
      ///
      ///  Authorization requires `spanner.instances.update` permission on
      ///  resource [name][google.spanner.admin.instance.v1.Instance.name].
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateInstanceAsync(global::Google.Cloud.Spanner.Admin.Instance.V1.UpdateInstanceRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateInstance, null, options, request);
      }
      /// <summary>
      ///  Deletes an instance.
      ///
      ///  Immediately upon completion of the request:
      ///
      ///    * Billing ceases for all of the instance's reserved resources.
      ///
      ///  Soon afterward:
      ///
      ///    * The instance and *all of its databases* immediately and
      ///      irrevocably disappear from the API. All data in the databases
      ///      is permanently deleted.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteInstance(global::Google.Cloud.Spanner.Admin.Instance.V1.DeleteInstanceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteInstance(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes an instance.
      ///
      ///  Immediately upon completion of the request:
      ///
      ///    * Billing ceases for all of the instance's reserved resources.
      ///
      ///  Soon afterward:
      ///
      ///    * The instance and *all of its databases* immediately and
      ///      irrevocably disappear from the API. All data in the databases
      ///      is permanently deleted.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteInstance(global::Google.Cloud.Spanner.Admin.Instance.V1.DeleteInstanceRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteInstance, null, options, request);
      }
      /// <summary>
      ///  Deletes an instance.
      ///
      ///  Immediately upon completion of the request:
      ///
      ///    * Billing ceases for all of the instance's reserved resources.
      ///
      ///  Soon afterward:
      ///
      ///    * The instance and *all of its databases* immediately and
      ///      irrevocably disappear from the API. All data in the databases
      ///      is permanently deleted.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteInstanceAsync(global::Google.Cloud.Spanner.Admin.Instance.V1.DeleteInstanceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteInstanceAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes an instance.
      ///
      ///  Immediately upon completion of the request:
      ///
      ///    * Billing ceases for all of the instance's reserved resources.
      ///
      ///  Soon afterward:
      ///
      ///    * The instance and *all of its databases* immediately and
      ///      irrevocably disappear from the API. All data in the databases
      ///      is permanently deleted.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteInstanceAsync(global::Google.Cloud.Spanner.Admin.Instance.V1.DeleteInstanceRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteInstance, null, options, request);
      }
      /// <summary>
      ///  Sets the access control policy on an instance resource. Replaces any
      ///  existing policy.
      ///
      ///  Authorization requires `spanner.instances.setIamPolicy` on
      ///  [resource][google.iam.v1.SetIamPolicyRequest.resource].
      /// </summary>
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetIamPolicy(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Sets the access control policy on an instance resource. Replaces any
      ///  existing policy.
      ///
      ///  Authorization requires `spanner.instances.setIamPolicy` on
      ///  [resource][google.iam.v1.SetIamPolicyRequest.resource].
      /// </summary>
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      ///  Sets the access control policy on an instance resource. Replaces any
      ///  existing policy.
      ///
      ///  Authorization requires `spanner.instances.setIamPolicy` on
      ///  [resource][google.iam.v1.SetIamPolicyRequest.resource].
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetIamPolicyAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Sets the access control policy on an instance resource. Replaces any
      ///  existing policy.
      ///
      ///  Authorization requires `spanner.instances.setIamPolicy` on
      ///  [resource][google.iam.v1.SetIamPolicyRequest.resource].
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      ///  Gets the access control policy for an instance resource. Returns an empty
      ///  policy if an instance exists but does not have a policy set.
      ///
      ///  Authorization requires `spanner.instances.getIamPolicy` on
      ///  [resource][google.iam.v1.GetIamPolicyRequest.resource].
      /// </summary>
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetIamPolicy(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the access control policy for an instance resource. Returns an empty
      ///  policy if an instance exists but does not have a policy set.
      ///
      ///  Authorization requires `spanner.instances.getIamPolicy` on
      ///  [resource][google.iam.v1.GetIamPolicyRequest.resource].
      /// </summary>
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      ///  Gets the access control policy for an instance resource. Returns an empty
      ///  policy if an instance exists but does not have a policy set.
      ///
      ///  Authorization requires `spanner.instances.getIamPolicy` on
      ///  [resource][google.iam.v1.GetIamPolicyRequest.resource].
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetIamPolicyAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the access control policy for an instance resource. Returns an empty
      ///  policy if an instance exists but does not have a policy set.
      ///
      ///  Authorization requires `spanner.instances.getIamPolicy` on
      ///  [resource][google.iam.v1.GetIamPolicyRequest.resource].
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      ///  Returns permissions that the caller has on the specified instance resource.
      ///
      ///  Attempting this RPC on a non-existent Cloud Spanner instance resource will
      ///  result in a NOT_FOUND error if the user has `spanner.instances.list`
      ///  permission on the containing Google Cloud Project. Otherwise returns an
      ///  empty set of permissions.
      /// </summary>
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return TestIamPermissions(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Returns permissions that the caller has on the specified instance resource.
      ///
      ///  Attempting this RPC on a non-existent Cloud Spanner instance resource will
      ///  result in a NOT_FOUND error if the user has `spanner.instances.list`
      ///  permission on the containing Google Cloud Project. Otherwise returns an
      ///  empty set of permissions.
      /// </summary>
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      ///  Returns permissions that the caller has on the specified instance resource.
      ///
      ///  Attempting this RPC on a non-existent Cloud Spanner instance resource will
      ///  result in a NOT_FOUND error if the user has `spanner.instances.list`
      ///  permission on the containing Google Cloud Project. Otherwise returns an
      ///  empty set of permissions.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return TestIamPermissionsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Returns permissions that the caller has on the specified instance resource.
      ///
      ///  Attempting this RPC on a non-existent Cloud Spanner instance resource will
      ///  result in a NOT_FOUND error if the user has `spanner.instances.list`
      ///  permission on the containing Google Cloud Project. Otherwise returns an
      ///  empty set of permissions.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      protected override InstanceAdminClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new InstanceAdminClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(InstanceAdminBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListInstanceConfigs, serviceImpl.ListInstanceConfigs)
          .AddMethod(__Method_GetInstanceConfig, serviceImpl.GetInstanceConfig)
          .AddMethod(__Method_ListInstances, serviceImpl.ListInstances)
          .AddMethod(__Method_GetInstance, serviceImpl.GetInstance)
          .AddMethod(__Method_CreateInstance, serviceImpl.CreateInstance)
          .AddMethod(__Method_UpdateInstance, serviceImpl.UpdateInstance)
          .AddMethod(__Method_DeleteInstance, serviceImpl.DeleteInstance)
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions).Build();
    }

  }
}
#endregion
