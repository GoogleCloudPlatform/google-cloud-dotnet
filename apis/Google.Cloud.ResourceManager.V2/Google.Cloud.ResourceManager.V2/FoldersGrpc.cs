// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/resourcemanager/v2/folders.proto
// Original file comments:
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Google.Cloud.ResourceManager.V2 {
  /// <summary>
  /// Manages Cloud Resource Folders.
  /// Cloud Resource Folders can be used to organize the resources under an
  /// organization and to control the IAM policies applied to groups of resources.
  /// </summary>
  public static partial class Folders
  {
    static readonly string __ServiceName = "google.cloud.resourcemanager.v2.Folders";

    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V2.ListFoldersRequest> __Marshaller_ListFoldersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.ResourceManager.V2.ListFoldersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V2.ListFoldersResponse> __Marshaller_ListFoldersResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.ResourceManager.V2.ListFoldersResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V2.SearchFoldersRequest> __Marshaller_SearchFoldersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.ResourceManager.V2.SearchFoldersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V2.SearchFoldersResponse> __Marshaller_SearchFoldersResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.ResourceManager.V2.SearchFoldersResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V2.GetFolderRequest> __Marshaller_GetFolderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.ResourceManager.V2.GetFolderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V2.Folder> __Marshaller_Folder = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.ResourceManager.V2.Folder.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V2.CreateFolderRequest> __Marshaller_CreateFolderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.ResourceManager.V2.CreateFolderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.LongRunning.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V2.UpdateFolderRequest> __Marshaller_UpdateFolderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.ResourceManager.V2.UpdateFolderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V2.MoveFolderRequest> __Marshaller_MoveFolderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.ResourceManager.V2.MoveFolderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V2.DeleteFolderRequest> __Marshaller_DeleteFolderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.ResourceManager.V2.DeleteFolderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V2.UndeleteFolderRequest> __Marshaller_UndeleteFolderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.ResourceManager.V2.UndeleteFolderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.GetIamPolicyRequest> __Marshaller_GetIamPolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.GetIamPolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.Policy> __Marshaller_Policy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.Policy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.SetIamPolicyRequest> __Marshaller_SetIamPolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.SetIamPolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest> __Marshaller_TestIamPermissionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.TestIamPermissionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Marshaller_TestIamPermissionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.TestIamPermissionsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.ResourceManager.V2.ListFoldersRequest, global::Google.Cloud.ResourceManager.V2.ListFoldersResponse> __Method_ListFolders = new grpc::Method<global::Google.Cloud.ResourceManager.V2.ListFoldersRequest, global::Google.Cloud.ResourceManager.V2.ListFoldersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListFolders",
        __Marshaller_ListFoldersRequest,
        __Marshaller_ListFoldersResponse);

    static readonly grpc::Method<global::Google.Cloud.ResourceManager.V2.SearchFoldersRequest, global::Google.Cloud.ResourceManager.V2.SearchFoldersResponse> __Method_SearchFolders = new grpc::Method<global::Google.Cloud.ResourceManager.V2.SearchFoldersRequest, global::Google.Cloud.ResourceManager.V2.SearchFoldersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SearchFolders",
        __Marshaller_SearchFoldersRequest,
        __Marshaller_SearchFoldersResponse);

    static readonly grpc::Method<global::Google.Cloud.ResourceManager.V2.GetFolderRequest, global::Google.Cloud.ResourceManager.V2.Folder> __Method_GetFolder = new grpc::Method<global::Google.Cloud.ResourceManager.V2.GetFolderRequest, global::Google.Cloud.ResourceManager.V2.Folder>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFolder",
        __Marshaller_GetFolderRequest,
        __Marshaller_Folder);

    static readonly grpc::Method<global::Google.Cloud.ResourceManager.V2.CreateFolderRequest, global::Google.LongRunning.Operation> __Method_CreateFolder = new grpc::Method<global::Google.Cloud.ResourceManager.V2.CreateFolderRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateFolder",
        __Marshaller_CreateFolderRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.ResourceManager.V2.UpdateFolderRequest, global::Google.Cloud.ResourceManager.V2.Folder> __Method_UpdateFolder = new grpc::Method<global::Google.Cloud.ResourceManager.V2.UpdateFolderRequest, global::Google.Cloud.ResourceManager.V2.Folder>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateFolder",
        __Marshaller_UpdateFolderRequest,
        __Marshaller_Folder);

    static readonly grpc::Method<global::Google.Cloud.ResourceManager.V2.MoveFolderRequest, global::Google.LongRunning.Operation> __Method_MoveFolder = new grpc::Method<global::Google.Cloud.ResourceManager.V2.MoveFolderRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MoveFolder",
        __Marshaller_MoveFolderRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.ResourceManager.V2.DeleteFolderRequest, global::Google.Cloud.ResourceManager.V2.Folder> __Method_DeleteFolder = new grpc::Method<global::Google.Cloud.ResourceManager.V2.DeleteFolderRequest, global::Google.Cloud.ResourceManager.V2.Folder>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteFolder",
        __Marshaller_DeleteFolderRequest,
        __Marshaller_Folder);

    static readonly grpc::Method<global::Google.Cloud.ResourceManager.V2.UndeleteFolderRequest, global::Google.Cloud.ResourceManager.V2.Folder> __Method_UndeleteFolder = new grpc::Method<global::Google.Cloud.ResourceManager.V2.UndeleteFolderRequest, global::Google.Cloud.ResourceManager.V2.Folder>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UndeleteFolder",
        __Marshaller_UndeleteFolderRequest,
        __Marshaller_Folder);

    static readonly grpc::Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_GetIamPolicy = new grpc::Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_GetIamPolicyRequest,
        __Marshaller_Policy);

    static readonly grpc::Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_SetIamPolicy = new grpc::Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_SetIamPolicyRequest,
        __Marshaller_Policy);

    static readonly grpc::Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_TestIamPermissionsRequest,
        __Marshaller_TestIamPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.ResourceManager.V2.FoldersReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Folders</summary>
    public abstract partial class FoldersBase
    {
      /// <summary>
      /// Lists the Folders that are direct descendants of supplied parent resource.
      /// List provides a strongly consistent view of the Folders underneath
      /// the specified parent resource.
      /// List returns Folders sorted based upon the (ascending) lexical ordering
      /// of their display_name.
      /// The caller must have `resourcemanager.folders.list` permission on the
      /// identified parent.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.ResourceManager.V2.ListFoldersResponse> ListFolders(global::Google.Cloud.ResourceManager.V2.ListFoldersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Search for folders that match specific filter criteria.
      /// Search provides an eventually consistent view of the folders a user has
      /// access to which meet the specified filter criteria.
      ///
      /// This will only return folders on which the caller has the
      /// permission `resourcemanager.folders.get`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.ResourceManager.V2.SearchFoldersResponse> SearchFolders(global::Google.Cloud.ResourceManager.V2.SearchFoldersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a Folder identified by the supplied resource name.
      /// Valid Folder resource names have the format `folders/{folder_id}`
      /// (for example, `folders/1234`).
      /// The caller must have `resourcemanager.folders.get` permission on the
      /// identified folder.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.ResourceManager.V2.Folder> GetFolder(global::Google.Cloud.ResourceManager.V2.GetFolderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a Folder in the resource hierarchy.
      /// Returns an Operation which can be used to track the progress of the
      /// folder creation workflow.
      /// Upon success the Operation.response field will be populated with the
      /// created Folder.
      ///
      /// In order to succeed, the addition of this new Folder must not violate
      /// the Folder naming, height or fanout constraints.
      /// + The Folder's display_name must be distinct from all other Folder's that
      /// share its parent.
      /// + The addition of the Folder must not cause the active Folder hierarchy
      /// to exceed a height of 4. Note, the full active + deleted Folder hierarchy
      /// is allowed to reach a height of 8; this provides additional headroom when
      /// moving folders that contain deleted folders.
      /// + The addition of the Folder must not cause the total number of Folders
      /// under its parent to exceed 100.
      ///
      /// If the operation fails due to a folder constraint violation,
      /// a PreconditionFailure explaining the violation will be returned.
      /// If the failure occurs synchronously then the PreconditionFailure
      /// will be returned via the Status.details field and if it occurs
      /// asynchronously then the PreconditionFailure will be returned
      /// via the the Operation.error field.
      ///
      /// The caller must have `resourcemanager.folders.create` permission on the
      /// identified parent.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateFolder(global::Google.Cloud.ResourceManager.V2.CreateFolderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a Folder, changing its display_name.
      /// Changes to the folder display_name will be rejected if they violate either
      /// the display_name formatting rules or naming constraints described in
      /// the [CreateFolder] documentation.
      /// + The Folder's display name must start and end with a letter or digit,
      /// may contain letters, digits, spaces, hyphens and underscores and can be
      /// no longer than 30 characters. This is captured by the regular expression:
      /// [\p{L}\p{N}]({\p{L}\p{N}_- ]{0,28}[\p{L}\p{N}])?.
      /// The caller must have `resourcemanager.folders.update` permission on the
      /// identified folder.
      ///
      /// If the update fails due to the unique name constraint then a
      /// PreconditionFailure explaining this violation will be returned
      /// in the Status.details field.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.ResourceManager.V2.Folder> UpdateFolder(global::Google.Cloud.ResourceManager.V2.UpdateFolderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Moves a Folder under a new resource parent.
      /// Returns an Operation which can be used to track the progress of the
      /// folder move workflow.
      /// Upon success the Operation.response field will be populated with the
      /// moved Folder.
      /// Upon failure, a FolderOperationError categorizing the failure cause will
      /// be returned - if the failure occurs synchronously then the
      /// FolderOperationError will be returned via the Status.details field
      /// and if it occurs asynchronously then the FolderOperation will be returned
      /// via the the Operation.error field.
      /// In addition, the Operation.metadata field will be populated with a
      /// FolderOperation message as an aid to stateless clients.
      /// Folder moves will be rejected if they violate either the naming, height
      /// or fanout constraints described in the [CreateFolder] documentation.
      /// The caller must have `resourcemanager.folders.move` permission on the
      /// folder's current and proposed new parent.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> MoveFolder(global::Google.Cloud.ResourceManager.V2.MoveFolderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Requests deletion of a Folder. The Folder is moved into the
      /// [DELETE_REQUESTED] state immediately, and is deleted approximately 30 days
      /// later. This method may only be called on an empty Folder in the [ACTIVE]
      /// state, where a Folder is empty if it doesn't contain any Folders or
      /// Projects in the [ACTIVE] state.
      /// The caller must have `resourcemanager.folders.delete` permission on the
      /// identified folder.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.ResourceManager.V2.Folder> DeleteFolder(global::Google.Cloud.ResourceManager.V2.DeleteFolderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Cancels the deletion request for a Folder. This method may only be
      /// called on a Folder in the [DELETE_REQUESTED] state.
      /// In order to succeed, the Folder's parent must be in the [ACTIVE] state.
      /// In addition, reintroducing the folder into the tree must not violate
      /// folder naming, height and fanout constraints described in the
      /// [CreateFolder] documentation.
      /// The caller must have `resourcemanager.folders.undelete` permission on the
      /// identified folder.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.ResourceManager.V2.Folder> UndeleteFolder(global::Google.Cloud.ResourceManager.V2.UndeleteFolderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the access control policy for a Folder. The returned policy may be
      /// empty if no such policy or resource exists. The `resource` field should
      /// be the Folder's resource name, e.g. "folders/1234".
      /// The caller must have `resourcemanager.folders.getIamPolicy` permission
      /// on the identified folder.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the access control policy on a Folder, replacing any existing policy.
      /// The `resource` field should be the Folder's resource name, e.g.
      /// "folders/1234".
      /// The caller must have `resourcemanager.folders.setIamPolicy` permission
      /// on the identified folder.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns permissions that a caller has on the specified Folder.
      /// The `resource` field should be the Folder's resource name,
      /// e.g. "folders/1234".
      ///
      /// There are no permissions required for making this API call.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Folders</summary>
    public partial class FoldersClient : grpc::ClientBase<FoldersClient>
    {
      /// <summary>Creates a new client for Folders</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public FoldersClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Folders that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public FoldersClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected FoldersClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected FoldersClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists the Folders that are direct descendants of supplied parent resource.
      /// List provides a strongly consistent view of the Folders underneath
      /// the specified parent resource.
      /// List returns Folders sorted based upon the (ascending) lexical ordering
      /// of their display_name.
      /// The caller must have `resourcemanager.folders.list` permission on the
      /// identified parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.ResourceManager.V2.ListFoldersResponse ListFolders(global::Google.Cloud.ResourceManager.V2.ListFoldersRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListFolders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the Folders that are direct descendants of supplied parent resource.
      /// List provides a strongly consistent view of the Folders underneath
      /// the specified parent resource.
      /// List returns Folders sorted based upon the (ascending) lexical ordering
      /// of their display_name.
      /// The caller must have `resourcemanager.folders.list` permission on the
      /// identified parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.ResourceManager.V2.ListFoldersResponse ListFolders(global::Google.Cloud.ResourceManager.V2.ListFoldersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListFolders, null, options, request);
      }
      /// <summary>
      /// Lists the Folders that are direct descendants of supplied parent resource.
      /// List provides a strongly consistent view of the Folders underneath
      /// the specified parent resource.
      /// List returns Folders sorted based upon the (ascending) lexical ordering
      /// of their display_name.
      /// The caller must have `resourcemanager.folders.list` permission on the
      /// identified parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ResourceManager.V2.ListFoldersResponse> ListFoldersAsync(global::Google.Cloud.ResourceManager.V2.ListFoldersRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListFoldersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the Folders that are direct descendants of supplied parent resource.
      /// List provides a strongly consistent view of the Folders underneath
      /// the specified parent resource.
      /// List returns Folders sorted based upon the (ascending) lexical ordering
      /// of their display_name.
      /// The caller must have `resourcemanager.folders.list` permission on the
      /// identified parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ResourceManager.V2.ListFoldersResponse> ListFoldersAsync(global::Google.Cloud.ResourceManager.V2.ListFoldersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListFolders, null, options, request);
      }
      /// <summary>
      /// Search for folders that match specific filter criteria.
      /// Search provides an eventually consistent view of the folders a user has
      /// access to which meet the specified filter criteria.
      ///
      /// This will only return folders on which the caller has the
      /// permission `resourcemanager.folders.get`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.ResourceManager.V2.SearchFoldersResponse SearchFolders(global::Google.Cloud.ResourceManager.V2.SearchFoldersRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SearchFolders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search for folders that match specific filter criteria.
      /// Search provides an eventually consistent view of the folders a user has
      /// access to which meet the specified filter criteria.
      ///
      /// This will only return folders on which the caller has the
      /// permission `resourcemanager.folders.get`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.ResourceManager.V2.SearchFoldersResponse SearchFolders(global::Google.Cloud.ResourceManager.V2.SearchFoldersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SearchFolders, null, options, request);
      }
      /// <summary>
      /// Search for folders that match specific filter criteria.
      /// Search provides an eventually consistent view of the folders a user has
      /// access to which meet the specified filter criteria.
      ///
      /// This will only return folders on which the caller has the
      /// permission `resourcemanager.folders.get`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ResourceManager.V2.SearchFoldersResponse> SearchFoldersAsync(global::Google.Cloud.ResourceManager.V2.SearchFoldersRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SearchFoldersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search for folders that match specific filter criteria.
      /// Search provides an eventually consistent view of the folders a user has
      /// access to which meet the specified filter criteria.
      ///
      /// This will only return folders on which the caller has the
      /// permission `resourcemanager.folders.get`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ResourceManager.V2.SearchFoldersResponse> SearchFoldersAsync(global::Google.Cloud.ResourceManager.V2.SearchFoldersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SearchFolders, null, options, request);
      }
      /// <summary>
      /// Retrieves a Folder identified by the supplied resource name.
      /// Valid Folder resource names have the format `folders/{folder_id}`
      /// (for example, `folders/1234`).
      /// The caller must have `resourcemanager.folders.get` permission on the
      /// identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.ResourceManager.V2.Folder GetFolder(global::Google.Cloud.ResourceManager.V2.GetFolderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetFolder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a Folder identified by the supplied resource name.
      /// Valid Folder resource names have the format `folders/{folder_id}`
      /// (for example, `folders/1234`).
      /// The caller must have `resourcemanager.folders.get` permission on the
      /// identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.ResourceManager.V2.Folder GetFolder(global::Google.Cloud.ResourceManager.V2.GetFolderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFolder, null, options, request);
      }
      /// <summary>
      /// Retrieves a Folder identified by the supplied resource name.
      /// Valid Folder resource names have the format `folders/{folder_id}`
      /// (for example, `folders/1234`).
      /// The caller must have `resourcemanager.folders.get` permission on the
      /// identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ResourceManager.V2.Folder> GetFolderAsync(global::Google.Cloud.ResourceManager.V2.GetFolderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetFolderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a Folder identified by the supplied resource name.
      /// Valid Folder resource names have the format `folders/{folder_id}`
      /// (for example, `folders/1234`).
      /// The caller must have `resourcemanager.folders.get` permission on the
      /// identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ResourceManager.V2.Folder> GetFolderAsync(global::Google.Cloud.ResourceManager.V2.GetFolderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFolder, null, options, request);
      }
      /// <summary>
      /// Creates a Folder in the resource hierarchy.
      /// Returns an Operation which can be used to track the progress of the
      /// folder creation workflow.
      /// Upon success the Operation.response field will be populated with the
      /// created Folder.
      ///
      /// In order to succeed, the addition of this new Folder must not violate
      /// the Folder naming, height or fanout constraints.
      /// + The Folder's display_name must be distinct from all other Folder's that
      /// share its parent.
      /// + The addition of the Folder must not cause the active Folder hierarchy
      /// to exceed a height of 4. Note, the full active + deleted Folder hierarchy
      /// is allowed to reach a height of 8; this provides additional headroom when
      /// moving folders that contain deleted folders.
      /// + The addition of the Folder must not cause the total number of Folders
      /// under its parent to exceed 100.
      ///
      /// If the operation fails due to a folder constraint violation,
      /// a PreconditionFailure explaining the violation will be returned.
      /// If the failure occurs synchronously then the PreconditionFailure
      /// will be returned via the Status.details field and if it occurs
      /// asynchronously then the PreconditionFailure will be returned
      /// via the the Operation.error field.
      ///
      /// The caller must have `resourcemanager.folders.create` permission on the
      /// identified parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CreateFolder(global::Google.Cloud.ResourceManager.V2.CreateFolderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateFolder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a Folder in the resource hierarchy.
      /// Returns an Operation which can be used to track the progress of the
      /// folder creation workflow.
      /// Upon success the Operation.response field will be populated with the
      /// created Folder.
      ///
      /// In order to succeed, the addition of this new Folder must not violate
      /// the Folder naming, height or fanout constraints.
      /// + The Folder's display_name must be distinct from all other Folder's that
      /// share its parent.
      /// + The addition of the Folder must not cause the active Folder hierarchy
      /// to exceed a height of 4. Note, the full active + deleted Folder hierarchy
      /// is allowed to reach a height of 8; this provides additional headroom when
      /// moving folders that contain deleted folders.
      /// + The addition of the Folder must not cause the total number of Folders
      /// under its parent to exceed 100.
      ///
      /// If the operation fails due to a folder constraint violation,
      /// a PreconditionFailure explaining the violation will be returned.
      /// If the failure occurs synchronously then the PreconditionFailure
      /// will be returned via the Status.details field and if it occurs
      /// asynchronously then the PreconditionFailure will be returned
      /// via the the Operation.error field.
      ///
      /// The caller must have `resourcemanager.folders.create` permission on the
      /// identified parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CreateFolder(global::Google.Cloud.ResourceManager.V2.CreateFolderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateFolder, null, options, request);
      }
      /// <summary>
      /// Creates a Folder in the resource hierarchy.
      /// Returns an Operation which can be used to track the progress of the
      /// folder creation workflow.
      /// Upon success the Operation.response field will be populated with the
      /// created Folder.
      ///
      /// In order to succeed, the addition of this new Folder must not violate
      /// the Folder naming, height or fanout constraints.
      /// + The Folder's display_name must be distinct from all other Folder's that
      /// share its parent.
      /// + The addition of the Folder must not cause the active Folder hierarchy
      /// to exceed a height of 4. Note, the full active + deleted Folder hierarchy
      /// is allowed to reach a height of 8; this provides additional headroom when
      /// moving folders that contain deleted folders.
      /// + The addition of the Folder must not cause the total number of Folders
      /// under its parent to exceed 100.
      ///
      /// If the operation fails due to a folder constraint violation,
      /// a PreconditionFailure explaining the violation will be returned.
      /// If the failure occurs synchronously then the PreconditionFailure
      /// will be returned via the Status.details field and if it occurs
      /// asynchronously then the PreconditionFailure will be returned
      /// via the the Operation.error field.
      ///
      /// The caller must have `resourcemanager.folders.create` permission on the
      /// identified parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateFolderAsync(global::Google.Cloud.ResourceManager.V2.CreateFolderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateFolderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a Folder in the resource hierarchy.
      /// Returns an Operation which can be used to track the progress of the
      /// folder creation workflow.
      /// Upon success the Operation.response field will be populated with the
      /// created Folder.
      ///
      /// In order to succeed, the addition of this new Folder must not violate
      /// the Folder naming, height or fanout constraints.
      /// + The Folder's display_name must be distinct from all other Folder's that
      /// share its parent.
      /// + The addition of the Folder must not cause the active Folder hierarchy
      /// to exceed a height of 4. Note, the full active + deleted Folder hierarchy
      /// is allowed to reach a height of 8; this provides additional headroom when
      /// moving folders that contain deleted folders.
      /// + The addition of the Folder must not cause the total number of Folders
      /// under its parent to exceed 100.
      ///
      /// If the operation fails due to a folder constraint violation,
      /// a PreconditionFailure explaining the violation will be returned.
      /// If the failure occurs synchronously then the PreconditionFailure
      /// will be returned via the Status.details field and if it occurs
      /// asynchronously then the PreconditionFailure will be returned
      /// via the the Operation.error field.
      ///
      /// The caller must have `resourcemanager.folders.create` permission on the
      /// identified parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateFolderAsync(global::Google.Cloud.ResourceManager.V2.CreateFolderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateFolder, null, options, request);
      }
      /// <summary>
      /// Updates a Folder, changing its display_name.
      /// Changes to the folder display_name will be rejected if they violate either
      /// the display_name formatting rules or naming constraints described in
      /// the [CreateFolder] documentation.
      /// + The Folder's display name must start and end with a letter or digit,
      /// may contain letters, digits, spaces, hyphens and underscores and can be
      /// no longer than 30 characters. This is captured by the regular expression:
      /// [\p{L}\p{N}]({\p{L}\p{N}_- ]{0,28}[\p{L}\p{N}])?.
      /// The caller must have `resourcemanager.folders.update` permission on the
      /// identified folder.
      ///
      /// If the update fails due to the unique name constraint then a
      /// PreconditionFailure explaining this violation will be returned
      /// in the Status.details field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.ResourceManager.V2.Folder UpdateFolder(global::Google.Cloud.ResourceManager.V2.UpdateFolderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateFolder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a Folder, changing its display_name.
      /// Changes to the folder display_name will be rejected if they violate either
      /// the display_name formatting rules or naming constraints described in
      /// the [CreateFolder] documentation.
      /// + The Folder's display name must start and end with a letter or digit,
      /// may contain letters, digits, spaces, hyphens and underscores and can be
      /// no longer than 30 characters. This is captured by the regular expression:
      /// [\p{L}\p{N}]({\p{L}\p{N}_- ]{0,28}[\p{L}\p{N}])?.
      /// The caller must have `resourcemanager.folders.update` permission on the
      /// identified folder.
      ///
      /// If the update fails due to the unique name constraint then a
      /// PreconditionFailure explaining this violation will be returned
      /// in the Status.details field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.ResourceManager.V2.Folder UpdateFolder(global::Google.Cloud.ResourceManager.V2.UpdateFolderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateFolder, null, options, request);
      }
      /// <summary>
      /// Updates a Folder, changing its display_name.
      /// Changes to the folder display_name will be rejected if they violate either
      /// the display_name formatting rules or naming constraints described in
      /// the [CreateFolder] documentation.
      /// + The Folder's display name must start and end with a letter or digit,
      /// may contain letters, digits, spaces, hyphens and underscores and can be
      /// no longer than 30 characters. This is captured by the regular expression:
      /// [\p{L}\p{N}]({\p{L}\p{N}_- ]{0,28}[\p{L}\p{N}])?.
      /// The caller must have `resourcemanager.folders.update` permission on the
      /// identified folder.
      ///
      /// If the update fails due to the unique name constraint then a
      /// PreconditionFailure explaining this violation will be returned
      /// in the Status.details field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ResourceManager.V2.Folder> UpdateFolderAsync(global::Google.Cloud.ResourceManager.V2.UpdateFolderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateFolderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a Folder, changing its display_name.
      /// Changes to the folder display_name will be rejected if they violate either
      /// the display_name formatting rules or naming constraints described in
      /// the [CreateFolder] documentation.
      /// + The Folder's display name must start and end with a letter or digit,
      /// may contain letters, digits, spaces, hyphens and underscores and can be
      /// no longer than 30 characters. This is captured by the regular expression:
      /// [\p{L}\p{N}]({\p{L}\p{N}_- ]{0,28}[\p{L}\p{N}])?.
      /// The caller must have `resourcemanager.folders.update` permission on the
      /// identified folder.
      ///
      /// If the update fails due to the unique name constraint then a
      /// PreconditionFailure explaining this violation will be returned
      /// in the Status.details field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ResourceManager.V2.Folder> UpdateFolderAsync(global::Google.Cloud.ResourceManager.V2.UpdateFolderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateFolder, null, options, request);
      }
      /// <summary>
      /// Moves a Folder under a new resource parent.
      /// Returns an Operation which can be used to track the progress of the
      /// folder move workflow.
      /// Upon success the Operation.response field will be populated with the
      /// moved Folder.
      /// Upon failure, a FolderOperationError categorizing the failure cause will
      /// be returned - if the failure occurs synchronously then the
      /// FolderOperationError will be returned via the Status.details field
      /// and if it occurs asynchronously then the FolderOperation will be returned
      /// via the the Operation.error field.
      /// In addition, the Operation.metadata field will be populated with a
      /// FolderOperation message as an aid to stateless clients.
      /// Folder moves will be rejected if they violate either the naming, height
      /// or fanout constraints described in the [CreateFolder] documentation.
      /// The caller must have `resourcemanager.folders.move` permission on the
      /// folder's current and proposed new parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation MoveFolder(global::Google.Cloud.ResourceManager.V2.MoveFolderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MoveFolder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Moves a Folder under a new resource parent.
      /// Returns an Operation which can be used to track the progress of the
      /// folder move workflow.
      /// Upon success the Operation.response field will be populated with the
      /// moved Folder.
      /// Upon failure, a FolderOperationError categorizing the failure cause will
      /// be returned - if the failure occurs synchronously then the
      /// FolderOperationError will be returned via the Status.details field
      /// and if it occurs asynchronously then the FolderOperation will be returned
      /// via the the Operation.error field.
      /// In addition, the Operation.metadata field will be populated with a
      /// FolderOperation message as an aid to stateless clients.
      /// Folder moves will be rejected if they violate either the naming, height
      /// or fanout constraints described in the [CreateFolder] documentation.
      /// The caller must have `resourcemanager.folders.move` permission on the
      /// folder's current and proposed new parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation MoveFolder(global::Google.Cloud.ResourceManager.V2.MoveFolderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MoveFolder, null, options, request);
      }
      /// <summary>
      /// Moves a Folder under a new resource parent.
      /// Returns an Operation which can be used to track the progress of the
      /// folder move workflow.
      /// Upon success the Operation.response field will be populated with the
      /// moved Folder.
      /// Upon failure, a FolderOperationError categorizing the failure cause will
      /// be returned - if the failure occurs synchronously then the
      /// FolderOperationError will be returned via the Status.details field
      /// and if it occurs asynchronously then the FolderOperation will be returned
      /// via the the Operation.error field.
      /// In addition, the Operation.metadata field will be populated with a
      /// FolderOperation message as an aid to stateless clients.
      /// Folder moves will be rejected if they violate either the naming, height
      /// or fanout constraints described in the [CreateFolder] documentation.
      /// The caller must have `resourcemanager.folders.move` permission on the
      /// folder's current and proposed new parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> MoveFolderAsync(global::Google.Cloud.ResourceManager.V2.MoveFolderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MoveFolderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Moves a Folder under a new resource parent.
      /// Returns an Operation which can be used to track the progress of the
      /// folder move workflow.
      /// Upon success the Operation.response field will be populated with the
      /// moved Folder.
      /// Upon failure, a FolderOperationError categorizing the failure cause will
      /// be returned - if the failure occurs synchronously then the
      /// FolderOperationError will be returned via the Status.details field
      /// and if it occurs asynchronously then the FolderOperation will be returned
      /// via the the Operation.error field.
      /// In addition, the Operation.metadata field will be populated with a
      /// FolderOperation message as an aid to stateless clients.
      /// Folder moves will be rejected if they violate either the naming, height
      /// or fanout constraints described in the [CreateFolder] documentation.
      /// The caller must have `resourcemanager.folders.move` permission on the
      /// folder's current and proposed new parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> MoveFolderAsync(global::Google.Cloud.ResourceManager.V2.MoveFolderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MoveFolder, null, options, request);
      }
      /// <summary>
      /// Requests deletion of a Folder. The Folder is moved into the
      /// [DELETE_REQUESTED] state immediately, and is deleted approximately 30 days
      /// later. This method may only be called on an empty Folder in the [ACTIVE]
      /// state, where a Folder is empty if it doesn't contain any Folders or
      /// Projects in the [ACTIVE] state.
      /// The caller must have `resourcemanager.folders.delete` permission on the
      /// identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.ResourceManager.V2.Folder DeleteFolder(global::Google.Cloud.ResourceManager.V2.DeleteFolderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteFolder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Requests deletion of a Folder. The Folder is moved into the
      /// [DELETE_REQUESTED] state immediately, and is deleted approximately 30 days
      /// later. This method may only be called on an empty Folder in the [ACTIVE]
      /// state, where a Folder is empty if it doesn't contain any Folders or
      /// Projects in the [ACTIVE] state.
      /// The caller must have `resourcemanager.folders.delete` permission on the
      /// identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.ResourceManager.V2.Folder DeleteFolder(global::Google.Cloud.ResourceManager.V2.DeleteFolderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteFolder, null, options, request);
      }
      /// <summary>
      /// Requests deletion of a Folder. The Folder is moved into the
      /// [DELETE_REQUESTED] state immediately, and is deleted approximately 30 days
      /// later. This method may only be called on an empty Folder in the [ACTIVE]
      /// state, where a Folder is empty if it doesn't contain any Folders or
      /// Projects in the [ACTIVE] state.
      /// The caller must have `resourcemanager.folders.delete` permission on the
      /// identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ResourceManager.V2.Folder> DeleteFolderAsync(global::Google.Cloud.ResourceManager.V2.DeleteFolderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteFolderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Requests deletion of a Folder. The Folder is moved into the
      /// [DELETE_REQUESTED] state immediately, and is deleted approximately 30 days
      /// later. This method may only be called on an empty Folder in the [ACTIVE]
      /// state, where a Folder is empty if it doesn't contain any Folders or
      /// Projects in the [ACTIVE] state.
      /// The caller must have `resourcemanager.folders.delete` permission on the
      /// identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ResourceManager.V2.Folder> DeleteFolderAsync(global::Google.Cloud.ResourceManager.V2.DeleteFolderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteFolder, null, options, request);
      }
      /// <summary>
      /// Cancels the deletion request for a Folder. This method may only be
      /// called on a Folder in the [DELETE_REQUESTED] state.
      /// In order to succeed, the Folder's parent must be in the [ACTIVE] state.
      /// In addition, reintroducing the folder into the tree must not violate
      /// folder naming, height and fanout constraints described in the
      /// [CreateFolder] documentation.
      /// The caller must have `resourcemanager.folders.undelete` permission on the
      /// identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.ResourceManager.V2.Folder UndeleteFolder(global::Google.Cloud.ResourceManager.V2.UndeleteFolderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UndeleteFolder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancels the deletion request for a Folder. This method may only be
      /// called on a Folder in the [DELETE_REQUESTED] state.
      /// In order to succeed, the Folder's parent must be in the [ACTIVE] state.
      /// In addition, reintroducing the folder into the tree must not violate
      /// folder naming, height and fanout constraints described in the
      /// [CreateFolder] documentation.
      /// The caller must have `resourcemanager.folders.undelete` permission on the
      /// identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.ResourceManager.V2.Folder UndeleteFolder(global::Google.Cloud.ResourceManager.V2.UndeleteFolderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UndeleteFolder, null, options, request);
      }
      /// <summary>
      /// Cancels the deletion request for a Folder. This method may only be
      /// called on a Folder in the [DELETE_REQUESTED] state.
      /// In order to succeed, the Folder's parent must be in the [ACTIVE] state.
      /// In addition, reintroducing the folder into the tree must not violate
      /// folder naming, height and fanout constraints described in the
      /// [CreateFolder] documentation.
      /// The caller must have `resourcemanager.folders.undelete` permission on the
      /// identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ResourceManager.V2.Folder> UndeleteFolderAsync(global::Google.Cloud.ResourceManager.V2.UndeleteFolderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UndeleteFolderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancels the deletion request for a Folder. This method may only be
      /// called on a Folder in the [DELETE_REQUESTED] state.
      /// In order to succeed, the Folder's parent must be in the [ACTIVE] state.
      /// In addition, reintroducing the folder into the tree must not violate
      /// folder naming, height and fanout constraints described in the
      /// [CreateFolder] documentation.
      /// The caller must have `resourcemanager.folders.undelete` permission on the
      /// identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ResourceManager.V2.Folder> UndeleteFolderAsync(global::Google.Cloud.ResourceManager.V2.UndeleteFolderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UndeleteFolder, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a Folder. The returned policy may be
      /// empty if no such policy or resource exists. The `resource` field should
      /// be the Folder's resource name, e.g. "folders/1234".
      /// The caller must have `resourcemanager.folders.getIamPolicy` permission
      /// on the identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a Folder. The returned policy may be
      /// empty if no such policy or resource exists. The `resource` field should
      /// be the Folder's resource name, e.g. "folders/1234".
      /// The caller must have `resourcemanager.folders.getIamPolicy` permission
      /// on the identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a Folder. The returned policy may be
      /// empty if no such policy or resource exists. The `resource` field should
      /// be the Folder's resource name, e.g. "folders/1234".
      /// The caller must have `resourcemanager.folders.getIamPolicy` permission
      /// on the identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a Folder. The returned policy may be
      /// empty if no such policy or resource exists. The `resource` field should
      /// be the Folder's resource name, e.g. "folders/1234".
      /// The caller must have `resourcemanager.folders.getIamPolicy` permission
      /// on the identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on a Folder, replacing any existing policy.
      /// The `resource` field should be the Folder's resource name, e.g.
      /// "folders/1234".
      /// The caller must have `resourcemanager.folders.setIamPolicy` permission
      /// on the identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on a Folder, replacing any existing policy.
      /// The `resource` field should be the Folder's resource name, e.g.
      /// "folders/1234".
      /// The caller must have `resourcemanager.folders.setIamPolicy` permission
      /// on the identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on a Folder, replacing any existing policy.
      /// The `resource` field should be the Folder's resource name, e.g.
      /// "folders/1234".
      /// The caller must have `resourcemanager.folders.setIamPolicy` permission
      /// on the identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on a Folder, replacing any existing policy.
      /// The `resource` field should be the Folder's resource name, e.g.
      /// "folders/1234".
      /// The caller must have `resourcemanager.folders.setIamPolicy` permission
      /// on the identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified Folder.
      /// The `resource` field should be the Folder's resource name,
      /// e.g. "folders/1234".
      ///
      /// There are no permissions required for making this API call.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified Folder.
      /// The `resource` field should be the Folder's resource name,
      /// e.g. "folders/1234".
      ///
      /// There are no permissions required for making this API call.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified Folder.
      /// The `resource` field should be the Folder's resource name,
      /// e.g. "folders/1234".
      ///
      /// There are no permissions required for making this API call.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified Folder.
      /// The `resource` field should be the Folder's resource name,
      /// e.g. "folders/1234".
      ///
      /// There are no permissions required for making this API call.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override FoldersClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new FoldersClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(FoldersBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListFolders, serviceImpl.ListFolders)
          .AddMethod(__Method_SearchFolders, serviceImpl.SearchFolders)
          .AddMethod(__Method_GetFolder, serviceImpl.GetFolder)
          .AddMethod(__Method_CreateFolder, serviceImpl.CreateFolder)
          .AddMethod(__Method_UpdateFolder, serviceImpl.UpdateFolder)
          .AddMethod(__Method_MoveFolder, serviceImpl.MoveFolder)
          .AddMethod(__Method_DeleteFolder, serviceImpl.DeleteFolder)
          .AddMethod(__Method_UndeleteFolder, serviceImpl.UndeleteFolder)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions).Build();
    }

  }
}
#endregion
