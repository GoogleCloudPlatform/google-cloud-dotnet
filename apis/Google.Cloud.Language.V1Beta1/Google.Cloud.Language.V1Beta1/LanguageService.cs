// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/language/v1beta1/language_service.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Language.V1Beta1 {

  /// <summary>Holder for reflection information generated from google/cloud/language/v1beta1/language_service.proto</summary>
  public static partial class LanguageServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/language/v1beta1/language_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LanguageServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjRnb29nbGUvY2xvdWQvbGFuZ3VhZ2UvdjFiZXRhMS9sYW5ndWFnZV9zZXJ2",
            "aWNlLnByb3RvEh1nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjFiZXRhMRocZ29v",
            "Z2xlL2FwaS9hbm5vdGF0aW9ucy5wcm90byLIAQoIRG9jdW1lbnQSOgoEdHlw",
            "ZRgBIAEoDjIsLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MWJldGExLkRvY3Vt",
            "ZW50LlR5cGUSEQoHY29udGVudBgCIAEoCUgAEhkKD2djc19jb250ZW50X3Vy",
            "aRgDIAEoCUgAEhAKCGxhbmd1YWdlGAQgASgJIjYKBFR5cGUSFAoQVFlQRV9V",
            "TlNQRUNJRklFRBAAEg4KClBMQUlOX1RFWFQQARIICgRIVE1MEAJCCAoGc291",
            "cmNlIkEKCFNlbnRlbmNlEjUKBHRleHQYASABKAsyJy5nb29nbGUuY2xvdWQu",
            "bGFuZ3VhZ2UudjFiZXRhMS5UZXh0U3BhbiKVAwoGRW50aXR5EgwKBG5hbWUY",
            "ASABKAkSOAoEdHlwZRgCIAEoDjIqLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52",
            "MWJldGExLkVudGl0eS5UeXBlEkUKCG1ldGFkYXRhGAMgAygLMjMuZ29vZ2xl",
            "LmNsb3VkLmxhbmd1YWdlLnYxYmV0YTEuRW50aXR5Lk1ldGFkYXRhRW50cnkS",
            "EAoIc2FsaWVuY2UYBCABKAISPgoIbWVudGlvbnMYBSADKAsyLC5nb29nbGUu",
            "Y2xvdWQubGFuZ3VhZ2UudjFiZXRhMS5FbnRpdHlNZW50aW9uGi8KDU1ldGFk",
            "YXRhRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASJ5CgRU",
            "eXBlEgsKB1VOS05PV04QABIKCgZQRVJTT04QARIMCghMT0NBVElPThACEhAK",
            "DE9SR0FOSVpBVElPThADEgkKBUVWRU5UEAQSDwoLV09SS19PRl9BUlQQBRIR",
            "Cg1DT05TVU1FUl9HT09EEAYSCQoFT1RIRVIQByLaAQoFVG9rZW4SNQoEdGV4",
            "dBgBIAEoCzInLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MWJldGExLlRleHRT",
            "cGFuEkMKDnBhcnRfb2Zfc3BlZWNoGAIgASgLMisuZ29vZ2xlLmNsb3VkLmxh",
            "bmd1YWdlLnYxYmV0YTEuUGFydE9mU3BlZWNoEkYKD2RlcGVuZGVuY3lfZWRn",
            "ZRgDIAEoCzItLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MWJldGExLkRlcGVu",
            "ZGVuY3lFZGdlEg0KBWxlbW1hGAQgASgJIjAKCVNlbnRpbWVudBIQCghwb2xh",
            "cml0eRgBIAEoAhIRCgltYWduaXR1ZGUYAiABKAIi3AEKDFBhcnRPZlNwZWVj",
            "aBI8CgN0YWcYASABKA4yLy5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjFiZXRh",
            "MS5QYXJ0T2ZTcGVlY2guVGFnIo0BCgNUYWcSCwoHVU5LTk9XThAAEgcKA0FE",
            "ShABEgcKA0FEUBACEgcKA0FEVhADEggKBENPTkoQBBIHCgNERVQQBRIICgRO",
            "T1VOEAYSBwoDTlVNEAcSCAoEUFJPThAIEgcKA1BSVBAJEgkKBVBVTkNUEAoS",
            "CAoEVkVSQhALEgUKAVgQDBIJCgVBRkZJWBANIt0HCg5EZXBlbmRlbmN5RWRn",
            "ZRIYChBoZWFkX3Rva2VuX2luZGV4GAEgASgFEkIKBWxhYmVsGAIgASgOMjMu",
            "Z29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxYmV0YTEuRGVwZW5kZW5jeUVkZ2Uu",
            "TGFiZWwi7AYKBUxhYmVsEgsKB1VOS05PV04QABIKCgZBQkJSRVYQARIJCgVB",
            "Q09NUBACEgkKBUFEVkNMEAMSCgoGQURWTU9EEAQSCAoEQU1PRBAFEgkKBUFQ",
            "UE9TEAYSCAoEQVRUUhAHEgcKA0FVWBAIEgsKB0FVWFBBU1MQCRIGCgJDQxAK",
            "EgkKBUNDT01QEAsSCAoEQ09OShAMEgkKBUNTVUJKEA0SDQoJQ1NVQkpQQVNT",
            "EA4SBwoDREVQEA8SBwoDREVUEBASDQoJRElTQ09VUlNFEBESCAoERE9CShAS",
            "EggKBEVYUEwQExIMCghHT0VTV0lUSBAUEggKBElPQkoQFRIICgRNQVJLEBYS",
            "BwoDTVdFEBcSBwoDTVdWEBgSBwoDTkVHEBkSBgoCTk4QGhIMCghOUEFEVk1P",
            "RBAbEgkKBU5TVUJKEBwSDQoJTlNVQkpQQVNTEB0SBwoDTlVNEB4SCgoGTlVN",
            "QkVSEB8SBQoBUBAgEg0KCVBBUkFUQVhJUxAhEgsKB1BBUlRNT0QQIhIJCgVQ",
            "Q09NUBAjEggKBFBPQkoQJBIICgRQT1NTECUSCwoHUE9TVE5FRxAmEgsKB1BS",
            "RUNPTVAQJxILCgdQUkVDT05KECgSCgoGUFJFREVUECkSCAoEUFJFRhAqEggK",
            "BFBSRVAQKxIJCgVQUk9OTBAsEgcKA1BSVBAtEgYKAlBTEC4SDAoIUVVBTlRN",
            "T0QQLxIJCgVSQ01PRBAwEgwKCFJDTU9EUkVMEDESCQoFUkRST1AQMhIHCgNS",
            "RUYQMxILCgdSRU1OQU5UEDQSDgoKUkVQQVJBTkRVTRA1EggKBFJPT1QQNhII",
            "CgRTTlVNEDcSCAoEU1VGRhA4EggKBFRNT0QQORIJCgVUT1BJQxA6EggKBFZN",
            "T0QQOxIMCghWT0NBVElWRRA8EgkKBVhDT01QED0SCgoGU1VGRklYED4SCQoF",
            "VElUTEUQPxIMCghBRFZQSE1PRBBAEgsKB0FVWENBVVMQQRIJCgVBVVhWVhBC",
            "EgkKBURUTU9EEEMSCwoHRk9SRUlHThBEEgYKAktXEEUSCAoETElTVBBGEggK",
            "BE5PTUMQRxIMCghOT01DU1VCShBIEhAKDE5PTUNTVUJKUEFTUxBJEggKBE5V",
            "TUMQShIHCgNDT1AQSxIOCgpESVNMT0NBVEVEEEwiRgoNRW50aXR5TWVudGlv",
            "bhI1CgR0ZXh0GAEgASgLMicuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxYmV0",
            "YTEuVGV4dFNwYW4iMQoIVGV4dFNwYW4SDwoHY29udGVudBgBIAEoCRIUCgxi",
            "ZWdpbl9vZmZzZXQYAiABKAUiVAoXQW5hbHl6ZVNlbnRpbWVudFJlcXVlc3QS",
            "OQoIZG9jdW1lbnQYASABKAsyJy5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjFi",
            "ZXRhMS5Eb2N1bWVudCJyChhBbmFseXplU2VudGltZW50UmVzcG9uc2USRAoS",
            "ZG9jdW1lbnRfc2VudGltZW50GAEgASgLMiguZ29vZ2xlLmNsb3VkLmxhbmd1",
            "YWdlLnYxYmV0YTEuU2VudGltZW50EhAKCGxhbmd1YWdlGAIgASgJIpcBChZB",
            "bmFseXplRW50aXRpZXNSZXF1ZXN0EjkKCGRvY3VtZW50GAEgASgLMicuZ29v",
            "Z2xlLmNsb3VkLmxhbmd1YWdlLnYxYmV0YTEuRG9jdW1lbnQSQgoNZW5jb2Rp",
            "bmdfdHlwZRgCIAEoDjIrLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MWJldGEx",
            "LkVuY29kaW5nVHlwZSJkChdBbmFseXplRW50aXRpZXNSZXNwb25zZRI3Cghl",
            "bnRpdGllcxgBIAMoCzIlLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MWJldGEx",
            "LkVudGl0eRIQCghsYW5ndWFnZRgCIAEoCSLFAgoTQW5ub3RhdGVUZXh0UmVx",
            "dWVzdBI5Cghkb2N1bWVudBgBIAEoCzInLmdvb2dsZS5jbG91ZC5sYW5ndWFn",
            "ZS52MWJldGExLkRvY3VtZW50Ek0KCGZlYXR1cmVzGAIgASgLMjsuZ29vZ2xl",
            "LmNsb3VkLmxhbmd1YWdlLnYxYmV0YTEuQW5ub3RhdGVUZXh0UmVxdWVzdC5G",
            "ZWF0dXJlcxJCCg1lbmNvZGluZ190eXBlGAMgASgOMisuZ29vZ2xlLmNsb3Vk",
            "Lmxhbmd1YWdlLnYxYmV0YTEuRW5jb2RpbmdUeXBlGmAKCEZlYXR1cmVzEhYK",
            "DmV4dHJhY3Rfc3ludGF4GAEgASgIEhgKEGV4dHJhY3RfZW50aXRpZXMYAiAB",
            "KAgSIgoaZXh0cmFjdF9kb2N1bWVudF9zZW50aW1lbnQYAyABKAgimQIKFEFu",
            "bm90YXRlVGV4dFJlc3BvbnNlEjoKCXNlbnRlbmNlcxgBIAMoCzInLmdvb2ds",
            "ZS5jbG91ZC5sYW5ndWFnZS52MWJldGExLlNlbnRlbmNlEjQKBnRva2VucxgC",
            "IAMoCzIkLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MWJldGExLlRva2VuEjcK",
            "CGVudGl0aWVzGAMgAygLMiUuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxYmV0",
            "YTEuRW50aXR5EkQKEmRvY3VtZW50X3NlbnRpbWVudBgEIAEoCzIoLmdvb2ds",
            "ZS5jbG91ZC5sYW5ndWFnZS52MWJldGExLlNlbnRpbWVudBIQCghsYW5ndWFn",
            "ZRgFIAEoCSo4CgxFbmNvZGluZ1R5cGUSCAoETk9ORRAAEggKBFVURjgQARIJ",
            "CgVVVEYxNhACEgkKBVVURjMyEAMynwQKD0xhbmd1YWdlU2VydmljZRKzAQoQ",
            "QW5hbHl6ZVNlbnRpbWVudBI2Lmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MWJl",
            "dGExLkFuYWx5emVTZW50aW1lbnRSZXF1ZXN0GjcuZ29vZ2xlLmNsb3VkLmxh",
            "bmd1YWdlLnYxYmV0YTEuQW5hbHl6ZVNlbnRpbWVudFJlc3BvbnNlIi6C0+ST",
            "AigiIy92MWJldGExL2RvY3VtZW50czphbmFseXplU2VudGltZW50OgEqEq8B",
            "Cg9BbmFseXplRW50aXRpZXMSNS5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjFi",
            "ZXRhMS5BbmFseXplRW50aXRpZXNSZXF1ZXN0GjYuZ29vZ2xlLmNsb3VkLmxh",
            "bmd1YWdlLnYxYmV0YTEuQW5hbHl6ZUVudGl0aWVzUmVzcG9uc2UiLYLT5JMC",
            "JyIiL3YxYmV0YTEvZG9jdW1lbnRzOmFuYWx5emVFbnRpdGllczoBKhKjAQoM",
            "QW5ub3RhdGVUZXh0EjIuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxYmV0YTEu",
            "QW5ub3RhdGVUZXh0UmVxdWVzdBozLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52",
            "MWJldGExLkFubm90YXRlVGV4dFJlc3BvbnNlIiqC0+STAiQiHy92MWJldGEx",
            "L2RvY3VtZW50czphbm5vdGF0ZVRleHQ6ASpCeQohY29tLmdvb2dsZS5jbG91",
            "ZC5sYW5ndWFnZS52MWJldGExQhRMYW5ndWFnZVNlcnZpY2VQcm90b1ABWjxn",
            "b29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVhcGlzL2Nsb3VkL2xh",
            "bmd1YWdlL3YxYmV0YTFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Cloud.Language.V1Beta1.EncodingType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.Document), global::Google.Cloud.Language.V1Beta1.Document.Parser, new[]{ "Type", "Content", "GcsContentUri", "Language" }, new[]{ "Source" }, new[]{ typeof(global::Google.Cloud.Language.V1Beta1.Document.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.Sentence), global::Google.Cloud.Language.V1Beta1.Sentence.Parser, new[]{ "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.Entity), global::Google.Cloud.Language.V1Beta1.Entity.Parser, new[]{ "Name", "Type", "Metadata", "Salience", "Mentions" }, null, new[]{ typeof(global::Google.Cloud.Language.V1Beta1.Entity.Types.Type) }, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.Token), global::Google.Cloud.Language.V1Beta1.Token.Parser, new[]{ "Text", "PartOfSpeech", "DependencyEdge", "Lemma" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.Sentiment), global::Google.Cloud.Language.V1Beta1.Sentiment.Parser, new[]{ "Polarity", "Magnitude" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.PartOfSpeech), global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Parser, new[]{ "Tag" }, null, new[]{ typeof(global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Tag) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.DependencyEdge), global::Google.Cloud.Language.V1Beta1.DependencyEdge.Parser, new[]{ "HeadTokenIndex", "Label" }, null, new[]{ typeof(global::Google.Cloud.Language.V1Beta1.DependencyEdge.Types.Label) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.EntityMention), global::Google.Cloud.Language.V1Beta1.EntityMention.Parser, new[]{ "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.TextSpan), global::Google.Cloud.Language.V1Beta1.TextSpan.Parser, new[]{ "Content", "BeginOffset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.AnalyzeSentimentRequest), global::Google.Cloud.Language.V1Beta1.AnalyzeSentimentRequest.Parser, new[]{ "Document" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.AnalyzeSentimentResponse), global::Google.Cloud.Language.V1Beta1.AnalyzeSentimentResponse.Parser, new[]{ "DocumentSentiment", "Language" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.AnalyzeEntitiesRequest), global::Google.Cloud.Language.V1Beta1.AnalyzeEntitiesRequest.Parser, new[]{ "Document", "EncodingType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.AnalyzeEntitiesResponse), global::Google.Cloud.Language.V1Beta1.AnalyzeEntitiesResponse.Parser, new[]{ "Entities", "Language" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.AnnotateTextRequest), global::Google.Cloud.Language.V1Beta1.AnnotateTextRequest.Parser, new[]{ "Document", "Features", "EncodingType" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.AnnotateTextRequest.Types.Features), global::Google.Cloud.Language.V1Beta1.AnnotateTextRequest.Types.Features.Parser, new[]{ "ExtractSyntax", "ExtractEntities", "ExtractDocumentSentiment" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.AnnotateTextResponse), global::Google.Cloud.Language.V1Beta1.AnnotateTextResponse.Parser, new[]{ "Sentences", "Tokens", "Entities", "DocumentSentiment", "Language" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  Represents the text encoding that the caller uses to process the output.
  ///  Providing an `EncodingType` is recommended because the API provides the
  ///  beginning offsets for various outputs, such as tokens and mentions, and
  ///  languages that natively use different text encodings may access offsets
  ///  differently.
  /// </summary>
  public enum EncodingType {
    /// <summary>
    ///  If `EncodingType` is not specified, encoding-dependent information (such as
    ///  `begin_offset`) will be set at `-1`.
    /// </summary>
    [pbr::OriginalName("NONE")] None = 0,
    /// <summary>
    ///  Encoding-dependent information (such as `begin_offset`) is calculated based
    ///  on the UTF-8 encoding of the input. C++ and Go are examples of languages
    ///  that use this encoding natively.
    /// </summary>
    [pbr::OriginalName("UTF8")] Utf8 = 1,
    /// <summary>
    ///  Encoding-dependent information (such as `begin_offset`) is calculated based
    ///  on the UTF-16 encoding of the input. Java and Javascript are examples of
    ///  languages that use this encoding natively.
    /// </summary>
    [pbr::OriginalName("UTF16")] Utf16 = 2,
    /// <summary>
    ///  Encoding-dependent information (such as `begin_offset`) is calculated based
    ///  on the UTF-32 encoding of the input. Python is an example of a language
    ///  that uses this encoding natively.
    /// </summary>
    [pbr::OriginalName("UTF32")] Utf32 = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  ################################################################ #
  ///
  ///  Represents the input to API methods.
  /// </summary>
  public sealed partial class Document : pb::IMessage<Document> {
    private static readonly pb::MessageParser<Document> _parser = new pb::MessageParser<Document>(() => new Document());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Document> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Document() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Document(Document other) : this() {
      type_ = other.type_;
      language_ = other.language_;
      switch (other.SourceCase) {
        case SourceOneofCase.Content:
          Content = other.Content;
          break;
        case SourceOneofCase.GcsContentUri:
          GcsContentUri = other.GcsContentUri;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Document Clone() {
      return new Document(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Google.Cloud.Language.V1Beta1.Document.Types.Type type_ = 0;
    /// <summary>
    ///  Required. If the type is not set or is `TYPE_UNSPECIFIED`,
    ///  returns an `INVALID_ARGUMENT` error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.Document.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 2;
    /// <summary>
    ///  The content of the input in string format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return sourceCase_ == SourceOneofCase.Content ? (string) source_ : ""; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        sourceCase_ = SourceOneofCase.Content;
      }
    }

    /// <summary>Field number for the "gcs_content_uri" field.</summary>
    public const int GcsContentUriFieldNumber = 3;
    /// <summary>
    ///  The Google Cloud Storage URI where the file content is located.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GcsContentUri {
      get { return sourceCase_ == SourceOneofCase.GcsContentUri ? (string) source_ : ""; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        sourceCase_ = SourceOneofCase.GcsContentUri;
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 4;
    private string language_ = "";
    /// <summary>
    ///  The language of the document (if not specified, the language is
    ///  automatically detected). Both ISO and BCP-47 language codes are
    ///  accepted.&lt;br>
    ///  **Current Language Restrictions:**
    ///
    ///   * Only English, Spanish, and Japanese textual content
    ///     are supported, with the following additional restriction:
    ///     * `analyzeSentiment` only supports English text.
    ///  If the language (either specified by the caller or automatically detected)
    ///  is not supported by the called API method, an `INVALID_ARGUMENT` error
    ///  is returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object source_;
    /// <summary>Enum of possible cases for the "source" oneof.</summary>
    public enum SourceOneofCase {
      None = 0,
      Content = 2,
      GcsContentUri = 3,
    }
    private SourceOneofCase sourceCase_ = SourceOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceOneofCase SourceCase {
      get { return sourceCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSource() {
      sourceCase_ = SourceOneofCase.None;
      source_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Document);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Document other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Content != other.Content) return false;
      if (GcsContentUri != other.GcsContentUri) return false;
      if (Language != other.Language) return false;
      if (SourceCase != other.SourceCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (sourceCase_ == SourceOneofCase.Content) hash ^= Content.GetHashCode();
      if (sourceCase_ == SourceOneofCase.GcsContentUri) hash ^= GcsContentUri.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      hash ^= (int) sourceCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (sourceCase_ == SourceOneofCase.Content) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (sourceCase_ == SourceOneofCase.GcsContentUri) {
        output.WriteRawTag(26);
        output.WriteString(GcsContentUri);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Language);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (sourceCase_ == SourceOneofCase.Content) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (sourceCase_ == SourceOneofCase.GcsContentUri) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GcsContentUri);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Document other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      switch (other.SourceCase) {
        case SourceOneofCase.Content:
          Content = other.Content;
          break;
        case SourceOneofCase.GcsContentUri:
          GcsContentUri = other.GcsContentUri;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Google.Cloud.Language.V1Beta1.Document.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
          case 26: {
            GcsContentUri = input.ReadString();
            break;
          }
          case 34: {
            Language = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Document message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  The document types enum.
      /// </summary>
      public enum Type {
        /// <summary>
        ///  The content type is not specified.
        /// </summary>
        [pbr::OriginalName("TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        ///  Plain text
        /// </summary>
        [pbr::OriginalName("PLAIN_TEXT")] PlainText = 1,
        /// <summary>
        ///  HTML
        /// </summary>
        [pbr::OriginalName("HTML")] Html = 2,
      }

    }
    #endregion

  }

  /// <summary>
  ///  Represents a sentence in the input document.
  /// </summary>
  public sealed partial class Sentence : pb::IMessage<Sentence> {
    private static readonly pb::MessageParser<Sentence> _parser = new pb::MessageParser<Sentence>(() => new Sentence());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sentence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sentence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sentence(Sentence other) : this() {
      Text = other.text_ != null ? other.Text.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sentence Clone() {
      return new Sentence(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private global::Google.Cloud.Language.V1Beta1.TextSpan text_;
    /// <summary>
    ///  The sentence text.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.TextSpan Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sentence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sentence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Text, other.Text)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (text_ != null) hash ^= Text.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (text_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (text_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sentence other) {
      if (other == null) {
        return;
      }
      if (other.text_ != null) {
        if (text_ == null) {
          text_ = new global::Google.Cloud.Language.V1Beta1.TextSpan();
        }
        Text.MergeFrom(other.Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (text_ == null) {
              text_ = new global::Google.Cloud.Language.V1Beta1.TextSpan();
            }
            input.ReadMessage(text_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Represents a phrase in the text that is a known entity, such as
  ///  a person, an organization, or location. The API associates information, such
  ///  as salience and mentions, with entities.
  /// </summary>
  public sealed partial class Entity : pb::IMessage<Entity> {
    private static readonly pb::MessageParser<Entity> _parser = new pb::MessageParser<Entity>(() => new Entity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Entity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entity(Entity other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      metadata_ = other.metadata_.Clone();
      salience_ = other.salience_;
      mentions_ = other.mentions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entity Clone() {
      return new Entity(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The representative name for the entity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Google.Cloud.Language.V1Beta1.Entity.Types.Type type_ = 0;
    /// <summary>
    ///  The entity type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.Entity.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_metadata_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 26);
    private readonly pbc::MapField<string, string> metadata_ = new pbc::MapField<string, string>();
    /// <summary>
    ///  Metadata associated with the entity.
    ///
    ///  Currently, only Wikipedia URLs are provided, if available.
    ///  The associated key is "wikipedia_url".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Metadata {
      get { return metadata_; }
    }

    /// <summary>Field number for the "salience" field.</summary>
    public const int SalienceFieldNumber = 4;
    private float salience_;
    /// <summary>
    ///  The salience score associated with the entity in the [0, 1.0] range.
    ///
    ///  The salience score for an entity provides information about the
    ///  importance or centrality of that entity to the entire document text.
    ///  Scores closer to 0 are less salient, while scores closer to 1.0 are highly
    ///  salient.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Salience {
      get { return salience_; }
      set {
        salience_ = value;
      }
    }

    /// <summary>Field number for the "mentions" field.</summary>
    public const int MentionsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Cloud.Language.V1Beta1.EntityMention> _repeated_mentions_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Cloud.Language.V1Beta1.EntityMention.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.EntityMention> mentions_ = new pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.EntityMention>();
    /// <summary>
    ///  The mentions of this entity in the input document. The API currently
    ///  supports proper noun mentions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.EntityMention> Mentions {
      get { return mentions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Entity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Entity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (!Metadata.Equals(other.Metadata)) return false;
      if (Salience != other.Salience) return false;
      if(!mentions_.Equals(other.mentions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= Metadata.GetHashCode();
      if (Salience != 0F) hash ^= Salience.GetHashCode();
      hash ^= mentions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      metadata_.WriteTo(output, _map_metadata_codec);
      if (Salience != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Salience);
      }
      mentions_.WriteTo(output, _repeated_mentions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += metadata_.CalculateSize(_map_metadata_codec);
      if (Salience != 0F) {
        size += 1 + 4;
      }
      size += mentions_.CalculateSize(_repeated_mentions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Entity other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      metadata_.Add(other.metadata_);
      if (other.Salience != 0F) {
        Salience = other.Salience;
      }
      mentions_.Add(other.mentions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            type_ = (global::Google.Cloud.Language.V1Beta1.Entity.Types.Type) input.ReadEnum();
            break;
          }
          case 26: {
            metadata_.AddEntriesFrom(input, _map_metadata_codec);
            break;
          }
          case 37: {
            Salience = input.ReadFloat();
            break;
          }
          case 42: {
            mentions_.AddEntriesFrom(input, _repeated_mentions_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Entity message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  The type of the entity.
      /// </summary>
      public enum Type {
        /// <summary>
        ///  Unknown
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        /// <summary>
        ///  Person
        /// </summary>
        [pbr::OriginalName("PERSON")] Person = 1,
        /// <summary>
        ///  Location
        /// </summary>
        [pbr::OriginalName("LOCATION")] Location = 2,
        /// <summary>
        ///  Organization
        /// </summary>
        [pbr::OriginalName("ORGANIZATION")] Organization = 3,
        /// <summary>
        ///  Event
        /// </summary>
        [pbr::OriginalName("EVENT")] Event = 4,
        /// <summary>
        ///  Work of art
        /// </summary>
        [pbr::OriginalName("WORK_OF_ART")] WorkOfArt = 5,
        /// <summary>
        ///  Consumer goods
        /// </summary>
        [pbr::OriginalName("CONSUMER_GOOD")] ConsumerGood = 6,
        /// <summary>
        ///  Other types
        /// </summary>
        [pbr::OriginalName("OTHER")] Other = 7,
      }

    }
    #endregion

  }

  /// <summary>
  ///  Represents the smallest syntactic building block of the text.
  /// </summary>
  public sealed partial class Token : pb::IMessage<Token> {
    private static readonly pb::MessageParser<Token> _parser = new pb::MessageParser<Token>(() => new Token());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Token> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Token() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Token(Token other) : this() {
      Text = other.text_ != null ? other.Text.Clone() : null;
      PartOfSpeech = other.partOfSpeech_ != null ? other.PartOfSpeech.Clone() : null;
      DependencyEdge = other.dependencyEdge_ != null ? other.DependencyEdge.Clone() : null;
      lemma_ = other.lemma_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Token Clone() {
      return new Token(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private global::Google.Cloud.Language.V1Beta1.TextSpan text_;
    /// <summary>
    ///  The token text.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.TextSpan Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    /// <summary>Field number for the "part_of_speech" field.</summary>
    public const int PartOfSpeechFieldNumber = 2;
    private global::Google.Cloud.Language.V1Beta1.PartOfSpeech partOfSpeech_;
    /// <summary>
    ///  Parts of speech tag for this token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.PartOfSpeech PartOfSpeech {
      get { return partOfSpeech_; }
      set {
        partOfSpeech_ = value;
      }
    }

    /// <summary>Field number for the "dependency_edge" field.</summary>
    public const int DependencyEdgeFieldNumber = 3;
    private global::Google.Cloud.Language.V1Beta1.DependencyEdge dependencyEdge_;
    /// <summary>
    ///  Dependency tree parse for this token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.DependencyEdge DependencyEdge {
      get { return dependencyEdge_; }
      set {
        dependencyEdge_ = value;
      }
    }

    /// <summary>Field number for the "lemma" field.</summary>
    public const int LemmaFieldNumber = 4;
    private string lemma_ = "";
    /// <summary>
    ///  [Lemma](https://en.wikipedia.org/wiki/Lemma_(morphology))
    ///  of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lemma {
      get { return lemma_; }
      set {
        lemma_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Token);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Token other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Text, other.Text)) return false;
      if (!object.Equals(PartOfSpeech, other.PartOfSpeech)) return false;
      if (!object.Equals(DependencyEdge, other.DependencyEdge)) return false;
      if (Lemma != other.Lemma) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (text_ != null) hash ^= Text.GetHashCode();
      if (partOfSpeech_ != null) hash ^= PartOfSpeech.GetHashCode();
      if (dependencyEdge_ != null) hash ^= DependencyEdge.GetHashCode();
      if (Lemma.Length != 0) hash ^= Lemma.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (text_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Text);
      }
      if (partOfSpeech_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PartOfSpeech);
      }
      if (dependencyEdge_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DependencyEdge);
      }
      if (Lemma.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Lemma);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (text_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (partOfSpeech_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PartOfSpeech);
      }
      if (dependencyEdge_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DependencyEdge);
      }
      if (Lemma.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lemma);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Token other) {
      if (other == null) {
        return;
      }
      if (other.text_ != null) {
        if (text_ == null) {
          text_ = new global::Google.Cloud.Language.V1Beta1.TextSpan();
        }
        Text.MergeFrom(other.Text);
      }
      if (other.partOfSpeech_ != null) {
        if (partOfSpeech_ == null) {
          partOfSpeech_ = new global::Google.Cloud.Language.V1Beta1.PartOfSpeech();
        }
        PartOfSpeech.MergeFrom(other.PartOfSpeech);
      }
      if (other.dependencyEdge_ != null) {
        if (dependencyEdge_ == null) {
          dependencyEdge_ = new global::Google.Cloud.Language.V1Beta1.DependencyEdge();
        }
        DependencyEdge.MergeFrom(other.DependencyEdge);
      }
      if (other.Lemma.Length != 0) {
        Lemma = other.Lemma;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (text_ == null) {
              text_ = new global::Google.Cloud.Language.V1Beta1.TextSpan();
            }
            input.ReadMessage(text_);
            break;
          }
          case 18: {
            if (partOfSpeech_ == null) {
              partOfSpeech_ = new global::Google.Cloud.Language.V1Beta1.PartOfSpeech();
            }
            input.ReadMessage(partOfSpeech_);
            break;
          }
          case 26: {
            if (dependencyEdge_ == null) {
              dependencyEdge_ = new global::Google.Cloud.Language.V1Beta1.DependencyEdge();
            }
            input.ReadMessage(dependencyEdge_);
            break;
          }
          case 34: {
            Lemma = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Represents the feeling associated with the entire text or entities in
  ///  the text.
  /// </summary>
  public sealed partial class Sentiment : pb::IMessage<Sentiment> {
    private static readonly pb::MessageParser<Sentiment> _parser = new pb::MessageParser<Sentiment>(() => new Sentiment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sentiment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sentiment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sentiment(Sentiment other) : this() {
      polarity_ = other.polarity_;
      magnitude_ = other.magnitude_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sentiment Clone() {
      return new Sentiment(this);
    }

    /// <summary>Field number for the "polarity" field.</summary>
    public const int PolarityFieldNumber = 1;
    private float polarity_;
    /// <summary>
    ///  Polarity of the sentiment in the [-1.0, 1.0] range. Larger numbers
    ///  represent more positive sentiments.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Polarity {
      get { return polarity_; }
      set {
        polarity_ = value;
      }
    }

    /// <summary>Field number for the "magnitude" field.</summary>
    public const int MagnitudeFieldNumber = 2;
    private float magnitude_;
    /// <summary>
    ///  A non-negative number in the [0, +inf) range, which represents
    ///  the absolute magnitude of sentiment regardless of polarity (positive or
    ///  negative).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Magnitude {
      get { return magnitude_; }
      set {
        magnitude_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sentiment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sentiment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Polarity != other.Polarity) return false;
      if (Magnitude != other.Magnitude) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Polarity != 0F) hash ^= Polarity.GetHashCode();
      if (Magnitude != 0F) hash ^= Magnitude.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Polarity != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Polarity);
      }
      if (Magnitude != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Magnitude);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Polarity != 0F) {
        size += 1 + 4;
      }
      if (Magnitude != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sentiment other) {
      if (other == null) {
        return;
      }
      if (other.Polarity != 0F) {
        Polarity = other.Polarity;
      }
      if (other.Magnitude != 0F) {
        Magnitude = other.Magnitude;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Polarity = input.ReadFloat();
            break;
          }
          case 21: {
            Magnitude = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Represents part of speech information for a token.
  /// </summary>
  public sealed partial class PartOfSpeech : pb::IMessage<PartOfSpeech> {
    private static readonly pb::MessageParser<PartOfSpeech> _parser = new pb::MessageParser<PartOfSpeech>(() => new PartOfSpeech());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartOfSpeech> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartOfSpeech() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartOfSpeech(PartOfSpeech other) : this() {
      tag_ = other.tag_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartOfSpeech Clone() {
      return new PartOfSpeech(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Tag tag_ = 0;
    /// <summary>
    ///  The part of speech tag.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Tag Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PartOfSpeech);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PartOfSpeech other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag != 0) hash ^= Tag.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Tag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Tag);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PartOfSpeech other) {
      if (other == null) {
        return;
      }
      if (other.Tag != 0) {
        Tag = other.Tag;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            tag_ = (global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Tag) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PartOfSpeech message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  The part of speech tags enum.
      /// </summary>
      public enum Tag {
        /// <summary>
        ///  Unknown
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        /// <summary>
        ///  Adjective
        /// </summary>
        [pbr::OriginalName("ADJ")] Adj = 1,
        /// <summary>
        ///  Adposition (preposition and postposition)
        /// </summary>
        [pbr::OriginalName("ADP")] Adp = 2,
        /// <summary>
        ///  Adverb
        /// </summary>
        [pbr::OriginalName("ADV")] Adv = 3,
        /// <summary>
        ///  Conjunction
        /// </summary>
        [pbr::OriginalName("CONJ")] Conj = 4,
        /// <summary>
        ///  Determiner
        /// </summary>
        [pbr::OriginalName("DET")] Det = 5,
        /// <summary>
        ///  Noun (common and proper)
        /// </summary>
        [pbr::OriginalName("NOUN")] Noun = 6,
        /// <summary>
        ///  Cardinal number
        /// </summary>
        [pbr::OriginalName("NUM")] Num = 7,
        /// <summary>
        ///  Pronoun
        /// </summary>
        [pbr::OriginalName("PRON")] Pron = 8,
        /// <summary>
        ///  Particle or other function word
        /// </summary>
        [pbr::OriginalName("PRT")] Prt = 9,
        /// <summary>
        ///  Punctuation
        /// </summary>
        [pbr::OriginalName("PUNCT")] Punct = 10,
        /// <summary>
        ///  Verb (all tenses and modes)
        /// </summary>
        [pbr::OriginalName("VERB")] Verb = 11,
        /// <summary>
        ///  Other: foreign words, typos, abbreviations
        /// </summary>
        [pbr::OriginalName("X")] X = 12,
        /// <summary>
        ///  Affix
        /// </summary>
        [pbr::OriginalName("AFFIX")] Affix = 13,
      }

    }
    #endregion

  }

  /// <summary>
  ///  Represents dependency parse tree information for a token.
  /// </summary>
  public sealed partial class DependencyEdge : pb::IMessage<DependencyEdge> {
    private static readonly pb::MessageParser<DependencyEdge> _parser = new pb::MessageParser<DependencyEdge>(() => new DependencyEdge());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DependencyEdge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DependencyEdge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DependencyEdge(DependencyEdge other) : this() {
      headTokenIndex_ = other.headTokenIndex_;
      label_ = other.label_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DependencyEdge Clone() {
      return new DependencyEdge(this);
    }

    /// <summary>Field number for the "head_token_index" field.</summary>
    public const int HeadTokenIndexFieldNumber = 1;
    private int headTokenIndex_;
    /// <summary>
    ///  Represents the head of this token in the dependency tree.
    ///  This is the index of the token which has an arc going to this token.
    ///  The index is the position of the token in the array of tokens returned
    ///  by the API method. If this token is a root token, then the
    ///  `head_token_index` is its own index.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadTokenIndex {
      get { return headTokenIndex_; }
      set {
        headTokenIndex_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 2;
    private global::Google.Cloud.Language.V1Beta1.DependencyEdge.Types.Label label_ = 0;
    /// <summary>
    ///  The parse label for the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.DependencyEdge.Types.Label Label {
      get { return label_; }
      set {
        label_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DependencyEdge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DependencyEdge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeadTokenIndex != other.HeadTokenIndex) return false;
      if (Label != other.Label) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeadTokenIndex != 0) hash ^= HeadTokenIndex.GetHashCode();
      if (Label != 0) hash ^= Label.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeadTokenIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeadTokenIndex);
      }
      if (Label != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Label);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeadTokenIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadTokenIndex);
      }
      if (Label != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Label);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DependencyEdge other) {
      if (other == null) {
        return;
      }
      if (other.HeadTokenIndex != 0) {
        HeadTokenIndex = other.HeadTokenIndex;
      }
      if (other.Label != 0) {
        Label = other.Label;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeadTokenIndex = input.ReadInt32();
            break;
          }
          case 16: {
            label_ = (global::Google.Cloud.Language.V1Beta1.DependencyEdge.Types.Label) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DependencyEdge message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  The parse label enum for the token.
      /// </summary>
      public enum Label {
        /// <summary>
        ///  Unknown
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        /// <summary>
        ///  Abbreviation modifier
        /// </summary>
        [pbr::OriginalName("ABBREV")] Abbrev = 1,
        /// <summary>
        ///  Adjectival complement
        /// </summary>
        [pbr::OriginalName("ACOMP")] Acomp = 2,
        /// <summary>
        ///  Adverbial clause modifier
        /// </summary>
        [pbr::OriginalName("ADVCL")] Advcl = 3,
        /// <summary>
        ///  Adverbial modifier
        /// </summary>
        [pbr::OriginalName("ADVMOD")] Advmod = 4,
        /// <summary>
        ///  Adjectival modifier of an NP
        /// </summary>
        [pbr::OriginalName("AMOD")] Amod = 5,
        /// <summary>
        ///  Appositional modifier of an NP
        /// </summary>
        [pbr::OriginalName("APPOS")] Appos = 6,
        /// <summary>
        ///  Attribute dependent of a copular verb
        /// </summary>
        [pbr::OriginalName("ATTR")] Attr = 7,
        /// <summary>
        ///  Auxiliary (non-main) verb
        /// </summary>
        [pbr::OriginalName("AUX")] Aux = 8,
        /// <summary>
        ///  Passive auxiliary
        /// </summary>
        [pbr::OriginalName("AUXPASS")] Auxpass = 9,
        /// <summary>
        ///  Coordinating conjunction
        /// </summary>
        [pbr::OriginalName("CC")] Cc = 10,
        /// <summary>
        ///  Clausal complement of a verb or adjective
        /// </summary>
        [pbr::OriginalName("CCOMP")] Ccomp = 11,
        /// <summary>
        ///  Conjunct
        /// </summary>
        [pbr::OriginalName("CONJ")] Conj = 12,
        /// <summary>
        ///  Clausal subject
        /// </summary>
        [pbr::OriginalName("CSUBJ")] Csubj = 13,
        /// <summary>
        ///  Clausal passive subject
        /// </summary>
        [pbr::OriginalName("CSUBJPASS")] Csubjpass = 14,
        /// <summary>
        ///  Dependency (unable to determine)
        /// </summary>
        [pbr::OriginalName("DEP")] Dep = 15,
        /// <summary>
        ///  Determiner
        /// </summary>
        [pbr::OriginalName("DET")] Det = 16,
        /// <summary>
        ///  Discourse
        /// </summary>
        [pbr::OriginalName("DISCOURSE")] Discourse = 17,
        /// <summary>
        ///  Direct object
        /// </summary>
        [pbr::OriginalName("DOBJ")] Dobj = 18,
        /// <summary>
        ///  Expletive
        /// </summary>
        [pbr::OriginalName("EXPL")] Expl = 19,
        /// <summary>
        ///  Goes with (part of a word in a text not well edited)
        /// </summary>
        [pbr::OriginalName("GOESWITH")] Goeswith = 20,
        /// <summary>
        ///  Indirect object
        /// </summary>
        [pbr::OriginalName("IOBJ")] Iobj = 21,
        /// <summary>
        ///  Marker (word introducing a subordinate clause)
        /// </summary>
        [pbr::OriginalName("MARK")] Mark = 22,
        /// <summary>
        ///  Multi-word expression
        /// </summary>
        [pbr::OriginalName("MWE")] Mwe = 23,
        /// <summary>
        ///  Multi-word verbal expression
        /// </summary>
        [pbr::OriginalName("MWV")] Mwv = 24,
        /// <summary>
        ///  Negation modifier
        /// </summary>
        [pbr::OriginalName("NEG")] Neg = 25,
        /// <summary>
        ///  Noun compound modifier
        /// </summary>
        [pbr::OriginalName("NN")] Nn = 26,
        /// <summary>
        ///  Noun phrase used as an adverbial modifier
        /// </summary>
        [pbr::OriginalName("NPADVMOD")] Npadvmod = 27,
        /// <summary>
        ///  Nominal subject
        /// </summary>
        [pbr::OriginalName("NSUBJ")] Nsubj = 28,
        /// <summary>
        ///  Passive nominal subject
        /// </summary>
        [pbr::OriginalName("NSUBJPASS")] Nsubjpass = 29,
        /// <summary>
        ///  Numeric modifier of a noun
        /// </summary>
        [pbr::OriginalName("NUM")] Num = 30,
        /// <summary>
        ///  Element of compound number
        /// </summary>
        [pbr::OriginalName("NUMBER")] Number = 31,
        /// <summary>
        ///  Punctuation mark
        /// </summary>
        [pbr::OriginalName("P")] P = 32,
        /// <summary>
        ///  Parataxis relation
        /// </summary>
        [pbr::OriginalName("PARATAXIS")] Parataxis = 33,
        /// <summary>
        ///  Participial modifier
        /// </summary>
        [pbr::OriginalName("PARTMOD")] Partmod = 34,
        /// <summary>
        ///  The complement of a preposition is a clause
        /// </summary>
        [pbr::OriginalName("PCOMP")] Pcomp = 35,
        /// <summary>
        ///  Object of a preposition
        /// </summary>
        [pbr::OriginalName("POBJ")] Pobj = 36,
        /// <summary>
        ///  Possession modifier
        /// </summary>
        [pbr::OriginalName("POSS")] Poss = 37,
        /// <summary>
        ///  Postverbal negative particle
        /// </summary>
        [pbr::OriginalName("POSTNEG")] Postneg = 38,
        /// <summary>
        ///  Predicate complement
        /// </summary>
        [pbr::OriginalName("PRECOMP")] Precomp = 39,
        /// <summary>
        ///  Preconjunt
        /// </summary>
        [pbr::OriginalName("PRECONJ")] Preconj = 40,
        /// <summary>
        ///  Predeterminer
        /// </summary>
        [pbr::OriginalName("PREDET")] Predet = 41,
        /// <summary>
        ///  Prefix
        /// </summary>
        [pbr::OriginalName("PREF")] Pref = 42,
        /// <summary>
        ///  Prepositional modifier
        /// </summary>
        [pbr::OriginalName("PREP")] Prep = 43,
        /// <summary>
        ///  The relationship between a verb and verbal morpheme
        /// </summary>
        [pbr::OriginalName("PRONL")] Pronl = 44,
        /// <summary>
        ///  Particle
        /// </summary>
        [pbr::OriginalName("PRT")] Prt = 45,
        /// <summary>
        ///  Associative or possessive marker
        /// </summary>
        [pbr::OriginalName("PS")] Ps = 46,
        /// <summary>
        ///  Quantifier phrase modifier
        /// </summary>
        [pbr::OriginalName("QUANTMOD")] Quantmod = 47,
        /// <summary>
        ///  Relative clause modifier
        /// </summary>
        [pbr::OriginalName("RCMOD")] Rcmod = 48,
        /// <summary>
        ///  Complementizer in relative clause
        /// </summary>
        [pbr::OriginalName("RCMODREL")] Rcmodrel = 49,
        /// <summary>
        ///  Ellipsis without a preceding predicate
        /// </summary>
        [pbr::OriginalName("RDROP")] Rdrop = 50,
        /// <summary>
        ///  Referent
        /// </summary>
        [pbr::OriginalName("REF")] Ref = 51,
        /// <summary>
        ///  Remnant
        /// </summary>
        [pbr::OriginalName("REMNANT")] Remnant = 52,
        /// <summary>
        ///  Reparandum
        /// </summary>
        [pbr::OriginalName("REPARANDUM")] Reparandum = 53,
        /// <summary>
        ///  Root
        /// </summary>
        [pbr::OriginalName("ROOT")] Root = 54,
        /// <summary>
        ///  Suffix specifying a unit of number
        /// </summary>
        [pbr::OriginalName("SNUM")] Snum = 55,
        /// <summary>
        ///  Suffix
        /// </summary>
        [pbr::OriginalName("SUFF")] Suff = 56,
        /// <summary>
        ///  Temporal modifier
        /// </summary>
        [pbr::OriginalName("TMOD")] Tmod = 57,
        /// <summary>
        ///  Topic marker
        /// </summary>
        [pbr::OriginalName("TOPIC")] Topic = 58,
        /// <summary>
        ///  Clause headed by an infinite form of the verb that modifies a noun
        /// </summary>
        [pbr::OriginalName("VMOD")] Vmod = 59,
        /// <summary>
        ///  Vocative
        /// </summary>
        [pbr::OriginalName("VOCATIVE")] Vocative = 60,
        /// <summary>
        ///  Open clausal complement
        /// </summary>
        [pbr::OriginalName("XCOMP")] Xcomp = 61,
        /// <summary>
        ///  Name suffix
        /// </summary>
        [pbr::OriginalName("SUFFIX")] Suffix = 62,
        /// <summary>
        ///  Name title
        /// </summary>
        [pbr::OriginalName("TITLE")] Title = 63,
        /// <summary>
        ///  Adverbial phrase modifier
        /// </summary>
        [pbr::OriginalName("ADVPHMOD")] Advphmod = 64,
        /// <summary>
        ///  Causative auxiliary
        /// </summary>
        [pbr::OriginalName("AUXCAUS")] Auxcaus = 65,
        /// <summary>
        ///  Helper auxiliary
        /// </summary>
        [pbr::OriginalName("AUXVV")] Auxvv = 66,
        /// <summary>
        ///  Rentaishi (Prenominal modifier)
        /// </summary>
        [pbr::OriginalName("DTMOD")] Dtmod = 67,
        /// <summary>
        ///  Foreign words
        /// </summary>
        [pbr::OriginalName("FOREIGN")] Foreign = 68,
        /// <summary>
        ///  Keyword
        /// </summary>
        [pbr::OriginalName("KW")] Kw = 69,
        /// <summary>
        ///  List for chains of comparable items
        /// </summary>
        [pbr::OriginalName("LIST")] List = 70,
        /// <summary>
        ///  Nominalized clause
        /// </summary>
        [pbr::OriginalName("NOMC")] Nomc = 71,
        /// <summary>
        ///  Nominalized clausal subject
        /// </summary>
        [pbr::OriginalName("NOMCSUBJ")] Nomcsubj = 72,
        /// <summary>
        ///  Nominalized clausal passive
        /// </summary>
        [pbr::OriginalName("NOMCSUBJPASS")] Nomcsubjpass = 73,
        /// <summary>
        ///  Compound of numeric modifier
        /// </summary>
        [pbr::OriginalName("NUMC")] Numc = 74,
        /// <summary>
        ///  Copula
        /// </summary>
        [pbr::OriginalName("COP")] Cop = 75,
        /// <summary>
        ///  Dislocated relation (for fronted/topicalized elements)
        /// </summary>
        [pbr::OriginalName("DISLOCATED")] Dislocated = 76,
      }

    }
    #endregion

  }

  /// <summary>
  ///  Represents a mention for an entity in the text. Currently, proper noun
  ///  mentions are supported.
  /// </summary>
  public sealed partial class EntityMention : pb::IMessage<EntityMention> {
    private static readonly pb::MessageParser<EntityMention> _parser = new pb::MessageParser<EntityMention>(() => new EntityMention());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityMention> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityMention() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityMention(EntityMention other) : this() {
      Text = other.text_ != null ? other.Text.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityMention Clone() {
      return new EntityMention(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private global::Google.Cloud.Language.V1Beta1.TextSpan text_;
    /// <summary>
    ///  The mention text.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.TextSpan Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityMention);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityMention other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Text, other.Text)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (text_ != null) hash ^= Text.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (text_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (text_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityMention other) {
      if (other == null) {
        return;
      }
      if (other.text_ != null) {
        if (text_ == null) {
          text_ = new global::Google.Cloud.Language.V1Beta1.TextSpan();
        }
        Text.MergeFrom(other.Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (text_ == null) {
              text_ = new global::Google.Cloud.Language.V1Beta1.TextSpan();
            }
            input.ReadMessage(text_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Represents an output piece of text.
  /// </summary>
  public sealed partial class TextSpan : pb::IMessage<TextSpan> {
    private static readonly pb::MessageParser<TextSpan> _parser = new pb::MessageParser<TextSpan>(() => new TextSpan());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextSpan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextSpan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextSpan(TextSpan other) : this() {
      content_ = other.content_;
      beginOffset_ = other.beginOffset_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextSpan Clone() {
      return new TextSpan(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private string content_ = "";
    /// <summary>
    ///  The content of the output text.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "begin_offset" field.</summary>
    public const int BeginOffsetFieldNumber = 2;
    private int beginOffset_;
    /// <summary>
    ///  The API calculates the beginning offset of the content in the original
    ///  document according to the [EncodingType][google.cloud.language.v1beta1.EncodingType] specified in the API request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BeginOffset {
      get { return beginOffset_; }
      set {
        beginOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextSpan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextSpan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      if (BeginOffset != other.BeginOffset) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (BeginOffset != 0) hash ^= BeginOffset.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Content);
      }
      if (BeginOffset != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BeginOffset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (BeginOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeginOffset);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextSpan other) {
      if (other == null) {
        return;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.BeginOffset != 0) {
        BeginOffset = other.BeginOffset;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Content = input.ReadString();
            break;
          }
          case 16: {
            BeginOffset = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The sentiment analysis request message.
  /// </summary>
  public sealed partial class AnalyzeSentimentRequest : pb::IMessage<AnalyzeSentimentRequest> {
    private static readonly pb::MessageParser<AnalyzeSentimentRequest> _parser = new pb::MessageParser<AnalyzeSentimentRequest>(() => new AnalyzeSentimentRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnalyzeSentimentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeSentimentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeSentimentRequest(AnalyzeSentimentRequest other) : this() {
      Document = other.document_ != null ? other.Document.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeSentimentRequest Clone() {
      return new AnalyzeSentimentRequest(this);
    }

    /// <summary>Field number for the "document" field.</summary>
    public const int DocumentFieldNumber = 1;
    private global::Google.Cloud.Language.V1Beta1.Document document_;
    /// <summary>
    ///  Input document. Currently, `analyzeSentiment` only supports English text
    ///  ([Document.language][google.cloud.language.v1beta1.Document.language]="EN").
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.Document Document {
      get { return document_; }
      set {
        document_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnalyzeSentimentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnalyzeSentimentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Document, other.Document)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (document_ != null) hash ^= Document.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (document_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Document);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (document_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Document);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnalyzeSentimentRequest other) {
      if (other == null) {
        return;
      }
      if (other.document_ != null) {
        if (document_ == null) {
          document_ = new global::Google.Cloud.Language.V1Beta1.Document();
        }
        Document.MergeFrom(other.Document);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (document_ == null) {
              document_ = new global::Google.Cloud.Language.V1Beta1.Document();
            }
            input.ReadMessage(document_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The sentiment analysis response message.
  /// </summary>
  public sealed partial class AnalyzeSentimentResponse : pb::IMessage<AnalyzeSentimentResponse> {
    private static readonly pb::MessageParser<AnalyzeSentimentResponse> _parser = new pb::MessageParser<AnalyzeSentimentResponse>(() => new AnalyzeSentimentResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnalyzeSentimentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeSentimentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeSentimentResponse(AnalyzeSentimentResponse other) : this() {
      DocumentSentiment = other.documentSentiment_ != null ? other.DocumentSentiment.Clone() : null;
      language_ = other.language_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeSentimentResponse Clone() {
      return new AnalyzeSentimentResponse(this);
    }

    /// <summary>Field number for the "document_sentiment" field.</summary>
    public const int DocumentSentimentFieldNumber = 1;
    private global::Google.Cloud.Language.V1Beta1.Sentiment documentSentiment_;
    /// <summary>
    ///  The overall sentiment of the input document.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.Sentiment DocumentSentiment {
      get { return documentSentiment_; }
      set {
        documentSentiment_ = value;
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 2;
    private string language_ = "";
    /// <summary>
    ///  The language of the text, which will be the same as the language specified
    ///  in the request or, if not specified, the automatically-detected language.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnalyzeSentimentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnalyzeSentimentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DocumentSentiment, other.DocumentSentiment)) return false;
      if (Language != other.Language) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (documentSentiment_ != null) hash ^= DocumentSentiment.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (documentSentiment_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DocumentSentiment);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Language);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (documentSentiment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DocumentSentiment);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnalyzeSentimentResponse other) {
      if (other == null) {
        return;
      }
      if (other.documentSentiment_ != null) {
        if (documentSentiment_ == null) {
          documentSentiment_ = new global::Google.Cloud.Language.V1Beta1.Sentiment();
        }
        DocumentSentiment.MergeFrom(other.DocumentSentiment);
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (documentSentiment_ == null) {
              documentSentiment_ = new global::Google.Cloud.Language.V1Beta1.Sentiment();
            }
            input.ReadMessage(documentSentiment_);
            break;
          }
          case 18: {
            Language = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The entity analysis request message.
  /// </summary>
  public sealed partial class AnalyzeEntitiesRequest : pb::IMessage<AnalyzeEntitiesRequest> {
    private static readonly pb::MessageParser<AnalyzeEntitiesRequest> _parser = new pb::MessageParser<AnalyzeEntitiesRequest>(() => new AnalyzeEntitiesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnalyzeEntitiesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeEntitiesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeEntitiesRequest(AnalyzeEntitiesRequest other) : this() {
      Document = other.document_ != null ? other.Document.Clone() : null;
      encodingType_ = other.encodingType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeEntitiesRequest Clone() {
      return new AnalyzeEntitiesRequest(this);
    }

    /// <summary>Field number for the "document" field.</summary>
    public const int DocumentFieldNumber = 1;
    private global::Google.Cloud.Language.V1Beta1.Document document_;
    /// <summary>
    ///  Input document.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.Document Document {
      get { return document_; }
      set {
        document_ = value;
      }
    }

    /// <summary>Field number for the "encoding_type" field.</summary>
    public const int EncodingTypeFieldNumber = 2;
    private global::Google.Cloud.Language.V1Beta1.EncodingType encodingType_ = 0;
    /// <summary>
    ///  The encoding type used by the API to calculate offsets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.EncodingType EncodingType {
      get { return encodingType_; }
      set {
        encodingType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnalyzeEntitiesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnalyzeEntitiesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Document, other.Document)) return false;
      if (EncodingType != other.EncodingType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (document_ != null) hash ^= Document.GetHashCode();
      if (EncodingType != 0) hash ^= EncodingType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (document_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Document);
      }
      if (EncodingType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EncodingType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (document_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Document);
      }
      if (EncodingType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EncodingType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnalyzeEntitiesRequest other) {
      if (other == null) {
        return;
      }
      if (other.document_ != null) {
        if (document_ == null) {
          document_ = new global::Google.Cloud.Language.V1Beta1.Document();
        }
        Document.MergeFrom(other.Document);
      }
      if (other.EncodingType != 0) {
        EncodingType = other.EncodingType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (document_ == null) {
              document_ = new global::Google.Cloud.Language.V1Beta1.Document();
            }
            input.ReadMessage(document_);
            break;
          }
          case 16: {
            encodingType_ = (global::Google.Cloud.Language.V1Beta1.EncodingType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The entity analysis response message.
  /// </summary>
  public sealed partial class AnalyzeEntitiesResponse : pb::IMessage<AnalyzeEntitiesResponse> {
    private static readonly pb::MessageParser<AnalyzeEntitiesResponse> _parser = new pb::MessageParser<AnalyzeEntitiesResponse>(() => new AnalyzeEntitiesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnalyzeEntitiesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeEntitiesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeEntitiesResponse(AnalyzeEntitiesResponse other) : this() {
      entities_ = other.entities_.Clone();
      language_ = other.language_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeEntitiesResponse Clone() {
      return new AnalyzeEntitiesResponse(this);
    }

    /// <summary>Field number for the "entities" field.</summary>
    public const int EntitiesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Language.V1Beta1.Entity> _repeated_entities_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Language.V1Beta1.Entity.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Entity> entities_ = new pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Entity>();
    /// <summary>
    ///  The recognized entities in the input document.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Entity> Entities {
      get { return entities_; }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 2;
    private string language_ = "";
    /// <summary>
    ///  The language of the text, which will be the same as the language specified
    ///  in the request or, if not specified, the automatically-detected language.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnalyzeEntitiesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnalyzeEntitiesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entities_.Equals(other.entities_)) return false;
      if (Language != other.Language) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entities_.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entities_.WriteTo(output, _repeated_entities_codec);
      if (Language.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Language);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entities_.CalculateSize(_repeated_entities_codec);
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnalyzeEntitiesResponse other) {
      if (other == null) {
        return;
      }
      entities_.Add(other.entities_);
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            entities_.AddEntriesFrom(input, _repeated_entities_codec);
            break;
          }
          case 18: {
            Language = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The request message for the advanced text annotation API, which performs all
  ///  the above plus syntactic analysis.
  /// </summary>
  public sealed partial class AnnotateTextRequest : pb::IMessage<AnnotateTextRequest> {
    private static readonly pb::MessageParser<AnnotateTextRequest> _parser = new pb::MessageParser<AnnotateTextRequest>(() => new AnnotateTextRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnnotateTextRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotateTextRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotateTextRequest(AnnotateTextRequest other) : this() {
      Document = other.document_ != null ? other.Document.Clone() : null;
      Features = other.features_ != null ? other.Features.Clone() : null;
      encodingType_ = other.encodingType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotateTextRequest Clone() {
      return new AnnotateTextRequest(this);
    }

    /// <summary>Field number for the "document" field.</summary>
    public const int DocumentFieldNumber = 1;
    private global::Google.Cloud.Language.V1Beta1.Document document_;
    /// <summary>
    ///  Input document.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.Document Document {
      get { return document_; }
      set {
        document_ = value;
      }
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 2;
    private global::Google.Cloud.Language.V1Beta1.AnnotateTextRequest.Types.Features features_;
    /// <summary>
    ///  The enabled features.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.AnnotateTextRequest.Types.Features Features {
      get { return features_; }
      set {
        features_ = value;
      }
    }

    /// <summary>Field number for the "encoding_type" field.</summary>
    public const int EncodingTypeFieldNumber = 3;
    private global::Google.Cloud.Language.V1Beta1.EncodingType encodingType_ = 0;
    /// <summary>
    ///  The encoding type used by the API to calculate offsets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.EncodingType EncodingType {
      get { return encodingType_; }
      set {
        encodingType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnnotateTextRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnnotateTextRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Document, other.Document)) return false;
      if (!object.Equals(Features, other.Features)) return false;
      if (EncodingType != other.EncodingType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (document_ != null) hash ^= Document.GetHashCode();
      if (features_ != null) hash ^= Features.GetHashCode();
      if (EncodingType != 0) hash ^= EncodingType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (document_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Document);
      }
      if (features_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Features);
      }
      if (EncodingType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EncodingType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (document_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Document);
      }
      if (features_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Features);
      }
      if (EncodingType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EncodingType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnnotateTextRequest other) {
      if (other == null) {
        return;
      }
      if (other.document_ != null) {
        if (document_ == null) {
          document_ = new global::Google.Cloud.Language.V1Beta1.Document();
        }
        Document.MergeFrom(other.Document);
      }
      if (other.features_ != null) {
        if (features_ == null) {
          features_ = new global::Google.Cloud.Language.V1Beta1.AnnotateTextRequest.Types.Features();
        }
        Features.MergeFrom(other.Features);
      }
      if (other.EncodingType != 0) {
        EncodingType = other.EncodingType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (document_ == null) {
              document_ = new global::Google.Cloud.Language.V1Beta1.Document();
            }
            input.ReadMessage(document_);
            break;
          }
          case 18: {
            if (features_ == null) {
              features_ = new global::Google.Cloud.Language.V1Beta1.AnnotateTextRequest.Types.Features();
            }
            input.ReadMessage(features_);
            break;
          }
          case 24: {
            encodingType_ = (global::Google.Cloud.Language.V1Beta1.EncodingType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AnnotateTextRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  All available features for sentiment, syntax, and semantic analysis.
      ///  Setting each one to true will enable that specific analysis for the input.
      /// </summary>
      public sealed partial class Features : pb::IMessage<Features> {
        private static readonly pb::MessageParser<Features> _parser = new pb::MessageParser<Features>(() => new Features());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Features> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Language.V1Beta1.AnnotateTextRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Features() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Features(Features other) : this() {
          extractSyntax_ = other.extractSyntax_;
          extractEntities_ = other.extractEntities_;
          extractDocumentSentiment_ = other.extractDocumentSentiment_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Features Clone() {
          return new Features(this);
        }

        /// <summary>Field number for the "extract_syntax" field.</summary>
        public const int ExtractSyntaxFieldNumber = 1;
        private bool extractSyntax_;
        /// <summary>
        ///  Extract syntax information.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ExtractSyntax {
          get { return extractSyntax_; }
          set {
            extractSyntax_ = value;
          }
        }

        /// <summary>Field number for the "extract_entities" field.</summary>
        public const int ExtractEntitiesFieldNumber = 2;
        private bool extractEntities_;
        /// <summary>
        ///  Extract entities.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ExtractEntities {
          get { return extractEntities_; }
          set {
            extractEntities_ = value;
          }
        }

        /// <summary>Field number for the "extract_document_sentiment" field.</summary>
        public const int ExtractDocumentSentimentFieldNumber = 3;
        private bool extractDocumentSentiment_;
        /// <summary>
        ///  Extract document-level sentiment.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ExtractDocumentSentiment {
          get { return extractDocumentSentiment_; }
          set {
            extractDocumentSentiment_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Features);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Features other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ExtractSyntax != other.ExtractSyntax) return false;
          if (ExtractEntities != other.ExtractEntities) return false;
          if (ExtractDocumentSentiment != other.ExtractDocumentSentiment) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ExtractSyntax != false) hash ^= ExtractSyntax.GetHashCode();
          if (ExtractEntities != false) hash ^= ExtractEntities.GetHashCode();
          if (ExtractDocumentSentiment != false) hash ^= ExtractDocumentSentiment.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ExtractSyntax != false) {
            output.WriteRawTag(8);
            output.WriteBool(ExtractSyntax);
          }
          if (ExtractEntities != false) {
            output.WriteRawTag(16);
            output.WriteBool(ExtractEntities);
          }
          if (ExtractDocumentSentiment != false) {
            output.WriteRawTag(24);
            output.WriteBool(ExtractDocumentSentiment);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ExtractSyntax != false) {
            size += 1 + 1;
          }
          if (ExtractEntities != false) {
            size += 1 + 1;
          }
          if (ExtractDocumentSentiment != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Features other) {
          if (other == null) {
            return;
          }
          if (other.ExtractSyntax != false) {
            ExtractSyntax = other.ExtractSyntax;
          }
          if (other.ExtractEntities != false) {
            ExtractEntities = other.ExtractEntities;
          }
          if (other.ExtractDocumentSentiment != false) {
            ExtractDocumentSentiment = other.ExtractDocumentSentiment;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                ExtractSyntax = input.ReadBool();
                break;
              }
              case 16: {
                ExtractEntities = input.ReadBool();
                break;
              }
              case 24: {
                ExtractDocumentSentiment = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///  The text annotations response message.
  /// </summary>
  public sealed partial class AnnotateTextResponse : pb::IMessage<AnnotateTextResponse> {
    private static readonly pb::MessageParser<AnnotateTextResponse> _parser = new pb::MessageParser<AnnotateTextResponse>(() => new AnnotateTextResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnnotateTextResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotateTextResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotateTextResponse(AnnotateTextResponse other) : this() {
      sentences_ = other.sentences_.Clone();
      tokens_ = other.tokens_.Clone();
      entities_ = other.entities_.Clone();
      DocumentSentiment = other.documentSentiment_ != null ? other.DocumentSentiment.Clone() : null;
      language_ = other.language_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotateTextResponse Clone() {
      return new AnnotateTextResponse(this);
    }

    /// <summary>Field number for the "sentences" field.</summary>
    public const int SentencesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Language.V1Beta1.Sentence> _repeated_sentences_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Language.V1Beta1.Sentence.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Sentence> sentences_ = new pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Sentence>();
    /// <summary>
    ///  Sentences in the input document. Populated if the user enables
    ///  [AnnotateTextRequest.Features.extract_syntax][google.cloud.language.v1beta1.AnnotateTextRequest.Features.extract_syntax].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Sentence> Sentences {
      get { return sentences_; }
    }

    /// <summary>Field number for the "tokens" field.</summary>
    public const int TokensFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Language.V1Beta1.Token> _repeated_tokens_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Language.V1Beta1.Token.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Token> tokens_ = new pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Token>();
    /// <summary>
    ///  Tokens, along with their syntactic information, in the input document.
    ///  Populated if the user enables
    ///  [AnnotateTextRequest.Features.extract_syntax][google.cloud.language.v1beta1.AnnotateTextRequest.Features.extract_syntax].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Token> Tokens {
      get { return tokens_; }
    }

    /// <summary>Field number for the "entities" field.</summary>
    public const int EntitiesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Language.V1Beta1.Entity> _repeated_entities_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Language.V1Beta1.Entity.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Entity> entities_ = new pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Entity>();
    /// <summary>
    ///  Entities, along with their semantic information, in the input document.
    ///  Populated if the user enables
    ///  [AnnotateTextRequest.Features.extract_entities][google.cloud.language.v1beta1.AnnotateTextRequest.Features.extract_entities].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Entity> Entities {
      get { return entities_; }
    }

    /// <summary>Field number for the "document_sentiment" field.</summary>
    public const int DocumentSentimentFieldNumber = 4;
    private global::Google.Cloud.Language.V1Beta1.Sentiment documentSentiment_;
    /// <summary>
    ///  The overall sentiment for the document. Populated if the user enables
    ///  [AnnotateTextRequest.Features.extract_document_sentiment][google.cloud.language.v1beta1.AnnotateTextRequest.Features.extract_document_sentiment].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.Sentiment DocumentSentiment {
      get { return documentSentiment_; }
      set {
        documentSentiment_ = value;
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 5;
    private string language_ = "";
    /// <summary>
    ///  The language of the text, which will be the same as the language specified
    ///  in the request or, if not specified, the automatically-detected language.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnnotateTextResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnnotateTextResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sentences_.Equals(other.sentences_)) return false;
      if(!tokens_.Equals(other.tokens_)) return false;
      if(!entities_.Equals(other.entities_)) return false;
      if (!object.Equals(DocumentSentiment, other.DocumentSentiment)) return false;
      if (Language != other.Language) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sentences_.GetHashCode();
      hash ^= tokens_.GetHashCode();
      hash ^= entities_.GetHashCode();
      if (documentSentiment_ != null) hash ^= DocumentSentiment.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sentences_.WriteTo(output, _repeated_sentences_codec);
      tokens_.WriteTo(output, _repeated_tokens_codec);
      entities_.WriteTo(output, _repeated_entities_codec);
      if (documentSentiment_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DocumentSentiment);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Language);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sentences_.CalculateSize(_repeated_sentences_codec);
      size += tokens_.CalculateSize(_repeated_tokens_codec);
      size += entities_.CalculateSize(_repeated_entities_codec);
      if (documentSentiment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DocumentSentiment);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnnotateTextResponse other) {
      if (other == null) {
        return;
      }
      sentences_.Add(other.sentences_);
      tokens_.Add(other.tokens_);
      entities_.Add(other.entities_);
      if (other.documentSentiment_ != null) {
        if (documentSentiment_ == null) {
          documentSentiment_ = new global::Google.Cloud.Language.V1Beta1.Sentiment();
        }
        DocumentSentiment.MergeFrom(other.DocumentSentiment);
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            sentences_.AddEntriesFrom(input, _repeated_sentences_codec);
            break;
          }
          case 18: {
            tokens_.AddEntriesFrom(input, _repeated_tokens_codec);
            break;
          }
          case 26: {
            entities_.AddEntriesFrom(input, _repeated_entities_codec);
            break;
          }
          case 34: {
            if (documentSentiment_ == null) {
              documentSentiment_ = new global::Google.Cloud.Language.V1Beta1.Sentiment();
            }
            input.ReadMessage(documentSentiment_);
            break;
          }
          case 42: {
            Language = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
