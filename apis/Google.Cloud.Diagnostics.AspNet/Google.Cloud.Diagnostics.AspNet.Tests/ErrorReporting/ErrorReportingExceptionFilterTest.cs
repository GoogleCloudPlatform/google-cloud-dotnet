// Copyright 2017 Google Inc. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using Google.Cloud.Diagnostics.Common;
using Google.Cloud.ErrorReporting.V1Beta1;
using Moq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web;
using System.Web.Mvc;
using Xunit;

namespace Google.Cloud.Diagnostics.AspNet.Tests
{
    public class ErrorReportingExceptionFilterTest
    {
        private const string UserAgent = "UserAgent 1.0";
        private const int ConflictStatusCode = (int) HttpStatusCode.Conflict;
        private const string ServiceName = "SomeService";
        private const string Version = "1.0.0";
        private static readonly string DeleteMethod = HttpMethod.Delete.Method;
        private static readonly Exception SimpleException = new Exception();
        private static readonly Uri GoogleUri = new Uri("https://www.google.com");

        /// <summary>
        /// Create a simple <see cref="ExceptionContext"/>
        /// </summary>
        private ExceptionContext CreateSimpleContext()
        {
            var mockRequest = new Mock<HttpRequestBase>();
            var mockResponse = new Mock<HttpResponseBase>();
            var mockContext = new Mock<HttpContextBase>();
            mockContext.Setup(c => c.Request).Returns(mockRequest.Object);
            mockContext.Setup(c => c.Response).Returns(mockResponse.Object);

            return new ExceptionContext
            {
                HttpContext = mockContext.Object,
                Exception = new Exception()
            };
        }

        /// <summary>
        /// Create a filled <see cref="ExceptionContext"/>
        /// </summary>
        private ExceptionContext CreateComplexContext()
        {
            var mockRequest = new Mock<HttpRequestBase>();
            mockRequest.Setup(r => r.HttpMethod).Returns(DeleteMethod);
            mockRequest.Setup(r => r.Url).Returns(GoogleUri);
            mockRequest.Setup(r => r.UserAgent).Returns(UserAgent);

            var mockResponse = new Mock<HttpResponseBase>();
            mockResponse.Setup(r => r.StatusCode).Returns(ConflictStatusCode);

            var mockContext = new Mock<HttpContextBase>();
            mockContext.Setup(c => c.Request).Returns(mockRequest.Object);
            mockContext.Setup(c => c.Response).Returns(mockResponse.Object);

            Exception exception;
            try
            {
                throw SimpleException;
            }
            catch (Exception e)
            {
                exception = e;
            }

            return new ExceptionContext
            {
                HttpContext = mockContext.Object,
                Exception = exception
            };
        }

        /// <summary>
        /// Matcher to check if an <see cref="IEnumerable{ReportedErrorEvent}>"/> contains
        /// one element and matches the context generated by <see cref="CreateComplexContext"/>
        /// </summary>
        private IEnumerable<ReportedErrorEvent> IsComplexContext()
        {
            bool isWindows = ErrorReportingUtils.IsWindows;
            return Match.Create<IEnumerable<ReportedErrorEvent>>(enumerable => {
                var e = enumerable.Single();
                return e.Message.Contains(SimpleException.Message) &&
                    e.Context.HttpRequest.Method.Equals(DeleteMethod) &&
                    e.Context.HttpRequest.Url.Equals(GoogleUri.ToString()) &&
                    e.Context.HttpRequest.UserAgent.Equals(UserAgent) &&
                    e.Context.HttpRequest.ResponseStatusCode == ConflictStatusCode &&
                    (!isWindows || e.Context.ReportLocation.LineNumber > 0) &&
                    (!isWindows || !string.IsNullOrEmpty(e.Context.ReportLocation.FilePath)) &&
                    e.Context.ReportLocation.FunctionName.Equals(nameof(CreateComplexContext)) &&
                    e.ServiceContext.Service.Equals(ServiceName) &&
                    e.ServiceContext.Version.Equals(Version);
            });
        }

        /// <summary>
        /// Matcher to check if an <see cref="IEnumerable{ReportedErrorEvent}>"/> contains
        /// one element and matches the <see cref="SimpleContext"/>
        /// </summary>
        private IEnumerable<ReportedErrorEvent> IsSimpleContext()
        {
            return Match.Create<IEnumerable<ReportedErrorEvent>>(enumerable => {
                var e = enumerable.Single();
                return e.Message.Contains(SimpleException.Message) &&
                    string.IsNullOrEmpty(e.Context.HttpRequest.Method) &&
                    string.IsNullOrEmpty(e.Context.HttpRequest.Url) &&
                    string.IsNullOrEmpty(e.Context.HttpRequest.UserAgent) &&
                    e.Context.HttpRequest.ResponseStatusCode == 0 &&
                    e.Context.ReportLocation.LineNumber == 0 &&
                    string.IsNullOrEmpty(e.Context.ReportLocation.FilePath) &&
                    string.IsNullOrEmpty(e.Context.ReportLocation.FunctionName) &&
                    e.ServiceContext.Service.Equals(ServiceName) &&
                    e.ServiceContext.Version.Equals(Version);
            });
        }

        
        private ErrorReportingExceptionFilter CreateFilter(IConsumer<ReportedErrorEvent> consumer)
            => new ErrorReportingExceptionFilter(consumer, ServiceName, Version);

        [Fact]
        public void Log()
        {
            var mockConsumer = new Mock<IConsumer<ReportedErrorEvent>>();
            mockConsumer.Setup(c => c.Receive(IsComplexContext()));

            ErrorReportingExceptionFilter filter = CreateFilter(mockConsumer.Object);
            filter.OnException(CreateComplexContext());

            mockConsumer.VerifyAll();
        }

        [Fact]
        public void Log_Simple()
        {
            var mockConsumer = new Mock<IConsumer<ReportedErrorEvent>>();
            mockConsumer.Setup(c => c.Receive(IsSimpleContext()));

            ErrorReportingExceptionFilter filter = CreateFilter(mockConsumer.Object);
            filter.OnException(CreateSimpleContext());

            mockConsumer.VerifyAll();
        }
    }
}
