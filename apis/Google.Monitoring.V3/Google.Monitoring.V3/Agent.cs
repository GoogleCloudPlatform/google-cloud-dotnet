// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/v3/agent.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Monitoring.V3 {

  /// <summary>Holder for reflection information generated from google/monitoring/v3/agent.proto</summary>
  public static partial class AgentReflection {

    #region Descriptor
    /// <summary>File descriptor for google/monitoring/v3/agent.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AgentReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBnb29nbGUvbW9uaXRvcmluZy92My9hZ2VudC5wcm90bxIUZ29vZ2xlLm1v",
            "bml0b3JpbmcudjMaHGdvb2dsZS9hcGkvYW5ub3RhdGlvbnMucHJvdG8aIWdv",
            "b2dsZS9tb25pdG9yaW5nL3YzL2NvbW1vbi5wcm90bxofZ29vZ2xlL3Byb3Rv",
            "YnVmL3RpbWVzdGFtcC5wcm90byKOAgoNQ29sbGVjdGRWYWx1ZRIYChBkYXRh",
            "X3NvdXJjZV9uYW1lGAEgASgJEkwKEGRhdGFfc291cmNlX3R5cGUYAiABKA4y",
            "Mi5nb29nbGUubW9uaXRvcmluZy52My5Db2xsZWN0ZFZhbHVlLkRhdGFTb3Vy",
            "Y2VUeXBlEi8KBXZhbHVlGAMgASgLMiAuZ29vZ2xlLm1vbml0b3JpbmcudjMu",
            "VHlwZWRWYWx1ZSJkCg5EYXRhU291cmNlVHlwZRIgChxVTlNQRUNJRklFRF9E",
            "QVRBX1NPVVJDRV9UWVBFEAASCQoFR0FVR0UQARILCgdDT1VOVEVSEAISCgoG",
            "REVSSVZFEAMSDAoIQUJTT0xVVEUQBCKMAwoPQ29sbGVjdGRQYXlsb2FkEjMK",
            "BnZhbHVlcxgBIAMoCzIjLmdvb2dsZS5tb25pdG9yaW5nLnYzLkNvbGxlY3Rk",
            "VmFsdWUSLgoKc3RhcnRfdGltZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXASLAoIZW5kX3RpbWUYAyABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "VGltZXN0YW1wEg4KBnBsdWdpbhgEIAEoCRIXCg9wbHVnaW5faW5zdGFuY2UY",
            "BSABKAkSDAoEdHlwZRgGIAEoCRIVCg10eXBlX2luc3RhbmNlGAcgASgJEkUK",
            "CG1ldGFkYXRhGAggAygLMjMuZ29vZ2xlLm1vbml0b3JpbmcudjMuQ29sbGVj",
            "dGRQYXlsb2FkLk1ldGFkYXRhRW50cnkaUQoNTWV0YWRhdGFFbnRyeRILCgNr",
            "ZXkYASABKAkSLwoFdmFsdWUYAiABKAsyIC5nb29nbGUubW9uaXRvcmluZy52",
            "My5UeXBlZFZhbHVlOgI4AUIoChhjb20uZ29vZ2xlLm1vbml0b3JpbmcudjNC",
            "CkFnZW50UHJvdG9QAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Monitoring.V3.CommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Monitoring.V3.CollectdValue), global::Google.Monitoring.V3.CollectdValue.Parser, new[]{ "DataSourceName", "DataSourceType", "Value" }, null, new[]{ typeof(global::Google.Monitoring.V3.CollectdValue.Types.DataSourceType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Monitoring.V3.CollectdPayload), global::Google.Monitoring.V3.CollectdPayload.Parser, new[]{ "Values", "StartTime", "EndTime", "Plugin", "PluginInstance", "Type", "TypeInstance", "Metadata" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  A single data point from a `collectd`-based plugin.
  /// </summary>
  public sealed partial class CollectdValue : pb::IMessage<CollectdValue> {
    private static readonly pb::MessageParser<CollectdValue> _parser = new pb::MessageParser<CollectdValue>(() => new CollectdValue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CollectdValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Monitoring.V3.AgentReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectdValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectdValue(CollectdValue other) : this() {
      dataSourceName_ = other.dataSourceName_;
      dataSourceType_ = other.dataSourceType_;
      Value = other.value_ != null ? other.Value.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectdValue Clone() {
      return new CollectdValue(this);
    }

    /// <summary>Field number for the "data_source_name" field.</summary>
    public const int DataSourceNameFieldNumber = 1;
    private string dataSourceName_ = "";
    /// <summary>
    ///  The data source for the `collectd` value. For example there are
    ///  two data sources for network measurements: `"rx"` and `"tx"`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataSourceName {
      get { return dataSourceName_; }
      set {
        dataSourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_source_type" field.</summary>
    public const int DataSourceTypeFieldNumber = 2;
    private global::Google.Monitoring.V3.CollectdValue.Types.DataSourceType dataSourceType_ = 0;
    /// <summary>
    ///  The type of measurement.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Monitoring.V3.CollectdValue.Types.DataSourceType DataSourceType {
      get { return dataSourceType_; }
      set {
        dataSourceType_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private global::Google.Monitoring.V3.TypedValue value_;
    /// <summary>
    ///  The measurement value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Monitoring.V3.TypedValue Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CollectdValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CollectdValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataSourceName != other.DataSourceName) return false;
      if (DataSourceType != other.DataSourceType) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataSourceName.Length != 0) hash ^= DataSourceName.GetHashCode();
      if (DataSourceType != 0) hash ^= DataSourceType.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataSourceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DataSourceName);
      }
      if (DataSourceType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DataSourceType);
      }
      if (value_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataSourceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataSourceName);
      }
      if (DataSourceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataSourceType);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CollectdValue other) {
      if (other == null) {
        return;
      }
      if (other.DataSourceName.Length != 0) {
        DataSourceName = other.DataSourceName;
      }
      if (other.DataSourceType != 0) {
        DataSourceType = other.DataSourceType;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::Google.Monitoring.V3.TypedValue();
        }
        Value.MergeFrom(other.Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DataSourceName = input.ReadString();
            break;
          }
          case 16: {
            dataSourceType_ = (global::Google.Monitoring.V3.CollectdValue.Types.DataSourceType) input.ReadEnum();
            break;
          }
          case 26: {
            if (value_ == null) {
              value_ = new global::Google.Monitoring.V3.TypedValue();
            }
            input.ReadMessage(value_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CollectdValue message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  The type of measurement for the data source.
      /// </summary>
      public enum DataSourceType {
        /// <summary>
        ///  An unspecified data source type.
        ///  This corresponds to [google.api.MetricDescriptor.MetricKind.METRIC_KIND_UNSPECIFIED].
        /// </summary>
        [pbr::OriginalName("UNSPECIFIED_DATA_SOURCE_TYPE")] UnspecifiedDataSourceType = 0,
        /// <summary>
        ///  An instantaneous measurement of a varying quantity.
        ///  This corresponds to [google.api.MetricDescriptor.MetricKind.GAUGE].
        /// </summary>
        [pbr::OriginalName("GAUGE")] Gauge = 1,
        /// <summary>
        ///  A cumulative value over time.
        ///  This corresponds to [google.api.MetricDescriptor.MetricKind.CUMULATIVE].
        /// </summary>
        [pbr::OriginalName("COUNTER")] Counter = 2,
        /// <summary>
        ///  A rate of change of the measurement.
        /// </summary>
        [pbr::OriginalName("DERIVE")] Derive = 3,
        /// <summary>
        ///  An amount of change since the last measurement interval.
        ///  This corresponds to [google.api.MetricDescriptor.MetricKind.DELTA].
        /// </summary>
        [pbr::OriginalName("ABSOLUTE")] Absolute = 4,
      }

    }
    #endregion

  }

  /// <summary>
  ///  A collection of data points sent from a `collectd`-based plugin.
  ///  See the `collectd` documentation for more information.
  /// </summary>
  public sealed partial class CollectdPayload : pb::IMessage<CollectdPayload> {
    private static readonly pb::MessageParser<CollectdPayload> _parser = new pb::MessageParser<CollectdPayload>(() => new CollectdPayload());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CollectdPayload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Monitoring.V3.AgentReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectdPayload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectdPayload(CollectdPayload other) : this() {
      values_ = other.values_.Clone();
      StartTime = other.startTime_ != null ? other.StartTime.Clone() : null;
      EndTime = other.endTime_ != null ? other.EndTime.Clone() : null;
      plugin_ = other.plugin_;
      pluginInstance_ = other.pluginInstance_;
      type_ = other.type_;
      typeInstance_ = other.typeInstance_;
      metadata_ = other.metadata_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectdPayload Clone() {
      return new CollectdPayload(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Monitoring.V3.CollectdValue> _repeated_values_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Monitoring.V3.CollectdValue.Parser);
    private readonly pbc::RepeatedField<global::Google.Monitoring.V3.CollectdValue> values_ = new pbc::RepeatedField<global::Google.Monitoring.V3.CollectdValue>();
    /// <summary>
    ///  The measured values during this time interval.
    ///  Each value must have a different `dataSourceName`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Monitoring.V3.CollectdValue> Values {
      get { return values_; }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    /// <summary>
    ///  The start time of the interval.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
    /// <summary>
    ///  The end time of the interval.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "plugin" field.</summary>
    public const int PluginFieldNumber = 4;
    private string plugin_ = "";
    /// <summary>
    ///  The name of the plugin. Example: `"disk"`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Plugin {
      get { return plugin_; }
      set {
        plugin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "plugin_instance" field.</summary>
    public const int PluginInstanceFieldNumber = 5;
    private string pluginInstance_ = "";
    /// <summary>
    ///  The instance name of the plugin Example: `"hdcl"`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PluginInstance {
      get { return pluginInstance_; }
      set {
        pluginInstance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private string type_ = "";
    /// <summary>
    ///  The measurement type. Example: `"memory"`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type_instance" field.</summary>
    public const int TypeInstanceFieldNumber = 7;
    private string typeInstance_ = "";
    /// <summary>
    ///  The measurement type instance. Example: `"used"`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeInstance {
      get { return typeInstance_; }
      set {
        typeInstance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 8;
    private static readonly pbc::MapField<string, global::Google.Monitoring.V3.TypedValue>.Codec _map_metadata_codec
        = new pbc::MapField<string, global::Google.Monitoring.V3.TypedValue>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Monitoring.V3.TypedValue.Parser), 66);
    private readonly pbc::MapField<string, global::Google.Monitoring.V3.TypedValue> metadata_ = new pbc::MapField<string, global::Google.Monitoring.V3.TypedValue>();
    /// <summary>
    ///  The measurement metadata. Example: `"process_id" -> 12345`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Monitoring.V3.TypedValue> Metadata {
      get { return metadata_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CollectdPayload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CollectdPayload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if (Plugin != other.Plugin) return false;
      if (PluginInstance != other.PluginInstance) return false;
      if (Type != other.Type) return false;
      if (TypeInstance != other.TypeInstance) return false;
      if (!Metadata.Equals(other.Metadata)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (Plugin.Length != 0) hash ^= Plugin.GetHashCode();
      if (PluginInstance.Length != 0) hash ^= PluginInstance.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (TypeInstance.Length != 0) hash ^= TypeInstance.GetHashCode();
      hash ^= Metadata.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (startTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EndTime);
      }
      if (Plugin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Plugin);
      }
      if (PluginInstance.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PluginInstance);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Type);
      }
      if (TypeInstance.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TypeInstance);
      }
      metadata_.WriteTo(output, _map_metadata_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (Plugin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Plugin);
      }
      if (PluginInstance.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PluginInstance);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (TypeInstance.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeInstance);
      }
      size += metadata_.CalculateSize(_map_metadata_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CollectdPayload other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          startTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          endTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      if (other.Plugin.Length != 0) {
        Plugin = other.Plugin;
      }
      if (other.PluginInstance.Length != 0) {
        PluginInstance = other.PluginInstance;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.TypeInstance.Length != 0) {
        TypeInstance = other.TypeInstance;
      }
      metadata_.Add(other.metadata_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
          case 18: {
            if (startTime_ == null) {
              startTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(startTime_);
            break;
          }
          case 26: {
            if (endTime_ == null) {
              endTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(endTime_);
            break;
          }
          case 34: {
            Plugin = input.ReadString();
            break;
          }
          case 42: {
            PluginInstance = input.ReadString();
            break;
          }
          case 50: {
            Type = input.ReadString();
            break;
          }
          case 58: {
            TypeInstance = input.ReadString();
            break;
          }
          case 66: {
            metadata_.AddEntriesFrom(input, _map_metadata_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
