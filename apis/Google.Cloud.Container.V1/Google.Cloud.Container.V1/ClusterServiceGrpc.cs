// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/container/v1/cluster_service.proto
// Original file comments:
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Google.Cloud.Container.V1 {
  /// <summary>
  /// Google Container Engine Cluster Manager v1
  /// </summary>
  public static partial class ClusterManager
  {
    static readonly string __ServiceName = "google.container.v1.ClusterManager";

    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.ListClustersRequest> __Marshaller_ListClustersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.ListClustersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.ListClustersResponse> __Marshaller_ListClustersResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.ListClustersResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.GetClusterRequest> __Marshaller_GetClusterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.GetClusterRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.Cluster> __Marshaller_Cluster = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.Cluster.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.CreateClusterRequest> __Marshaller_CreateClusterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.CreateClusterRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.Operation> __Marshaller_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.UpdateClusterRequest> __Marshaller_UpdateClusterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.UpdateClusterRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.UpdateNodePoolRequest> __Marshaller_UpdateNodePoolRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.UpdateNodePoolRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.SetNodePoolAutoscalingRequest> __Marshaller_SetNodePoolAutoscalingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.SetNodePoolAutoscalingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.SetLoggingServiceRequest> __Marshaller_SetLoggingServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.SetLoggingServiceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.SetMonitoringServiceRequest> __Marshaller_SetMonitoringServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.SetMonitoringServiceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.SetAddonsConfigRequest> __Marshaller_SetAddonsConfigRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.SetAddonsConfigRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.SetLocationsRequest> __Marshaller_SetLocationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.SetLocationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.UpdateMasterRequest> __Marshaller_UpdateMasterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.UpdateMasterRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.SetMasterAuthRequest> __Marshaller_SetMasterAuthRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.SetMasterAuthRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.DeleteClusterRequest> __Marshaller_DeleteClusterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.DeleteClusterRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.ListOperationsRequest> __Marshaller_ListOperationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.ListOperationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.ListOperationsResponse> __Marshaller_ListOperationsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.ListOperationsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.GetOperationRequest> __Marshaller_GetOperationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.GetOperationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.CancelOperationRequest> __Marshaller_CancelOperationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.CancelOperationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.GetServerConfigRequest> __Marshaller_GetServerConfigRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.GetServerConfigRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.ServerConfig> __Marshaller_ServerConfig = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.ServerConfig.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.ListNodePoolsRequest> __Marshaller_ListNodePoolsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.ListNodePoolsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.ListNodePoolsResponse> __Marshaller_ListNodePoolsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.ListNodePoolsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.GetNodePoolRequest> __Marshaller_GetNodePoolRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.GetNodePoolRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.NodePool> __Marshaller_NodePool = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.NodePool.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.CreateNodePoolRequest> __Marshaller_CreateNodePoolRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.CreateNodePoolRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.DeleteNodePoolRequest> __Marshaller_DeleteNodePoolRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.DeleteNodePoolRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.RollbackNodePoolUpgradeRequest> __Marshaller_RollbackNodePoolUpgradeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.RollbackNodePoolUpgradeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.SetNodePoolManagementRequest> __Marshaller_SetNodePoolManagementRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.SetNodePoolManagementRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.SetLabelsRequest> __Marshaller_SetLabelsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.SetLabelsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.SetLegacyAbacRequest> __Marshaller_SetLegacyAbacRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.SetLegacyAbacRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.StartIPRotationRequest> __Marshaller_StartIPRotationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.StartIPRotationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.CompleteIPRotationRequest> __Marshaller_CompleteIPRotationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.CompleteIPRotationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.SetNodePoolSizeRequest> __Marshaller_SetNodePoolSizeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.SetNodePoolSizeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.SetNetworkPolicyRequest> __Marshaller_SetNetworkPolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.SetNetworkPolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Container.V1.SetMaintenancePolicyRequest> __Marshaller_SetMaintenancePolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Container.V1.SetMaintenancePolicyRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.ListClustersRequest, global::Google.Cloud.Container.V1.ListClustersResponse> __Method_ListClusters = new grpc::Method<global::Google.Cloud.Container.V1.ListClustersRequest, global::Google.Cloud.Container.V1.ListClustersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListClusters",
        __Marshaller_ListClustersRequest,
        __Marshaller_ListClustersResponse);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.GetClusterRequest, global::Google.Cloud.Container.V1.Cluster> __Method_GetCluster = new grpc::Method<global::Google.Cloud.Container.V1.GetClusterRequest, global::Google.Cloud.Container.V1.Cluster>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCluster",
        __Marshaller_GetClusterRequest,
        __Marshaller_Cluster);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.CreateClusterRequest, global::Google.Cloud.Container.V1.Operation> __Method_CreateCluster = new grpc::Method<global::Google.Cloud.Container.V1.CreateClusterRequest, global::Google.Cloud.Container.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCluster",
        __Marshaller_CreateClusterRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.UpdateClusterRequest, global::Google.Cloud.Container.V1.Operation> __Method_UpdateCluster = new grpc::Method<global::Google.Cloud.Container.V1.UpdateClusterRequest, global::Google.Cloud.Container.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCluster",
        __Marshaller_UpdateClusterRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.UpdateNodePoolRequest, global::Google.Cloud.Container.V1.Operation> __Method_UpdateNodePool = new grpc::Method<global::Google.Cloud.Container.V1.UpdateNodePoolRequest, global::Google.Cloud.Container.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateNodePool",
        __Marshaller_UpdateNodePoolRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.SetNodePoolAutoscalingRequest, global::Google.Cloud.Container.V1.Operation> __Method_SetNodePoolAutoscaling = new grpc::Method<global::Google.Cloud.Container.V1.SetNodePoolAutoscalingRequest, global::Google.Cloud.Container.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetNodePoolAutoscaling",
        __Marshaller_SetNodePoolAutoscalingRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.SetLoggingServiceRequest, global::Google.Cloud.Container.V1.Operation> __Method_SetLoggingService = new grpc::Method<global::Google.Cloud.Container.V1.SetLoggingServiceRequest, global::Google.Cloud.Container.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetLoggingService",
        __Marshaller_SetLoggingServiceRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.SetMonitoringServiceRequest, global::Google.Cloud.Container.V1.Operation> __Method_SetMonitoringService = new grpc::Method<global::Google.Cloud.Container.V1.SetMonitoringServiceRequest, global::Google.Cloud.Container.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetMonitoringService",
        __Marshaller_SetMonitoringServiceRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.SetAddonsConfigRequest, global::Google.Cloud.Container.V1.Operation> __Method_SetAddonsConfig = new grpc::Method<global::Google.Cloud.Container.V1.SetAddonsConfigRequest, global::Google.Cloud.Container.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetAddonsConfig",
        __Marshaller_SetAddonsConfigRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.SetLocationsRequest, global::Google.Cloud.Container.V1.Operation> __Method_SetLocations = new grpc::Method<global::Google.Cloud.Container.V1.SetLocationsRequest, global::Google.Cloud.Container.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetLocations",
        __Marshaller_SetLocationsRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.UpdateMasterRequest, global::Google.Cloud.Container.V1.Operation> __Method_UpdateMaster = new grpc::Method<global::Google.Cloud.Container.V1.UpdateMasterRequest, global::Google.Cloud.Container.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateMaster",
        __Marshaller_UpdateMasterRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.SetMasterAuthRequest, global::Google.Cloud.Container.V1.Operation> __Method_SetMasterAuth = new grpc::Method<global::Google.Cloud.Container.V1.SetMasterAuthRequest, global::Google.Cloud.Container.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetMasterAuth",
        __Marshaller_SetMasterAuthRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.DeleteClusterRequest, global::Google.Cloud.Container.V1.Operation> __Method_DeleteCluster = new grpc::Method<global::Google.Cloud.Container.V1.DeleteClusterRequest, global::Google.Cloud.Container.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCluster",
        __Marshaller_DeleteClusterRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.ListOperationsRequest, global::Google.Cloud.Container.V1.ListOperationsResponse> __Method_ListOperations = new grpc::Method<global::Google.Cloud.Container.V1.ListOperationsRequest, global::Google.Cloud.Container.V1.ListOperationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListOperations",
        __Marshaller_ListOperationsRequest,
        __Marshaller_ListOperationsResponse);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.GetOperationRequest, global::Google.Cloud.Container.V1.Operation> __Method_GetOperation = new grpc::Method<global::Google.Cloud.Container.V1.GetOperationRequest, global::Google.Cloud.Container.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOperation",
        __Marshaller_GetOperationRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.CancelOperationRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_CancelOperation = new grpc::Method<global::Google.Cloud.Container.V1.CancelOperationRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelOperation",
        __Marshaller_CancelOperationRequest,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.GetServerConfigRequest, global::Google.Cloud.Container.V1.ServerConfig> __Method_GetServerConfig = new grpc::Method<global::Google.Cloud.Container.V1.GetServerConfigRequest, global::Google.Cloud.Container.V1.ServerConfig>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServerConfig",
        __Marshaller_GetServerConfigRequest,
        __Marshaller_ServerConfig);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.ListNodePoolsRequest, global::Google.Cloud.Container.V1.ListNodePoolsResponse> __Method_ListNodePools = new grpc::Method<global::Google.Cloud.Container.V1.ListNodePoolsRequest, global::Google.Cloud.Container.V1.ListNodePoolsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListNodePools",
        __Marshaller_ListNodePoolsRequest,
        __Marshaller_ListNodePoolsResponse);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.GetNodePoolRequest, global::Google.Cloud.Container.V1.NodePool> __Method_GetNodePool = new grpc::Method<global::Google.Cloud.Container.V1.GetNodePoolRequest, global::Google.Cloud.Container.V1.NodePool>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNodePool",
        __Marshaller_GetNodePoolRequest,
        __Marshaller_NodePool);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.CreateNodePoolRequest, global::Google.Cloud.Container.V1.Operation> __Method_CreateNodePool = new grpc::Method<global::Google.Cloud.Container.V1.CreateNodePoolRequest, global::Google.Cloud.Container.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateNodePool",
        __Marshaller_CreateNodePoolRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.DeleteNodePoolRequest, global::Google.Cloud.Container.V1.Operation> __Method_DeleteNodePool = new grpc::Method<global::Google.Cloud.Container.V1.DeleteNodePoolRequest, global::Google.Cloud.Container.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteNodePool",
        __Marshaller_DeleteNodePoolRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.RollbackNodePoolUpgradeRequest, global::Google.Cloud.Container.V1.Operation> __Method_RollbackNodePoolUpgrade = new grpc::Method<global::Google.Cloud.Container.V1.RollbackNodePoolUpgradeRequest, global::Google.Cloud.Container.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RollbackNodePoolUpgrade",
        __Marshaller_RollbackNodePoolUpgradeRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.SetNodePoolManagementRequest, global::Google.Cloud.Container.V1.Operation> __Method_SetNodePoolManagement = new grpc::Method<global::Google.Cloud.Container.V1.SetNodePoolManagementRequest, global::Google.Cloud.Container.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetNodePoolManagement",
        __Marshaller_SetNodePoolManagementRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.SetLabelsRequest, global::Google.Cloud.Container.V1.Operation> __Method_SetLabels = new grpc::Method<global::Google.Cloud.Container.V1.SetLabelsRequest, global::Google.Cloud.Container.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetLabels",
        __Marshaller_SetLabelsRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.SetLegacyAbacRequest, global::Google.Cloud.Container.V1.Operation> __Method_SetLegacyAbac = new grpc::Method<global::Google.Cloud.Container.V1.SetLegacyAbacRequest, global::Google.Cloud.Container.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetLegacyAbac",
        __Marshaller_SetLegacyAbacRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.StartIPRotationRequest, global::Google.Cloud.Container.V1.Operation> __Method_StartIPRotation = new grpc::Method<global::Google.Cloud.Container.V1.StartIPRotationRequest, global::Google.Cloud.Container.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartIPRotation",
        __Marshaller_StartIPRotationRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.CompleteIPRotationRequest, global::Google.Cloud.Container.V1.Operation> __Method_CompleteIPRotation = new grpc::Method<global::Google.Cloud.Container.V1.CompleteIPRotationRequest, global::Google.Cloud.Container.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CompleteIPRotation",
        __Marshaller_CompleteIPRotationRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.SetNodePoolSizeRequest, global::Google.Cloud.Container.V1.Operation> __Method_SetNodePoolSize = new grpc::Method<global::Google.Cloud.Container.V1.SetNodePoolSizeRequest, global::Google.Cloud.Container.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetNodePoolSize",
        __Marshaller_SetNodePoolSizeRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.SetNetworkPolicyRequest, global::Google.Cloud.Container.V1.Operation> __Method_SetNetworkPolicy = new grpc::Method<global::Google.Cloud.Container.V1.SetNetworkPolicyRequest, global::Google.Cloud.Container.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetNetworkPolicy",
        __Marshaller_SetNetworkPolicyRequest,
        __Marshaller_Operation);

    static readonly grpc::Method<global::Google.Cloud.Container.V1.SetMaintenancePolicyRequest, global::Google.Cloud.Container.V1.Operation> __Method_SetMaintenancePolicy = new grpc::Method<global::Google.Cloud.Container.V1.SetMaintenancePolicyRequest, global::Google.Cloud.Container.V1.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetMaintenancePolicy",
        __Marshaller_SetMaintenancePolicyRequest,
        __Marshaller_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Container.V1.ClusterServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ClusterManager</summary>
    public abstract partial class ClusterManagerBase
    {
      /// <summary>
      /// Lists all clusters owned by a project in either the specified zone or all
      /// zones.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.ListClustersResponse> ListClusters(global::Google.Cloud.Container.V1.ListClustersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the details of a specific cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.Cluster> GetCluster(global::Google.Cloud.Container.V1.GetClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a cluster, consisting of the specified number and type of Google
      /// Compute Engine instances.
      ///
      /// By default, the cluster is created in the project's
      /// [default network](/compute/docs/networks-and-firewalls#networks).
      ///
      /// One firewall is added for the cluster. After cluster creation,
      /// the cluster creates routes for each node to allow the containers
      /// on that node to communicate with all other instances in the
      /// cluster.
      ///
      /// Finally, an entry is added to the project's global metadata indicating
      /// which CIDR range is being used by the cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.Operation> CreateCluster(global::Google.Cloud.Container.V1.CreateClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the settings of a specific cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.Operation> UpdateCluster(global::Google.Cloud.Container.V1.UpdateClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the version and/or image type of a specific node pool.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.Operation> UpdateNodePool(global::Google.Cloud.Container.V1.UpdateNodePoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the autoscaling settings of a specific node pool.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.Operation> SetNodePoolAutoscaling(global::Google.Cloud.Container.V1.SetNodePoolAutoscalingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the logging service of a specific cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.Operation> SetLoggingService(global::Google.Cloud.Container.V1.SetLoggingServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the monitoring service of a specific cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.Operation> SetMonitoringService(global::Google.Cloud.Container.V1.SetMonitoringServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the addons of a specific cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.Operation> SetAddonsConfig(global::Google.Cloud.Container.V1.SetAddonsConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the locations of a specific cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.Operation> SetLocations(global::Google.Cloud.Container.V1.SetLocationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the master of a specific cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.Operation> UpdateMaster(global::Google.Cloud.Container.V1.UpdateMasterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Used to set master auth materials. Currently supports :-
      /// Changing the admin password of a specific cluster.
      /// This can be either via password generation or explicitly set the password.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.Operation> SetMasterAuth(global::Google.Cloud.Container.V1.SetMasterAuthRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the cluster, including the Kubernetes endpoint and all worker
      /// nodes.
      ///
      /// Firewalls and routes that were configured during cluster creation
      /// are also deleted.
      ///
      /// Other Google Compute Engine resources that might be in use by the cluster
      /// (e.g. load balancer resources) will not be deleted if they weren't present
      /// at the initial create time.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.Operation> DeleteCluster(global::Google.Cloud.Container.V1.DeleteClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all operations in a project in a specific zone or all zones.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.ListOperationsResponse> ListOperations(global::Google.Cloud.Container.V1.ListOperationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the specified operation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.Operation> GetOperation(global::Google.Cloud.Container.V1.GetOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Cancels the specified operation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> CancelOperation(global::Google.Cloud.Container.V1.CancelOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns configuration info about the Container Engine service.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.ServerConfig> GetServerConfig(global::Google.Cloud.Container.V1.GetServerConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the node pools for a cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.ListNodePoolsResponse> ListNodePools(global::Google.Cloud.Container.V1.ListNodePoolsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the node pool requested.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.NodePool> GetNodePool(global::Google.Cloud.Container.V1.GetNodePoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a node pool for a cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.Operation> CreateNodePool(global::Google.Cloud.Container.V1.CreateNodePoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a node pool from a cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.Operation> DeleteNodePool(global::Google.Cloud.Container.V1.DeleteNodePoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Roll back the previously Aborted or Failed NodePool upgrade.
      /// This will be an no-op if the last upgrade successfully completed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.Operation> RollbackNodePoolUpgrade(global::Google.Cloud.Container.V1.RollbackNodePoolUpgradeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the NodeManagement options for a node pool.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.Operation> SetNodePoolManagement(global::Google.Cloud.Container.V1.SetNodePoolManagementRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets labels on a cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.Operation> SetLabels(global::Google.Cloud.Container.V1.SetLabelsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Enables or disables the ABAC authorization mechanism on a cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.Operation> SetLegacyAbac(global::Google.Cloud.Container.V1.SetLegacyAbacRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Start master IP rotation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.Operation> StartIPRotation(global::Google.Cloud.Container.V1.StartIPRotationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Completes master IP rotation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.Operation> CompleteIPRotation(global::Google.Cloud.Container.V1.CompleteIPRotationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the size of a specific node pool.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.Operation> SetNodePoolSize(global::Google.Cloud.Container.V1.SetNodePoolSizeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Enables/Disables Network Policy for a cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.Operation> SetNetworkPolicy(global::Google.Cloud.Container.V1.SetNetworkPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the maintenance policy for a cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Container.V1.Operation> SetMaintenancePolicy(global::Google.Cloud.Container.V1.SetMaintenancePolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ClusterManager</summary>
    public partial class ClusterManagerClient : grpc::ClientBase<ClusterManagerClient>
    {
      /// <summary>Creates a new client for ClusterManager</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ClusterManagerClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ClusterManager that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ClusterManagerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ClusterManagerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ClusterManagerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists all clusters owned by a project in either the specified zone or all
      /// zones.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.ListClustersResponse ListClusters(global::Google.Cloud.Container.V1.ListClustersRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListClusters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all clusters owned by a project in either the specified zone or all
      /// zones.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.ListClustersResponse ListClusters(global::Google.Cloud.Container.V1.ListClustersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListClusters, null, options, request);
      }
      /// <summary>
      /// Lists all clusters owned by a project in either the specified zone or all
      /// zones.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.ListClustersResponse> ListClustersAsync(global::Google.Cloud.Container.V1.ListClustersRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListClustersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all clusters owned by a project in either the specified zone or all
      /// zones.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.ListClustersResponse> ListClustersAsync(global::Google.Cloud.Container.V1.ListClustersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListClusters, null, options, request);
      }
      /// <summary>
      /// Gets the details of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Cluster GetCluster(global::Google.Cloud.Container.V1.GetClusterRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the details of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Cluster GetCluster(global::Google.Cloud.Container.V1.GetClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCluster, null, options, request);
      }
      /// <summary>
      /// Gets the details of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Cluster> GetClusterAsync(global::Google.Cloud.Container.V1.GetClusterRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the details of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Cluster> GetClusterAsync(global::Google.Cloud.Container.V1.GetClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCluster, null, options, request);
      }
      /// <summary>
      /// Creates a cluster, consisting of the specified number and type of Google
      /// Compute Engine instances.
      ///
      /// By default, the cluster is created in the project's
      /// [default network](/compute/docs/networks-and-firewalls#networks).
      ///
      /// One firewall is added for the cluster. After cluster creation,
      /// the cluster creates routes for each node to allow the containers
      /// on that node to communicate with all other instances in the
      /// cluster.
      ///
      /// Finally, an entry is added to the project's global metadata indicating
      /// which CIDR range is being used by the cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation CreateCluster(global::Google.Cloud.Container.V1.CreateClusterRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a cluster, consisting of the specified number and type of Google
      /// Compute Engine instances.
      ///
      /// By default, the cluster is created in the project's
      /// [default network](/compute/docs/networks-and-firewalls#networks).
      ///
      /// One firewall is added for the cluster. After cluster creation,
      /// the cluster creates routes for each node to allow the containers
      /// on that node to communicate with all other instances in the
      /// cluster.
      ///
      /// Finally, an entry is added to the project's global metadata indicating
      /// which CIDR range is being used by the cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation CreateCluster(global::Google.Cloud.Container.V1.CreateClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCluster, null, options, request);
      }
      /// <summary>
      /// Creates a cluster, consisting of the specified number and type of Google
      /// Compute Engine instances.
      ///
      /// By default, the cluster is created in the project's
      /// [default network](/compute/docs/networks-and-firewalls#networks).
      ///
      /// One firewall is added for the cluster. After cluster creation,
      /// the cluster creates routes for each node to allow the containers
      /// on that node to communicate with all other instances in the
      /// cluster.
      ///
      /// Finally, an entry is added to the project's global metadata indicating
      /// which CIDR range is being used by the cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> CreateClusterAsync(global::Google.Cloud.Container.V1.CreateClusterRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a cluster, consisting of the specified number and type of Google
      /// Compute Engine instances.
      ///
      /// By default, the cluster is created in the project's
      /// [default network](/compute/docs/networks-and-firewalls#networks).
      ///
      /// One firewall is added for the cluster. After cluster creation,
      /// the cluster creates routes for each node to allow the containers
      /// on that node to communicate with all other instances in the
      /// cluster.
      ///
      /// Finally, an entry is added to the project's global metadata indicating
      /// which CIDR range is being used by the cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> CreateClusterAsync(global::Google.Cloud.Container.V1.CreateClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCluster, null, options, request);
      }
      /// <summary>
      /// Updates the settings of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation UpdateCluster(global::Google.Cloud.Container.V1.UpdateClusterRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the settings of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation UpdateCluster(global::Google.Cloud.Container.V1.UpdateClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCluster, null, options, request);
      }
      /// <summary>
      /// Updates the settings of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> UpdateClusterAsync(global::Google.Cloud.Container.V1.UpdateClusterRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the settings of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> UpdateClusterAsync(global::Google.Cloud.Container.V1.UpdateClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCluster, null, options, request);
      }
      /// <summary>
      /// Updates the version and/or image type of a specific node pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation UpdateNodePool(global::Google.Cloud.Container.V1.UpdateNodePoolRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateNodePool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the version and/or image type of a specific node pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation UpdateNodePool(global::Google.Cloud.Container.V1.UpdateNodePoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateNodePool, null, options, request);
      }
      /// <summary>
      /// Updates the version and/or image type of a specific node pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> UpdateNodePoolAsync(global::Google.Cloud.Container.V1.UpdateNodePoolRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateNodePoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the version and/or image type of a specific node pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> UpdateNodePoolAsync(global::Google.Cloud.Container.V1.UpdateNodePoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateNodePool, null, options, request);
      }
      /// <summary>
      /// Sets the autoscaling settings of a specific node pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation SetNodePoolAutoscaling(global::Google.Cloud.Container.V1.SetNodePoolAutoscalingRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetNodePoolAutoscaling(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the autoscaling settings of a specific node pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation SetNodePoolAutoscaling(global::Google.Cloud.Container.V1.SetNodePoolAutoscalingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetNodePoolAutoscaling, null, options, request);
      }
      /// <summary>
      /// Sets the autoscaling settings of a specific node pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> SetNodePoolAutoscalingAsync(global::Google.Cloud.Container.V1.SetNodePoolAutoscalingRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetNodePoolAutoscalingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the autoscaling settings of a specific node pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> SetNodePoolAutoscalingAsync(global::Google.Cloud.Container.V1.SetNodePoolAutoscalingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetNodePoolAutoscaling, null, options, request);
      }
      /// <summary>
      /// Sets the logging service of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation SetLoggingService(global::Google.Cloud.Container.V1.SetLoggingServiceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetLoggingService(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the logging service of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation SetLoggingService(global::Google.Cloud.Container.V1.SetLoggingServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetLoggingService, null, options, request);
      }
      /// <summary>
      /// Sets the logging service of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> SetLoggingServiceAsync(global::Google.Cloud.Container.V1.SetLoggingServiceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetLoggingServiceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the logging service of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> SetLoggingServiceAsync(global::Google.Cloud.Container.V1.SetLoggingServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetLoggingService, null, options, request);
      }
      /// <summary>
      /// Sets the monitoring service of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation SetMonitoringService(global::Google.Cloud.Container.V1.SetMonitoringServiceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetMonitoringService(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the monitoring service of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation SetMonitoringService(global::Google.Cloud.Container.V1.SetMonitoringServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetMonitoringService, null, options, request);
      }
      /// <summary>
      /// Sets the monitoring service of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> SetMonitoringServiceAsync(global::Google.Cloud.Container.V1.SetMonitoringServiceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetMonitoringServiceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the monitoring service of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> SetMonitoringServiceAsync(global::Google.Cloud.Container.V1.SetMonitoringServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetMonitoringService, null, options, request);
      }
      /// <summary>
      /// Sets the addons of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation SetAddonsConfig(global::Google.Cloud.Container.V1.SetAddonsConfigRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetAddonsConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the addons of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation SetAddonsConfig(global::Google.Cloud.Container.V1.SetAddonsConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetAddonsConfig, null, options, request);
      }
      /// <summary>
      /// Sets the addons of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> SetAddonsConfigAsync(global::Google.Cloud.Container.V1.SetAddonsConfigRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetAddonsConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the addons of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> SetAddonsConfigAsync(global::Google.Cloud.Container.V1.SetAddonsConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetAddonsConfig, null, options, request);
      }
      /// <summary>
      /// Sets the locations of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation SetLocations(global::Google.Cloud.Container.V1.SetLocationsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetLocations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the locations of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation SetLocations(global::Google.Cloud.Container.V1.SetLocationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetLocations, null, options, request);
      }
      /// <summary>
      /// Sets the locations of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> SetLocationsAsync(global::Google.Cloud.Container.V1.SetLocationsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetLocationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the locations of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> SetLocationsAsync(global::Google.Cloud.Container.V1.SetLocationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetLocations, null, options, request);
      }
      /// <summary>
      /// Updates the master of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation UpdateMaster(global::Google.Cloud.Container.V1.UpdateMasterRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateMaster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the master of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation UpdateMaster(global::Google.Cloud.Container.V1.UpdateMasterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateMaster, null, options, request);
      }
      /// <summary>
      /// Updates the master of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> UpdateMasterAsync(global::Google.Cloud.Container.V1.UpdateMasterRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateMasterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the master of a specific cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> UpdateMasterAsync(global::Google.Cloud.Container.V1.UpdateMasterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateMaster, null, options, request);
      }
      /// <summary>
      /// Used to set master auth materials. Currently supports :-
      /// Changing the admin password of a specific cluster.
      /// This can be either via password generation or explicitly set the password.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation SetMasterAuth(global::Google.Cloud.Container.V1.SetMasterAuthRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetMasterAuth(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Used to set master auth materials. Currently supports :-
      /// Changing the admin password of a specific cluster.
      /// This can be either via password generation or explicitly set the password.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation SetMasterAuth(global::Google.Cloud.Container.V1.SetMasterAuthRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetMasterAuth, null, options, request);
      }
      /// <summary>
      /// Used to set master auth materials. Currently supports :-
      /// Changing the admin password of a specific cluster.
      /// This can be either via password generation or explicitly set the password.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> SetMasterAuthAsync(global::Google.Cloud.Container.V1.SetMasterAuthRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetMasterAuthAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Used to set master auth materials. Currently supports :-
      /// Changing the admin password of a specific cluster.
      /// This can be either via password generation or explicitly set the password.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> SetMasterAuthAsync(global::Google.Cloud.Container.V1.SetMasterAuthRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetMasterAuth, null, options, request);
      }
      /// <summary>
      /// Deletes the cluster, including the Kubernetes endpoint and all worker
      /// nodes.
      ///
      /// Firewalls and routes that were configured during cluster creation
      /// are also deleted.
      ///
      /// Other Google Compute Engine resources that might be in use by the cluster
      /// (e.g. load balancer resources) will not be deleted if they weren't present
      /// at the initial create time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation DeleteCluster(global::Google.Cloud.Container.V1.DeleteClusterRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the cluster, including the Kubernetes endpoint and all worker
      /// nodes.
      ///
      /// Firewalls and routes that were configured during cluster creation
      /// are also deleted.
      ///
      /// Other Google Compute Engine resources that might be in use by the cluster
      /// (e.g. load balancer resources) will not be deleted if they weren't present
      /// at the initial create time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation DeleteCluster(global::Google.Cloud.Container.V1.DeleteClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCluster, null, options, request);
      }
      /// <summary>
      /// Deletes the cluster, including the Kubernetes endpoint and all worker
      /// nodes.
      ///
      /// Firewalls and routes that were configured during cluster creation
      /// are also deleted.
      ///
      /// Other Google Compute Engine resources that might be in use by the cluster
      /// (e.g. load balancer resources) will not be deleted if they weren't present
      /// at the initial create time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> DeleteClusterAsync(global::Google.Cloud.Container.V1.DeleteClusterRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the cluster, including the Kubernetes endpoint and all worker
      /// nodes.
      ///
      /// Firewalls and routes that were configured during cluster creation
      /// are also deleted.
      ///
      /// Other Google Compute Engine resources that might be in use by the cluster
      /// (e.g. load balancer resources) will not be deleted if they weren't present
      /// at the initial create time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> DeleteClusterAsync(global::Google.Cloud.Container.V1.DeleteClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCluster, null, options, request);
      }
      /// <summary>
      /// Lists all operations in a project in a specific zone or all zones.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.ListOperationsResponse ListOperations(global::Google.Cloud.Container.V1.ListOperationsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListOperations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all operations in a project in a specific zone or all zones.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.ListOperationsResponse ListOperations(global::Google.Cloud.Container.V1.ListOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListOperations, null, options, request);
      }
      /// <summary>
      /// Lists all operations in a project in a specific zone or all zones.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.ListOperationsResponse> ListOperationsAsync(global::Google.Cloud.Container.V1.ListOperationsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListOperationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all operations in a project in a specific zone or all zones.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.ListOperationsResponse> ListOperationsAsync(global::Google.Cloud.Container.V1.ListOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListOperations, null, options, request);
      }
      /// <summary>
      /// Gets the specified operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation GetOperation(global::Google.Cloud.Container.V1.GetOperationRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetOperation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the specified operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation GetOperation(global::Google.Cloud.Container.V1.GetOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOperation, null, options, request);
      }
      /// <summary>
      /// Gets the specified operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> GetOperationAsync(global::Google.Cloud.Container.V1.GetOperationRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetOperationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the specified operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> GetOperationAsync(global::Google.Cloud.Container.V1.GetOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOperation, null, options, request);
      }
      /// <summary>
      /// Cancels the specified operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CancelOperation(global::Google.Cloud.Container.V1.CancelOperationRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CancelOperation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancels the specified operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CancelOperation(global::Google.Cloud.Container.V1.CancelOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelOperation, null, options, request);
      }
      /// <summary>
      /// Cancels the specified operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CancelOperationAsync(global::Google.Cloud.Container.V1.CancelOperationRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CancelOperationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancels the specified operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CancelOperationAsync(global::Google.Cloud.Container.V1.CancelOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelOperation, null, options, request);
      }
      /// <summary>
      /// Returns configuration info about the Container Engine service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.ServerConfig GetServerConfig(global::Google.Cloud.Container.V1.GetServerConfigRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetServerConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns configuration info about the Container Engine service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.ServerConfig GetServerConfig(global::Google.Cloud.Container.V1.GetServerConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServerConfig, null, options, request);
      }
      /// <summary>
      /// Returns configuration info about the Container Engine service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.ServerConfig> GetServerConfigAsync(global::Google.Cloud.Container.V1.GetServerConfigRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetServerConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns configuration info about the Container Engine service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.ServerConfig> GetServerConfigAsync(global::Google.Cloud.Container.V1.GetServerConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServerConfig, null, options, request);
      }
      /// <summary>
      /// Lists the node pools for a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.ListNodePoolsResponse ListNodePools(global::Google.Cloud.Container.V1.ListNodePoolsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListNodePools(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the node pools for a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.ListNodePoolsResponse ListNodePools(global::Google.Cloud.Container.V1.ListNodePoolsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListNodePools, null, options, request);
      }
      /// <summary>
      /// Lists the node pools for a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.ListNodePoolsResponse> ListNodePoolsAsync(global::Google.Cloud.Container.V1.ListNodePoolsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListNodePoolsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the node pools for a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.ListNodePoolsResponse> ListNodePoolsAsync(global::Google.Cloud.Container.V1.ListNodePoolsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListNodePools, null, options, request);
      }
      /// <summary>
      /// Retrieves the node pool requested.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.NodePool GetNodePool(global::Google.Cloud.Container.V1.GetNodePoolRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetNodePool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the node pool requested.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.NodePool GetNodePool(global::Google.Cloud.Container.V1.GetNodePoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNodePool, null, options, request);
      }
      /// <summary>
      /// Retrieves the node pool requested.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.NodePool> GetNodePoolAsync(global::Google.Cloud.Container.V1.GetNodePoolRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetNodePoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the node pool requested.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.NodePool> GetNodePoolAsync(global::Google.Cloud.Container.V1.GetNodePoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNodePool, null, options, request);
      }
      /// <summary>
      /// Creates a node pool for a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation CreateNodePool(global::Google.Cloud.Container.V1.CreateNodePoolRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateNodePool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a node pool for a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation CreateNodePool(global::Google.Cloud.Container.V1.CreateNodePoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateNodePool, null, options, request);
      }
      /// <summary>
      /// Creates a node pool for a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> CreateNodePoolAsync(global::Google.Cloud.Container.V1.CreateNodePoolRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateNodePoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a node pool for a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> CreateNodePoolAsync(global::Google.Cloud.Container.V1.CreateNodePoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateNodePool, null, options, request);
      }
      /// <summary>
      /// Deletes a node pool from a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation DeleteNodePool(global::Google.Cloud.Container.V1.DeleteNodePoolRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteNodePool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a node pool from a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation DeleteNodePool(global::Google.Cloud.Container.V1.DeleteNodePoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteNodePool, null, options, request);
      }
      /// <summary>
      /// Deletes a node pool from a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> DeleteNodePoolAsync(global::Google.Cloud.Container.V1.DeleteNodePoolRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteNodePoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a node pool from a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> DeleteNodePoolAsync(global::Google.Cloud.Container.V1.DeleteNodePoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteNodePool, null, options, request);
      }
      /// <summary>
      /// Roll back the previously Aborted or Failed NodePool upgrade.
      /// This will be an no-op if the last upgrade successfully completed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation RollbackNodePoolUpgrade(global::Google.Cloud.Container.V1.RollbackNodePoolUpgradeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RollbackNodePoolUpgrade(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Roll back the previously Aborted or Failed NodePool upgrade.
      /// This will be an no-op if the last upgrade successfully completed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation RollbackNodePoolUpgrade(global::Google.Cloud.Container.V1.RollbackNodePoolUpgradeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RollbackNodePoolUpgrade, null, options, request);
      }
      /// <summary>
      /// Roll back the previously Aborted or Failed NodePool upgrade.
      /// This will be an no-op if the last upgrade successfully completed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> RollbackNodePoolUpgradeAsync(global::Google.Cloud.Container.V1.RollbackNodePoolUpgradeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RollbackNodePoolUpgradeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Roll back the previously Aborted or Failed NodePool upgrade.
      /// This will be an no-op if the last upgrade successfully completed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> RollbackNodePoolUpgradeAsync(global::Google.Cloud.Container.V1.RollbackNodePoolUpgradeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RollbackNodePoolUpgrade, null, options, request);
      }
      /// <summary>
      /// Sets the NodeManagement options for a node pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation SetNodePoolManagement(global::Google.Cloud.Container.V1.SetNodePoolManagementRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetNodePoolManagement(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the NodeManagement options for a node pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation SetNodePoolManagement(global::Google.Cloud.Container.V1.SetNodePoolManagementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetNodePoolManagement, null, options, request);
      }
      /// <summary>
      /// Sets the NodeManagement options for a node pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> SetNodePoolManagementAsync(global::Google.Cloud.Container.V1.SetNodePoolManagementRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetNodePoolManagementAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the NodeManagement options for a node pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> SetNodePoolManagementAsync(global::Google.Cloud.Container.V1.SetNodePoolManagementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetNodePoolManagement, null, options, request);
      }
      /// <summary>
      /// Sets labels on a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation SetLabels(global::Google.Cloud.Container.V1.SetLabelsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetLabels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets labels on a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation SetLabels(global::Google.Cloud.Container.V1.SetLabelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetLabels, null, options, request);
      }
      /// <summary>
      /// Sets labels on a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> SetLabelsAsync(global::Google.Cloud.Container.V1.SetLabelsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetLabelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets labels on a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> SetLabelsAsync(global::Google.Cloud.Container.V1.SetLabelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetLabels, null, options, request);
      }
      /// <summary>
      /// Enables or disables the ABAC authorization mechanism on a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation SetLegacyAbac(global::Google.Cloud.Container.V1.SetLegacyAbacRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetLegacyAbac(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enables or disables the ABAC authorization mechanism on a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation SetLegacyAbac(global::Google.Cloud.Container.V1.SetLegacyAbacRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetLegacyAbac, null, options, request);
      }
      /// <summary>
      /// Enables or disables the ABAC authorization mechanism on a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> SetLegacyAbacAsync(global::Google.Cloud.Container.V1.SetLegacyAbacRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetLegacyAbacAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enables or disables the ABAC authorization mechanism on a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> SetLegacyAbacAsync(global::Google.Cloud.Container.V1.SetLegacyAbacRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetLegacyAbac, null, options, request);
      }
      /// <summary>
      /// Start master IP rotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation StartIPRotation(global::Google.Cloud.Container.V1.StartIPRotationRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StartIPRotation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Start master IP rotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation StartIPRotation(global::Google.Cloud.Container.V1.StartIPRotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartIPRotation, null, options, request);
      }
      /// <summary>
      /// Start master IP rotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> StartIPRotationAsync(global::Google.Cloud.Container.V1.StartIPRotationRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StartIPRotationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Start master IP rotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> StartIPRotationAsync(global::Google.Cloud.Container.V1.StartIPRotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartIPRotation, null, options, request);
      }
      /// <summary>
      /// Completes master IP rotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation CompleteIPRotation(global::Google.Cloud.Container.V1.CompleteIPRotationRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CompleteIPRotation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Completes master IP rotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation CompleteIPRotation(global::Google.Cloud.Container.V1.CompleteIPRotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CompleteIPRotation, null, options, request);
      }
      /// <summary>
      /// Completes master IP rotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> CompleteIPRotationAsync(global::Google.Cloud.Container.V1.CompleteIPRotationRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CompleteIPRotationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Completes master IP rotation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> CompleteIPRotationAsync(global::Google.Cloud.Container.V1.CompleteIPRotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CompleteIPRotation, null, options, request);
      }
      /// <summary>
      /// Sets the size of a specific node pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation SetNodePoolSize(global::Google.Cloud.Container.V1.SetNodePoolSizeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetNodePoolSize(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the size of a specific node pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation SetNodePoolSize(global::Google.Cloud.Container.V1.SetNodePoolSizeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetNodePoolSize, null, options, request);
      }
      /// <summary>
      /// Sets the size of a specific node pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> SetNodePoolSizeAsync(global::Google.Cloud.Container.V1.SetNodePoolSizeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetNodePoolSizeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the size of a specific node pool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> SetNodePoolSizeAsync(global::Google.Cloud.Container.V1.SetNodePoolSizeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetNodePoolSize, null, options, request);
      }
      /// <summary>
      /// Enables/Disables Network Policy for a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation SetNetworkPolicy(global::Google.Cloud.Container.V1.SetNetworkPolicyRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetNetworkPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enables/Disables Network Policy for a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation SetNetworkPolicy(global::Google.Cloud.Container.V1.SetNetworkPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetNetworkPolicy, null, options, request);
      }
      /// <summary>
      /// Enables/Disables Network Policy for a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> SetNetworkPolicyAsync(global::Google.Cloud.Container.V1.SetNetworkPolicyRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetNetworkPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enables/Disables Network Policy for a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> SetNetworkPolicyAsync(global::Google.Cloud.Container.V1.SetNetworkPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetNetworkPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the maintenance policy for a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation SetMaintenancePolicy(global::Google.Cloud.Container.V1.SetMaintenancePolicyRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetMaintenancePolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the maintenance policy for a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Container.V1.Operation SetMaintenancePolicy(global::Google.Cloud.Container.V1.SetMaintenancePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetMaintenancePolicy, null, options, request);
      }
      /// <summary>
      /// Sets the maintenance policy for a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> SetMaintenancePolicyAsync(global::Google.Cloud.Container.V1.SetMaintenancePolicyRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetMaintenancePolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the maintenance policy for a cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Container.V1.Operation> SetMaintenancePolicyAsync(global::Google.Cloud.Container.V1.SetMaintenancePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetMaintenancePolicy, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ClusterManagerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ClusterManagerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ClusterManagerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListClusters, serviceImpl.ListClusters)
          .AddMethod(__Method_GetCluster, serviceImpl.GetCluster)
          .AddMethod(__Method_CreateCluster, serviceImpl.CreateCluster)
          .AddMethod(__Method_UpdateCluster, serviceImpl.UpdateCluster)
          .AddMethod(__Method_UpdateNodePool, serviceImpl.UpdateNodePool)
          .AddMethod(__Method_SetNodePoolAutoscaling, serviceImpl.SetNodePoolAutoscaling)
          .AddMethod(__Method_SetLoggingService, serviceImpl.SetLoggingService)
          .AddMethod(__Method_SetMonitoringService, serviceImpl.SetMonitoringService)
          .AddMethod(__Method_SetAddonsConfig, serviceImpl.SetAddonsConfig)
          .AddMethod(__Method_SetLocations, serviceImpl.SetLocations)
          .AddMethod(__Method_UpdateMaster, serviceImpl.UpdateMaster)
          .AddMethod(__Method_SetMasterAuth, serviceImpl.SetMasterAuth)
          .AddMethod(__Method_DeleteCluster, serviceImpl.DeleteCluster)
          .AddMethod(__Method_ListOperations, serviceImpl.ListOperations)
          .AddMethod(__Method_GetOperation, serviceImpl.GetOperation)
          .AddMethod(__Method_CancelOperation, serviceImpl.CancelOperation)
          .AddMethod(__Method_GetServerConfig, serviceImpl.GetServerConfig)
          .AddMethod(__Method_ListNodePools, serviceImpl.ListNodePools)
          .AddMethod(__Method_GetNodePool, serviceImpl.GetNodePool)
          .AddMethod(__Method_CreateNodePool, serviceImpl.CreateNodePool)
          .AddMethod(__Method_DeleteNodePool, serviceImpl.DeleteNodePool)
          .AddMethod(__Method_RollbackNodePoolUpgrade, serviceImpl.RollbackNodePoolUpgrade)
          .AddMethod(__Method_SetNodePoolManagement, serviceImpl.SetNodePoolManagement)
          .AddMethod(__Method_SetLabels, serviceImpl.SetLabels)
          .AddMethod(__Method_SetLegacyAbac, serviceImpl.SetLegacyAbac)
          .AddMethod(__Method_StartIPRotation, serviceImpl.StartIPRotation)
          .AddMethod(__Method_CompleteIPRotation, serviceImpl.CompleteIPRotation)
          .AddMethod(__Method_SetNodePoolSize, serviceImpl.SetNodePoolSize)
          .AddMethod(__Method_SetNetworkPolicy, serviceImpl.SetNetworkPolicy)
          .AddMethod(__Method_SetMaintenancePolicy, serviceImpl.SetMaintenancePolicy).Build();
    }

  }
}
#endregion
