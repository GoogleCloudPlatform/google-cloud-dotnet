// Copyright 2017 Google Inc. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
using System;
using System.Data;
using System.Data.Common;
using System.Threading;
using System.Threading.Tasks;
using Google.Api.Gax;
using Google.Apis.Bigquery.v2.Data;

namespace Google.Cloud.BigQuery.V2
{
    /// <summary>
    /// </summary>
    public sealed partial class BigQueryConnection
    {
        /// <summary>
        /// Creates a <see cref="BigQueryCommand"/> that is configured to execute a SQL query.
        /// </summary>
        public BigQueryCommand CreateSqlCommand(string sql, QueryOptions queryOptions = null,
            GetQueryResultsOptions resultsOptions = null)
            => new BigQueryCommand
            {
                CommandOptions = new SqlCommandOptions
                {
                    BigQueryConnection = this,
                    Sql = sql,
                    QueryOptions = queryOptions,
                    GetQueryResultsOptions = resultsOptions
                }
            };

        #region Autogenerated code (DO NOT MODIFY!)

        /// <summary>
        /// Lists the rows within a table specified by project ID, dataset ID and table ID, similar to a <c>SELECT * FROM ...</c> query.
        /// This method just creates a <see cref="TableReference"/> and delegates to <see cref="ListRows(TableReference, TableSchema, ListRowsOptions)"/>.
        /// </summary>
        /// <param name="projectId">The project ID. Must not be null.</param>
        /// <param name="datasetId">The dataset ID. Must not be null.</param>
        /// <param name="tableId">The table ID. Must not be null.</param>
        /// <param name="schema">The schema to use when interpreting results. This may be null, in which case it will be fetched from
        /// the table first.</param>
        /// <param name="options">The options for the operation. May be null, in which case defaults will be supplied.</param>
        /// <returns>The results of listing the rows within the table.</returns>
        public PagedEnumerable<TableDataList, BigQueryRow> ListRows(string projectId, string datasetId, string tableId, TableSchema schema = null, ListRowsOptions options = null)
            => GetBigQueryClient().ListRows(projectId, datasetId, tableId, schema, options);

        /// <summary>
        /// Lists the rows within a table specified by project ID, dataset ID and table ID, similar to a <c>SELECT * FROM ...</c> query.
        /// This method just creates a <see cref="TableReference"/> and delegates to <see cref="ListRows(TableReference, TableSchema, ListRowsOptions)"/>.
        /// </summary>
        /// <param name="tableId">The table ID. Must not be null.</param>
        /// <param name="schema">The schema to use when interpreting results. This may be null, in which case it will be fetched from
        /// the table first.</param>
        /// <param name="options">The options for the operation. May be null, in which case defaults will be supplied.</param>
        /// <returns>The results of listing the rows within the table.</returns>
        public PagedEnumerable<TableDataList, BigQueryRow> ListRows(string tableId, TableSchema schema = null, ListRowsOptions options = null)
            => GetBigQueryClient().ListRows(GetProjectId(), GetDatasetId(), tableId, schema, options);

        /// <summary>
        /// Lists the rows within a table within this client's project specified by dataset ID and table ID, similar to a <c>SELECT * FROM ...</c> query.
        /// This method just creates a <see cref="TableReference"/> and delegates to <see cref="ListRows(TableReference, TableSchema, ListRowsOptions)"/>.
        /// </summary>
        /// <param name="datasetId">The dataset ID. Must not be null.</param>
        /// <param name="tableId">The table ID. Must not be null.</param>
        /// <param name="schema">The schema to use when interpreting results. This may be null, in which case it will be fetched from
        /// the table first.</param>
        /// <param name="options">The options for the operation. May be null, in which case defaults will be supplied.</param>
        /// <returns>The results of listing the rows within the table.</returns>
        public PagedEnumerable<TableDataList, BigQueryRow> ListRows(string datasetId, string tableId, TableSchema schema = null, ListRowsOptions options = null)
            => GetBigQueryClient().ListRows(datasetId, tableId, schema, options);

        /// <summary>
        /// Lists the rows within a table, similar to a <c>SELECT * FROM ...</c> query.
        /// </summary>
        /// <param name="tableReference">A fully-qualified identifier for the table. Must not be null.</param>
        /// <param name="schema">The schema to use when interpreting results. This may be null, in which case it will be fetched from
        /// the table first.</param>
        /// <param name="options">The options for the operation. May be null, in which case defaults will be supplied.</param>
        /// <returns>The results of listing the rows within the table.</returns>
        public PagedEnumerable<TableDataList, BigQueryRow> ListRows(TableReference tableReference, TableSchema schema = null, ListRowsOptions options = null)
            => GetBigQueryClient().ListRows(tableReference, schema, options);

        /// <summary>
        /// Lists the rows within a table specified by project ID, dataset ID and table ID, similar to a <c>SELECT * FROM ...</c> query.
        /// This method just creates a <see cref="TableReference"/> and delegates to <see cref="ListRowsAsync(TableReference, TableSchema, ListRowsOptions)"/>.
        /// </summary>
        /// <param name="projectId">The project ID. Must not be null.</param>
        /// <param name="datasetId">The dataset ID. Must not be null.</param>
        /// <param name="tableId">The table ID. Must not be null.</param>
        /// <param name="schema">The schema to use when interpreting results. This may be null, in which case it will be fetched from
        /// the table first.</param>
        /// <param name="options">The options for the operation. May be null, in which case defaults will be supplied.</param>
        /// <returns>An asynchronous sequence of the rows within the table.</returns>
        public PagedAsyncEnumerable<TableDataList, BigQueryRow> ListRowsAsync(string projectId, string datasetId, string tableId, TableSchema schema = null, ListRowsOptions options = null)
            => GetBigQueryClient().ListRowsAsync(projectId, datasetId, tableId, schema, options);

        /// <summary>
        /// Lists the rows within a table specified by project ID, dataset ID and table ID, similar to a <c>SELECT * FROM ...</c> query.
        /// This method just creates a <see cref="TableReference"/> and delegates to <see cref="ListRowsAsync(TableReference, TableSchema, ListRowsOptions)"/>.
        /// </summary>
        /// <param name="tableId">The table ID. Must not be null.</param>
        /// <param name="schema">The schema to use when interpreting results. This may be null, in which case it will be fetched from
        /// the table first.</param>
        /// <param name="options">The options for the operation. May be null, in which case defaults will be supplied.</param>
        /// <returns>An asynchronous sequence of the rows within the table.</returns>
        public PagedAsyncEnumerable<TableDataList, BigQueryRow> ListRowsAsync(string tableId, TableSchema schema = null, ListRowsOptions options = null)
            => GetBigQueryClient().ListRowsAsync(GetProjectId(), GetDatasetId(), tableId, schema, options);

        /// <summary>
        /// Lists the rows within a table within this client's project specified by dataset ID and table ID, similar to a <c>SELECT * FROM ...</c> query.
        /// This method just creates a <see cref="TableReference"/> and delegates to <see cref="ListRowsAsync(TableReference, TableSchema, ListRowsOptions)"/>.
        /// </summary>
        /// <param name="datasetId">The dataset ID. Must not be null.</param>
        /// <param name="tableId">The table ID. Must not be null.</param>
        /// <param name="schema">The schema to use when interpreting results. This may be null, in which case it will be fetched from
        /// the table first.</param>
        /// <param name="options">The options for the operation. May be null, in which case defaults will be supplied.</param>
        /// <returns>An asynchronous sequence of the rows within the table.</returns>
        public PagedAsyncEnumerable<TableDataList, BigQueryRow> ListRowsAsync(string datasetId, string tableId, TableSchema schema = null, ListRowsOptions options = null)
            => GetBigQueryClient().ListRowsAsync(datasetId, tableId, schema, options);

        /// <summary>
        /// Lists the rows within a table, similar to a <c>SELECT * FROM ...</c> query.
        /// </summary>
        /// <param name="tableReference">A fully-qualified identifier for the table. Must not be null.</param>
        /// <param name="schema">The schema to use when interpreting results. This may be null, in which case it will be fetched from
        /// the table first.</param>
        /// <param name="options">The options for the operation. May be null, in which case defaults will be supplied.</param>
        /// <returns>An asynchronous sequence of the rows within the table.</returns>
        public PagedAsyncEnumerable<TableDataList, BigQueryRow> ListRowsAsync(TableReference tableReference, TableSchema schema = null, ListRowsOptions options = null)
            => GetBigQueryClient().ListRowsAsync(tableReference, schema, options);
        #endregion
    }

    /// <summary>
    /// Command options for configuring a sql query or DML statement.
    /// You may create a new <see cref="BigQueryCommand"/> and set <see cref="BigQueryCommand.CommandOptions"/>
    /// to an instance of this class to perform a SQL query or DML statement.
    /// </summary>
    public sealed class SqlCommandOptions : BigQueryCommandOptions
    {
        /// <summary>
        /// Options for <c>GetQueryResults</c> operations.
        /// </summary>
        public GetQueryResultsOptions GetQueryResultsOptions
        {
            get;
            set;
        }

        /// <summary>
        /// Options for <c>CreateQueryJob</c> and <c>ExecuteQuery</c> operations.
        /// </summary>
        public QueryOptions QueryOptions
        {
            get;
            set;
        }

        /// <summary>
        /// The type of this Command.
        /// </summary>
        public override BigQueryCommandType BigQueryCommandType => BigQueryCommandType.Sql;

        internal string Sql
        {
            get => CommandText;
            set => CommandText = value;
        }

        internal override Task<BigQueryJob> StartJobAsync(BigQueryConnection connection,
            CancellationToken cancellationToken)
            => StartJobImplAsync(connection, Sql, QueryOptions != null ? QueryOptions.Clone() : new QueryOptions(),
                cancellationToken);

        internal static Task<BigQueryJob> StartJobImplAsync(BigQueryConnection connection, string sql,
            QueryOptions queryOptions, CancellationToken cancellationToken)
        {
            queryOptions = queryOptions ?? new QueryOptions();
            if (queryOptions.DefaultDataset == null)
            {
                queryOptions.DefaultDataset = connection.GetDatasetReference();
            }
            return connection.GetOpenedBigQueryClient().CreateQueryJobAsync(sql, queryOptions, cancellationToken);
        }

        internal override async Task<int> ExecuteNonQueryAsync(BigQueryConnection connection,
            CancellationToken cancellationToken)
        {
            var job = await StartJobAsync(connection, cancellationToken).ConfigureAwait(false);
            await job.PollUntilCompletedAsync(cancellationToken: cancellationToken).ConfigureAwait(false);
            // Number of rows affected is unavailable in BQ.
            return 0;
        }

        internal override Task<DbDataReader> ExecuteDbDataReaderAsync(
            BigQueryConnection connection, CommandBehavior behavior, CancellationToken cancellationToken) =>
            ExecuteDbDataReaderImplAsync(connection, Sql, behavior, QueryOptions ?? new QueryOptions(),
                GetQueryResultsOptions ?? new GetQueryResultsOptions(), CommandTimeout, cancellationToken);

        internal static async Task<DbDataReader> ExecuteDbDataReaderImplAsync(
            BigQueryConnection connection, string sql, CommandBehavior behavior, QueryOptions queryOptions,
            GetQueryResultsOptions resultOptions, int? commandTimeout, CancellationToken cancellationToken)
        {
            if (commandTimeout.HasValue)
            {
                resultOptions.Timeout = TimeSpan.FromSeconds(commandTimeout.Value);
            }
            var job = await StartJobImplAsync(connection, sql, queryOptions, cancellationToken).ConfigureAwait(false);
            var results = await job.GetQueryResultsAsync(resultOptions, cancellationToken).ConfigureAwait(false);
            return new BigQueryDataReader(results, behavior == CommandBehavior.CloseConnection ? connection : null);
        }
    }
}