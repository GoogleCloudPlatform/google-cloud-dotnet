// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/privacy/dlp/v2beta1/dlp.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Dlp.V2Beta1 {

  /// <summary>Holder for reflection information generated from google/privacy/dlp/v2beta1/dlp.proto</summary>
  public static partial class DlpReflection {

    #region Descriptor
    /// <summary>File descriptor for google/privacy/dlp/v2beta1/dlp.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DlpReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRnb29nbGUvcHJpdmFjeS9kbHAvdjJiZXRhMS9kbHAucHJvdG8SGmdvb2ds",
            "ZS5wcml2YWN5LmRscC52MmJldGExGhxnb29nbGUvYXBpL2Fubm90YXRpb25z",
            "LnByb3RvGiNnb29nbGUvbG9uZ3J1bm5pbmcvb3BlcmF0aW9ucy5wcm90bxoo",
            "Z29vZ2xlL3ByaXZhY3kvZGxwL3YyYmV0YTEvc3RvcmFnZS5wcm90bxobZ29v",
            "Z2xlL3Byb3RvYnVmL2VtcHR5LnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGlt",
            "ZXN0YW1wLnByb3RvGhZnb29nbGUvdHlwZS9kYXRlLnByb3RvGhtnb29nbGUv",
            "dHlwZS90aW1lb2ZkYXkucHJvdG8ixwMKDUluc3BlY3RDb25maWcSOAoKaW5m",
            "b190eXBlcxgBIAMoCzIkLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLklu",
            "Zm9UeXBlEj4KDm1pbl9saWtlbGlob29kGAIgASgOMiYuZ29vZ2xlLnByaXZh",
            "Y3kuZGxwLnYyYmV0YTEuTGlrZWxpaG9vZBIUCgxtYXhfZmluZGluZ3MYAyAB",
            "KAUSFQoNaW5jbHVkZV9xdW90ZRgEIAEoCBIVCg1leGNsdWRlX3R5cGVzGAYg",
            "ASgIElEKEGluZm9fdHlwZV9saW1pdHMYByADKAsyNy5nb29nbGUucHJpdmFj",
            "eS5kbHAudjJiZXRhMS5JbnNwZWN0Q29uZmlnLkluZm9UeXBlTGltaXQSRQoR",
            "Y3VzdG9tX2luZm9fdHlwZXMYCCADKAsyKi5nb29nbGUucHJpdmFjeS5kbHAu",
            "djJiZXRhMS5DdXN0b21JbmZvVHlwZRpeCg1JbmZvVHlwZUxpbWl0EjcKCWlu",
            "Zm9fdHlwZRgBIAEoCzIkLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLklu",
            "Zm9UeXBlEhQKDG1heF9maW5kaW5ncxgCIAEoBSIsCg9PcGVyYXRpb25Db25m",
            "aWcSGQoRbWF4X2l0ZW1fZmluZGluZ3MYASABKAMifQoLQ29udGVudEl0ZW0S",
            "DAoEdHlwZRgBIAEoCRIOCgRkYXRhGAIgASgMSAASDwoFdmFsdWUYAyABKAlI",
            "ABIyCgV0YWJsZRgEIAEoCzIhLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEx",
            "LlRhYmxlSABCCwoJZGF0YV9pdGVtIqwBCgVUYWJsZRI0CgdoZWFkZXJzGAEg",
            "AygLMiMuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuRmllbGRJZBIzCgRy",
            "b3dzGAIgAygLMiUuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuVGFibGUu",
            "Um93GjgKA1JvdxIxCgZ2YWx1ZXMYASADKAsyIS5nb29nbGUucHJpdmFjeS5k",
            "bHAudjJiZXRhMS5WYWx1ZSJiCg1JbnNwZWN0UmVzdWx0EjUKCGZpbmRpbmdz",
            "GAEgAygLMiMuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuRmluZGluZxIa",
            "ChJmaW5kaW5nc190cnVuY2F0ZWQYAiABKAgi9gEKB0ZpbmRpbmcSDQoFcXVv",
            "dGUYASABKAkSNwoJaW5mb190eXBlGAIgASgLMiQuZ29vZ2xlLnByaXZhY3ku",
            "ZGxwLnYyYmV0YTEuSW5mb1R5cGUSOgoKbGlrZWxpaG9vZBgDIAEoDjImLmdv",
            "b2dsZS5wcml2YWN5LmRscC52MmJldGExLkxpa2VsaWhvb2QSNgoIbG9jYXRp",
            "b24YBCABKAsyJC5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5Mb2NhdGlv",
            "bhIvCgtjcmVhdGVfdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
            "c3RhbXAi8gIKCExvY2F0aW9uEjUKCmJ5dGVfcmFuZ2UYASABKAsyIS5nb29n",
            "bGUucHJpdmFjeS5kbHAudjJiZXRhMS5SYW5nZRI6Cg9jb2RlcG9pbnRfcmFu",
            "Z2UYAiABKAsyIS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5SYW5nZRI+",
            "CgtpbWFnZV9ib3hlcxgDIAMoCzIpLmdvb2dsZS5wcml2YWN5LmRscC52MmJl",
            "dGExLkltYWdlTG9jYXRpb24SOQoKcmVjb3JkX2tleRgEIAEoCzIlLmdvb2ds",
            "ZS5wcml2YWN5LmRscC52MmJldGExLlJlY29yZEtleRI1CghmaWVsZF9pZBgF",
            "IAEoCzIjLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLkZpZWxkSWQSQQoO",
            "dGFibGVfbG9jYXRpb24YBiABKAsyKS5nb29nbGUucHJpdmFjeS5kbHAudjJi",
            "ZXRhMS5UYWJsZUxvY2F0aW9uIiIKDVRhYmxlTG9jYXRpb24SEQoJcm93X2lu",
            "ZGV4GAEgASgDIiMKBVJhbmdlEg0KBXN0YXJ0GAEgASgDEgsKA2VuZBgCIAEo",
            "AyJJCg1JbWFnZUxvY2F0aW9uEgsKA3RvcBgBIAEoBRIMCgRsZWZ0GAIgASgF",
            "Eg0KBXdpZHRoGAMgASgFEg4KBmhlaWdodBgEIAEoBSLnBAoUUmVkYWN0Q29u",
            "dGVudFJlcXVlc3QSQQoOaW5zcGVjdF9jb25maWcYASABKAsyKS5nb29nbGUu",
            "cHJpdmFjeS5kbHAudjJiZXRhMS5JbnNwZWN0Q29uZmlnEjYKBWl0ZW1zGAIg",
            "AygLMicuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuQ29udGVudEl0ZW0S",
            "VwoPcmVwbGFjZV9jb25maWdzGAMgAygLMj4uZ29vZ2xlLnByaXZhY3kuZGxw",
            "LnYyYmV0YTEuUmVkYWN0Q29udGVudFJlcXVlc3QuUmVwbGFjZUNvbmZpZxJm",
            "ChdpbWFnZV9yZWRhY3Rpb25fY29uZmlncxgEIAMoCzJFLmdvb2dsZS5wcml2",
            "YWN5LmRscC52MmJldGExLlJlZGFjdENvbnRlbnRSZXF1ZXN0LkltYWdlUmVk",
            "YWN0aW9uQ29uZmlnGl4KDVJlcGxhY2VDb25maWcSNwoJaW5mb190eXBlGAEg",
            "ASgLMiQuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuSW5mb1R5cGUSFAoM",
            "cmVwbGFjZV93aXRoGAIgASgJGrIBChRJbWFnZVJlZGFjdGlvbkNvbmZpZxI5",
            "CglpbmZvX3R5cGUYASABKAsyJC5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRh",
            "MS5JbmZvVHlwZUgAEhkKD3JlZGFjdF9hbGxfdGV4dBgCIAEoCEgAEjoKD3Jl",
            "ZGFjdGlvbl9jb2xvchgDIAEoCzIhLmdvb2dsZS5wcml2YWN5LmRscC52MmJl",
            "dGExLkNvbG9yQggKBnRhcmdldCIxCgVDb2xvchILCgNyZWQYASABKAISDQoF",
            "Z3JlZW4YAiABKAISDAoEYmx1ZRgDIAEoAiJPChVSZWRhY3RDb250ZW50UmVz",
            "cG9uc2USNgoFaXRlbXMYASADKAsyJy5nb29nbGUucHJpdmFjeS5kbHAudjJi",
            "ZXRhMS5Db250ZW50SXRlbSLeAQoYRGVpZGVudGlmeUNvbnRlbnRSZXF1ZXN0",
            "EkcKEWRlaWRlbnRpZnlfY29uZmlnGAEgASgLMiwuZ29vZ2xlLnByaXZhY3ku",
            "ZGxwLnYyYmV0YTEuRGVpZGVudGlmeUNvbmZpZxJBCg5pbnNwZWN0X2NvbmZp",
            "ZxgCIAEoCzIpLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLkluc3BlY3RD",
            "b25maWcSNgoFaXRlbXMYAyADKAsyJy5nb29nbGUucHJpdmFjeS5kbHAudjJi",
            "ZXRhMS5Db250ZW50SXRlbSKbAQoZRGVpZGVudGlmeUNvbnRlbnRSZXNwb25z",
            "ZRI2CgVpdGVtcxgBIAMoCzInLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEx",
            "LkNvbnRlbnRJdGVtEkYKCXN1bW1hcmllcxgCIAMoCzIzLmdvb2dsZS5wcml2",
            "YWN5LmRscC52MmJldGExLkRlaWRlbnRpZmljYXRpb25TdW1tYXJ5IpIBChVJ",
            "bnNwZWN0Q29udGVudFJlcXVlc3QSQQoOaW5zcGVjdF9jb25maWcYASABKAsy",
            "KS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5JbnNwZWN0Q29uZmlnEjYK",
            "BWl0ZW1zGAIgAygLMicuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuQ29u",
            "dGVudEl0ZW0iVAoWSW5zcGVjdENvbnRlbnRSZXNwb25zZRI6CgdyZXN1bHRz",
            "GAEgAygLMikuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuSW5zcGVjdFJl",
            "c3VsdCK0AgodQ3JlYXRlSW5zcGVjdE9wZXJhdGlvblJlcXVlc3QSQQoOaW5z",
            "cGVjdF9jb25maWcYASABKAsyKS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRh",
            "MS5JbnNwZWN0Q29uZmlnEkEKDnN0b3JhZ2VfY29uZmlnGAIgASgLMikuZ29v",
            "Z2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuU3RvcmFnZUNvbmZpZxJGCg1vdXRw",
            "dXRfY29uZmlnGAMgASgLMi8uZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEu",
            "T3V0cHV0U3RvcmFnZUNvbmZpZxJFChBvcGVyYXRpb25fY29uZmlnGAUgASgL",
            "MisuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuT3BlcmF0aW9uQ29uZmln",
            "Ip8BChNPdXRwdXRTdG9yYWdlQ29uZmlnEjoKBXRhYmxlGAEgASgLMikuZ29v",
            "Z2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuQmlnUXVlcnlUYWJsZUgAEkQKDHN0",
            "b3JhZ2VfcGF0aBgCIAEoCzIsLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEx",
            "LkNsb3VkU3RvcmFnZVBhdGhIAEIGCgR0eXBlIlwKEkluZm9UeXBlU3RhdGlz",
            "dGljcxI3CglpbmZvX3R5cGUYASABKAsyJC5nb29nbGUucHJpdmFjeS5kbHAu",
            "djJiZXRhMS5JbmZvVHlwZRINCgVjb3VudBgCIAEoAyKyAwoYSW5zcGVjdE9w",
            "ZXJhdGlvbk1ldGFkYXRhEhcKD3Byb2Nlc3NlZF9ieXRlcxgBIAEoAxIdChV0",
            "b3RhbF9lc3RpbWF0ZWRfYnl0ZXMYBCABKAMSRwoPaW5mb190eXBlX3N0YXRz",
            "GAIgAygLMi4uZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuSW5mb1R5cGVT",
            "dGF0aXN0aWNzEi8KC2NyZWF0ZV90aW1lGAMgASgLMhouZ29vZ2xlLnByb3Rv",
            "YnVmLlRpbWVzdGFtcBJJChZyZXF1ZXN0X2luc3BlY3RfY29uZmlnGAUgASgL",
            "MikuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuSW5zcGVjdENvbmZpZxJJ",
            "ChZyZXF1ZXN0X3N0b3JhZ2VfY29uZmlnGAYgASgLMikuZ29vZ2xlLnByaXZh",
            "Y3kuZGxwLnYyYmV0YTEuU3RvcmFnZUNvbmZpZxJOChVyZXF1ZXN0X291dHB1",
            "dF9jb25maWcYByABKAsyLy5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5P",
            "dXRwdXRTdG9yYWdlQ29uZmlnIiYKFkluc3BlY3RPcGVyYXRpb25SZXN1bHQS",
            "DAoEbmFtZRgBIAEoCSJhChpMaXN0SW5zcGVjdEZpbmRpbmdzUmVxdWVzdBIM",
            "CgRuYW1lGAEgASgJEhEKCXBhZ2Vfc2l6ZRgCIAEoBRISCgpwYWdlX3Rva2Vu",
            "GAMgASgJEg4KBmZpbHRlchgEIAEoCSJxChtMaXN0SW5zcGVjdEZpbmRpbmdz",
            "UmVzcG9uc2USOQoGcmVzdWx0GAEgASgLMikuZ29vZ2xlLnByaXZhY3kuZGxw",
            "LnYyYmV0YTEuSW5zcGVjdFJlc3VsdBIXCg9uZXh0X3BhZ2VfdG9rZW4YAiAB",
            "KAkifgoTSW5mb1R5cGVEZXNjcmlwdGlvbhIMCgRuYW1lGAEgASgJEhQKDGRp",
            "c3BsYXlfbmFtZRgCIAEoCRJDCgpjYXRlZ29yaWVzGAMgAygLMi8uZ29vZ2xl",
            "LnByaXZhY3kuZGxwLnYyYmV0YTEuQ2F0ZWdvcnlEZXNjcmlwdGlvbiI/ChRM",
            "aXN0SW5mb1R5cGVzUmVxdWVzdBIQCghjYXRlZ29yeRgBIAEoCRIVCg1sYW5n",
            "dWFnZV9jb2RlGAIgASgJIlwKFUxpc3RJbmZvVHlwZXNSZXNwb25zZRJDCgpp",
            "bmZvX3R5cGVzGAEgAygLMi8uZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEu",
            "SW5mb1R5cGVEZXNjcmlwdGlvbiI5ChNDYXRlZ29yeURlc2NyaXB0aW9uEgwK",
            "BG5hbWUYASABKAkSFAoMZGlzcGxheV9uYW1lGAIgASgJIjIKGUxpc3RSb290",
            "Q2F0ZWdvcmllc1JlcXVlc3QSFQoNbGFuZ3VhZ2VfY29kZRgBIAEoCSJhChpM",
            "aXN0Um9vdENhdGVnb3JpZXNSZXNwb25zZRJDCgpjYXRlZ29yaWVzGAEgAygL",
            "Mi8uZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuQ2F0ZWdvcnlEZXNjcmlw",
            "dGlvbiKiAQocQW5hbHl6ZURhdGFTb3VyY2VSaXNrUmVxdWVzdBJBCg5wcml2",
            "YWN5X21ldHJpYxgBIAEoCzIpLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEx",
            "LlByaXZhY3lNZXRyaWMSPwoMc291cmNlX3RhYmxlGAMgASgLMikuZ29vZ2xl",
            "LnByaXZhY3kuZGxwLnYyYmV0YTEuQmlnUXVlcnlUYWJsZSLCBgoNUHJpdmFj",
            "eU1ldHJpYxJgChZudW1lcmljYWxfc3RhdHNfY29uZmlnGAEgASgLMj4uZ29v",
            "Z2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuUHJpdmFjeU1ldHJpYy5OdW1lcmlj",
            "YWxTdGF0c0NvbmZpZ0gAEmQKGGNhdGVnb3JpY2FsX3N0YXRzX2NvbmZpZxgC",
            "IAEoCzJALmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLlByaXZhY3lNZXRy",
            "aWMuQ2F0ZWdvcmljYWxTdGF0c0NvbmZpZ0gAElgKEmtfYW5vbnltaXR5X2Nv",
            "bmZpZxgDIAEoCzI6Lmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLlByaXZh",
            "Y3lNZXRyaWMuS0Fub255bWl0eUNvbmZpZ0gAElgKEmxfZGl2ZXJzaXR5X2Nv",
            "bmZpZxgEIAEoCzI6Lmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLlByaXZh",
            "Y3lNZXRyaWMuTERpdmVyc2l0eUNvbmZpZ0gAGkoKFE51bWVyaWNhbFN0YXRz",
            "Q29uZmlnEjIKBWZpZWxkGAEgASgLMiMuZ29vZ2xlLnByaXZhY3kuZGxwLnYy",
            "YmV0YTEuRmllbGRJZBpMChZDYXRlZ29yaWNhbFN0YXRzQ29uZmlnEjIKBWZp",
            "ZWxkGAEgASgLMiMuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuRmllbGRJ",
            "ZBqDAQoQS0Fub255bWl0eUNvbmZpZxI2CglxdWFzaV9pZHMYASADKAsyIy5n",
            "b29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5GaWVsZElkEjcKCWVudGl0eV9p",
            "ZBgCIAEoCzIkLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLkVudGl0eUlk",
            "GowBChBMRGl2ZXJzaXR5Q29uZmlnEjYKCXF1YXNpX2lkcxgBIAMoCzIjLmdv",
            "b2dsZS5wcml2YWN5LmRscC52MmJldGExLkZpZWxkSWQSQAoTc2Vuc2l0aXZl",
            "X2F0dHJpYnV0ZRgCIAEoCzIjLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEx",
            "LkZpZWxkSWRCBgoEdHlwZSLoAQodUmlza0FuYWx5c2lzT3BlcmF0aW9uTWV0",
            "YWRhdGESLwoLY3JlYXRlX3RpbWUYASABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "VGltZXN0YW1wEksKGHJlcXVlc3RlZF9wcml2YWN5X21ldHJpYxgCIAEoCzIp",
            "Lmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLlByaXZhY3lNZXRyaWMSSQoW",
            "cmVxdWVzdGVkX3NvdXJjZV90YWJsZRgDIAEoCzIpLmdvb2dsZS5wcml2YWN5",
            "LmRscC52MmJldGExLkJpZ1F1ZXJ5VGFibGUi6xEKG1Jpc2tBbmFseXNpc09w",
            "ZXJhdGlvblJlc3VsdBJuChZudW1lcmljYWxfc3RhdHNfcmVzdWx0GAMgASgL",
            "MkwuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuUmlza0FuYWx5c2lzT3Bl",
            "cmF0aW9uUmVzdWx0Lk51bWVyaWNhbFN0YXRzUmVzdWx0SAAScgoYY2F0ZWdv",
            "cmljYWxfc3RhdHNfcmVzdWx0GAQgASgLMk4uZ29vZ2xlLnByaXZhY3kuZGxw",
            "LnYyYmV0YTEuUmlza0FuYWx5c2lzT3BlcmF0aW9uUmVzdWx0LkNhdGVnb3Jp",
            "Y2FsU3RhdHNSZXN1bHRIABJmChJrX2Fub255bWl0eV9yZXN1bHQYBSABKAsy",
            "SC5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5SaXNrQW5hbHlzaXNPcGVy",
            "YXRpb25SZXN1bHQuS0Fub255bWl0eVJlc3VsdEgAEmYKEmxfZGl2ZXJzaXR5",
            "X3Jlc3VsdBgGIAEoCzJILmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLlJp",
            "c2tBbmFseXNpc09wZXJhdGlvblJlc3VsdC5MRGl2ZXJzaXR5UmVzdWx0SAAa",
            "vgEKFE51bWVyaWNhbFN0YXRzUmVzdWx0EjQKCW1pbl92YWx1ZRgBIAEoCzIh",
            "Lmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLlZhbHVlEjQKCW1heF92YWx1",
            "ZRgCIAEoCzIhLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLlZhbHVlEjoK",
            "D3F1YW50aWxlX3ZhbHVlcxgEIAMoCzIhLmdvb2dsZS5wcml2YWN5LmRscC52",
            "MmJldGExLlZhbHVlGvoCChZDYXRlZ29yaWNhbFN0YXRzUmVzdWx0EpkBCiF2",
            "YWx1ZV9mcmVxdWVuY3lfaGlzdG9ncmFtX2J1Y2tldHMYBSADKAsybi5nb29n",
            "bGUucHJpdmFjeS5kbHAudjJiZXRhMS5SaXNrQW5hbHlzaXNPcGVyYXRpb25S",
            "ZXN1bHQuQ2F0ZWdvcmljYWxTdGF0c1Jlc3VsdC5DYXRlZ29yaWNhbFN0YXRz",
            "SGlzdG9ncmFtQnVja2V0GsMBCh9DYXRlZ29yaWNhbFN0YXRzSGlzdG9ncmFt",
            "QnVja2V0EiMKG3ZhbHVlX2ZyZXF1ZW5jeV9sb3dlcl9ib3VuZBgBIAEoAxIj",
            "Cht2YWx1ZV9mcmVxdWVuY3lfdXBwZXJfYm91bmQYAiABKAMSEwoLYnVja2V0",
            "X3NpemUYAyABKAMSQQoNYnVja2V0X3ZhbHVlcxgEIAMoCzIqLmdvb2dsZS5w",
            "cml2YWN5LmRscC52MmJldGExLlZhbHVlRnJlcXVlbmN5GqYEChBLQW5vbnlt",
            "aXR5UmVzdWx0Eo8BCiNlcXVpdmFsZW5jZV9jbGFzc19oaXN0b2dyYW1fYnVj",
            "a2V0cxgFIAMoCzJiLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLlJpc2tB",
            "bmFseXNpc09wZXJhdGlvblJlc3VsdC5LQW5vbnltaXR5UmVzdWx0LktBbm9u",
            "eW1pdHlIaXN0b2dyYW1CdWNrZXQaeQoaS0Fub255bWl0eUVxdWl2YWxlbmNl",
            "Q2xhc3MSOwoQcXVhc2lfaWRzX3ZhbHVlcxgBIAMoCzIhLmdvb2dsZS5wcml2",
            "YWN5LmRscC52MmJldGExLlZhbHVlEh4KFmVxdWl2YWxlbmNlX2NsYXNzX3Np",
            "emUYAiABKAMahAIKGUtBbm9ueW1pdHlIaXN0b2dyYW1CdWNrZXQSKgoiZXF1",
            "aXZhbGVuY2VfY2xhc3Nfc2l6ZV9sb3dlcl9ib3VuZBgBIAEoAxIqCiJlcXVp",
            "dmFsZW5jZV9jbGFzc19zaXplX3VwcGVyX2JvdW5kGAIgASgDEhMKC2J1Y2tl",
            "dF9zaXplGAMgASgDEnoKDWJ1Y2tldF92YWx1ZXMYBCADKAsyYy5nb29nbGUu",
            "cHJpdmFjeS5kbHAudjJiZXRhMS5SaXNrQW5hbHlzaXNPcGVyYXRpb25SZXN1",
            "bHQuS0Fub255bWl0eVJlc3VsdC5LQW5vbnltaXR5RXF1aXZhbGVuY2VDbGFz",
            "cxqmBQoQTERpdmVyc2l0eVJlc3VsdBKXAQorc2Vuc2l0aXZlX3ZhbHVlX2Zy",
            "ZXF1ZW5jeV9oaXN0b2dyYW1fYnVja2V0cxgFIAMoCzJiLmdvb2dsZS5wcml2",
            "YWN5LmRscC52MmJldGExLlJpc2tBbmFseXNpc09wZXJhdGlvblJlc3VsdC5M",
            "RGl2ZXJzaXR5UmVzdWx0LkxEaXZlcnNpdHlIaXN0b2dyYW1CdWNrZXQa6gEK",
            "GkxEaXZlcnNpdHlFcXVpdmFsZW5jZUNsYXNzEjsKEHF1YXNpX2lkc192YWx1",
            "ZXMYASADKAsyIS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5WYWx1ZRIe",
            "ChZlcXVpdmFsZW5jZV9jbGFzc19zaXplGAIgASgDEiUKHW51bV9kaXN0aW5j",
            "dF9zZW5zaXRpdmVfdmFsdWVzGAMgASgDEkgKFHRvcF9zZW5zaXRpdmVfdmFs",
            "dWVzGAQgAygLMiouZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuVmFsdWVG",
            "cmVxdWVuY3kaigIKGUxEaXZlcnNpdHlIaXN0b2dyYW1CdWNrZXQSLQolc2Vu",
            "c2l0aXZlX3ZhbHVlX2ZyZXF1ZW5jeV9sb3dlcl9ib3VuZBgBIAEoAxItCiVz",
            "ZW5zaXRpdmVfdmFsdWVfZnJlcXVlbmN5X3VwcGVyX2JvdW5kGAIgASgDEhMK",
            "C2J1Y2tldF9zaXplGAMgASgDEnoKDWJ1Y2tldF92YWx1ZXMYBCADKAsyYy5n",
            "b29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5SaXNrQW5hbHlzaXNPcGVyYXRp",
            "b25SZXN1bHQuTERpdmVyc2l0eVJlc3VsdC5MRGl2ZXJzaXR5RXF1aXZhbGVu",
            "Y2VDbGFzc0IICgZyZXN1bHQiUQoOVmFsdWVGcmVxdWVuY3kSMAoFdmFsdWUY",
            "ASABKAsyIS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5WYWx1ZRINCgVj",
            "b3VudBgCIAEoAyL+AQoFVmFsdWUSFwoNaW50ZWdlcl92YWx1ZRgBIAEoA0gA",
            "EhUKC2Zsb2F0X3ZhbHVlGAIgASgBSAASFgoMc3RyaW5nX3ZhbHVlGAMgASgJ",
            "SAASFwoNYm9vbGVhbl92YWx1ZRgEIAEoCEgAEjUKD3RpbWVzdGFtcF92YWx1",
            "ZRgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBIABIsCgp0aW1l",
            "X3ZhbHVlGAYgASgLMhYuZ29vZ2xlLnR5cGUuVGltZU9mRGF5SAASJwoKZGF0",
            "ZV92YWx1ZRgHIAEoCzIRLmdvb2dsZS50eXBlLkRhdGVIAEIGCgR0eXBlItMB",
            "ChBEZWlkZW50aWZ5Q29uZmlnElgKGWluZm9fdHlwZV90cmFuc2Zvcm1hdGlv",
            "bnMYASABKAsyMy5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5JbmZvVHlw",
            "ZVRyYW5zZm9ybWF0aW9uc0gAElMKFnJlY29yZF90cmFuc2Zvcm1hdGlvbnMY",
            "AiABKAsyMS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5SZWNvcmRUcmFu",
            "c2Zvcm1hdGlvbnNIAEIQCg50cmFuc2Zvcm1hdGlvbiKEBgoXUHJpbWl0aXZl",
            "VHJhbnNmb3JtYXRpb24SSAoOcmVwbGFjZV9jb25maWcYASABKAsyLi5nb29n",
            "bGUucHJpdmFjeS5kbHAudjJiZXRhMS5SZXBsYWNlVmFsdWVDb25maWdIABJB",
            "Cg1yZWRhY3RfY29uZmlnGAIgASgLMiguZ29vZ2xlLnByaXZhY3kuZGxwLnYy",
            "YmV0YTEuUmVkYWN0Q29uZmlnSAASUAoVY2hhcmFjdGVyX21hc2tfY29uZmln",
            "GAMgASgLMi8uZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuQ2hhcmFjdGVy",
            "TWFza0NvbmZpZ0gAEl4KHWNyeXB0b19yZXBsYWNlX2ZmeF9mcGVfY29uZmln",
            "GAQgASgLMjUuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuQ3J5cHRvUmVw",
            "bGFjZUZmeEZwZUNvbmZpZ0gAElsKG2ZpeGVkX3NpemVfYnVja2V0aW5nX2Nv",
            "bmZpZxgFIAEoCzI0Lmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLkZpeGVk",
            "U2l6ZUJ1Y2tldGluZ0NvbmZpZ0gAEkcKEGJ1Y2tldGluZ19jb25maWcYBiAB",
            "KAsyKy5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5CdWNrZXRpbmdDb25m",
            "aWdIABJeCh1yZXBsYWNlX3dpdGhfaW5mb190eXBlX2NvbmZpZxgHIAEoCzI1",
            "Lmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLlJlcGxhY2VXaXRoSW5mb1R5",
            "cGVDb25maWdIABJGChB0aW1lX3BhcnRfY29uZmlnGAggASgLMiouZ29vZ2xl",
            "LnByaXZhY3kuZGxwLnYyYmV0YTEuVGltZVBhcnRDb25maWdIABJKChJjcnlw",
            "dG9faGFzaF9jb25maWcYCSABKAsyLC5nb29nbGUucHJpdmFjeS5kbHAudjJi",
            "ZXRhMS5DcnlwdG9IYXNoQ29uZmlnSABCEAoOdHJhbnNmb3JtYXRpb24i4QEK",
            "DlRpbWVQYXJ0Q29uZmlnEkwKD3BhcnRfdG9fZXh0cmFjdBgBIAEoDjIzLmdv",
            "b2dsZS5wcml2YWN5LmRscC52MmJldGExLlRpbWVQYXJ0Q29uZmlnLlRpbWVQ",
            "YXJ0IoABCghUaW1lUGFydBIZChVUSU1FX1BBUlRfVU5TUEVDSUZJRUQQABII",
            "CgRZRUFSEAESCQoFTU9OVEgQAhIQCgxEQVlfT0ZfTU9OVEgQAxIPCgtEQVlf",
            "T0ZfV0VFSxAEEhAKDFdFRUtfT0ZfWUVBUhAFEg8KC0hPVVJfT0ZfREFZEAYi",
            "TQoQQ3J5cHRvSGFzaENvbmZpZxI5CgpjcnlwdG9fa2V5GAEgASgLMiUuZ29v",
            "Z2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuQ3J5cHRvS2V5IkoKElJlcGxhY2VW",
            "YWx1ZUNvbmZpZxI0CgluZXdfdmFsdWUYASABKAsyIS5nb29nbGUucHJpdmFj",
            "eS5kbHAudjJiZXRhMS5WYWx1ZSIbChlSZXBsYWNlV2l0aEluZm9UeXBlQ29u",
            "ZmlnIg4KDFJlZGFjdENvbmZpZyKqAgoNQ2hhcnNUb0lnbm9yZRIcChJjaGFy",
            "YWN0ZXJzX3RvX3NraXAYASABKAlIABJfChtjb21tb25fY2hhcmFjdGVyc190",
            "b19pZ25vcmUYAiABKA4yOC5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5D",
            "aGFyc1RvSWdub3JlLkNoYXJhY3Rlckdyb3VwSAAiiwEKDkNoYXJhY3Rlckdy",
            "b3VwEh8KG0NIQVJBQ1RFUl9HUk9VUF9VTlNQRUNJRklFRBAAEgsKB05VTUVS",
            "SUMQARIUChBBTFBIQV9VUFBFUl9DQVNFEAISFAoQQUxQSEFfTE9XRVJfQ0FT",
            "RRADEg8KC1BVTkNUVUFUSU9OEAQSDgoKV0hJVEVTUEFDRRAFQgwKCmNoYXJh",
            "Y3RlcnMiqAEKE0NoYXJhY3Rlck1hc2tDb25maWcSGQoRbWFza2luZ19jaGFy",
            "YWN0ZXIYASABKAkSFgoObnVtYmVyX3RvX21hc2sYAiABKAUSFQoNcmV2ZXJz",
            "ZV9vcmRlchgDIAEoCBJHChRjaGFyYWN0ZXJzX3RvX2lnbm9yZRgEIAMoCzIp",
            "Lmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLkNoYXJzVG9JZ25vcmUinwEK",
            "GEZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZxI2Cgtsb3dlcl9ib3VuZBgBIAEo",
            "CzIhLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLlZhbHVlEjYKC3VwcGVy",
            "X2JvdW5kGAIgASgLMiEuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuVmFs",
            "dWUSEwoLYnVja2V0X3NpemUYAyABKAEi/wEKD0J1Y2tldGluZ0NvbmZpZxJD",
            "CgdidWNrZXRzGAEgAygLMjIuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEu",
            "QnVja2V0aW5nQ29uZmlnLkJ1Y2tldBqmAQoGQnVja2V0Ei4KA21pbhgBIAEo",
            "CzIhLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLlZhbHVlEi4KA21heBgC",
            "IAEoCzIhLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLlZhbHVlEjwKEXJl",
            "cGxhY2VtZW50X3ZhbHVlGAMgASgLMiEuZ29vZ2xlLnByaXZhY3kuZGxwLnYy",
            "YmV0YTEuVmFsdWUixQMKGUNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWcSOQoK",
            "Y3J5cHRvX2tleRgBIAEoCzIlLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEx",
            "LkNyeXB0b0tleRI0Cgdjb250ZXh0GAIgASgLMiMuZ29vZ2xlLnByaXZhY3ku",
            "ZGxwLnYyYmV0YTEuRmllbGRJZBJoCg9jb21tb25fYWxwaGFiZXQYBCABKA4y",
            "TS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5DcnlwdG9SZXBsYWNlRmZ4",
            "RnBlQ29uZmlnLkZmeENvbW1vbk5hdGl2ZUFscGhhYmV0SAASGQoPY3VzdG9t",
            "X2FscGhhYmV0GAUgASgJSAASDwoFcmFkaXgYBiABKAVIACKUAQoXRmZ4Q29t",
            "bW9uTmF0aXZlQWxwaGFiZXQSKgomRkZYX0NPTU1PTl9OQVRJVkVfQUxQSEFC",
            "RVRfVU5TUEVDSUZJRUQQABILCgdOVU1FUklDEAESDwoLSEVYQURFQ0lNQUwQ",
            "AhIcChhVUFBFUl9DQVNFX0FMUEhBX05VTUVSSUMQAxIRCg1BTFBIQV9OVU1F",
            "UklDEARCCgoIYWxwaGFiZXQi5wEKCUNyeXB0b0tleRJDCgl0cmFuc2llbnQY",
            "ASABKAsyLi5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5UcmFuc2llbnRD",
            "cnlwdG9LZXlIABJDCgl1bndyYXBwZWQYAiABKAsyLi5nb29nbGUucHJpdmFj",
            "eS5kbHAudjJiZXRhMS5VbndyYXBwZWRDcnlwdG9LZXlIABJGCgtrbXNfd3Jh",
            "cHBlZBgDIAEoCzIvLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLkttc1dy",
            "YXBwZWRDcnlwdG9LZXlIAEIICgZzb3VyY2UiIgoSVHJhbnNpZW50Q3J5cHRv",
            "S2V5EgwKBG5hbWUYASABKAkiIQoSVW53cmFwcGVkQ3J5cHRvS2V5EgsKA2tl",
            "eRgBIAEoDCJDChNLbXNXcmFwcGVkQ3J5cHRvS2V5EhMKC3dyYXBwZWRfa2V5",
            "GAEgASgMEhcKD2NyeXB0b19rZXlfbmFtZRgCIAEoCSKqAgoXSW5mb1R5cGVU",
            "cmFuc2Zvcm1hdGlvbnMSYwoPdHJhbnNmb3JtYXRpb25zGAEgAygLMkouZ29v",
            "Z2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuSW5mb1R5cGVUcmFuc2Zvcm1hdGlv",
            "bnMuSW5mb1R5cGVUcmFuc2Zvcm1hdGlvbhqpAQoWSW5mb1R5cGVUcmFuc2Zv",
            "cm1hdGlvbhI4CgppbmZvX3R5cGVzGAEgAygLMiQuZ29vZ2xlLnByaXZhY3ku",
            "ZGxwLnYyYmV0YTEuSW5mb1R5cGUSVQoYcHJpbWl0aXZlX3RyYW5zZm9ybWF0",
            "aW9uGAIgASgLMjMuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuUHJpbWl0",
            "aXZlVHJhbnNmb3JtYXRpb24izwIKE0ZpZWxkVHJhbnNmb3JtYXRpb24SMwoG",
            "ZmllbGRzGAEgAygLMiMuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuRmll",
            "bGRJZBI+Cgljb25kaXRpb24YAyABKAsyKy5nb29nbGUucHJpdmFjeS5kbHAu",
            "djJiZXRhMS5SZWNvcmRDb25kaXRpb24SVwoYcHJpbWl0aXZlX3RyYW5zZm9y",
            "bWF0aW9uGAQgASgLMjMuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuUHJp",
            "bWl0aXZlVHJhbnNmb3JtYXRpb25IABJYChlpbmZvX3R5cGVfdHJhbnNmb3Jt",
            "YXRpb25zGAUgASgLMjMuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuSW5m",
            "b1R5cGVUcmFuc2Zvcm1hdGlvbnNIAEIQCg50cmFuc2Zvcm1hdGlvbiKzAQoV",
            "UmVjb3JkVHJhbnNmb3JtYXRpb25zEk4KFWZpZWxkX3RyYW5zZm9ybWF0aW9u",
            "cxgBIAMoCzIvLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLkZpZWxkVHJh",
            "bnNmb3JtYXRpb24SSgoTcmVjb3JkX3N1cHByZXNzaW9ucxgCIAMoCzItLmdv",
            "b2dsZS5wcml2YWN5LmRscC52MmJldGExLlJlY29yZFN1cHByZXNzaW9uIlMK",
            "EVJlY29yZFN1cHByZXNzaW9uEj4KCWNvbmRpdGlvbhgBIAEoCzIrLmdvb2ds",
            "ZS5wcml2YWN5LmRscC52MmJldGExLlJlY29yZENvbmRpdGlvbiL1BAoPUmVj",
            "b3JkQ29uZGl0aW9uEkwKC2V4cHJlc3Npb25zGAMgASgLMjcuZ29vZ2xlLnBy",
            "aXZhY3kuZGxwLnYyYmV0YTEuUmVjb3JkQ29uZGl0aW9uLkV4cHJlc3Npb25z",
            "GrMBCglDb25kaXRpb24SMgoFZmllbGQYASABKAsyIy5nb29nbGUucHJpdmFj",
            "eS5kbHAudjJiZXRhMS5GaWVsZElkEkAKCG9wZXJhdG9yGAMgASgOMi4uZ29v",
            "Z2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuUmVsYXRpb25hbE9wZXJhdG9yEjAK",
            "BXZhbHVlGAQgASgLMiEuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuVmFs",
            "dWUaVwoKQ29uZGl0aW9ucxJJCgpjb25kaXRpb25zGAEgAygLMjUuZ29vZ2xl",
            "LnByaXZhY3kuZGxwLnYyYmV0YTEuUmVjb3JkQ29uZGl0aW9uLkNvbmRpdGlv",
            "bhqEAgoLRXhwcmVzc2lvbnMSYQoQbG9naWNhbF9vcGVyYXRvchgBIAEoDjJH",
            "Lmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLlJlY29yZENvbmRpdGlvbi5F",
            "eHByZXNzaW9ucy5Mb2dpY2FsT3BlcmF0b3ISTAoKY29uZGl0aW9ucxgDIAEo",
            "CzI2Lmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLlJlY29yZENvbmRpdGlv",
            "bi5Db25kaXRpb25zSAAiPAoPTG9naWNhbE9wZXJhdG9yEiAKHExPR0lDQUxf",
            "T1BFUkFUT1JfVU5TUEVDSUZJRUQQABIHCgNBTkQQAUIGCgR0eXBlIokBChdE",
            "ZWlkZW50aWZpY2F0aW9uU3VtbWFyeRIZChF0cmFuc2Zvcm1lZF9ieXRlcxgC",
            "IAEoAxJTChh0cmFuc2Zvcm1hdGlvbl9zdW1tYXJpZXMYAyADKAsyMS5nb29n",
            "bGUucHJpdmFjeS5kbHAudjJiZXRhMS5UcmFuc2Zvcm1hdGlvblN1bW1hcnki",
            "pwUKFVRyYW5zZm9ybWF0aW9uU3VtbWFyeRI3CglpbmZvX3R5cGUYASABKAsy",
            "JC5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5JbmZvVHlwZRIyCgVmaWVs",
            "ZBgCIAEoCzIjLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLkZpZWxkSWQS",
            "SwoOdHJhbnNmb3JtYXRpb24YAyABKAsyMy5nb29nbGUucHJpdmFjeS5kbHAu",
            "djJiZXRhMS5QcmltaXRpdmVUcmFuc2Zvcm1hdGlvbhJOChVmaWVsZF90cmFu",
            "c2Zvcm1hdGlvbnMYBSADKAsyLy5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRh",
            "MS5GaWVsZFRyYW5zZm9ybWF0aW9uEkYKD3JlY29yZF9zdXBwcmVzcxgGIAEo",
            "CzItLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLlJlY29yZFN1cHByZXNz",
            "aW9uElAKB3Jlc3VsdHMYBCADKAsyPy5nb29nbGUucHJpdmFjeS5kbHAudjJi",
            "ZXRhMS5UcmFuc2Zvcm1hdGlvblN1bW1hcnkuU3VtbWFyeVJlc3VsdBqJAQoN",
            "U3VtbWFyeVJlc3VsdBINCgVjb3VudBgBIAEoAxJYCgRjb2RlGAIgASgOMkou",
            "Z29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuVHJhbnNmb3JtYXRpb25TdW1t",
            "YXJ5LlRyYW5zZm9ybWF0aW9uUmVzdWx0Q29kZRIPCgdkZXRhaWxzGAMgASgJ",
            "Il4KGFRyYW5zZm9ybWF0aW9uUmVzdWx0Q29kZRIqCiZUUkFOU0ZPUk1BVElP",
            "Tl9SRVNVTFRfQ09ERV9VTlNQRUNJRklFRBAAEgsKB1NVQ0NFU1MQARIJCgVF",
            "UlJPUhACKnQKCkxpa2VsaWhvb2QSGgoWTElLRUxJSE9PRF9VTlNQRUNJRklF",
            "RBAAEhEKDVZFUllfVU5MSUtFTFkQARIMCghVTkxJS0VMWRACEgwKCFBPU1NJ",
            "QkxFEAMSCgoGTElLRUxZEAQSDwoLVkVSWV9MSUtFTFkQBSq7AQoSUmVsYXRp",
            "b25hbE9wZXJhdG9yEiMKH1JFTEFUSU9OQUxfT1BFUkFUT1JfVU5TUEVDSUZJ",
            "RUQQABIMCghFUVVBTF9UTxABEhAKDE5PVF9FUVVBTF9UTxACEhAKDEdSRUFU",
            "RVJfVEhBThADEg0KCUxFU1NfVEhBThAEEhoKFkdSRUFURVJfVEhBTl9PUl9F",
            "UVVBTFMQBRIXChNMRVNTX1RIQU5fT1JfRVFVQUxTEAYSCgoGRVhJU1RTEAcy",
            "vAoKCkRscFNlcnZpY2USnAEKDkluc3BlY3RDb250ZW50EjEuZ29vZ2xlLnBy",
            "aXZhY3kuZGxwLnYyYmV0YTEuSW5zcGVjdENvbnRlbnRSZXF1ZXN0GjIuZ29v",
            "Z2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuSW5zcGVjdENvbnRlbnRSZXNwb25z",
            "ZSIjgtPkkwIdIhgvdjJiZXRhMS9jb250ZW50Omluc3BlY3Q6ASoSmAEKDVJl",
            "ZGFjdENvbnRlbnQSMC5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5SZWRh",
            "Y3RDb250ZW50UmVxdWVzdBoxLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGEx",
            "LlJlZGFjdENvbnRlbnRSZXNwb25zZSIigtPkkwIcIhcvdjJiZXRhMS9jb250",
            "ZW50OnJlZGFjdDoBKhKoAQoRRGVpZGVudGlmeUNvbnRlbnQSNC5nb29nbGUu",
            "cHJpdmFjeS5kbHAudjJiZXRhMS5EZWlkZW50aWZ5Q29udGVudFJlcXVlc3Qa",
            "NS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5EZWlkZW50aWZ5Q29udGVu",
            "dFJlc3BvbnNlIiaC0+STAiAiGy92MmJldGExL2NvbnRlbnQ6ZGVpZGVudGlm",
            "eToBKhKaAQoWQ3JlYXRlSW5zcGVjdE9wZXJhdGlvbhI5Lmdvb2dsZS5wcml2",
            "YWN5LmRscC52MmJldGExLkNyZWF0ZUluc3BlY3RPcGVyYXRpb25SZXF1ZXN0",
            "Gh0uZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbiImgtPkkwIgIhsvdjJi",
            "ZXRhMS9pbnNwZWN0L29wZXJhdGlvbnM6ASoSmAEKFUFuYWx5emVEYXRhU291",
            "cmNlUmlzaxI4Lmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLkFuYWx5emVE",
            "YXRhU291cmNlUmlza1JlcXVlc3QaHS5nb29nbGUubG9uZ3J1bm5pbmcuT3Bl",
            "cmF0aW9uIiaC0+STAiAiGy92MmJldGExL2RhdGFTb3VyY2U6YW5hbHl6ZToB",
            "KhK6AQoTTGlzdEluc3BlY3RGaW5kaW5ncxI2Lmdvb2dsZS5wcml2YWN5LmRs",
            "cC52MmJldGExLkxpc3RJbnNwZWN0RmluZGluZ3NSZXF1ZXN0GjcuZ29vZ2xl",
            "LnByaXZhY3kuZGxwLnYyYmV0YTEuTGlzdEluc3BlY3RGaW5kaW5nc1Jlc3Bv",
            "bnNlIjKC0+STAiwSKi92MmJldGExL3tuYW1lPWluc3BlY3QvcmVzdWx0cy8q",
            "fS9maW5kaW5ncxKsAQoNTGlzdEluZm9UeXBlcxIwLmdvb2dsZS5wcml2YWN5",
            "LmRscC52MmJldGExLkxpc3RJbmZvVHlwZXNSZXF1ZXN0GjEuZ29vZ2xlLnBy",
            "aXZhY3kuZGxwLnYyYmV0YTEuTGlzdEluZm9UeXBlc1Jlc3BvbnNlIjaC0+ST",
            "AjASLi92MmJldGExL3Jvb3RDYXRlZ29yaWVzL3tjYXRlZ29yeT0qfS9pbmZv",
            "VHlwZXMSpAEKEkxpc3RSb290Q2F0ZWdvcmllcxI1Lmdvb2dsZS5wcml2YWN5",
            "LmRscC52MmJldGExLkxpc3RSb290Q2F0ZWdvcmllc1JlcXVlc3QaNi5nb29n",
            "bGUucHJpdmFjeS5kbHAudjJiZXRhMS5MaXN0Um9vdENhdGVnb3JpZXNSZXNw",
            "b25zZSIfgtPkkwIZEhcvdjJiZXRhMS9yb290Q2F0ZWdvcmllc0KGAQoeY29t",
            "Lmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExQghEbHBQcm90b1ABWj1nb29n",
            "bGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVhcGlzL3ByaXZhY3kvZGxw",
            "L3YyYmV0YTE7ZGxwqgIYR29vZ2xlLkNsb3VkLkRscC5WMkJldGExYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.LongRunning.OperationsReflection.Descriptor, global::Google.Cloud.Dlp.V2Beta1.StorageReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Type.DateReflection.Descriptor, global::Google.Type.TimeofdayReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Cloud.Dlp.V2Beta1.Likelihood), typeof(global::Google.Cloud.Dlp.V2Beta1.RelationalOperator), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.InspectConfig), global::Google.Cloud.Dlp.V2Beta1.InspectConfig.Parser, new[]{ "InfoTypes", "MinLikelihood", "MaxFindings", "IncludeQuote", "ExcludeTypes", "InfoTypeLimits", "CustomInfoTypes" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.InspectConfig.Types.InfoTypeLimit), global::Google.Cloud.Dlp.V2Beta1.InspectConfig.Types.InfoTypeLimit.Parser, new[]{ "InfoType", "MaxFindings" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.OperationConfig), global::Google.Cloud.Dlp.V2Beta1.OperationConfig.Parser, new[]{ "MaxItemFindings" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.ContentItem), global::Google.Cloud.Dlp.V2Beta1.ContentItem.Parser, new[]{ "Type", "Data", "Value", "Table" }, new[]{ "DataItem" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.Table), global::Google.Cloud.Dlp.V2Beta1.Table.Parser, new[]{ "Headers", "Rows" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.Table.Types.Row), global::Google.Cloud.Dlp.V2Beta1.Table.Types.Row.Parser, new[]{ "Values" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.InspectResult), global::Google.Cloud.Dlp.V2Beta1.InspectResult.Parser, new[]{ "Findings", "FindingsTruncated" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.Finding), global::Google.Cloud.Dlp.V2Beta1.Finding.Parser, new[]{ "Quote", "InfoType", "Likelihood", "Location", "CreateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.Location), global::Google.Cloud.Dlp.V2Beta1.Location.Parser, new[]{ "ByteRange", "CodepointRange", "ImageBoxes", "RecordKey", "FieldId", "TableLocation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.TableLocation), global::Google.Cloud.Dlp.V2Beta1.TableLocation.Parser, new[]{ "RowIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.Range), global::Google.Cloud.Dlp.V2Beta1.Range.Parser, new[]{ "Start", "End" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.ImageLocation), global::Google.Cloud.Dlp.V2Beta1.ImageLocation.Parser, new[]{ "Top", "Left", "Width", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest), global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Parser, new[]{ "InspectConfig", "Items", "ReplaceConfigs", "ImageRedactionConfigs" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ReplaceConfig), global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ReplaceConfig.Parser, new[]{ "InfoType", "ReplaceWith" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ImageRedactionConfig), global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ImageRedactionConfig.Parser, new[]{ "InfoType", "RedactAllText", "RedactionColor" }, new[]{ "Target" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.Color), global::Google.Cloud.Dlp.V2Beta1.Color.Parser, new[]{ "Red", "Green", "Blue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RedactContentResponse), global::Google.Cloud.Dlp.V2Beta1.RedactContentResponse.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.DeidentifyContentRequest), global::Google.Cloud.Dlp.V2Beta1.DeidentifyContentRequest.Parser, new[]{ "DeidentifyConfig", "InspectConfig", "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.DeidentifyContentResponse), global::Google.Cloud.Dlp.V2Beta1.DeidentifyContentResponse.Parser, new[]{ "Items", "Summaries" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.InspectContentRequest), global::Google.Cloud.Dlp.V2Beta1.InspectContentRequest.Parser, new[]{ "InspectConfig", "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.InspectContentResponse), global::Google.Cloud.Dlp.V2Beta1.InspectContentResponse.Parser, new[]{ "Results" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.CreateInspectOperationRequest), global::Google.Cloud.Dlp.V2Beta1.CreateInspectOperationRequest.Parser, new[]{ "InspectConfig", "StorageConfig", "OutputConfig", "OperationConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.OutputStorageConfig), global::Google.Cloud.Dlp.V2Beta1.OutputStorageConfig.Parser, new[]{ "Table", "StoragePath" }, new[]{ "Type" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.InfoTypeStatistics), global::Google.Cloud.Dlp.V2Beta1.InfoTypeStatistics.Parser, new[]{ "InfoType", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.InspectOperationMetadata), global::Google.Cloud.Dlp.V2Beta1.InspectOperationMetadata.Parser, new[]{ "ProcessedBytes", "TotalEstimatedBytes", "InfoTypeStats", "CreateTime", "RequestInspectConfig", "RequestStorageConfig", "RequestOutputConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.InspectOperationResult), global::Google.Cloud.Dlp.V2Beta1.InspectOperationResult.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.ListInspectFindingsRequest), global::Google.Cloud.Dlp.V2Beta1.ListInspectFindingsRequest.Parser, new[]{ "Name", "PageSize", "PageToken", "Filter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.ListInspectFindingsResponse), global::Google.Cloud.Dlp.V2Beta1.ListInspectFindingsResponse.Parser, new[]{ "Result", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.InfoTypeDescription), global::Google.Cloud.Dlp.V2Beta1.InfoTypeDescription.Parser, new[]{ "Name", "DisplayName", "Categories" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.ListInfoTypesRequest), global::Google.Cloud.Dlp.V2Beta1.ListInfoTypesRequest.Parser, new[]{ "Category", "LanguageCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.ListInfoTypesResponse), global::Google.Cloud.Dlp.V2Beta1.ListInfoTypesResponse.Parser, new[]{ "InfoTypes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.CategoryDescription), global::Google.Cloud.Dlp.V2Beta1.CategoryDescription.Parser, new[]{ "Name", "DisplayName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.ListRootCategoriesRequest), global::Google.Cloud.Dlp.V2Beta1.ListRootCategoriesRequest.Parser, new[]{ "LanguageCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.ListRootCategoriesResponse), global::Google.Cloud.Dlp.V2Beta1.ListRootCategoriesResponse.Parser, new[]{ "Categories" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.AnalyzeDataSourceRiskRequest), global::Google.Cloud.Dlp.V2Beta1.AnalyzeDataSourceRiskRequest.Parser, new[]{ "PrivacyMetric", "SourceTable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric), global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Parser, new[]{ "NumericalStatsConfig", "CategoricalStatsConfig", "KAnonymityConfig", "LDiversityConfig" }, new[]{ "Type" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Types.NumericalStatsConfig), global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Types.NumericalStatsConfig.Parser, new[]{ "Field" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Types.CategoricalStatsConfig), global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Types.CategoricalStatsConfig.Parser, new[]{ "Field" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Types.KAnonymityConfig), global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Types.KAnonymityConfig.Parser, new[]{ "QuasiIds", "EntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Types.LDiversityConfig), global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Types.LDiversityConfig.Parser, new[]{ "QuasiIds", "SensitiveAttribute" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationMetadata), global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationMetadata.Parser, new[]{ "CreateTime", "RequestedPrivacyMetric", "RequestedSourceTable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult), global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Parser, new[]{ "NumericalStatsResult", "CategoricalStatsResult", "KAnonymityResult", "LDiversityResult" }, new[]{ "Result" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.NumericalStatsResult), global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.NumericalStatsResult.Parser, new[]{ "MinValue", "MaxValue", "QuantileValues" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.CategoricalStatsResult), global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.CategoricalStatsResult.Parser, new[]{ "ValueFrequencyHistogramBuckets" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.CategoricalStatsResult.Types.CategoricalStatsHistogramBucket), global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.CategoricalStatsResult.Types.CategoricalStatsHistogramBucket.Parser, new[]{ "ValueFrequencyLowerBound", "ValueFrequencyUpperBound", "BucketSize", "BucketValues" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.KAnonymityResult), global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.KAnonymityResult.Parser, new[]{ "EquivalenceClassHistogramBuckets" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.KAnonymityResult.Types.KAnonymityEquivalenceClass), global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.KAnonymityResult.Types.KAnonymityEquivalenceClass.Parser, new[]{ "QuasiIdsValues", "EquivalenceClassSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.KAnonymityResult.Types.KAnonymityHistogramBucket), global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.KAnonymityResult.Types.KAnonymityHistogramBucket.Parser, new[]{ "EquivalenceClassSizeLowerBound", "EquivalenceClassSizeUpperBound", "BucketSize", "BucketValues" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.LDiversityResult), global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.LDiversityResult.Parser, new[]{ "SensitiveValueFrequencyHistogramBuckets" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.LDiversityResult.Types.LDiversityEquivalenceClass), global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.LDiversityResult.Types.LDiversityEquivalenceClass.Parser, new[]{ "QuasiIdsValues", "EquivalenceClassSize", "NumDistinctSensitiveValues", "TopSensitiveValues" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.LDiversityResult.Types.LDiversityHistogramBucket), global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.LDiversityResult.Types.LDiversityHistogramBucket.Parser, new[]{ "SensitiveValueFrequencyLowerBound", "SensitiveValueFrequencyUpperBound", "BucketSize", "BucketValues" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.ValueFrequency), global::Google.Cloud.Dlp.V2Beta1.ValueFrequency.Parser, new[]{ "Value", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.Value), global::Google.Cloud.Dlp.V2Beta1.Value.Parser, new[]{ "IntegerValue", "FloatValue", "StringValue", "BooleanValue", "TimestampValue", "TimeValue", "DateValue" }, new[]{ "Type" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.DeidentifyConfig), global::Google.Cloud.Dlp.V2Beta1.DeidentifyConfig.Parser, new[]{ "InfoTypeTransformations", "RecordTransformations" }, new[]{ "Transformation" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.PrimitiveTransformation), global::Google.Cloud.Dlp.V2Beta1.PrimitiveTransformation.Parser, new[]{ "ReplaceConfig", "RedactConfig", "CharacterMaskConfig", "CryptoReplaceFfxFpeConfig", "FixedSizeBucketingConfig", "BucketingConfig", "ReplaceWithInfoTypeConfig", "TimePartConfig", "CryptoHashConfig" }, new[]{ "Transformation" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.TimePartConfig), global::Google.Cloud.Dlp.V2Beta1.TimePartConfig.Parser, new[]{ "PartToExtract" }, null, new[]{ typeof(global::Google.Cloud.Dlp.V2Beta1.TimePartConfig.Types.TimePart) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.CryptoHashConfig), global::Google.Cloud.Dlp.V2Beta1.CryptoHashConfig.Parser, new[]{ "CryptoKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.ReplaceValueConfig), global::Google.Cloud.Dlp.V2Beta1.ReplaceValueConfig.Parser, new[]{ "NewValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.ReplaceWithInfoTypeConfig), global::Google.Cloud.Dlp.V2Beta1.ReplaceWithInfoTypeConfig.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RedactConfig), global::Google.Cloud.Dlp.V2Beta1.RedactConfig.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.CharsToIgnore), global::Google.Cloud.Dlp.V2Beta1.CharsToIgnore.Parser, new[]{ "CharactersToSkip", "CommonCharactersToIgnore" }, new[]{ "Characters" }, new[]{ typeof(global::Google.Cloud.Dlp.V2Beta1.CharsToIgnore.Types.CharacterGroup) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.CharacterMaskConfig), global::Google.Cloud.Dlp.V2Beta1.CharacterMaskConfig.Parser, new[]{ "MaskingCharacter", "NumberToMask", "ReverseOrder", "CharactersToIgnore" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.FixedSizeBucketingConfig), global::Google.Cloud.Dlp.V2Beta1.FixedSizeBucketingConfig.Parser, new[]{ "LowerBound", "UpperBound", "BucketSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.BucketingConfig), global::Google.Cloud.Dlp.V2Beta1.BucketingConfig.Parser, new[]{ "Buckets" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.BucketingConfig.Types.Bucket), global::Google.Cloud.Dlp.V2Beta1.BucketingConfig.Types.Bucket.Parser, new[]{ "Min", "Max", "ReplacementValue" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.CryptoReplaceFfxFpeConfig), global::Google.Cloud.Dlp.V2Beta1.CryptoReplaceFfxFpeConfig.Parser, new[]{ "CryptoKey", "Context", "CommonAlphabet", "CustomAlphabet", "Radix" }, new[]{ "Alphabet" }, new[]{ typeof(global::Google.Cloud.Dlp.V2Beta1.CryptoReplaceFfxFpeConfig.Types.FfxCommonNativeAlphabet) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.CryptoKey), global::Google.Cloud.Dlp.V2Beta1.CryptoKey.Parser, new[]{ "Transient", "Unwrapped", "KmsWrapped" }, new[]{ "Source" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.TransientCryptoKey), global::Google.Cloud.Dlp.V2Beta1.TransientCryptoKey.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.UnwrappedCryptoKey), global::Google.Cloud.Dlp.V2Beta1.UnwrappedCryptoKey.Parser, new[]{ "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.KmsWrappedCryptoKey), global::Google.Cloud.Dlp.V2Beta1.KmsWrappedCryptoKey.Parser, new[]{ "WrappedKey", "CryptoKeyName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.InfoTypeTransformations), global::Google.Cloud.Dlp.V2Beta1.InfoTypeTransformations.Parser, new[]{ "Transformations" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.InfoTypeTransformations.Types.InfoTypeTransformation), global::Google.Cloud.Dlp.V2Beta1.InfoTypeTransformations.Types.InfoTypeTransformation.Parser, new[]{ "InfoTypes", "PrimitiveTransformation" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.FieldTransformation), global::Google.Cloud.Dlp.V2Beta1.FieldTransformation.Parser, new[]{ "Fields", "Condition", "PrimitiveTransformation", "InfoTypeTransformations" }, new[]{ "Transformation" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RecordTransformations), global::Google.Cloud.Dlp.V2Beta1.RecordTransformations.Parser, new[]{ "FieldTransformations", "RecordSuppressions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RecordSuppression), global::Google.Cloud.Dlp.V2Beta1.RecordSuppression.Parser, new[]{ "Condition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RecordCondition), global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Parser, new[]{ "Expressions" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Types.Condition), global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Types.Condition.Parser, new[]{ "Field", "Operator", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Types.Conditions), global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Types.Conditions.Parser, new[]{ "Conditions_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Types.Expressions), global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Types.Expressions.Parser, new[]{ "LogicalOperator", "Conditions" }, new[]{ "Type" }, new[]{ typeof(global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Types.Expressions.Types.LogicalOperator) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.DeidentificationSummary), global::Google.Cloud.Dlp.V2Beta1.DeidentificationSummary.Parser, new[]{ "TransformedBytes", "TransformationSummaries" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.TransformationSummary), global::Google.Cloud.Dlp.V2Beta1.TransformationSummary.Parser, new[]{ "InfoType", "Field", "Transformation", "FieldTransformations", "RecordSuppress", "Results" }, null, new[]{ typeof(global::Google.Cloud.Dlp.V2Beta1.TransformationSummary.Types.TransformationResultCode) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.TransformationSummary.Types.SummaryResult), global::Google.Cloud.Dlp.V2Beta1.TransformationSummary.Types.SummaryResult.Parser, new[]{ "Count", "Code", "Details" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Categorization of results based on how likely they are to represent a match,
  /// based on the number of elements they contain which imply a match.
  /// </summary>
  public enum Likelihood {
    /// <summary>
    /// Default value; information with all likelihoods is included.
    /// </summary>
    [pbr::OriginalName("LIKELIHOOD_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// Few matching elements.
    /// </summary>
    [pbr::OriginalName("VERY_UNLIKELY")] VeryUnlikely = 1,
    [pbr::OriginalName("UNLIKELY")] Unlikely = 2,
    /// <summary>
    /// Some matching elements.
    /// </summary>
    [pbr::OriginalName("POSSIBLE")] Possible = 3,
    [pbr::OriginalName("LIKELY")] Likely = 4,
    /// <summary>
    /// Many matching elements.
    /// </summary>
    [pbr::OriginalName("VERY_LIKELY")] VeryLikely = 5,
  }

  /// <summary>
  /// Operators available for comparing the value of fields.
  /// </summary>
  public enum RelationalOperator {
    [pbr::OriginalName("RELATIONAL_OPERATOR_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// Equal.
    /// </summary>
    [pbr::OriginalName("EQUAL_TO")] EqualTo = 1,
    /// <summary>
    /// Not equal to.
    /// </summary>
    [pbr::OriginalName("NOT_EQUAL_TO")] NotEqualTo = 2,
    /// <summary>
    /// Greater than.
    /// </summary>
    [pbr::OriginalName("GREATER_THAN")] GreaterThan = 3,
    /// <summary>
    /// Less than.
    /// </summary>
    [pbr::OriginalName("LESS_THAN")] LessThan = 4,
    /// <summary>
    /// Greater than or equals.
    /// </summary>
    [pbr::OriginalName("GREATER_THAN_OR_EQUALS")] GreaterThanOrEquals = 5,
    /// <summary>
    /// Less than or equals.
    /// </summary>
    [pbr::OriginalName("LESS_THAN_OR_EQUALS")] LessThanOrEquals = 6,
    /// <summary>
    /// Exists
    /// </summary>
    [pbr::OriginalName("EXISTS")] Exists = 7,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Configuration description of the scanning process.
  /// When used with redactContent only info_types and min_likelihood are currently
  /// used.
  /// </summary>
  public sealed partial class InspectConfig : pb::IMessage<InspectConfig> {
    private static readonly pb::MessageParser<InspectConfig> _parser = new pb::MessageParser<InspectConfig>(() => new InspectConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InspectConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectConfig(InspectConfig other) : this() {
      infoTypes_ = other.infoTypes_.Clone();
      minLikelihood_ = other.minLikelihood_;
      maxFindings_ = other.maxFindings_;
      includeQuote_ = other.includeQuote_;
      excludeTypes_ = other.excludeTypes_;
      infoTypeLimits_ = other.infoTypeLimits_.Clone();
      customInfoTypes_ = other.customInfoTypes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectConfig Clone() {
      return new InspectConfig(this);
    }

    /// <summary>Field number for the "info_types" field.</summary>
    public const int InfoTypesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.InfoType> _repeated_infoTypes_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.InfoType.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InfoType> infoTypes_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InfoType>();
    /// <summary>
    /// Restricts what info_types to look for. The values must correspond to
    /// InfoType values returned by ListInfoTypes or found in documentation.
    /// Empty info_types runs all enabled detectors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InfoType> InfoTypes {
      get { return infoTypes_; }
    }

    /// <summary>Field number for the "min_likelihood" field.</summary>
    public const int MinLikelihoodFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta1.Likelihood minLikelihood_ = 0;
    /// <summary>
    /// Only returns findings equal or above this threshold.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.Likelihood MinLikelihood {
      get { return minLikelihood_; }
      set {
        minLikelihood_ = value;
      }
    }

    /// <summary>Field number for the "max_findings" field.</summary>
    public const int MaxFindingsFieldNumber = 3;
    private int maxFindings_;
    /// <summary>
    /// Limits the number of findings per content item or long running operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxFindings {
      get { return maxFindings_; }
      set {
        maxFindings_ = value;
      }
    }

    /// <summary>Field number for the "include_quote" field.</summary>
    public const int IncludeQuoteFieldNumber = 4;
    private bool includeQuote_;
    /// <summary>
    /// When true, a contextual quote from the data that triggered a finding is
    /// included in the response; see Finding.quote.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeQuote {
      get { return includeQuote_; }
      set {
        includeQuote_ = value;
      }
    }

    /// <summary>Field number for the "exclude_types" field.</summary>
    public const int ExcludeTypesFieldNumber = 6;
    private bool excludeTypes_;
    /// <summary>
    /// When true, excludes type information of the findings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ExcludeTypes {
      get { return excludeTypes_; }
      set {
        excludeTypes_ = value;
      }
    }

    /// <summary>Field number for the "info_type_limits" field.</summary>
    public const int InfoTypeLimitsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.InspectConfig.Types.InfoTypeLimit> _repeated_infoTypeLimits_codec
        = pb::FieldCodec.ForMessage(58, global::Google.Cloud.Dlp.V2Beta1.InspectConfig.Types.InfoTypeLimit.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InspectConfig.Types.InfoTypeLimit> infoTypeLimits_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InspectConfig.Types.InfoTypeLimit>();
    /// <summary>
    /// Configuration of findings limit given for specified info types.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InspectConfig.Types.InfoTypeLimit> InfoTypeLimits {
      get { return infoTypeLimits_; }
    }

    /// <summary>Field number for the "custom_info_types" field.</summary>
    public const int CustomInfoTypesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.CustomInfoType> _repeated_customInfoTypes_codec
        = pb::FieldCodec.ForMessage(66, global::Google.Cloud.Dlp.V2Beta1.CustomInfoType.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.CustomInfoType> customInfoTypes_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.CustomInfoType>();
    /// <summary>
    /// Custom info types provided by the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.CustomInfoType> CustomInfoTypes {
      get { return customInfoTypes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InspectConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InspectConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!infoTypes_.Equals(other.infoTypes_)) return false;
      if (MinLikelihood != other.MinLikelihood) return false;
      if (MaxFindings != other.MaxFindings) return false;
      if (IncludeQuote != other.IncludeQuote) return false;
      if (ExcludeTypes != other.ExcludeTypes) return false;
      if(!infoTypeLimits_.Equals(other.infoTypeLimits_)) return false;
      if(!customInfoTypes_.Equals(other.customInfoTypes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= infoTypes_.GetHashCode();
      if (MinLikelihood != 0) hash ^= MinLikelihood.GetHashCode();
      if (MaxFindings != 0) hash ^= MaxFindings.GetHashCode();
      if (IncludeQuote != false) hash ^= IncludeQuote.GetHashCode();
      if (ExcludeTypes != false) hash ^= ExcludeTypes.GetHashCode();
      hash ^= infoTypeLimits_.GetHashCode();
      hash ^= customInfoTypes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infoTypes_.WriteTo(output, _repeated_infoTypes_codec);
      if (MinLikelihood != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MinLikelihood);
      }
      if (MaxFindings != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxFindings);
      }
      if (IncludeQuote != false) {
        output.WriteRawTag(32);
        output.WriteBool(IncludeQuote);
      }
      if (ExcludeTypes != false) {
        output.WriteRawTag(48);
        output.WriteBool(ExcludeTypes);
      }
      infoTypeLimits_.WriteTo(output, _repeated_infoTypeLimits_codec);
      customInfoTypes_.WriteTo(output, _repeated_customInfoTypes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infoTypes_.CalculateSize(_repeated_infoTypes_codec);
      if (MinLikelihood != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MinLikelihood);
      }
      if (MaxFindings != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxFindings);
      }
      if (IncludeQuote != false) {
        size += 1 + 1;
      }
      if (ExcludeTypes != false) {
        size += 1 + 1;
      }
      size += infoTypeLimits_.CalculateSize(_repeated_infoTypeLimits_codec);
      size += customInfoTypes_.CalculateSize(_repeated_customInfoTypes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InspectConfig other) {
      if (other == null) {
        return;
      }
      infoTypes_.Add(other.infoTypes_);
      if (other.MinLikelihood != 0) {
        MinLikelihood = other.MinLikelihood;
      }
      if (other.MaxFindings != 0) {
        MaxFindings = other.MaxFindings;
      }
      if (other.IncludeQuote != false) {
        IncludeQuote = other.IncludeQuote;
      }
      if (other.ExcludeTypes != false) {
        ExcludeTypes = other.ExcludeTypes;
      }
      infoTypeLimits_.Add(other.infoTypeLimits_);
      customInfoTypes_.Add(other.customInfoTypes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infoTypes_.AddEntriesFrom(input, _repeated_infoTypes_codec);
            break;
          }
          case 16: {
            minLikelihood_ = (global::Google.Cloud.Dlp.V2Beta1.Likelihood) input.ReadEnum();
            break;
          }
          case 24: {
            MaxFindings = input.ReadInt32();
            break;
          }
          case 32: {
            IncludeQuote = input.ReadBool();
            break;
          }
          case 48: {
            ExcludeTypes = input.ReadBool();
            break;
          }
          case 58: {
            infoTypeLimits_.AddEntriesFrom(input, _repeated_infoTypeLimits_codec);
            break;
          }
          case 66: {
            customInfoTypes_.AddEntriesFrom(input, _repeated_customInfoTypes_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the InspectConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Max findings configuration per info type, per content item or long running
      /// operation.
      /// </summary>
      public sealed partial class InfoTypeLimit : pb::IMessage<InfoTypeLimit> {
        private static readonly pb::MessageParser<InfoTypeLimit> _parser = new pb::MessageParser<InfoTypeLimit>(() => new InfoTypeLimit());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InfoTypeLimit> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta1.InspectConfig.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InfoTypeLimit() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InfoTypeLimit(InfoTypeLimit other) : this() {
          InfoType = other.infoType_ != null ? other.InfoType.Clone() : null;
          maxFindings_ = other.maxFindings_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InfoTypeLimit Clone() {
          return new InfoTypeLimit(this);
        }

        /// <summary>Field number for the "info_type" field.</summary>
        public const int InfoTypeFieldNumber = 1;
        private global::Google.Cloud.Dlp.V2Beta1.InfoType infoType_;
        /// <summary>
        /// Type of information the findings limit applies to. Only one limit per
        /// info_type should be provided. If InfoTypeLimit does not have an
        /// info_type, the DLP API applies the limit against all info_types that are
        /// found but not specified in another InfoTypeLimit.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta1.InfoType InfoType {
          get { return infoType_; }
          set {
            infoType_ = value;
          }
        }

        /// <summary>Field number for the "max_findings" field.</summary>
        public const int MaxFindingsFieldNumber = 2;
        private int maxFindings_;
        /// <summary>
        /// Max findings limit for the given infoType.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxFindings {
          get { return maxFindings_; }
          set {
            maxFindings_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as InfoTypeLimit);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InfoTypeLimit other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(InfoType, other.InfoType)) return false;
          if (MaxFindings != other.MaxFindings) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (infoType_ != null) hash ^= InfoType.GetHashCode();
          if (MaxFindings != 0) hash ^= MaxFindings.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (infoType_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(InfoType);
          }
          if (MaxFindings != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(MaxFindings);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (infoType_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoType);
          }
          if (MaxFindings != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxFindings);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InfoTypeLimit other) {
          if (other == null) {
            return;
          }
          if (other.infoType_ != null) {
            if (infoType_ == null) {
              infoType_ = new global::Google.Cloud.Dlp.V2Beta1.InfoType();
            }
            InfoType.MergeFrom(other.InfoType);
          }
          if (other.MaxFindings != 0) {
            MaxFindings = other.MaxFindings;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (infoType_ == null) {
                  infoType_ = new global::Google.Cloud.Dlp.V2Beta1.InfoType();
                }
                input.ReadMessage(infoType_);
                break;
              }
              case 16: {
                MaxFindings = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Additional configuration for inspect long running operations.
  /// </summary>
  public sealed partial class OperationConfig : pb::IMessage<OperationConfig> {
    private static readonly pb::MessageParser<OperationConfig> _parser = new pb::MessageParser<OperationConfig>(() => new OperationConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OperationConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationConfig(OperationConfig other) : this() {
      maxItemFindings_ = other.maxItemFindings_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationConfig Clone() {
      return new OperationConfig(this);
    }

    /// <summary>Field number for the "max_item_findings" field.</summary>
    public const int MaxItemFindingsFieldNumber = 1;
    private long maxItemFindings_;
    /// <summary>
    /// Max number of findings per file, Datastore entity, or database row.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxItemFindings {
      get { return maxItemFindings_; }
      set {
        maxItemFindings_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OperationConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OperationConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxItemFindings != other.MaxItemFindings) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxItemFindings != 0L) hash ^= MaxItemFindings.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxItemFindings != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MaxItemFindings);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxItemFindings != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxItemFindings);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OperationConfig other) {
      if (other == null) {
        return;
      }
      if (other.MaxItemFindings != 0L) {
        MaxItemFindings = other.MaxItemFindings;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxItemFindings = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Container structure for the content to inspect.
  /// </summary>
  public sealed partial class ContentItem : pb::IMessage<ContentItem> {
    private static readonly pb::MessageParser<ContentItem> _parser = new pb::MessageParser<ContentItem>(() => new ContentItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContentItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentItem(ContentItem other) : this() {
      type_ = other.type_;
      switch (other.DataItemCase) {
        case DataItemOneofCase.Data:
          Data = other.Data;
          break;
        case DataItemOneofCase.Value:
          Value = other.Value;
          break;
        case DataItemOneofCase.Table:
          Table = other.Table.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentItem Clone() {
      return new ContentItem(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    /// <summary>
    /// Type of the content, as defined in Content-Type HTTP header.
    /// Supported types are: all "text" types, octet streams, PNG images,
    /// JPEG images.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    /// <summary>
    /// Content data to inspect or redact.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return dataItemCase_ == DataItemOneofCase.Data ? (pb::ByteString) dataItem_ : pb::ByteString.Empty; }
      set {
        dataItem_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        dataItemCase_ = DataItemOneofCase.Data;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    /// <summary>
    /// String data to inspect or redact.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return dataItemCase_ == DataItemOneofCase.Value ? (string) dataItem_ : ""; }
      set {
        dataItem_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        dataItemCase_ = DataItemOneofCase.Value;
      }
    }

    /// <summary>Field number for the "table" field.</summary>
    public const int TableFieldNumber = 4;
    /// <summary>
    /// Structured content for inspection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.Table Table {
      get { return dataItemCase_ == DataItemOneofCase.Table ? (global::Google.Cloud.Dlp.V2Beta1.Table) dataItem_ : null; }
      set {
        dataItem_ = value;
        dataItemCase_ = value == null ? DataItemOneofCase.None : DataItemOneofCase.Table;
      }
    }

    private object dataItem_;
    /// <summary>Enum of possible cases for the "data_item" oneof.</summary>
    public enum DataItemOneofCase {
      None = 0,
      Data = 2,
      Value = 3,
      Table = 4,
    }
    private DataItemOneofCase dataItemCase_ = DataItemOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataItemOneofCase DataItemCase {
      get { return dataItemCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDataItem() {
      dataItemCase_ = DataItemOneofCase.None;
      dataItem_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContentItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContentItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Data != other.Data) return false;
      if (Value != other.Value) return false;
      if (!object.Equals(Table, other.Table)) return false;
      if (DataItemCase != other.DataItemCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (dataItemCase_ == DataItemOneofCase.Data) hash ^= Data.GetHashCode();
      if (dataItemCase_ == DataItemOneofCase.Value) hash ^= Value.GetHashCode();
      if (dataItemCase_ == DataItemOneofCase.Table) hash ^= Table.GetHashCode();
      hash ^= (int) dataItemCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (dataItemCase_ == DataItemOneofCase.Data) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (dataItemCase_ == DataItemOneofCase.Value) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
      if (dataItemCase_ == DataItemOneofCase.Table) {
        output.WriteRawTag(34);
        output.WriteMessage(Table);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (dataItemCase_ == DataItemOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (dataItemCase_ == DataItemOneofCase.Value) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (dataItemCase_ == DataItemOneofCase.Table) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Table);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContentItem other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      switch (other.DataItemCase) {
        case DataItemOneofCase.Data:
          Data = other.Data;
          break;
        case DataItemOneofCase.Value:
          Value = other.Value;
          break;
        case DataItemOneofCase.Table:
          Table = other.Table;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
          case 34: {
            global::Google.Cloud.Dlp.V2Beta1.Table subBuilder = new global::Google.Cloud.Dlp.V2Beta1.Table();
            if (dataItemCase_ == DataItemOneofCase.Table) {
              subBuilder.MergeFrom(Table);
            }
            input.ReadMessage(subBuilder);
            Table = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Structured content to inspect. Up to 50,000 `Value`s per request allowed.
  /// </summary>
  public sealed partial class Table : pb::IMessage<Table> {
    private static readonly pb::MessageParser<Table> _parser = new pb::MessageParser<Table>(() => new Table());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Table> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table(Table other) : this() {
      headers_ = other.headers_.Clone();
      rows_ = other.rows_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table Clone() {
      return new Table(this);
    }

    /// <summary>Field number for the "headers" field.</summary>
    public const int HeadersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.FieldId> _repeated_headers_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.FieldId.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.FieldId> headers_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.FieldId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.FieldId> Headers {
      get { return headers_; }
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.Table.Types.Row> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Dlp.V2Beta1.Table.Types.Row.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Table.Types.Row> rows_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Table.Types.Row>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Table.Types.Row> Rows {
      get { return rows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Table);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Table other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!headers_.Equals(other.headers_)) return false;
      if(!rows_.Equals(other.rows_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= headers_.GetHashCode();
      hash ^= rows_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      headers_.WriteTo(output, _repeated_headers_codec);
      rows_.WriteTo(output, _repeated_rows_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += headers_.CalculateSize(_repeated_headers_codec);
      size += rows_.CalculateSize(_repeated_rows_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Table other) {
      if (other == null) {
        return;
      }
      headers_.Add(other.headers_);
      rows_.Add(other.rows_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            headers_.AddEntriesFrom(input, _repeated_headers_codec);
            break;
          }
          case 18: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Table message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Row : pb::IMessage<Row> {
        private static readonly pb::MessageParser<Row> _parser = new pb::MessageParser<Row>(() => new Row());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Row> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta1.Table.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Row() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Row(Row other) : this() {
          values_ = other.values_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Row Clone() {
          return new Row(this);
        }

        /// <summary>Field number for the "values" field.</summary>
        public const int ValuesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.Value> _repeated_values_codec
            = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.Value.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Value> values_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Value>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Value> Values {
          get { return values_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Row);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Row other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!values_.Equals(other.values_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= values_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          values_.WriteTo(output, _repeated_values_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += values_.CalculateSize(_repeated_values_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Row other) {
          if (other == null) {
            return;
          }
          values_.Add(other.values_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                values_.AddEntriesFrom(input, _repeated_values_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// All the findings for a single scanned item.
  /// </summary>
  public sealed partial class InspectResult : pb::IMessage<InspectResult> {
    private static readonly pb::MessageParser<InspectResult> _parser = new pb::MessageParser<InspectResult>(() => new InspectResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InspectResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectResult(InspectResult other) : this() {
      findings_ = other.findings_.Clone();
      findingsTruncated_ = other.findingsTruncated_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectResult Clone() {
      return new InspectResult(this);
    }

    /// <summary>Field number for the "findings" field.</summary>
    public const int FindingsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.Finding> _repeated_findings_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.Finding.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Finding> findings_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Finding>();
    /// <summary>
    /// List of findings for an item.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Finding> Findings {
      get { return findings_; }
    }

    /// <summary>Field number for the "findings_truncated" field.</summary>
    public const int FindingsTruncatedFieldNumber = 2;
    private bool findingsTruncated_;
    /// <summary>
    /// If true, then this item might have more findings than were returned,
    /// and the findings returned are an arbitrary subset of all findings.
    /// The findings list might be truncated because the input items were too
    /// large, or because the server reached the maximum amount of resources
    /// allowed for a single API call. For best results, divide the input into
    /// smaller batches.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FindingsTruncated {
      get { return findingsTruncated_; }
      set {
        findingsTruncated_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InspectResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InspectResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!findings_.Equals(other.findings_)) return false;
      if (FindingsTruncated != other.FindingsTruncated) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= findings_.GetHashCode();
      if (FindingsTruncated != false) hash ^= FindingsTruncated.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      findings_.WriteTo(output, _repeated_findings_codec);
      if (FindingsTruncated != false) {
        output.WriteRawTag(16);
        output.WriteBool(FindingsTruncated);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += findings_.CalculateSize(_repeated_findings_codec);
      if (FindingsTruncated != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InspectResult other) {
      if (other == null) {
        return;
      }
      findings_.Add(other.findings_);
      if (other.FindingsTruncated != false) {
        FindingsTruncated = other.FindingsTruncated;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            findings_.AddEntriesFrom(input, _repeated_findings_codec);
            break;
          }
          case 16: {
            FindingsTruncated = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Container structure describing a single finding within a string or image.
  /// </summary>
  public sealed partial class Finding : pb::IMessage<Finding> {
    private static readonly pb::MessageParser<Finding> _parser = new pb::MessageParser<Finding>(() => new Finding());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Finding> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Finding() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Finding(Finding other) : this() {
      quote_ = other.quote_;
      InfoType = other.infoType_ != null ? other.InfoType.Clone() : null;
      likelihood_ = other.likelihood_;
      Location = other.location_ != null ? other.Location.Clone() : null;
      CreateTime = other.createTime_ != null ? other.CreateTime.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Finding Clone() {
      return new Finding(this);
    }

    /// <summary>Field number for the "quote" field.</summary>
    public const int QuoteFieldNumber = 1;
    private string quote_ = "";
    /// <summary>
    /// The specific string that may be potentially sensitive info.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Quote {
      get { return quote_; }
      set {
        quote_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "info_type" field.</summary>
    public const int InfoTypeFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta1.InfoType infoType_;
    /// <summary>
    /// The specific type of info the string might be.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.InfoType InfoType {
      get { return infoType_; }
      set {
        infoType_ = value;
      }
    }

    /// <summary>Field number for the "likelihood" field.</summary>
    public const int LikelihoodFieldNumber = 3;
    private global::Google.Cloud.Dlp.V2Beta1.Likelihood likelihood_ = 0;
    /// <summary>
    /// Estimate of how likely it is that the info_type is correct.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.Likelihood Likelihood {
      get { return likelihood_; }
      set {
        likelihood_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 4;
    private global::Google.Cloud.Dlp.V2Beta1.Location location_;
    /// <summary>
    /// Location of the info found.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.Location Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// Timestamp when finding was detected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Finding);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Finding other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Quote != other.Quote) return false;
      if (!object.Equals(InfoType, other.InfoType)) return false;
      if (Likelihood != other.Likelihood) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Quote.Length != 0) hash ^= Quote.GetHashCode();
      if (infoType_ != null) hash ^= InfoType.GetHashCode();
      if (Likelihood != 0) hash ^= Likelihood.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Quote.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Quote);
      }
      if (infoType_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(InfoType);
      }
      if (Likelihood != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Likelihood);
      }
      if (location_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Location);
      }
      if (createTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CreateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Quote.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Quote);
      }
      if (infoType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoType);
      }
      if (Likelihood != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Likelihood);
      }
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Finding other) {
      if (other == null) {
        return;
      }
      if (other.Quote.Length != 0) {
        Quote = other.Quote;
      }
      if (other.infoType_ != null) {
        if (infoType_ == null) {
          infoType_ = new global::Google.Cloud.Dlp.V2Beta1.InfoType();
        }
        InfoType.MergeFrom(other.InfoType);
      }
      if (other.Likelihood != 0) {
        Likelihood = other.Likelihood;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          location_ = new global::Google.Cloud.Dlp.V2Beta1.Location();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Quote = input.ReadString();
            break;
          }
          case 18: {
            if (infoType_ == null) {
              infoType_ = new global::Google.Cloud.Dlp.V2Beta1.InfoType();
            }
            input.ReadMessage(infoType_);
            break;
          }
          case 24: {
            likelihood_ = (global::Google.Cloud.Dlp.V2Beta1.Likelihood) input.ReadEnum();
            break;
          }
          case 34: {
            if (location_ == null) {
              location_ = new global::Google.Cloud.Dlp.V2Beta1.Location();
            }
            input.ReadMessage(location_);
            break;
          }
          case 50: {
            if (createTime_ == null) {
              createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(createTime_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Specifies the location of a finding within its source item.
  /// </summary>
  public sealed partial class Location : pb::IMessage<Location> {
    private static readonly pb::MessageParser<Location> _parser = new pb::MessageParser<Location>(() => new Location());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Location> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location(Location other) : this() {
      ByteRange = other.byteRange_ != null ? other.ByteRange.Clone() : null;
      CodepointRange = other.codepointRange_ != null ? other.CodepointRange.Clone() : null;
      imageBoxes_ = other.imageBoxes_.Clone();
      RecordKey = other.recordKey_ != null ? other.RecordKey.Clone() : null;
      FieldId = other.fieldId_ != null ? other.FieldId.Clone() : null;
      TableLocation = other.tableLocation_ != null ? other.TableLocation.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location Clone() {
      return new Location(this);
    }

    /// <summary>Field number for the "byte_range" field.</summary>
    public const int ByteRangeFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.Range byteRange_;
    /// <summary>
    /// Zero-based byte offsets within a content item.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.Range ByteRange {
      get { return byteRange_; }
      set {
        byteRange_ = value;
      }
    }

    /// <summary>Field number for the "codepoint_range" field.</summary>
    public const int CodepointRangeFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta1.Range codepointRange_;
    /// <summary>
    /// Character offsets within a content item, included when content type
    /// is a text. Default charset assumed to be UTF-8.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.Range CodepointRange {
      get { return codepointRange_; }
      set {
        codepointRange_ = value;
      }
    }

    /// <summary>Field number for the "image_boxes" field.</summary>
    public const int ImageBoxesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.ImageLocation> _repeated_imageBoxes_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Dlp.V2Beta1.ImageLocation.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ImageLocation> imageBoxes_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ImageLocation>();
    /// <summary>
    /// Location within an image's pixels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ImageLocation> ImageBoxes {
      get { return imageBoxes_; }
    }

    /// <summary>Field number for the "record_key" field.</summary>
    public const int RecordKeyFieldNumber = 4;
    private global::Google.Cloud.Dlp.V2Beta1.RecordKey recordKey_;
    /// <summary>
    /// Key of the finding.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.RecordKey RecordKey {
      get { return recordKey_; }
      set {
        recordKey_ = value;
      }
    }

    /// <summary>Field number for the "field_id" field.</summary>
    public const int FieldIdFieldNumber = 5;
    private global::Google.Cloud.Dlp.V2Beta1.FieldId fieldId_;
    /// <summary>
    /// Field id of the field containing the finding.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.FieldId FieldId {
      get { return fieldId_; }
      set {
        fieldId_ = value;
      }
    }

    /// <summary>Field number for the "table_location" field.</summary>
    public const int TableLocationFieldNumber = 6;
    private global::Google.Cloud.Dlp.V2Beta1.TableLocation tableLocation_;
    /// <summary>
    /// Location within a `ContentItem.Table`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.TableLocation TableLocation {
      get { return tableLocation_; }
      set {
        tableLocation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Location);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Location other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ByteRange, other.ByteRange)) return false;
      if (!object.Equals(CodepointRange, other.CodepointRange)) return false;
      if(!imageBoxes_.Equals(other.imageBoxes_)) return false;
      if (!object.Equals(RecordKey, other.RecordKey)) return false;
      if (!object.Equals(FieldId, other.FieldId)) return false;
      if (!object.Equals(TableLocation, other.TableLocation)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (byteRange_ != null) hash ^= ByteRange.GetHashCode();
      if (codepointRange_ != null) hash ^= CodepointRange.GetHashCode();
      hash ^= imageBoxes_.GetHashCode();
      if (recordKey_ != null) hash ^= RecordKey.GetHashCode();
      if (fieldId_ != null) hash ^= FieldId.GetHashCode();
      if (tableLocation_ != null) hash ^= TableLocation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (byteRange_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ByteRange);
      }
      if (codepointRange_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CodepointRange);
      }
      imageBoxes_.WriteTo(output, _repeated_imageBoxes_codec);
      if (recordKey_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RecordKey);
      }
      if (fieldId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(FieldId);
      }
      if (tableLocation_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TableLocation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (byteRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ByteRange);
      }
      if (codepointRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CodepointRange);
      }
      size += imageBoxes_.CalculateSize(_repeated_imageBoxes_codec);
      if (recordKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecordKey);
      }
      if (fieldId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FieldId);
      }
      if (tableLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableLocation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Location other) {
      if (other == null) {
        return;
      }
      if (other.byteRange_ != null) {
        if (byteRange_ == null) {
          byteRange_ = new global::Google.Cloud.Dlp.V2Beta1.Range();
        }
        ByteRange.MergeFrom(other.ByteRange);
      }
      if (other.codepointRange_ != null) {
        if (codepointRange_ == null) {
          codepointRange_ = new global::Google.Cloud.Dlp.V2Beta1.Range();
        }
        CodepointRange.MergeFrom(other.CodepointRange);
      }
      imageBoxes_.Add(other.imageBoxes_);
      if (other.recordKey_ != null) {
        if (recordKey_ == null) {
          recordKey_ = new global::Google.Cloud.Dlp.V2Beta1.RecordKey();
        }
        RecordKey.MergeFrom(other.RecordKey);
      }
      if (other.fieldId_ != null) {
        if (fieldId_ == null) {
          fieldId_ = new global::Google.Cloud.Dlp.V2Beta1.FieldId();
        }
        FieldId.MergeFrom(other.FieldId);
      }
      if (other.tableLocation_ != null) {
        if (tableLocation_ == null) {
          tableLocation_ = new global::Google.Cloud.Dlp.V2Beta1.TableLocation();
        }
        TableLocation.MergeFrom(other.TableLocation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (byteRange_ == null) {
              byteRange_ = new global::Google.Cloud.Dlp.V2Beta1.Range();
            }
            input.ReadMessage(byteRange_);
            break;
          }
          case 18: {
            if (codepointRange_ == null) {
              codepointRange_ = new global::Google.Cloud.Dlp.V2Beta1.Range();
            }
            input.ReadMessage(codepointRange_);
            break;
          }
          case 26: {
            imageBoxes_.AddEntriesFrom(input, _repeated_imageBoxes_codec);
            break;
          }
          case 34: {
            if (recordKey_ == null) {
              recordKey_ = new global::Google.Cloud.Dlp.V2Beta1.RecordKey();
            }
            input.ReadMessage(recordKey_);
            break;
          }
          case 42: {
            if (fieldId_ == null) {
              fieldId_ = new global::Google.Cloud.Dlp.V2Beta1.FieldId();
            }
            input.ReadMessage(fieldId_);
            break;
          }
          case 50: {
            if (tableLocation_ == null) {
              tableLocation_ = new global::Google.Cloud.Dlp.V2Beta1.TableLocation();
            }
            input.ReadMessage(tableLocation_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Location of a finding within a `ContentItem.Table`.
  /// </summary>
  public sealed partial class TableLocation : pb::IMessage<TableLocation> {
    private static readonly pb::MessageParser<TableLocation> _parser = new pb::MessageParser<TableLocation>(() => new TableLocation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TableLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableLocation(TableLocation other) : this() {
      rowIndex_ = other.rowIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableLocation Clone() {
      return new TableLocation(this);
    }

    /// <summary>Field number for the "row_index" field.</summary>
    public const int RowIndexFieldNumber = 1;
    private long rowIndex_;
    /// <summary>
    /// The zero-based index of the row where the finding is located.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RowIndex {
      get { return rowIndex_; }
      set {
        rowIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TableLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TableLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowIndex != other.RowIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowIndex != 0L) hash ^= RowIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowIndex != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RowIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RowIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TableLocation other) {
      if (other == null) {
        return;
      }
      if (other.RowIndex != 0L) {
        RowIndex = other.RowIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RowIndex = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Generic half-open interval [start, end)
  /// </summary>
  public sealed partial class Range : pb::IMessage<Range> {
    private static readonly pb::MessageParser<Range> _parser = new pb::MessageParser<Range>(() => new Range());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Range> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Range() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Range(Range other) : this() {
      start_ = other.start_;
      end_ = other.end_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Range Clone() {
      return new Range(this);
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 1;
    private long start_;
    /// <summary>
    /// Index of the first character of the range (inclusive).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 2;
    private long end_;
    /// <summary>
    /// Index of the last character of the range (exclusive).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Range);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Range other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0L) hash ^= Start.GetHashCode();
      if (End != 0L) hash ^= End.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Start);
      }
      if (End != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(End);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Start);
      }
      if (End != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(End);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Range other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0L) {
        Start = other.Start;
      }
      if (other.End != 0L) {
        End = other.End;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Start = input.ReadInt64();
            break;
          }
          case 16: {
            End = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Bounding box encompassing detected text within an image.
  /// </summary>
  public sealed partial class ImageLocation : pb::IMessage<ImageLocation> {
    private static readonly pb::MessageParser<ImageLocation> _parser = new pb::MessageParser<ImageLocation>(() => new ImageLocation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageLocation(ImageLocation other) : this() {
      top_ = other.top_;
      left_ = other.left_;
      width_ = other.width_;
      height_ = other.height_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageLocation Clone() {
      return new ImageLocation(this);
    }

    /// <summary>Field number for the "top" field.</summary>
    public const int TopFieldNumber = 1;
    private int top_;
    /// <summary>
    /// Top coordinate of the bounding box. (0,0) is upper left.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Top {
      get { return top_; }
      set {
        top_ = value;
      }
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 2;
    private int left_;
    /// <summary>
    /// Left coordinate of the bounding box. (0,0) is upper left.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private int width_;
    /// <summary>
    /// Width of the bounding box in pixels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 4;
    private int height_;
    /// <summary>
    /// Height of the bounding box in pixels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Top != other.Top) return false;
      if (Left != other.Left) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Top != 0) hash ^= Top.GetHashCode();
      if (Left != 0) hash ^= Left.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Top != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Top);
      }
      if (Left != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Left);
      }
      if (Width != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Height);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Top != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Top);
      }
      if (Left != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Left);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageLocation other) {
      if (other == null) {
        return;
      }
      if (other.Top != 0) {
        Top = other.Top;
      }
      if (other.Left != 0) {
        Left = other.Left;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Top = input.ReadInt32();
            break;
          }
          case 16: {
            Left = input.ReadInt32();
            break;
          }
          case 24: {
            Width = input.ReadInt32();
            break;
          }
          case 32: {
            Height = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to search for potentially sensitive info in a list of items
  /// and replace it with a default or provided content.
  /// </summary>
  public sealed partial class RedactContentRequest : pb::IMessage<RedactContentRequest> {
    private static readonly pb::MessageParser<RedactContentRequest> _parser = new pb::MessageParser<RedactContentRequest>(() => new RedactContentRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedactContentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedactContentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedactContentRequest(RedactContentRequest other) : this() {
      InspectConfig = other.inspectConfig_ != null ? other.InspectConfig.Clone() : null;
      items_ = other.items_.Clone();
      replaceConfigs_ = other.replaceConfigs_.Clone();
      imageRedactionConfigs_ = other.imageRedactionConfigs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedactContentRequest Clone() {
      return new RedactContentRequest(this);
    }

    /// <summary>Field number for the "inspect_config" field.</summary>
    public const int InspectConfigFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.InspectConfig inspectConfig_;
    /// <summary>
    /// Configuration for the inspector.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.InspectConfig InspectConfig {
      get { return inspectConfig_; }
      set {
        inspectConfig_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.ContentItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Dlp.V2Beta1.ContentItem.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ContentItem> items_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ContentItem>();
    /// <summary>
    /// The list of items to inspect. Up to 100 are allowed per request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ContentItem> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "replace_configs" field.</summary>
    public const int ReplaceConfigsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ReplaceConfig> _repeated_replaceConfigs_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ReplaceConfig.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ReplaceConfig> replaceConfigs_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ReplaceConfig>();
    /// <summary>
    /// The strings to replace findings text findings with. Must specify at least
    /// one of these or one ImageRedactionConfig if redacting images.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ReplaceConfig> ReplaceConfigs {
      get { return replaceConfigs_; }
    }

    /// <summary>Field number for the "image_redaction_configs" field.</summary>
    public const int ImageRedactionConfigsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ImageRedactionConfig> _repeated_imageRedactionConfigs_codec
        = pb::FieldCodec.ForMessage(34, global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ImageRedactionConfig.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ImageRedactionConfig> imageRedactionConfigs_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ImageRedactionConfig>();
    /// <summary>
    /// The configuration for specifying what content to redact from images.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ImageRedactionConfig> ImageRedactionConfigs {
      get { return imageRedactionConfigs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedactContentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedactContentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InspectConfig, other.InspectConfig)) return false;
      if(!items_.Equals(other.items_)) return false;
      if(!replaceConfigs_.Equals(other.replaceConfigs_)) return false;
      if(!imageRedactionConfigs_.Equals(other.imageRedactionConfigs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (inspectConfig_ != null) hash ^= InspectConfig.GetHashCode();
      hash ^= items_.GetHashCode();
      hash ^= replaceConfigs_.GetHashCode();
      hash ^= imageRedactionConfigs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (inspectConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InspectConfig);
      }
      items_.WriteTo(output, _repeated_items_codec);
      replaceConfigs_.WriteTo(output, _repeated_replaceConfigs_codec);
      imageRedactionConfigs_.WriteTo(output, _repeated_imageRedactionConfigs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (inspectConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InspectConfig);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      size += replaceConfigs_.CalculateSize(_repeated_replaceConfigs_codec);
      size += imageRedactionConfigs_.CalculateSize(_repeated_imageRedactionConfigs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedactContentRequest other) {
      if (other == null) {
        return;
      }
      if (other.inspectConfig_ != null) {
        if (inspectConfig_ == null) {
          inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta1.InspectConfig();
        }
        InspectConfig.MergeFrom(other.InspectConfig);
      }
      items_.Add(other.items_);
      replaceConfigs_.Add(other.replaceConfigs_);
      imageRedactionConfigs_.Add(other.imageRedactionConfigs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (inspectConfig_ == null) {
              inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta1.InspectConfig();
            }
            input.ReadMessage(inspectConfig_);
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 26: {
            replaceConfigs_.AddEntriesFrom(input, _repeated_replaceConfigs_codec);
            break;
          }
          case 34: {
            imageRedactionConfigs_.AddEntriesFrom(input, _repeated_imageRedactionConfigs_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RedactContentRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ReplaceConfig : pb::IMessage<ReplaceConfig> {
        private static readonly pb::MessageParser<ReplaceConfig> _parser = new pb::MessageParser<ReplaceConfig>(() => new ReplaceConfig());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ReplaceConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReplaceConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReplaceConfig(ReplaceConfig other) : this() {
          InfoType = other.infoType_ != null ? other.InfoType.Clone() : null;
          replaceWith_ = other.replaceWith_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReplaceConfig Clone() {
          return new ReplaceConfig(this);
        }

        /// <summary>Field number for the "info_type" field.</summary>
        public const int InfoTypeFieldNumber = 1;
        private global::Google.Cloud.Dlp.V2Beta1.InfoType infoType_;
        /// <summary>
        /// Type of information to replace. Only one ReplaceConfig per info_type
        /// should be provided. If ReplaceConfig does not have an info_type, the DLP
        /// API matches it against all info_types that are found but not specified in
        /// another ReplaceConfig.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta1.InfoType InfoType {
          get { return infoType_; }
          set {
            infoType_ = value;
          }
        }

        /// <summary>Field number for the "replace_with" field.</summary>
        public const int ReplaceWithFieldNumber = 2;
        private string replaceWith_ = "";
        /// <summary>
        /// Content replacing sensitive information of given type. Max 256 chars.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ReplaceWith {
          get { return replaceWith_; }
          set {
            replaceWith_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ReplaceConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ReplaceConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(InfoType, other.InfoType)) return false;
          if (ReplaceWith != other.ReplaceWith) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (infoType_ != null) hash ^= InfoType.GetHashCode();
          if (ReplaceWith.Length != 0) hash ^= ReplaceWith.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (infoType_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(InfoType);
          }
          if (ReplaceWith.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ReplaceWith);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (infoType_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoType);
          }
          if (ReplaceWith.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ReplaceWith);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ReplaceConfig other) {
          if (other == null) {
            return;
          }
          if (other.infoType_ != null) {
            if (infoType_ == null) {
              infoType_ = new global::Google.Cloud.Dlp.V2Beta1.InfoType();
            }
            InfoType.MergeFrom(other.InfoType);
          }
          if (other.ReplaceWith.Length != 0) {
            ReplaceWith = other.ReplaceWith;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (infoType_ == null) {
                  infoType_ = new global::Google.Cloud.Dlp.V2Beta1.InfoType();
                }
                input.ReadMessage(infoType_);
                break;
              }
              case 18: {
                ReplaceWith = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Configuration for determining how redaction of images should occur.
      /// </summary>
      public sealed partial class ImageRedactionConfig : pb::IMessage<ImageRedactionConfig> {
        private static readonly pb::MessageParser<ImageRedactionConfig> _parser = new pb::MessageParser<ImageRedactionConfig>(() => new ImageRedactionConfig());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ImageRedactionConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageRedactionConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageRedactionConfig(ImageRedactionConfig other) : this() {
          RedactionColor = other.redactionColor_ != null ? other.RedactionColor.Clone() : null;
          switch (other.TargetCase) {
            case TargetOneofCase.InfoType:
              InfoType = other.InfoType.Clone();
              break;
            case TargetOneofCase.RedactAllText:
              RedactAllText = other.RedactAllText;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageRedactionConfig Clone() {
          return new ImageRedactionConfig(this);
        }

        /// <summary>Field number for the "info_type" field.</summary>
        public const int InfoTypeFieldNumber = 1;
        /// <summary>
        /// Only one per info_type should be provided per request. If not
        /// specified, and redact_all_text is false, the DLP API will redact all
        /// text that it matches against all info_types that are found, but not
        /// specified in another ImageRedactionConfig.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta1.InfoType InfoType {
          get { return targetCase_ == TargetOneofCase.InfoType ? (global::Google.Cloud.Dlp.V2Beta1.InfoType) target_ : null; }
          set {
            target_ = value;
            targetCase_ = value == null ? TargetOneofCase.None : TargetOneofCase.InfoType;
          }
        }

        /// <summary>Field number for the "redact_all_text" field.</summary>
        public const int RedactAllTextFieldNumber = 2;
        /// <summary>
        /// If true, all text found in the image, regardless whether it matches an
        /// info_type, is redacted.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool RedactAllText {
          get { return targetCase_ == TargetOneofCase.RedactAllText ? (bool) target_ : false; }
          set {
            target_ = value;
            targetCase_ = TargetOneofCase.RedactAllText;
          }
        }

        /// <summary>Field number for the "redaction_color" field.</summary>
        public const int RedactionColorFieldNumber = 3;
        private global::Google.Cloud.Dlp.V2Beta1.Color redactionColor_;
        /// <summary>
        /// The color to use when redacting content from an image. If not specified,
        /// the default is black.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta1.Color RedactionColor {
          get { return redactionColor_; }
          set {
            redactionColor_ = value;
          }
        }

        private object target_;
        /// <summary>Enum of possible cases for the "target" oneof.</summary>
        public enum TargetOneofCase {
          None = 0,
          InfoType = 1,
          RedactAllText = 2,
        }
        private TargetOneofCase targetCase_ = TargetOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TargetOneofCase TargetCase {
          get { return targetCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTarget() {
          targetCase_ = TargetOneofCase.None;
          target_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ImageRedactionConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ImageRedactionConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(InfoType, other.InfoType)) return false;
          if (RedactAllText != other.RedactAllText) return false;
          if (!object.Equals(RedactionColor, other.RedactionColor)) return false;
          if (TargetCase != other.TargetCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (targetCase_ == TargetOneofCase.InfoType) hash ^= InfoType.GetHashCode();
          if (targetCase_ == TargetOneofCase.RedactAllText) hash ^= RedactAllText.GetHashCode();
          if (redactionColor_ != null) hash ^= RedactionColor.GetHashCode();
          hash ^= (int) targetCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (targetCase_ == TargetOneofCase.InfoType) {
            output.WriteRawTag(10);
            output.WriteMessage(InfoType);
          }
          if (targetCase_ == TargetOneofCase.RedactAllText) {
            output.WriteRawTag(16);
            output.WriteBool(RedactAllText);
          }
          if (redactionColor_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(RedactionColor);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (targetCase_ == TargetOneofCase.InfoType) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoType);
          }
          if (targetCase_ == TargetOneofCase.RedactAllText) {
            size += 1 + 1;
          }
          if (redactionColor_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedactionColor);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ImageRedactionConfig other) {
          if (other == null) {
            return;
          }
          if (other.redactionColor_ != null) {
            if (redactionColor_ == null) {
              redactionColor_ = new global::Google.Cloud.Dlp.V2Beta1.Color();
            }
            RedactionColor.MergeFrom(other.RedactionColor);
          }
          switch (other.TargetCase) {
            case TargetOneofCase.InfoType:
              InfoType = other.InfoType;
              break;
            case TargetOneofCase.RedactAllText:
              RedactAllText = other.RedactAllText;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                global::Google.Cloud.Dlp.V2Beta1.InfoType subBuilder = new global::Google.Cloud.Dlp.V2Beta1.InfoType();
                if (targetCase_ == TargetOneofCase.InfoType) {
                  subBuilder.MergeFrom(InfoType);
                }
                input.ReadMessage(subBuilder);
                InfoType = subBuilder;
                break;
              }
              case 16: {
                RedactAllText = input.ReadBool();
                break;
              }
              case 26: {
                if (redactionColor_ == null) {
                  redactionColor_ = new global::Google.Cloud.Dlp.V2Beta1.Color();
                }
                input.ReadMessage(redactionColor_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Represents a color in the RGB color space.
  /// </summary>
  public sealed partial class Color : pb::IMessage<Color> {
    private static readonly pb::MessageParser<Color> _parser = new pb::MessageParser<Color>(() => new Color());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Color> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color(Color other) : this() {
      red_ = other.red_;
      green_ = other.green_;
      blue_ = other.blue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color Clone() {
      return new Color(this);
    }

    /// <summary>Field number for the "red" field.</summary>
    public const int RedFieldNumber = 1;
    private float red_;
    /// <summary>
    /// The amount of red in the color as a value in the interval [0, 1].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Red {
      get { return red_; }
      set {
        red_ = value;
      }
    }

    /// <summary>Field number for the "green" field.</summary>
    public const int GreenFieldNumber = 2;
    private float green_;
    /// <summary>
    /// The amount of green in the color as a value in the interval [0, 1].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Green {
      get { return green_; }
      set {
        green_ = value;
      }
    }

    /// <summary>Field number for the "blue" field.</summary>
    public const int BlueFieldNumber = 3;
    private float blue_;
    /// <summary>
    /// The amount of blue in the color as a value in the interval [0, 1].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Blue {
      get { return blue_; }
      set {
        blue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Color);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Color other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Red != other.Red) return false;
      if (Green != other.Green) return false;
      if (Blue != other.Blue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Red != 0F) hash ^= Red.GetHashCode();
      if (Green != 0F) hash ^= Green.GetHashCode();
      if (Blue != 0F) hash ^= Blue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Red != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Red);
      }
      if (Green != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Green);
      }
      if (Blue != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Blue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Red != 0F) {
        size += 1 + 4;
      }
      if (Green != 0F) {
        size += 1 + 4;
      }
      if (Blue != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Color other) {
      if (other == null) {
        return;
      }
      if (other.Red != 0F) {
        Red = other.Red;
      }
      if (other.Green != 0F) {
        Green = other.Green;
      }
      if (other.Blue != 0F) {
        Blue = other.Blue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Red = input.ReadFloat();
            break;
          }
          case 21: {
            Green = input.ReadFloat();
            break;
          }
          case 29: {
            Blue = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Results of redacting a list of items.
  /// </summary>
  public sealed partial class RedactContentResponse : pb::IMessage<RedactContentResponse> {
    private static readonly pb::MessageParser<RedactContentResponse> _parser = new pb::MessageParser<RedactContentResponse>(() => new RedactContentResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedactContentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedactContentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedactContentResponse(RedactContentResponse other) : this() {
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedactContentResponse Clone() {
      return new RedactContentResponse(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.ContentItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.ContentItem.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ContentItem> items_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ContentItem>();
    /// <summary>
    /// The redacted content.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ContentItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedactContentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedactContentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedactContentResponse other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to de-identify a list of items.
  /// </summary>
  public sealed partial class DeidentifyContentRequest : pb::IMessage<DeidentifyContentRequest> {
    private static readonly pb::MessageParser<DeidentifyContentRequest> _parser = new pb::MessageParser<DeidentifyContentRequest>(() => new DeidentifyContentRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeidentifyContentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeidentifyContentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeidentifyContentRequest(DeidentifyContentRequest other) : this() {
      DeidentifyConfig = other.deidentifyConfig_ != null ? other.DeidentifyConfig.Clone() : null;
      InspectConfig = other.inspectConfig_ != null ? other.InspectConfig.Clone() : null;
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeidentifyContentRequest Clone() {
      return new DeidentifyContentRequest(this);
    }

    /// <summary>Field number for the "deidentify_config" field.</summary>
    public const int DeidentifyConfigFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.DeidentifyConfig deidentifyConfig_;
    /// <summary>
    /// Configuration for the de-identification of the list of content items.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.DeidentifyConfig DeidentifyConfig {
      get { return deidentifyConfig_; }
      set {
        deidentifyConfig_ = value;
      }
    }

    /// <summary>Field number for the "inspect_config" field.</summary>
    public const int InspectConfigFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta1.InspectConfig inspectConfig_;
    /// <summary>
    /// Configuration for the inspector.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.InspectConfig InspectConfig {
      get { return inspectConfig_; }
      set {
        inspectConfig_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.ContentItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Dlp.V2Beta1.ContentItem.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ContentItem> items_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ContentItem>();
    /// <summary>
    /// The list of items to inspect. Up to 100 are allowed per request.
    /// All items will be treated as text/*.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ContentItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeidentifyContentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeidentifyContentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DeidentifyConfig, other.DeidentifyConfig)) return false;
      if (!object.Equals(InspectConfig, other.InspectConfig)) return false;
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (deidentifyConfig_ != null) hash ^= DeidentifyConfig.GetHashCode();
      if (inspectConfig_ != null) hash ^= InspectConfig.GetHashCode();
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (deidentifyConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DeidentifyConfig);
      }
      if (inspectConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(InspectConfig);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (deidentifyConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeidentifyConfig);
      }
      if (inspectConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InspectConfig);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeidentifyContentRequest other) {
      if (other == null) {
        return;
      }
      if (other.deidentifyConfig_ != null) {
        if (deidentifyConfig_ == null) {
          deidentifyConfig_ = new global::Google.Cloud.Dlp.V2Beta1.DeidentifyConfig();
        }
        DeidentifyConfig.MergeFrom(other.DeidentifyConfig);
      }
      if (other.inspectConfig_ != null) {
        if (inspectConfig_ == null) {
          inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta1.InspectConfig();
        }
        InspectConfig.MergeFrom(other.InspectConfig);
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (deidentifyConfig_ == null) {
              deidentifyConfig_ = new global::Google.Cloud.Dlp.V2Beta1.DeidentifyConfig();
            }
            input.ReadMessage(deidentifyConfig_);
            break;
          }
          case 18: {
            if (inspectConfig_ == null) {
              inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta1.InspectConfig();
            }
            input.ReadMessage(inspectConfig_);
            break;
          }
          case 26: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Results of de-identifying a list of items.
  /// </summary>
  public sealed partial class DeidentifyContentResponse : pb::IMessage<DeidentifyContentResponse> {
    private static readonly pb::MessageParser<DeidentifyContentResponse> _parser = new pb::MessageParser<DeidentifyContentResponse>(() => new DeidentifyContentResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeidentifyContentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeidentifyContentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeidentifyContentResponse(DeidentifyContentResponse other) : this() {
      items_ = other.items_.Clone();
      summaries_ = other.summaries_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeidentifyContentResponse Clone() {
      return new DeidentifyContentResponse(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.ContentItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.ContentItem.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ContentItem> items_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ContentItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ContentItem> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "summaries" field.</summary>
    public const int SummariesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.DeidentificationSummary> _repeated_summaries_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Dlp.V2Beta1.DeidentificationSummary.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.DeidentificationSummary> summaries_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.DeidentificationSummary>();
    /// <summary>
    /// A review of the transformations that took place for each item.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.DeidentificationSummary> Summaries {
      get { return summaries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeidentifyContentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeidentifyContentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      if(!summaries_.Equals(other.summaries_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      hash ^= summaries_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      summaries_.WriteTo(output, _repeated_summaries_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      size += summaries_.CalculateSize(_repeated_summaries_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeidentifyContentResponse other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      summaries_.Add(other.summaries_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 18: {
            summaries_.AddEntriesFrom(input, _repeated_summaries_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to search for potentially sensitive info in a list of items.
  /// </summary>
  public sealed partial class InspectContentRequest : pb::IMessage<InspectContentRequest> {
    private static readonly pb::MessageParser<InspectContentRequest> _parser = new pb::MessageParser<InspectContentRequest>(() => new InspectContentRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InspectContentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectContentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectContentRequest(InspectContentRequest other) : this() {
      InspectConfig = other.inspectConfig_ != null ? other.InspectConfig.Clone() : null;
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectContentRequest Clone() {
      return new InspectContentRequest(this);
    }

    /// <summary>Field number for the "inspect_config" field.</summary>
    public const int InspectConfigFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.InspectConfig inspectConfig_;
    /// <summary>
    /// Configuration for the inspector.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.InspectConfig InspectConfig {
      get { return inspectConfig_; }
      set {
        inspectConfig_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.ContentItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Dlp.V2Beta1.ContentItem.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ContentItem> items_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ContentItem>();
    /// <summary>
    /// The list of items to inspect. Items in a single request are
    /// considered "related" unless inspect_config.independent_inputs is true.
    /// Up to 100 are allowed per request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ContentItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InspectContentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InspectContentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InspectConfig, other.InspectConfig)) return false;
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (inspectConfig_ != null) hash ^= InspectConfig.GetHashCode();
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (inspectConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InspectConfig);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (inspectConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InspectConfig);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InspectContentRequest other) {
      if (other == null) {
        return;
      }
      if (other.inspectConfig_ != null) {
        if (inspectConfig_ == null) {
          inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta1.InspectConfig();
        }
        InspectConfig.MergeFrom(other.InspectConfig);
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (inspectConfig_ == null) {
              inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta1.InspectConfig();
            }
            input.ReadMessage(inspectConfig_);
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Results of inspecting a list of items.
  /// </summary>
  public sealed partial class InspectContentResponse : pb::IMessage<InspectContentResponse> {
    private static readonly pb::MessageParser<InspectContentResponse> _parser = new pb::MessageParser<InspectContentResponse>(() => new InspectContentResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InspectContentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectContentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectContentResponse(InspectContentResponse other) : this() {
      results_ = other.results_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectContentResponse Clone() {
      return new InspectContentResponse(this);
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.InspectResult> _repeated_results_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.InspectResult.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InspectResult> results_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InspectResult>();
    /// <summary>
    /// Each content_item from the request has a result in this list, in the
    /// same order as the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InspectResult> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InspectContentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InspectContentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!results_.Equals(other.results_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= results_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      results_.WriteTo(output, _repeated_results_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InspectContentResponse other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request for scheduling a scan of a data subset from a Google Platform data
  /// repository.
  /// </summary>
  public sealed partial class CreateInspectOperationRequest : pb::IMessage<CreateInspectOperationRequest> {
    private static readonly pb::MessageParser<CreateInspectOperationRequest> _parser = new pb::MessageParser<CreateInspectOperationRequest>(() => new CreateInspectOperationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateInspectOperationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInspectOperationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInspectOperationRequest(CreateInspectOperationRequest other) : this() {
      InspectConfig = other.inspectConfig_ != null ? other.InspectConfig.Clone() : null;
      StorageConfig = other.storageConfig_ != null ? other.StorageConfig.Clone() : null;
      OutputConfig = other.outputConfig_ != null ? other.OutputConfig.Clone() : null;
      OperationConfig = other.operationConfig_ != null ? other.OperationConfig.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInspectOperationRequest Clone() {
      return new CreateInspectOperationRequest(this);
    }

    /// <summary>Field number for the "inspect_config" field.</summary>
    public const int InspectConfigFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.InspectConfig inspectConfig_;
    /// <summary>
    /// Configuration for the inspector.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.InspectConfig InspectConfig {
      get { return inspectConfig_; }
      set {
        inspectConfig_ = value;
      }
    }

    /// <summary>Field number for the "storage_config" field.</summary>
    public const int StorageConfigFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta1.StorageConfig storageConfig_;
    /// <summary>
    /// Specification of the data set to process.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.StorageConfig StorageConfig {
      get { return storageConfig_; }
      set {
        storageConfig_ = value;
      }
    }

    /// <summary>Field number for the "output_config" field.</summary>
    public const int OutputConfigFieldNumber = 3;
    private global::Google.Cloud.Dlp.V2Beta1.OutputStorageConfig outputConfig_;
    /// <summary>
    /// Optional location to store findings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.OutputStorageConfig OutputConfig {
      get { return outputConfig_; }
      set {
        outputConfig_ = value;
      }
    }

    /// <summary>Field number for the "operation_config" field.</summary>
    public const int OperationConfigFieldNumber = 5;
    private global::Google.Cloud.Dlp.V2Beta1.OperationConfig operationConfig_;
    /// <summary>
    /// Additional configuration settings for long running operations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.OperationConfig OperationConfig {
      get { return operationConfig_; }
      set {
        operationConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateInspectOperationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateInspectOperationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InspectConfig, other.InspectConfig)) return false;
      if (!object.Equals(StorageConfig, other.StorageConfig)) return false;
      if (!object.Equals(OutputConfig, other.OutputConfig)) return false;
      if (!object.Equals(OperationConfig, other.OperationConfig)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (inspectConfig_ != null) hash ^= InspectConfig.GetHashCode();
      if (storageConfig_ != null) hash ^= StorageConfig.GetHashCode();
      if (outputConfig_ != null) hash ^= OutputConfig.GetHashCode();
      if (operationConfig_ != null) hash ^= OperationConfig.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (inspectConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InspectConfig);
      }
      if (storageConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StorageConfig);
      }
      if (outputConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(OutputConfig);
      }
      if (operationConfig_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(OperationConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (inspectConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InspectConfig);
      }
      if (storageConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StorageConfig);
      }
      if (outputConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputConfig);
      }
      if (operationConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OperationConfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateInspectOperationRequest other) {
      if (other == null) {
        return;
      }
      if (other.inspectConfig_ != null) {
        if (inspectConfig_ == null) {
          inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta1.InspectConfig();
        }
        InspectConfig.MergeFrom(other.InspectConfig);
      }
      if (other.storageConfig_ != null) {
        if (storageConfig_ == null) {
          storageConfig_ = new global::Google.Cloud.Dlp.V2Beta1.StorageConfig();
        }
        StorageConfig.MergeFrom(other.StorageConfig);
      }
      if (other.outputConfig_ != null) {
        if (outputConfig_ == null) {
          outputConfig_ = new global::Google.Cloud.Dlp.V2Beta1.OutputStorageConfig();
        }
        OutputConfig.MergeFrom(other.OutputConfig);
      }
      if (other.operationConfig_ != null) {
        if (operationConfig_ == null) {
          operationConfig_ = new global::Google.Cloud.Dlp.V2Beta1.OperationConfig();
        }
        OperationConfig.MergeFrom(other.OperationConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (inspectConfig_ == null) {
              inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta1.InspectConfig();
            }
            input.ReadMessage(inspectConfig_);
            break;
          }
          case 18: {
            if (storageConfig_ == null) {
              storageConfig_ = new global::Google.Cloud.Dlp.V2Beta1.StorageConfig();
            }
            input.ReadMessage(storageConfig_);
            break;
          }
          case 26: {
            if (outputConfig_ == null) {
              outputConfig_ = new global::Google.Cloud.Dlp.V2Beta1.OutputStorageConfig();
            }
            input.ReadMessage(outputConfig_);
            break;
          }
          case 42: {
            if (operationConfig_ == null) {
              operationConfig_ = new global::Google.Cloud.Dlp.V2Beta1.OperationConfig();
            }
            input.ReadMessage(operationConfig_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Cloud repository for storing output.
  /// </summary>
  public sealed partial class OutputStorageConfig : pb::IMessage<OutputStorageConfig> {
    private static readonly pb::MessageParser<OutputStorageConfig> _parser = new pb::MessageParser<OutputStorageConfig>(() => new OutputStorageConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutputStorageConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputStorageConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputStorageConfig(OutputStorageConfig other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.Table:
          Table = other.Table.Clone();
          break;
        case TypeOneofCase.StoragePath:
          StoragePath = other.StoragePath.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputStorageConfig Clone() {
      return new OutputStorageConfig(this);
    }

    /// <summary>Field number for the "table" field.</summary>
    public const int TableFieldNumber = 1;
    /// <summary>
    /// Store findings in a new table in the dataset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.BigQueryTable Table {
      get { return typeCase_ == TypeOneofCase.Table ? (global::Google.Cloud.Dlp.V2Beta1.BigQueryTable) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Table;
      }
    }

    /// <summary>Field number for the "storage_path" field.</summary>
    public const int StoragePathFieldNumber = 2;
    /// <summary>
    /// The path to a Google Cloud Storage location to store output.
    /// The bucket must already exist and
    /// the Google APIs service account for DLP must have write permission to
    /// write to the given bucket.
    /// Results are split over multiple csv files with each file name matching
    /// the pattern "[operation_id]_[count].csv", for example
    /// `3094877188788974909_1.csv`. The `operation_id` matches the
    /// identifier for the Operation, and the `count` is a counter used for
    /// tracking the number of files written.
    ///
    /// The CSV file(s) contain the following columns regardless of storage type
    /// scanned:
    /// - id
    /// - info_type
    /// - likelihood
    /// - byte size of finding
    /// - quote
    /// - timestamp
    ///
    /// For Cloud Storage the next columns are:
    ///
    /// - file_path
    /// - start_offset
    ///
    /// For Cloud Datastore the next columns are:
    ///
    /// - project_id
    /// - namespace_id
    /// - path
    /// - column_name
    /// - offset
    ///
    /// For BigQuery the next columns are:
    ///
    /// - row_number
    /// - project_id
    /// - dataset_id
    /// - table_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.CloudStoragePath StoragePath {
      get { return typeCase_ == TypeOneofCase.StoragePath ? (global::Google.Cloud.Dlp.V2Beta1.CloudStoragePath) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.StoragePath;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Table = 1,
      StoragePath = 2,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OutputStorageConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutputStorageConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Table, other.Table)) return false;
      if (!object.Equals(StoragePath, other.StoragePath)) return false;
      if (TypeCase != other.TypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.Table) hash ^= Table.GetHashCode();
      if (typeCase_ == TypeOneofCase.StoragePath) hash ^= StoragePath.GetHashCode();
      hash ^= (int) typeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.Table) {
        output.WriteRawTag(10);
        output.WriteMessage(Table);
      }
      if (typeCase_ == TypeOneofCase.StoragePath) {
        output.WriteRawTag(18);
        output.WriteMessage(StoragePath);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.Table) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Table);
      }
      if (typeCase_ == TypeOneofCase.StoragePath) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StoragePath);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutputStorageConfig other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Table:
          Table = other.Table;
          break;
        case TypeOneofCase.StoragePath:
          StoragePath = other.StoragePath;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Cloud.Dlp.V2Beta1.BigQueryTable subBuilder = new global::Google.Cloud.Dlp.V2Beta1.BigQueryTable();
            if (typeCase_ == TypeOneofCase.Table) {
              subBuilder.MergeFrom(Table);
            }
            input.ReadMessage(subBuilder);
            Table = subBuilder;
            break;
          }
          case 18: {
            global::Google.Cloud.Dlp.V2Beta1.CloudStoragePath subBuilder = new global::Google.Cloud.Dlp.V2Beta1.CloudStoragePath();
            if (typeCase_ == TypeOneofCase.StoragePath) {
              subBuilder.MergeFrom(StoragePath);
            }
            input.ReadMessage(subBuilder);
            StoragePath = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Statistics regarding a specific InfoType.
  /// </summary>
  public sealed partial class InfoTypeStatistics : pb::IMessage<InfoTypeStatistics> {
    private static readonly pb::MessageParser<InfoTypeStatistics> _parser = new pb::MessageParser<InfoTypeStatistics>(() => new InfoTypeStatistics());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InfoTypeStatistics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTypeStatistics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTypeStatistics(InfoTypeStatistics other) : this() {
      InfoType = other.infoType_ != null ? other.InfoType.Clone() : null;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTypeStatistics Clone() {
      return new InfoTypeStatistics(this);
    }

    /// <summary>Field number for the "info_type" field.</summary>
    public const int InfoTypeFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.InfoType infoType_;
    /// <summary>
    /// The type of finding this stat is for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.InfoType InfoType {
      get { return infoType_; }
      set {
        infoType_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private long count_;
    /// <summary>
    /// Number of findings for this info type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InfoTypeStatistics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InfoTypeStatistics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InfoType, other.InfoType)) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (infoType_ != null) hash ^= InfoType.GetHashCode();
      if (Count != 0L) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (infoType_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InfoType);
      }
      if (Count != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (infoType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoType);
      }
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InfoTypeStatistics other) {
      if (other == null) {
        return;
      }
      if (other.infoType_ != null) {
        if (infoType_ == null) {
          infoType_ = new global::Google.Cloud.Dlp.V2Beta1.InfoType();
        }
        InfoType.MergeFrom(other.InfoType);
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (infoType_ == null) {
              infoType_ = new global::Google.Cloud.Dlp.V2Beta1.InfoType();
            }
            input.ReadMessage(infoType_);
            break;
          }
          case 16: {
            Count = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Metadata returned within GetOperation for an inspect request.
  /// </summary>
  public sealed partial class InspectOperationMetadata : pb::IMessage<InspectOperationMetadata> {
    private static readonly pb::MessageParser<InspectOperationMetadata> _parser = new pb::MessageParser<InspectOperationMetadata>(() => new InspectOperationMetadata());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InspectOperationMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectOperationMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectOperationMetadata(InspectOperationMetadata other) : this() {
      processedBytes_ = other.processedBytes_;
      totalEstimatedBytes_ = other.totalEstimatedBytes_;
      infoTypeStats_ = other.infoTypeStats_.Clone();
      CreateTime = other.createTime_ != null ? other.CreateTime.Clone() : null;
      RequestInspectConfig = other.requestInspectConfig_ != null ? other.RequestInspectConfig.Clone() : null;
      RequestStorageConfig = other.requestStorageConfig_ != null ? other.RequestStorageConfig.Clone() : null;
      RequestOutputConfig = other.requestOutputConfig_ != null ? other.RequestOutputConfig.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectOperationMetadata Clone() {
      return new InspectOperationMetadata(this);
    }

    /// <summary>Field number for the "processed_bytes" field.</summary>
    public const int ProcessedBytesFieldNumber = 1;
    private long processedBytes_;
    /// <summary>
    /// Total size in bytes that were processed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProcessedBytes {
      get { return processedBytes_; }
      set {
        processedBytes_ = value;
      }
    }

    /// <summary>Field number for the "total_estimated_bytes" field.</summary>
    public const int TotalEstimatedBytesFieldNumber = 4;
    private long totalEstimatedBytes_;
    /// <summary>
    /// Estimate of the number of bytes to process.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalEstimatedBytes {
      get { return totalEstimatedBytes_; }
      set {
        totalEstimatedBytes_ = value;
      }
    }

    /// <summary>Field number for the "info_type_stats" field.</summary>
    public const int InfoTypeStatsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.InfoTypeStatistics> _repeated_infoTypeStats_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Dlp.V2Beta1.InfoTypeStatistics.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InfoTypeStatistics> infoTypeStats_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InfoTypeStatistics>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InfoTypeStatistics> InfoTypeStats {
      get { return infoTypeStats_; }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// The time which this request was started.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "request_inspect_config" field.</summary>
    public const int RequestInspectConfigFieldNumber = 5;
    private global::Google.Cloud.Dlp.V2Beta1.InspectConfig requestInspectConfig_;
    /// <summary>
    /// The inspect config used to create the Operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.InspectConfig RequestInspectConfig {
      get { return requestInspectConfig_; }
      set {
        requestInspectConfig_ = value;
      }
    }

    /// <summary>Field number for the "request_storage_config" field.</summary>
    public const int RequestStorageConfigFieldNumber = 6;
    private global::Google.Cloud.Dlp.V2Beta1.StorageConfig requestStorageConfig_;
    /// <summary>
    /// The storage config used to create the Operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.StorageConfig RequestStorageConfig {
      get { return requestStorageConfig_; }
      set {
        requestStorageConfig_ = value;
      }
    }

    /// <summary>Field number for the "request_output_config" field.</summary>
    public const int RequestOutputConfigFieldNumber = 7;
    private global::Google.Cloud.Dlp.V2Beta1.OutputStorageConfig requestOutputConfig_;
    /// <summary>
    /// Optional location to store findings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.OutputStorageConfig RequestOutputConfig {
      get { return requestOutputConfig_; }
      set {
        requestOutputConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InspectOperationMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InspectOperationMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProcessedBytes != other.ProcessedBytes) return false;
      if (TotalEstimatedBytes != other.TotalEstimatedBytes) return false;
      if(!infoTypeStats_.Equals(other.infoTypeStats_)) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(RequestInspectConfig, other.RequestInspectConfig)) return false;
      if (!object.Equals(RequestStorageConfig, other.RequestStorageConfig)) return false;
      if (!object.Equals(RequestOutputConfig, other.RequestOutputConfig)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProcessedBytes != 0L) hash ^= ProcessedBytes.GetHashCode();
      if (TotalEstimatedBytes != 0L) hash ^= TotalEstimatedBytes.GetHashCode();
      hash ^= infoTypeStats_.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (requestInspectConfig_ != null) hash ^= RequestInspectConfig.GetHashCode();
      if (requestStorageConfig_ != null) hash ^= RequestStorageConfig.GetHashCode();
      if (requestOutputConfig_ != null) hash ^= RequestOutputConfig.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProcessedBytes != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ProcessedBytes);
      }
      infoTypeStats_.WriteTo(output, _repeated_infoTypeStats_codec);
      if (createTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CreateTime);
      }
      if (TotalEstimatedBytes != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalEstimatedBytes);
      }
      if (requestInspectConfig_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RequestInspectConfig);
      }
      if (requestStorageConfig_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RequestStorageConfig);
      }
      if (requestOutputConfig_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(RequestOutputConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProcessedBytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProcessedBytes);
      }
      if (TotalEstimatedBytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalEstimatedBytes);
      }
      size += infoTypeStats_.CalculateSize(_repeated_infoTypeStats_codec);
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (requestInspectConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestInspectConfig);
      }
      if (requestStorageConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestStorageConfig);
      }
      if (requestOutputConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestOutputConfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InspectOperationMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ProcessedBytes != 0L) {
        ProcessedBytes = other.ProcessedBytes;
      }
      if (other.TotalEstimatedBytes != 0L) {
        TotalEstimatedBytes = other.TotalEstimatedBytes;
      }
      infoTypeStats_.Add(other.infoTypeStats_);
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.requestInspectConfig_ != null) {
        if (requestInspectConfig_ == null) {
          requestInspectConfig_ = new global::Google.Cloud.Dlp.V2Beta1.InspectConfig();
        }
        RequestInspectConfig.MergeFrom(other.RequestInspectConfig);
      }
      if (other.requestStorageConfig_ != null) {
        if (requestStorageConfig_ == null) {
          requestStorageConfig_ = new global::Google.Cloud.Dlp.V2Beta1.StorageConfig();
        }
        RequestStorageConfig.MergeFrom(other.RequestStorageConfig);
      }
      if (other.requestOutputConfig_ != null) {
        if (requestOutputConfig_ == null) {
          requestOutputConfig_ = new global::Google.Cloud.Dlp.V2Beta1.OutputStorageConfig();
        }
        RequestOutputConfig.MergeFrom(other.RequestOutputConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ProcessedBytes = input.ReadInt64();
            break;
          }
          case 18: {
            infoTypeStats_.AddEntriesFrom(input, _repeated_infoTypeStats_codec);
            break;
          }
          case 26: {
            if (createTime_ == null) {
              createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(createTime_);
            break;
          }
          case 32: {
            TotalEstimatedBytes = input.ReadInt64();
            break;
          }
          case 42: {
            if (requestInspectConfig_ == null) {
              requestInspectConfig_ = new global::Google.Cloud.Dlp.V2Beta1.InspectConfig();
            }
            input.ReadMessage(requestInspectConfig_);
            break;
          }
          case 50: {
            if (requestStorageConfig_ == null) {
              requestStorageConfig_ = new global::Google.Cloud.Dlp.V2Beta1.StorageConfig();
            }
            input.ReadMessage(requestStorageConfig_);
            break;
          }
          case 58: {
            if (requestOutputConfig_ == null) {
              requestOutputConfig_ = new global::Google.Cloud.Dlp.V2Beta1.OutputStorageConfig();
            }
            input.ReadMessage(requestOutputConfig_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The operational data.
  /// </summary>
  public sealed partial class InspectOperationResult : pb::IMessage<InspectOperationResult> {
    private static readonly pb::MessageParser<InspectOperationResult> _parser = new pb::MessageParser<InspectOperationResult>(() => new InspectOperationResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InspectOperationResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectOperationResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectOperationResult(InspectOperationResult other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectOperationResult Clone() {
      return new InspectOperationResult(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The server-assigned name, which is only unique within the same service that
    /// originally returns it. If you use the default HTTP mapping, the
    /// `name` should have the format of `inspect/results/{id}`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InspectOperationResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InspectOperationResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InspectOperationResult other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request for the list of results in a given inspect operation.
  /// </summary>
  public sealed partial class ListInspectFindingsRequest : pb::IMessage<ListInspectFindingsRequest> {
    private static readonly pb::MessageParser<ListInspectFindingsRequest> _parser = new pb::MessageParser<ListInspectFindingsRequest>(() => new ListInspectFindingsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListInspectFindingsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInspectFindingsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInspectFindingsRequest(ListInspectFindingsRequest other) : this() {
      name_ = other.name_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      filter_ = other.filter_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInspectFindingsRequest Clone() {
      return new ListInspectFindingsRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Identifier of the results set returned as metadata of
    /// the longrunning operation created by a call to InspectDataSource.
    /// Should be in the format of `inspect/results/{id}`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    /// Maximum number of results to return.
    /// If 0, the implementation selects a reasonable value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// The value returned by the last `ListInspectFindingsResponse`; indicates
    /// that this is a continuation of a prior `ListInspectFindings` call, and that
    /// the system should return the next page of data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 4;
    private string filter_ = "";
    /// <summary>
    /// Restricts findings to items that match. Supports info_type and likelihood.
    ///
    /// Examples:
    ///
    /// - info_type=EMAIL_ADDRESS
    /// - info_type=PHONE_NUMBER,EMAIL_ADDRESS
    /// - likelihood=VERY_LIKELY
    /// - likelihood=VERY_LIKELY,LIKELY
    /// - info_type=EMAIL_ADDRESS,likelihood=VERY_LIKELY,LIKELY
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListInspectFindingsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListInspectFindingsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      if (Filter != other.Filter) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Filter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListInspectFindingsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
          case 34: {
            Filter = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response to the ListInspectFindings request.
  /// </summary>
  public sealed partial class ListInspectFindingsResponse : pb::IMessage<ListInspectFindingsResponse> {
    private static readonly pb::MessageParser<ListInspectFindingsResponse> _parser = new pb::MessageParser<ListInspectFindingsResponse>(() => new ListInspectFindingsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListInspectFindingsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInspectFindingsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInspectFindingsResponse(ListInspectFindingsResponse other) : this() {
      Result = other.result_ != null ? other.Result.Clone() : null;
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInspectFindingsResponse Clone() {
      return new ListInspectFindingsResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.InspectResult result_;
    /// <summary>
    /// The results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.InspectResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// If not empty, indicates that there may be more results that match the
    /// request; this value should be passed in a new `ListInspectFindingsRequest`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListInspectFindingsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListInspectFindingsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Result, other.Result)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (result_ != null) hash ^= Result.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (result_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Result);
      }
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListInspectFindingsResponse other) {
      if (other == null) {
        return;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          result_ = new global::Google.Cloud.Dlp.V2Beta1.InspectResult();
        }
        Result.MergeFrom(other.Result);
      }
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (result_ == null) {
              result_ = new global::Google.Cloud.Dlp.V2Beta1.InspectResult();
            }
            input.ReadMessage(result_);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Description of the information type (infoType).
  /// </summary>
  public sealed partial class InfoTypeDescription : pb::IMessage<InfoTypeDescription> {
    private static readonly pb::MessageParser<InfoTypeDescription> _parser = new pb::MessageParser<InfoTypeDescription>(() => new InfoTypeDescription());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InfoTypeDescription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTypeDescription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTypeDescription(InfoTypeDescription other) : this() {
      name_ = other.name_;
      displayName_ = other.displayName_;
      categories_ = other.categories_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTypeDescription Clone() {
      return new InfoTypeDescription(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Internal name of the infoType.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 2;
    private string displayName_ = "";
    /// <summary>
    /// Human readable form of the infoType name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "categories" field.</summary>
    public const int CategoriesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.CategoryDescription> _repeated_categories_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Dlp.V2Beta1.CategoryDescription.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.CategoryDescription> categories_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.CategoryDescription>();
    /// <summary>
    /// List of categories this infoType belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.CategoryDescription> Categories {
      get { return categories_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InfoTypeDescription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InfoTypeDescription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (DisplayName != other.DisplayName) return false;
      if(!categories_.Equals(other.categories_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      hash ^= categories_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayName);
      }
      categories_.WriteTo(output, _repeated_categories_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      size += categories_.CalculateSize(_repeated_categories_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InfoTypeDescription other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      categories_.Add(other.categories_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            DisplayName = input.ReadString();
            break;
          }
          case 26: {
            categories_.AddEntriesFrom(input, _repeated_categories_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request for the list of info types belonging to a given category,
  /// or all supported info types if no category is specified.
  /// </summary>
  public sealed partial class ListInfoTypesRequest : pb::IMessage<ListInfoTypesRequest> {
    private static readonly pb::MessageParser<ListInfoTypesRequest> _parser = new pb::MessageParser<ListInfoTypesRequest>(() => new ListInfoTypesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListInfoTypesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInfoTypesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInfoTypesRequest(ListInfoTypesRequest other) : this() {
      category_ = other.category_;
      languageCode_ = other.languageCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInfoTypesRequest Clone() {
      return new ListInfoTypesRequest(this);
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 1;
    private string category_ = "";
    /// <summary>
    /// Category name as returned by ListRootCategories.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Category {
      get { return category_; }
      set {
        category_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language_code" field.</summary>
    public const int LanguageCodeFieldNumber = 2;
    private string languageCode_ = "";
    /// <summary>
    /// Optional BCP-47 language code for localized info type friendly
    /// names. If omitted, or if localized strings are not available,
    /// en-US strings will be returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LanguageCode {
      get { return languageCode_; }
      set {
        languageCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListInfoTypesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListInfoTypesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Category != other.Category) return false;
      if (LanguageCode != other.LanguageCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Category.Length != 0) hash ^= Category.GetHashCode();
      if (LanguageCode.Length != 0) hash ^= LanguageCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Category.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Category);
      }
      if (LanguageCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LanguageCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Category.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Category);
      }
      if (LanguageCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LanguageCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListInfoTypesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Category.Length != 0) {
        Category = other.Category;
      }
      if (other.LanguageCode.Length != 0) {
        LanguageCode = other.LanguageCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Category = input.ReadString();
            break;
          }
          case 18: {
            LanguageCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response to the ListInfoTypes request.
  /// </summary>
  public sealed partial class ListInfoTypesResponse : pb::IMessage<ListInfoTypesResponse> {
    private static readonly pb::MessageParser<ListInfoTypesResponse> _parser = new pb::MessageParser<ListInfoTypesResponse>(() => new ListInfoTypesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListInfoTypesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInfoTypesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInfoTypesResponse(ListInfoTypesResponse other) : this() {
      infoTypes_ = other.infoTypes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInfoTypesResponse Clone() {
      return new ListInfoTypesResponse(this);
    }

    /// <summary>Field number for the "info_types" field.</summary>
    public const int InfoTypesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.InfoTypeDescription> _repeated_infoTypes_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.InfoTypeDescription.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InfoTypeDescription> infoTypes_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InfoTypeDescription>();
    /// <summary>
    /// Set of sensitive info types belonging to a category.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InfoTypeDescription> InfoTypes {
      get { return infoTypes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListInfoTypesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListInfoTypesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!infoTypes_.Equals(other.infoTypes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= infoTypes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infoTypes_.WriteTo(output, _repeated_infoTypes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infoTypes_.CalculateSize(_repeated_infoTypes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListInfoTypesResponse other) {
      if (other == null) {
        return;
      }
      infoTypes_.Add(other.infoTypes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infoTypes_.AddEntriesFrom(input, _repeated_infoTypes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Info Type Category description.
  /// </summary>
  public sealed partial class CategoryDescription : pb::IMessage<CategoryDescription> {
    private static readonly pb::MessageParser<CategoryDescription> _parser = new pb::MessageParser<CategoryDescription>(() => new CategoryDescription());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CategoryDescription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoryDescription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoryDescription(CategoryDescription other) : this() {
      name_ = other.name_;
      displayName_ = other.displayName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoryDescription Clone() {
      return new CategoryDescription(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Internal name of the category.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 2;
    private string displayName_ = "";
    /// <summary>
    /// Human readable form of the category name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CategoryDescription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CategoryDescription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (DisplayName != other.DisplayName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CategoryDescription other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            DisplayName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request for root categories of Info Types supported by the API.
  /// Example values might include "FINANCE", "HEALTH", "FAST", "DEFAULT".
  /// </summary>
  public sealed partial class ListRootCategoriesRequest : pb::IMessage<ListRootCategoriesRequest> {
    private static readonly pb::MessageParser<ListRootCategoriesRequest> _parser = new pb::MessageParser<ListRootCategoriesRequest>(() => new ListRootCategoriesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListRootCategoriesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRootCategoriesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRootCategoriesRequest(ListRootCategoriesRequest other) : this() {
      languageCode_ = other.languageCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRootCategoriesRequest Clone() {
      return new ListRootCategoriesRequest(this);
    }

    /// <summary>Field number for the "language_code" field.</summary>
    public const int LanguageCodeFieldNumber = 1;
    private string languageCode_ = "";
    /// <summary>
    /// Optional language code for localized friendly category names.
    /// If omitted or if localized strings are not available,
    /// en-US strings will be returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LanguageCode {
      get { return languageCode_; }
      set {
        languageCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListRootCategoriesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListRootCategoriesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LanguageCode != other.LanguageCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LanguageCode.Length != 0) hash ^= LanguageCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LanguageCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LanguageCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LanguageCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LanguageCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListRootCategoriesRequest other) {
      if (other == null) {
        return;
      }
      if (other.LanguageCode.Length != 0) {
        LanguageCode = other.LanguageCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LanguageCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response for ListRootCategories request.
  /// </summary>
  public sealed partial class ListRootCategoriesResponse : pb::IMessage<ListRootCategoriesResponse> {
    private static readonly pb::MessageParser<ListRootCategoriesResponse> _parser = new pb::MessageParser<ListRootCategoriesResponse>(() => new ListRootCategoriesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListRootCategoriesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRootCategoriesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRootCategoriesResponse(ListRootCategoriesResponse other) : this() {
      categories_ = other.categories_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRootCategoriesResponse Clone() {
      return new ListRootCategoriesResponse(this);
    }

    /// <summary>Field number for the "categories" field.</summary>
    public const int CategoriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.CategoryDescription> _repeated_categories_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.CategoryDescription.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.CategoryDescription> categories_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.CategoryDescription>();
    /// <summary>
    /// List of all into type categories supported by the API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.CategoryDescription> Categories {
      get { return categories_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListRootCategoriesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListRootCategoriesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!categories_.Equals(other.categories_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= categories_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      categories_.WriteTo(output, _repeated_categories_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += categories_.CalculateSize(_repeated_categories_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListRootCategoriesResponse other) {
      if (other == null) {
        return;
      }
      categories_.Add(other.categories_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            categories_.AddEntriesFrom(input, _repeated_categories_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request for creating a risk analysis operation.
  /// </summary>
  public sealed partial class AnalyzeDataSourceRiskRequest : pb::IMessage<AnalyzeDataSourceRiskRequest> {
    private static readonly pb::MessageParser<AnalyzeDataSourceRiskRequest> _parser = new pb::MessageParser<AnalyzeDataSourceRiskRequest>(() => new AnalyzeDataSourceRiskRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnalyzeDataSourceRiskRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeDataSourceRiskRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeDataSourceRiskRequest(AnalyzeDataSourceRiskRequest other) : this() {
      PrivacyMetric = other.privacyMetric_ != null ? other.PrivacyMetric.Clone() : null;
      SourceTable = other.sourceTable_ != null ? other.SourceTable.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeDataSourceRiskRequest Clone() {
      return new AnalyzeDataSourceRiskRequest(this);
    }

    /// <summary>Field number for the "privacy_metric" field.</summary>
    public const int PrivacyMetricFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric privacyMetric_;
    /// <summary>
    /// Privacy metric to compute.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric PrivacyMetric {
      get { return privacyMetric_; }
      set {
        privacyMetric_ = value;
      }
    }

    /// <summary>Field number for the "source_table" field.</summary>
    public const int SourceTableFieldNumber = 3;
    private global::Google.Cloud.Dlp.V2Beta1.BigQueryTable sourceTable_;
    /// <summary>
    /// Input dataset to compute metrics over.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.BigQueryTable SourceTable {
      get { return sourceTable_; }
      set {
        sourceTable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnalyzeDataSourceRiskRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnalyzeDataSourceRiskRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PrivacyMetric, other.PrivacyMetric)) return false;
      if (!object.Equals(SourceTable, other.SourceTable)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (privacyMetric_ != null) hash ^= PrivacyMetric.GetHashCode();
      if (sourceTable_ != null) hash ^= SourceTable.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (privacyMetric_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PrivacyMetric);
      }
      if (sourceTable_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SourceTable);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (privacyMetric_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrivacyMetric);
      }
      if (sourceTable_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceTable);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnalyzeDataSourceRiskRequest other) {
      if (other == null) {
        return;
      }
      if (other.privacyMetric_ != null) {
        if (privacyMetric_ == null) {
          privacyMetric_ = new global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric();
        }
        PrivacyMetric.MergeFrom(other.PrivacyMetric);
      }
      if (other.sourceTable_ != null) {
        if (sourceTable_ == null) {
          sourceTable_ = new global::Google.Cloud.Dlp.V2Beta1.BigQueryTable();
        }
        SourceTable.MergeFrom(other.SourceTable);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (privacyMetric_ == null) {
              privacyMetric_ = new global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric();
            }
            input.ReadMessage(privacyMetric_);
            break;
          }
          case 26: {
            if (sourceTable_ == null) {
              sourceTable_ = new global::Google.Cloud.Dlp.V2Beta1.BigQueryTable();
            }
            input.ReadMessage(sourceTable_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Privacy metric to compute for reidentification risk analysis.
  /// </summary>
  public sealed partial class PrivacyMetric : pb::IMessage<PrivacyMetric> {
    private static readonly pb::MessageParser<PrivacyMetric> _parser = new pb::MessageParser<PrivacyMetric>(() => new PrivacyMetric());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrivacyMetric> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrivacyMetric() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrivacyMetric(PrivacyMetric other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.NumericalStatsConfig:
          NumericalStatsConfig = other.NumericalStatsConfig.Clone();
          break;
        case TypeOneofCase.CategoricalStatsConfig:
          CategoricalStatsConfig = other.CategoricalStatsConfig.Clone();
          break;
        case TypeOneofCase.KAnonymityConfig:
          KAnonymityConfig = other.KAnonymityConfig.Clone();
          break;
        case TypeOneofCase.LDiversityConfig:
          LDiversityConfig = other.LDiversityConfig.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrivacyMetric Clone() {
      return new PrivacyMetric(this);
    }

    /// <summary>Field number for the "numerical_stats_config" field.</summary>
    public const int NumericalStatsConfigFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Types.NumericalStatsConfig NumericalStatsConfig {
      get { return typeCase_ == TypeOneofCase.NumericalStatsConfig ? (global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Types.NumericalStatsConfig) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.NumericalStatsConfig;
      }
    }

    /// <summary>Field number for the "categorical_stats_config" field.</summary>
    public const int CategoricalStatsConfigFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Types.CategoricalStatsConfig CategoricalStatsConfig {
      get { return typeCase_ == TypeOneofCase.CategoricalStatsConfig ? (global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Types.CategoricalStatsConfig) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.CategoricalStatsConfig;
      }
    }

    /// <summary>Field number for the "k_anonymity_config" field.</summary>
    public const int KAnonymityConfigFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Types.KAnonymityConfig KAnonymityConfig {
      get { return typeCase_ == TypeOneofCase.KAnonymityConfig ? (global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Types.KAnonymityConfig) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.KAnonymityConfig;
      }
    }

    /// <summary>Field number for the "l_diversity_config" field.</summary>
    public const int LDiversityConfigFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Types.LDiversityConfig LDiversityConfig {
      get { return typeCase_ == TypeOneofCase.LDiversityConfig ? (global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Types.LDiversityConfig) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.LDiversityConfig;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      NumericalStatsConfig = 1,
      CategoricalStatsConfig = 2,
      KAnonymityConfig = 3,
      LDiversityConfig = 4,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrivacyMetric);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrivacyMetric other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NumericalStatsConfig, other.NumericalStatsConfig)) return false;
      if (!object.Equals(CategoricalStatsConfig, other.CategoricalStatsConfig)) return false;
      if (!object.Equals(KAnonymityConfig, other.KAnonymityConfig)) return false;
      if (!object.Equals(LDiversityConfig, other.LDiversityConfig)) return false;
      if (TypeCase != other.TypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.NumericalStatsConfig) hash ^= NumericalStatsConfig.GetHashCode();
      if (typeCase_ == TypeOneofCase.CategoricalStatsConfig) hash ^= CategoricalStatsConfig.GetHashCode();
      if (typeCase_ == TypeOneofCase.KAnonymityConfig) hash ^= KAnonymityConfig.GetHashCode();
      if (typeCase_ == TypeOneofCase.LDiversityConfig) hash ^= LDiversityConfig.GetHashCode();
      hash ^= (int) typeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.NumericalStatsConfig) {
        output.WriteRawTag(10);
        output.WriteMessage(NumericalStatsConfig);
      }
      if (typeCase_ == TypeOneofCase.CategoricalStatsConfig) {
        output.WriteRawTag(18);
        output.WriteMessage(CategoricalStatsConfig);
      }
      if (typeCase_ == TypeOneofCase.KAnonymityConfig) {
        output.WriteRawTag(26);
        output.WriteMessage(KAnonymityConfig);
      }
      if (typeCase_ == TypeOneofCase.LDiversityConfig) {
        output.WriteRawTag(34);
        output.WriteMessage(LDiversityConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.NumericalStatsConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NumericalStatsConfig);
      }
      if (typeCase_ == TypeOneofCase.CategoricalStatsConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CategoricalStatsConfig);
      }
      if (typeCase_ == TypeOneofCase.KAnonymityConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KAnonymityConfig);
      }
      if (typeCase_ == TypeOneofCase.LDiversityConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LDiversityConfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrivacyMetric other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.NumericalStatsConfig:
          NumericalStatsConfig = other.NumericalStatsConfig;
          break;
        case TypeOneofCase.CategoricalStatsConfig:
          CategoricalStatsConfig = other.CategoricalStatsConfig;
          break;
        case TypeOneofCase.KAnonymityConfig:
          KAnonymityConfig = other.KAnonymityConfig;
          break;
        case TypeOneofCase.LDiversityConfig:
          LDiversityConfig = other.LDiversityConfig;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Types.NumericalStatsConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Types.NumericalStatsConfig();
            if (typeCase_ == TypeOneofCase.NumericalStatsConfig) {
              subBuilder.MergeFrom(NumericalStatsConfig);
            }
            input.ReadMessage(subBuilder);
            NumericalStatsConfig = subBuilder;
            break;
          }
          case 18: {
            global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Types.CategoricalStatsConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Types.CategoricalStatsConfig();
            if (typeCase_ == TypeOneofCase.CategoricalStatsConfig) {
              subBuilder.MergeFrom(CategoricalStatsConfig);
            }
            input.ReadMessage(subBuilder);
            CategoricalStatsConfig = subBuilder;
            break;
          }
          case 26: {
            global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Types.KAnonymityConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Types.KAnonymityConfig();
            if (typeCase_ == TypeOneofCase.KAnonymityConfig) {
              subBuilder.MergeFrom(KAnonymityConfig);
            }
            input.ReadMessage(subBuilder);
            KAnonymityConfig = subBuilder;
            break;
          }
          case 34: {
            global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Types.LDiversityConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Types.LDiversityConfig();
            if (typeCase_ == TypeOneofCase.LDiversityConfig) {
              subBuilder.MergeFrom(LDiversityConfig);
            }
            input.ReadMessage(subBuilder);
            LDiversityConfig = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PrivacyMetric message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Compute numerical stats over an individual column, including
      /// min, max, and quantiles.
      /// </summary>
      public sealed partial class NumericalStatsConfig : pb::IMessage<NumericalStatsConfig> {
        private static readonly pb::MessageParser<NumericalStatsConfig> _parser = new pb::MessageParser<NumericalStatsConfig>(() => new NumericalStatsConfig());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NumericalStatsConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NumericalStatsConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NumericalStatsConfig(NumericalStatsConfig other) : this() {
          Field = other.field_ != null ? other.Field.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NumericalStatsConfig Clone() {
          return new NumericalStatsConfig(this);
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 1;
        private global::Google.Cloud.Dlp.V2Beta1.FieldId field_;
        /// <summary>
        /// Field to compute numerical stats on. Supported types are
        /// integer, float, date, datetime, timestamp, time.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta1.FieldId Field {
          get { return field_; }
          set {
            field_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NumericalStatsConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NumericalStatsConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Field, other.Field)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (field_ != null) hash ^= Field.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (field_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Field);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (field_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Field);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NumericalStatsConfig other) {
          if (other == null) {
            return;
          }
          if (other.field_ != null) {
            if (field_ == null) {
              field_ = new global::Google.Cloud.Dlp.V2Beta1.FieldId();
            }
            Field.MergeFrom(other.Field);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (field_ == null) {
                  field_ = new global::Google.Cloud.Dlp.V2Beta1.FieldId();
                }
                input.ReadMessage(field_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Compute numerical stats over an individual column, including
      /// number of distinct values and value count distribution.
      /// </summary>
      public sealed partial class CategoricalStatsConfig : pb::IMessage<CategoricalStatsConfig> {
        private static readonly pb::MessageParser<CategoricalStatsConfig> _parser = new pb::MessageParser<CategoricalStatsConfig>(() => new CategoricalStatsConfig());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CategoricalStatsConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CategoricalStatsConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CategoricalStatsConfig(CategoricalStatsConfig other) : this() {
          Field = other.field_ != null ? other.Field.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CategoricalStatsConfig Clone() {
          return new CategoricalStatsConfig(this);
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 1;
        private global::Google.Cloud.Dlp.V2Beta1.FieldId field_;
        /// <summary>
        /// Field to compute categorical stats on. All column types are
        /// supported except for arrays and structs. However, it may be more
        /// informative to use NumericalStats when the field type is supported,
        /// depending on the data.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta1.FieldId Field {
          get { return field_; }
          set {
            field_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CategoricalStatsConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CategoricalStatsConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Field, other.Field)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (field_ != null) hash ^= Field.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (field_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Field);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (field_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Field);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CategoricalStatsConfig other) {
          if (other == null) {
            return;
          }
          if (other.field_ != null) {
            if (field_ == null) {
              field_ = new global::Google.Cloud.Dlp.V2Beta1.FieldId();
            }
            Field.MergeFrom(other.Field);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (field_ == null) {
                  field_ = new global::Google.Cloud.Dlp.V2Beta1.FieldId();
                }
                input.ReadMessage(field_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// k-anonymity metric, used for analysis of reidentification risk.
      /// </summary>
      public sealed partial class KAnonymityConfig : pb::IMessage<KAnonymityConfig> {
        private static readonly pb::MessageParser<KAnonymityConfig> _parser = new pb::MessageParser<KAnonymityConfig>(() => new KAnonymityConfig());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<KAnonymityConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KAnonymityConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KAnonymityConfig(KAnonymityConfig other) : this() {
          quasiIds_ = other.quasiIds_.Clone();
          EntityId = other.entityId_ != null ? other.EntityId.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KAnonymityConfig Clone() {
          return new KAnonymityConfig(this);
        }

        /// <summary>Field number for the "quasi_ids" field.</summary>
        public const int QuasiIdsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.FieldId> _repeated_quasiIds_codec
            = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.FieldId.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.FieldId> quasiIds_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.FieldId>();
        /// <summary>
        /// Set of fields to compute k-anonymity over. When multiple fields are
        /// specified, they are considered a single composite key. Structs and
        /// repeated data types are not supported; however, nested fields are
        /// supported so long as they are not structs themselves or nested within
        /// a repeated field.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.FieldId> QuasiIds {
          get { return quasiIds_; }
        }

        /// <summary>Field number for the "entity_id" field.</summary>
        public const int EntityIdFieldNumber = 2;
        private global::Google.Cloud.Dlp.V2Beta1.EntityId entityId_;
        /// <summary>
        /// Optional message indicating that each distinct `EntityId` should not
        /// contribute to the k-anonymity count more than once per equivalence class.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta1.EntityId EntityId {
          get { return entityId_; }
          set {
            entityId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as KAnonymityConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(KAnonymityConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!quasiIds_.Equals(other.quasiIds_)) return false;
          if (!object.Equals(EntityId, other.EntityId)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= quasiIds_.GetHashCode();
          if (entityId_ != null) hash ^= EntityId.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          quasiIds_.WriteTo(output, _repeated_quasiIds_codec);
          if (entityId_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(EntityId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += quasiIds_.CalculateSize(_repeated_quasiIds_codec);
          if (entityId_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EntityId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(KAnonymityConfig other) {
          if (other == null) {
            return;
          }
          quasiIds_.Add(other.quasiIds_);
          if (other.entityId_ != null) {
            if (entityId_ == null) {
              entityId_ = new global::Google.Cloud.Dlp.V2Beta1.EntityId();
            }
            EntityId.MergeFrom(other.EntityId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                quasiIds_.AddEntriesFrom(input, _repeated_quasiIds_codec);
                break;
              }
              case 18: {
                if (entityId_ == null) {
                  entityId_ = new global::Google.Cloud.Dlp.V2Beta1.EntityId();
                }
                input.ReadMessage(entityId_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// l-diversity metric, used for analysis of reidentification risk.
      /// </summary>
      public sealed partial class LDiversityConfig : pb::IMessage<LDiversityConfig> {
        private static readonly pb::MessageParser<LDiversityConfig> _parser = new pb::MessageParser<LDiversityConfig>(() => new LDiversityConfig());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LDiversityConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LDiversityConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LDiversityConfig(LDiversityConfig other) : this() {
          quasiIds_ = other.quasiIds_.Clone();
          SensitiveAttribute = other.sensitiveAttribute_ != null ? other.SensitiveAttribute.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LDiversityConfig Clone() {
          return new LDiversityConfig(this);
        }

        /// <summary>Field number for the "quasi_ids" field.</summary>
        public const int QuasiIdsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.FieldId> _repeated_quasiIds_codec
            = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.FieldId.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.FieldId> quasiIds_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.FieldId>();
        /// <summary>
        /// Set of quasi-identifiers indicating how equivalence classes are
        /// defined for the l-diversity computation. When multiple fields are
        /// specified, they are considered a single composite key.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.FieldId> QuasiIds {
          get { return quasiIds_; }
        }

        /// <summary>Field number for the "sensitive_attribute" field.</summary>
        public const int SensitiveAttributeFieldNumber = 2;
        private global::Google.Cloud.Dlp.V2Beta1.FieldId sensitiveAttribute_;
        /// <summary>
        /// Sensitive field for computing the l-value.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta1.FieldId SensitiveAttribute {
          get { return sensitiveAttribute_; }
          set {
            sensitiveAttribute_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LDiversityConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LDiversityConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!quasiIds_.Equals(other.quasiIds_)) return false;
          if (!object.Equals(SensitiveAttribute, other.SensitiveAttribute)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= quasiIds_.GetHashCode();
          if (sensitiveAttribute_ != null) hash ^= SensitiveAttribute.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          quasiIds_.WriteTo(output, _repeated_quasiIds_codec);
          if (sensitiveAttribute_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(SensitiveAttribute);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += quasiIds_.CalculateSize(_repeated_quasiIds_codec);
          if (sensitiveAttribute_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SensitiveAttribute);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LDiversityConfig other) {
          if (other == null) {
            return;
          }
          quasiIds_.Add(other.quasiIds_);
          if (other.sensitiveAttribute_ != null) {
            if (sensitiveAttribute_ == null) {
              sensitiveAttribute_ = new global::Google.Cloud.Dlp.V2Beta1.FieldId();
            }
            SensitiveAttribute.MergeFrom(other.SensitiveAttribute);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                quasiIds_.AddEntriesFrom(input, _repeated_quasiIds_codec);
                break;
              }
              case 18: {
                if (sensitiveAttribute_ == null) {
                  sensitiveAttribute_ = new global::Google.Cloud.Dlp.V2Beta1.FieldId();
                }
                input.ReadMessage(sensitiveAttribute_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Metadata returned within the
  /// [`riskAnalysis.operations.get`](/dlp/docs/reference/rest/v2beta1/riskAnalysis.operations/get)
  /// for risk analysis.
  /// </summary>
  public sealed partial class RiskAnalysisOperationMetadata : pb::IMessage<RiskAnalysisOperationMetadata> {
    private static readonly pb::MessageParser<RiskAnalysisOperationMetadata> _parser = new pb::MessageParser<RiskAnalysisOperationMetadata>(() => new RiskAnalysisOperationMetadata());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RiskAnalysisOperationMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RiskAnalysisOperationMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RiskAnalysisOperationMetadata(RiskAnalysisOperationMetadata other) : this() {
      CreateTime = other.createTime_ != null ? other.CreateTime.Clone() : null;
      RequestedPrivacyMetric = other.requestedPrivacyMetric_ != null ? other.RequestedPrivacyMetric.Clone() : null;
      RequestedSourceTable = other.requestedSourceTable_ != null ? other.RequestedSourceTable.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RiskAnalysisOperationMetadata Clone() {
      return new RiskAnalysisOperationMetadata(this);
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// The time which this request was started.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "requested_privacy_metric" field.</summary>
    public const int RequestedPrivacyMetricFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric requestedPrivacyMetric_;
    /// <summary>
    /// Privacy metric to compute.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric RequestedPrivacyMetric {
      get { return requestedPrivacyMetric_; }
      set {
        requestedPrivacyMetric_ = value;
      }
    }

    /// <summary>Field number for the "requested_source_table" field.</summary>
    public const int RequestedSourceTableFieldNumber = 3;
    private global::Google.Cloud.Dlp.V2Beta1.BigQueryTable requestedSourceTable_;
    /// <summary>
    /// Input dataset to compute metrics over.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.BigQueryTable RequestedSourceTable {
      get { return requestedSourceTable_; }
      set {
        requestedSourceTable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RiskAnalysisOperationMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RiskAnalysisOperationMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(RequestedPrivacyMetric, other.RequestedPrivacyMetric)) return false;
      if (!object.Equals(RequestedSourceTable, other.RequestedSourceTable)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (requestedPrivacyMetric_ != null) hash ^= RequestedPrivacyMetric.GetHashCode();
      if (requestedSourceTable_ != null) hash ^= RequestedSourceTable.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (createTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CreateTime);
      }
      if (requestedPrivacyMetric_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RequestedPrivacyMetric);
      }
      if (requestedSourceTable_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RequestedSourceTable);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (requestedPrivacyMetric_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestedPrivacyMetric);
      }
      if (requestedSourceTable_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestedSourceTable);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RiskAnalysisOperationMetadata other) {
      if (other == null) {
        return;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.requestedPrivacyMetric_ != null) {
        if (requestedPrivacyMetric_ == null) {
          requestedPrivacyMetric_ = new global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric();
        }
        RequestedPrivacyMetric.MergeFrom(other.RequestedPrivacyMetric);
      }
      if (other.requestedSourceTable_ != null) {
        if (requestedSourceTable_ == null) {
          requestedSourceTable_ = new global::Google.Cloud.Dlp.V2Beta1.BigQueryTable();
        }
        RequestedSourceTable.MergeFrom(other.RequestedSourceTable);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (createTime_ == null) {
              createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(createTime_);
            break;
          }
          case 18: {
            if (requestedPrivacyMetric_ == null) {
              requestedPrivacyMetric_ = new global::Google.Cloud.Dlp.V2Beta1.PrivacyMetric();
            }
            input.ReadMessage(requestedPrivacyMetric_);
            break;
          }
          case 26: {
            if (requestedSourceTable_ == null) {
              requestedSourceTable_ = new global::Google.Cloud.Dlp.V2Beta1.BigQueryTable();
            }
            input.ReadMessage(requestedSourceTable_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Result of a risk analysis
  /// [`Operation`](/dlp/docs/reference/rest/v2beta1/inspect.operations)
  /// request.
  /// </summary>
  public sealed partial class RiskAnalysisOperationResult : pb::IMessage<RiskAnalysisOperationResult> {
    private static readonly pb::MessageParser<RiskAnalysisOperationResult> _parser = new pb::MessageParser<RiskAnalysisOperationResult>(() => new RiskAnalysisOperationResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RiskAnalysisOperationResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RiskAnalysisOperationResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RiskAnalysisOperationResult(RiskAnalysisOperationResult other) : this() {
      switch (other.ResultCase) {
        case ResultOneofCase.NumericalStatsResult:
          NumericalStatsResult = other.NumericalStatsResult.Clone();
          break;
        case ResultOneofCase.CategoricalStatsResult:
          CategoricalStatsResult = other.CategoricalStatsResult.Clone();
          break;
        case ResultOneofCase.KAnonymityResult:
          KAnonymityResult = other.KAnonymityResult.Clone();
          break;
        case ResultOneofCase.LDiversityResult:
          LDiversityResult = other.LDiversityResult.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RiskAnalysisOperationResult Clone() {
      return new RiskAnalysisOperationResult(this);
    }

    /// <summary>Field number for the "numerical_stats_result" field.</summary>
    public const int NumericalStatsResultFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.NumericalStatsResult NumericalStatsResult {
      get { return resultCase_ == ResultOneofCase.NumericalStatsResult ? (global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.NumericalStatsResult) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.NumericalStatsResult;
      }
    }

    /// <summary>Field number for the "categorical_stats_result" field.</summary>
    public const int CategoricalStatsResultFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.CategoricalStatsResult CategoricalStatsResult {
      get { return resultCase_ == ResultOneofCase.CategoricalStatsResult ? (global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.CategoricalStatsResult) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.CategoricalStatsResult;
      }
    }

    /// <summary>Field number for the "k_anonymity_result" field.</summary>
    public const int KAnonymityResultFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.KAnonymityResult KAnonymityResult {
      get { return resultCase_ == ResultOneofCase.KAnonymityResult ? (global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.KAnonymityResult) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.KAnonymityResult;
      }
    }

    /// <summary>Field number for the "l_diversity_result" field.</summary>
    public const int LDiversityResultFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.LDiversityResult LDiversityResult {
      get { return resultCase_ == ResultOneofCase.LDiversityResult ? (global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.LDiversityResult) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.LDiversityResult;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      NumericalStatsResult = 3,
      CategoricalStatsResult = 4,
      KAnonymityResult = 5,
      LDiversityResult = 6,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RiskAnalysisOperationResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RiskAnalysisOperationResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NumericalStatsResult, other.NumericalStatsResult)) return false;
      if (!object.Equals(CategoricalStatsResult, other.CategoricalStatsResult)) return false;
      if (!object.Equals(KAnonymityResult, other.KAnonymityResult)) return false;
      if (!object.Equals(LDiversityResult, other.LDiversityResult)) return false;
      if (ResultCase != other.ResultCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultCase_ == ResultOneofCase.NumericalStatsResult) hash ^= NumericalStatsResult.GetHashCode();
      if (resultCase_ == ResultOneofCase.CategoricalStatsResult) hash ^= CategoricalStatsResult.GetHashCode();
      if (resultCase_ == ResultOneofCase.KAnonymityResult) hash ^= KAnonymityResult.GetHashCode();
      if (resultCase_ == ResultOneofCase.LDiversityResult) hash ^= LDiversityResult.GetHashCode();
      hash ^= (int) resultCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultCase_ == ResultOneofCase.NumericalStatsResult) {
        output.WriteRawTag(26);
        output.WriteMessage(NumericalStatsResult);
      }
      if (resultCase_ == ResultOneofCase.CategoricalStatsResult) {
        output.WriteRawTag(34);
        output.WriteMessage(CategoricalStatsResult);
      }
      if (resultCase_ == ResultOneofCase.KAnonymityResult) {
        output.WriteRawTag(42);
        output.WriteMessage(KAnonymityResult);
      }
      if (resultCase_ == ResultOneofCase.LDiversityResult) {
        output.WriteRawTag(50);
        output.WriteMessage(LDiversityResult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultCase_ == ResultOneofCase.NumericalStatsResult) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NumericalStatsResult);
      }
      if (resultCase_ == ResultOneofCase.CategoricalStatsResult) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CategoricalStatsResult);
      }
      if (resultCase_ == ResultOneofCase.KAnonymityResult) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KAnonymityResult);
      }
      if (resultCase_ == ResultOneofCase.LDiversityResult) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LDiversityResult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RiskAnalysisOperationResult other) {
      if (other == null) {
        return;
      }
      switch (other.ResultCase) {
        case ResultOneofCase.NumericalStatsResult:
          NumericalStatsResult = other.NumericalStatsResult;
          break;
        case ResultOneofCase.CategoricalStatsResult:
          CategoricalStatsResult = other.CategoricalStatsResult;
          break;
        case ResultOneofCase.KAnonymityResult:
          KAnonymityResult = other.KAnonymityResult;
          break;
        case ResultOneofCase.LDiversityResult:
          LDiversityResult = other.LDiversityResult;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.NumericalStatsResult subBuilder = new global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.NumericalStatsResult();
            if (resultCase_ == ResultOneofCase.NumericalStatsResult) {
              subBuilder.MergeFrom(NumericalStatsResult);
            }
            input.ReadMessage(subBuilder);
            NumericalStatsResult = subBuilder;
            break;
          }
          case 34: {
            global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.CategoricalStatsResult subBuilder = new global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.CategoricalStatsResult();
            if (resultCase_ == ResultOneofCase.CategoricalStatsResult) {
              subBuilder.MergeFrom(CategoricalStatsResult);
            }
            input.ReadMessage(subBuilder);
            CategoricalStatsResult = subBuilder;
            break;
          }
          case 42: {
            global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.KAnonymityResult subBuilder = new global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.KAnonymityResult();
            if (resultCase_ == ResultOneofCase.KAnonymityResult) {
              subBuilder.MergeFrom(KAnonymityResult);
            }
            input.ReadMessage(subBuilder);
            KAnonymityResult = subBuilder;
            break;
          }
          case 50: {
            global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.LDiversityResult subBuilder = new global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.LDiversityResult();
            if (resultCase_ == ResultOneofCase.LDiversityResult) {
              subBuilder.MergeFrom(LDiversityResult);
            }
            input.ReadMessage(subBuilder);
            LDiversityResult = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RiskAnalysisOperationResult message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Result of the numerical stats computation.
      /// </summary>
      public sealed partial class NumericalStatsResult : pb::IMessage<NumericalStatsResult> {
        private static readonly pb::MessageParser<NumericalStatsResult> _parser = new pb::MessageParser<NumericalStatsResult>(() => new NumericalStatsResult());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NumericalStatsResult> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NumericalStatsResult() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NumericalStatsResult(NumericalStatsResult other) : this() {
          MinValue = other.minValue_ != null ? other.MinValue.Clone() : null;
          MaxValue = other.maxValue_ != null ? other.MaxValue.Clone() : null;
          quantileValues_ = other.quantileValues_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NumericalStatsResult Clone() {
          return new NumericalStatsResult(this);
        }

        /// <summary>Field number for the "min_value" field.</summary>
        public const int MinValueFieldNumber = 1;
        private global::Google.Cloud.Dlp.V2Beta1.Value minValue_;
        /// <summary>
        /// Minimum value appearing in the column.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta1.Value MinValue {
          get { return minValue_; }
          set {
            minValue_ = value;
          }
        }

        /// <summary>Field number for the "max_value" field.</summary>
        public const int MaxValueFieldNumber = 2;
        private global::Google.Cloud.Dlp.V2Beta1.Value maxValue_;
        /// <summary>
        /// Maximum value appearing in the column.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta1.Value MaxValue {
          get { return maxValue_; }
          set {
            maxValue_ = value;
          }
        }

        /// <summary>Field number for the "quantile_values" field.</summary>
        public const int QuantileValuesFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.Value> _repeated_quantileValues_codec
            = pb::FieldCodec.ForMessage(34, global::Google.Cloud.Dlp.V2Beta1.Value.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Value> quantileValues_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Value>();
        /// <summary>
        /// List of 99 values that partition the set of field values into 100 equal
        /// sized buckets.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Value> QuantileValues {
          get { return quantileValues_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NumericalStatsResult);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NumericalStatsResult other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(MinValue, other.MinValue)) return false;
          if (!object.Equals(MaxValue, other.MaxValue)) return false;
          if(!quantileValues_.Equals(other.quantileValues_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (minValue_ != null) hash ^= MinValue.GetHashCode();
          if (maxValue_ != null) hash ^= MaxValue.GetHashCode();
          hash ^= quantileValues_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (minValue_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(MinValue);
          }
          if (maxValue_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(MaxValue);
          }
          quantileValues_.WriteTo(output, _repeated_quantileValues_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (minValue_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinValue);
          }
          if (maxValue_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxValue);
          }
          size += quantileValues_.CalculateSize(_repeated_quantileValues_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NumericalStatsResult other) {
          if (other == null) {
            return;
          }
          if (other.minValue_ != null) {
            if (minValue_ == null) {
              minValue_ = new global::Google.Cloud.Dlp.V2Beta1.Value();
            }
            MinValue.MergeFrom(other.MinValue);
          }
          if (other.maxValue_ != null) {
            if (maxValue_ == null) {
              maxValue_ = new global::Google.Cloud.Dlp.V2Beta1.Value();
            }
            MaxValue.MergeFrom(other.MaxValue);
          }
          quantileValues_.Add(other.quantileValues_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (minValue_ == null) {
                  minValue_ = new global::Google.Cloud.Dlp.V2Beta1.Value();
                }
                input.ReadMessage(minValue_);
                break;
              }
              case 18: {
                if (maxValue_ == null) {
                  maxValue_ = new global::Google.Cloud.Dlp.V2Beta1.Value();
                }
                input.ReadMessage(maxValue_);
                break;
              }
              case 34: {
                quantileValues_.AddEntriesFrom(input, _repeated_quantileValues_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Result of the categorical stats computation.
      /// </summary>
      public sealed partial class CategoricalStatsResult : pb::IMessage<CategoricalStatsResult> {
        private static readonly pb::MessageParser<CategoricalStatsResult> _parser = new pb::MessageParser<CategoricalStatsResult>(() => new CategoricalStatsResult());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CategoricalStatsResult> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CategoricalStatsResult() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CategoricalStatsResult(CategoricalStatsResult other) : this() {
          valueFrequencyHistogramBuckets_ = other.valueFrequencyHistogramBuckets_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CategoricalStatsResult Clone() {
          return new CategoricalStatsResult(this);
        }

        /// <summary>Field number for the "value_frequency_histogram_buckets" field.</summary>
        public const int ValueFrequencyHistogramBucketsFieldNumber = 5;
        private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.CategoricalStatsResult.Types.CategoricalStatsHistogramBucket> _repeated_valueFrequencyHistogramBuckets_codec
            = pb::FieldCodec.ForMessage(42, global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.CategoricalStatsResult.Types.CategoricalStatsHistogramBucket.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.CategoricalStatsResult.Types.CategoricalStatsHistogramBucket> valueFrequencyHistogramBuckets_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.CategoricalStatsResult.Types.CategoricalStatsHistogramBucket>();
        /// <summary>
        /// Histogram of value frequencies in the column.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.CategoricalStatsResult.Types.CategoricalStatsHistogramBucket> ValueFrequencyHistogramBuckets {
          get { return valueFrequencyHistogramBuckets_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CategoricalStatsResult);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CategoricalStatsResult other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!valueFrequencyHistogramBuckets_.Equals(other.valueFrequencyHistogramBuckets_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= valueFrequencyHistogramBuckets_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          valueFrequencyHistogramBuckets_.WriteTo(output, _repeated_valueFrequencyHistogramBuckets_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += valueFrequencyHistogramBuckets_.CalculateSize(_repeated_valueFrequencyHistogramBuckets_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CategoricalStatsResult other) {
          if (other == null) {
            return;
          }
          valueFrequencyHistogramBuckets_.Add(other.valueFrequencyHistogramBuckets_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 42: {
                valueFrequencyHistogramBuckets_.AddEntriesFrom(input, _repeated_valueFrequencyHistogramBuckets_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the CategoricalStatsResult message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Histogram bucket of value frequencies in the column.
          /// </summary>
          public sealed partial class CategoricalStatsHistogramBucket : pb::IMessage<CategoricalStatsHistogramBucket> {
            private static readonly pb::MessageParser<CategoricalStatsHistogramBucket> _parser = new pb::MessageParser<CategoricalStatsHistogramBucket>(() => new CategoricalStatsHistogramBucket());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<CategoricalStatsHistogramBucket> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.CategoricalStatsResult.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CategoricalStatsHistogramBucket() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CategoricalStatsHistogramBucket(CategoricalStatsHistogramBucket other) : this() {
              valueFrequencyLowerBound_ = other.valueFrequencyLowerBound_;
              valueFrequencyUpperBound_ = other.valueFrequencyUpperBound_;
              bucketSize_ = other.bucketSize_;
              bucketValues_ = other.bucketValues_.Clone();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CategoricalStatsHistogramBucket Clone() {
              return new CategoricalStatsHistogramBucket(this);
            }

            /// <summary>Field number for the "value_frequency_lower_bound" field.</summary>
            public const int ValueFrequencyLowerBoundFieldNumber = 1;
            private long valueFrequencyLowerBound_;
            /// <summary>
            /// Lower bound on the value frequency of the values in this bucket.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long ValueFrequencyLowerBound {
              get { return valueFrequencyLowerBound_; }
              set {
                valueFrequencyLowerBound_ = value;
              }
            }

            /// <summary>Field number for the "value_frequency_upper_bound" field.</summary>
            public const int ValueFrequencyUpperBoundFieldNumber = 2;
            private long valueFrequencyUpperBound_;
            /// <summary>
            /// Upper bound on the value frequency of the values in this bucket.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long ValueFrequencyUpperBound {
              get { return valueFrequencyUpperBound_; }
              set {
                valueFrequencyUpperBound_ = value;
              }
            }

            /// <summary>Field number for the "bucket_size" field.</summary>
            public const int BucketSizeFieldNumber = 3;
            private long bucketSize_;
            /// <summary>
            /// Total number of records in this bucket.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long BucketSize {
              get { return bucketSize_; }
              set {
                bucketSize_ = value;
              }
            }

            /// <summary>Field number for the "bucket_values" field.</summary>
            public const int BucketValuesFieldNumber = 4;
            private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.ValueFrequency> _repeated_bucketValues_codec
                = pb::FieldCodec.ForMessage(34, global::Google.Cloud.Dlp.V2Beta1.ValueFrequency.Parser);
            private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ValueFrequency> bucketValues_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ValueFrequency>();
            /// <summary>
            /// Sample of value frequencies in this bucket. The total number of
            /// values returned per bucket is capped at 20.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ValueFrequency> BucketValues {
              get { return bucketValues_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as CategoricalStatsHistogramBucket);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(CategoricalStatsHistogramBucket other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (ValueFrequencyLowerBound != other.ValueFrequencyLowerBound) return false;
              if (ValueFrequencyUpperBound != other.ValueFrequencyUpperBound) return false;
              if (BucketSize != other.BucketSize) return false;
              if(!bucketValues_.Equals(other.bucketValues_)) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (ValueFrequencyLowerBound != 0L) hash ^= ValueFrequencyLowerBound.GetHashCode();
              if (ValueFrequencyUpperBound != 0L) hash ^= ValueFrequencyUpperBound.GetHashCode();
              if (BucketSize != 0L) hash ^= BucketSize.GetHashCode();
              hash ^= bucketValues_.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (ValueFrequencyLowerBound != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(ValueFrequencyLowerBound);
              }
              if (ValueFrequencyUpperBound != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(ValueFrequencyUpperBound);
              }
              if (BucketSize != 0L) {
                output.WriteRawTag(24);
                output.WriteInt64(BucketSize);
              }
              bucketValues_.WriteTo(output, _repeated_bucketValues_codec);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (ValueFrequencyLowerBound != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(ValueFrequencyLowerBound);
              }
              if (ValueFrequencyUpperBound != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(ValueFrequencyUpperBound);
              }
              if (BucketSize != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(BucketSize);
              }
              size += bucketValues_.CalculateSize(_repeated_bucketValues_codec);
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(CategoricalStatsHistogramBucket other) {
              if (other == null) {
                return;
              }
              if (other.ValueFrequencyLowerBound != 0L) {
                ValueFrequencyLowerBound = other.ValueFrequencyLowerBound;
              }
              if (other.ValueFrequencyUpperBound != 0L) {
                ValueFrequencyUpperBound = other.ValueFrequencyUpperBound;
              }
              if (other.BucketSize != 0L) {
                BucketSize = other.BucketSize;
              }
              bucketValues_.Add(other.bucketValues_);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    ValueFrequencyLowerBound = input.ReadInt64();
                    break;
                  }
                  case 16: {
                    ValueFrequencyUpperBound = input.ReadInt64();
                    break;
                  }
                  case 24: {
                    BucketSize = input.ReadInt64();
                    break;
                  }
                  case 34: {
                    bucketValues_.AddEntriesFrom(input, _repeated_bucketValues_codec);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      /// <summary>
      /// Result of the k-anonymity computation.
      /// </summary>
      public sealed partial class KAnonymityResult : pb::IMessage<KAnonymityResult> {
        private static readonly pb::MessageParser<KAnonymityResult> _parser = new pb::MessageParser<KAnonymityResult>(() => new KAnonymityResult());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<KAnonymityResult> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KAnonymityResult() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KAnonymityResult(KAnonymityResult other) : this() {
          equivalenceClassHistogramBuckets_ = other.equivalenceClassHistogramBuckets_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KAnonymityResult Clone() {
          return new KAnonymityResult(this);
        }

        /// <summary>Field number for the "equivalence_class_histogram_buckets" field.</summary>
        public const int EquivalenceClassHistogramBucketsFieldNumber = 5;
        private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.KAnonymityResult.Types.KAnonymityHistogramBucket> _repeated_equivalenceClassHistogramBuckets_codec
            = pb::FieldCodec.ForMessage(42, global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.KAnonymityResult.Types.KAnonymityHistogramBucket.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.KAnonymityResult.Types.KAnonymityHistogramBucket> equivalenceClassHistogramBuckets_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.KAnonymityResult.Types.KAnonymityHistogramBucket>();
        /// <summary>
        /// Histogram of k-anonymity equivalence classes.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.KAnonymityResult.Types.KAnonymityHistogramBucket> EquivalenceClassHistogramBuckets {
          get { return equivalenceClassHistogramBuckets_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as KAnonymityResult);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(KAnonymityResult other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!equivalenceClassHistogramBuckets_.Equals(other.equivalenceClassHistogramBuckets_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= equivalenceClassHistogramBuckets_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          equivalenceClassHistogramBuckets_.WriteTo(output, _repeated_equivalenceClassHistogramBuckets_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += equivalenceClassHistogramBuckets_.CalculateSize(_repeated_equivalenceClassHistogramBuckets_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(KAnonymityResult other) {
          if (other == null) {
            return;
          }
          equivalenceClassHistogramBuckets_.Add(other.equivalenceClassHistogramBuckets_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 42: {
                equivalenceClassHistogramBuckets_.AddEntriesFrom(input, _repeated_equivalenceClassHistogramBuckets_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the KAnonymityResult message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// The set of columns' values that share the same k-anonymity value.
          /// </summary>
          public sealed partial class KAnonymityEquivalenceClass : pb::IMessage<KAnonymityEquivalenceClass> {
            private static readonly pb::MessageParser<KAnonymityEquivalenceClass> _parser = new pb::MessageParser<KAnonymityEquivalenceClass>(() => new KAnonymityEquivalenceClass());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<KAnonymityEquivalenceClass> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.KAnonymityResult.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KAnonymityEquivalenceClass() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KAnonymityEquivalenceClass(KAnonymityEquivalenceClass other) : this() {
              quasiIdsValues_ = other.quasiIdsValues_.Clone();
              equivalenceClassSize_ = other.equivalenceClassSize_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KAnonymityEquivalenceClass Clone() {
              return new KAnonymityEquivalenceClass(this);
            }

            /// <summary>Field number for the "quasi_ids_values" field.</summary>
            public const int QuasiIdsValuesFieldNumber = 1;
            private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.Value> _repeated_quasiIdsValues_codec
                = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.Value.Parser);
            private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Value> quasiIdsValues_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Value>();
            /// <summary>
            /// Set of values defining the equivalence class. One value per
            /// quasi-identifier column in the original KAnonymity metric message.
            /// The order is always the same as the original request.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Value> QuasiIdsValues {
              get { return quasiIdsValues_; }
            }

            /// <summary>Field number for the "equivalence_class_size" field.</summary>
            public const int EquivalenceClassSizeFieldNumber = 2;
            private long equivalenceClassSize_;
            /// <summary>
            /// Size of the equivalence class, for example number of rows with the
            /// above set of values.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long EquivalenceClassSize {
              get { return equivalenceClassSize_; }
              set {
                equivalenceClassSize_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as KAnonymityEquivalenceClass);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(KAnonymityEquivalenceClass other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!quasiIdsValues_.Equals(other.quasiIdsValues_)) return false;
              if (EquivalenceClassSize != other.EquivalenceClassSize) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= quasiIdsValues_.GetHashCode();
              if (EquivalenceClassSize != 0L) hash ^= EquivalenceClassSize.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              quasiIdsValues_.WriteTo(output, _repeated_quasiIdsValues_codec);
              if (EquivalenceClassSize != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(EquivalenceClassSize);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += quasiIdsValues_.CalculateSize(_repeated_quasiIdsValues_codec);
              if (EquivalenceClassSize != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(EquivalenceClassSize);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(KAnonymityEquivalenceClass other) {
              if (other == null) {
                return;
              }
              quasiIdsValues_.Add(other.quasiIdsValues_);
              if (other.EquivalenceClassSize != 0L) {
                EquivalenceClassSize = other.EquivalenceClassSize;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    quasiIdsValues_.AddEntriesFrom(input, _repeated_quasiIdsValues_codec);
                    break;
                  }
                  case 16: {
                    EquivalenceClassSize = input.ReadInt64();
                    break;
                  }
                }
              }
            }

          }

          /// <summary>
          /// Histogram bucket of equivalence class sizes in the table.
          /// </summary>
          public sealed partial class KAnonymityHistogramBucket : pb::IMessage<KAnonymityHistogramBucket> {
            private static readonly pb::MessageParser<KAnonymityHistogramBucket> _parser = new pb::MessageParser<KAnonymityHistogramBucket>(() => new KAnonymityHistogramBucket());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<KAnonymityHistogramBucket> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.KAnonymityResult.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KAnonymityHistogramBucket() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KAnonymityHistogramBucket(KAnonymityHistogramBucket other) : this() {
              equivalenceClassSizeLowerBound_ = other.equivalenceClassSizeLowerBound_;
              equivalenceClassSizeUpperBound_ = other.equivalenceClassSizeUpperBound_;
              bucketSize_ = other.bucketSize_;
              bucketValues_ = other.bucketValues_.Clone();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KAnonymityHistogramBucket Clone() {
              return new KAnonymityHistogramBucket(this);
            }

            /// <summary>Field number for the "equivalence_class_size_lower_bound" field.</summary>
            public const int EquivalenceClassSizeLowerBoundFieldNumber = 1;
            private long equivalenceClassSizeLowerBound_;
            /// <summary>
            /// Lower bound on the size of the equivalence classes in this bucket.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long EquivalenceClassSizeLowerBound {
              get { return equivalenceClassSizeLowerBound_; }
              set {
                equivalenceClassSizeLowerBound_ = value;
              }
            }

            /// <summary>Field number for the "equivalence_class_size_upper_bound" field.</summary>
            public const int EquivalenceClassSizeUpperBoundFieldNumber = 2;
            private long equivalenceClassSizeUpperBound_;
            /// <summary>
            /// Upper bound on the size of the equivalence classes in this bucket.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long EquivalenceClassSizeUpperBound {
              get { return equivalenceClassSizeUpperBound_; }
              set {
                equivalenceClassSizeUpperBound_ = value;
              }
            }

            /// <summary>Field number for the "bucket_size" field.</summary>
            public const int BucketSizeFieldNumber = 3;
            private long bucketSize_;
            /// <summary>
            /// Total number of records in this bucket.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long BucketSize {
              get { return bucketSize_; }
              set {
                bucketSize_ = value;
              }
            }

            /// <summary>Field number for the "bucket_values" field.</summary>
            public const int BucketValuesFieldNumber = 4;
            private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.KAnonymityResult.Types.KAnonymityEquivalenceClass> _repeated_bucketValues_codec
                = pb::FieldCodec.ForMessage(34, global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.KAnonymityResult.Types.KAnonymityEquivalenceClass.Parser);
            private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.KAnonymityResult.Types.KAnonymityEquivalenceClass> bucketValues_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.KAnonymityResult.Types.KAnonymityEquivalenceClass>();
            /// <summary>
            /// Sample of equivalence classes in this bucket. The total number of
            /// classes returned per bucket is capped at 20.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.KAnonymityResult.Types.KAnonymityEquivalenceClass> BucketValues {
              get { return bucketValues_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as KAnonymityHistogramBucket);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(KAnonymityHistogramBucket other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (EquivalenceClassSizeLowerBound != other.EquivalenceClassSizeLowerBound) return false;
              if (EquivalenceClassSizeUpperBound != other.EquivalenceClassSizeUpperBound) return false;
              if (BucketSize != other.BucketSize) return false;
              if(!bucketValues_.Equals(other.bucketValues_)) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (EquivalenceClassSizeLowerBound != 0L) hash ^= EquivalenceClassSizeLowerBound.GetHashCode();
              if (EquivalenceClassSizeUpperBound != 0L) hash ^= EquivalenceClassSizeUpperBound.GetHashCode();
              if (BucketSize != 0L) hash ^= BucketSize.GetHashCode();
              hash ^= bucketValues_.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (EquivalenceClassSizeLowerBound != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(EquivalenceClassSizeLowerBound);
              }
              if (EquivalenceClassSizeUpperBound != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(EquivalenceClassSizeUpperBound);
              }
              if (BucketSize != 0L) {
                output.WriteRawTag(24);
                output.WriteInt64(BucketSize);
              }
              bucketValues_.WriteTo(output, _repeated_bucketValues_codec);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (EquivalenceClassSizeLowerBound != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(EquivalenceClassSizeLowerBound);
              }
              if (EquivalenceClassSizeUpperBound != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(EquivalenceClassSizeUpperBound);
              }
              if (BucketSize != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(BucketSize);
              }
              size += bucketValues_.CalculateSize(_repeated_bucketValues_codec);
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(KAnonymityHistogramBucket other) {
              if (other == null) {
                return;
              }
              if (other.EquivalenceClassSizeLowerBound != 0L) {
                EquivalenceClassSizeLowerBound = other.EquivalenceClassSizeLowerBound;
              }
              if (other.EquivalenceClassSizeUpperBound != 0L) {
                EquivalenceClassSizeUpperBound = other.EquivalenceClassSizeUpperBound;
              }
              if (other.BucketSize != 0L) {
                BucketSize = other.BucketSize;
              }
              bucketValues_.Add(other.bucketValues_);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    EquivalenceClassSizeLowerBound = input.ReadInt64();
                    break;
                  }
                  case 16: {
                    EquivalenceClassSizeUpperBound = input.ReadInt64();
                    break;
                  }
                  case 24: {
                    BucketSize = input.ReadInt64();
                    break;
                  }
                  case 34: {
                    bucketValues_.AddEntriesFrom(input, _repeated_bucketValues_codec);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      /// <summary>
      /// Result of the l-diversity computation.
      /// </summary>
      public sealed partial class LDiversityResult : pb::IMessage<LDiversityResult> {
        private static readonly pb::MessageParser<LDiversityResult> _parser = new pb::MessageParser<LDiversityResult>(() => new LDiversityResult());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LDiversityResult> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LDiversityResult() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LDiversityResult(LDiversityResult other) : this() {
          sensitiveValueFrequencyHistogramBuckets_ = other.sensitiveValueFrequencyHistogramBuckets_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LDiversityResult Clone() {
          return new LDiversityResult(this);
        }

        /// <summary>Field number for the "sensitive_value_frequency_histogram_buckets" field.</summary>
        public const int SensitiveValueFrequencyHistogramBucketsFieldNumber = 5;
        private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.LDiversityResult.Types.LDiversityHistogramBucket> _repeated_sensitiveValueFrequencyHistogramBuckets_codec
            = pb::FieldCodec.ForMessage(42, global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.LDiversityResult.Types.LDiversityHistogramBucket.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.LDiversityResult.Types.LDiversityHistogramBucket> sensitiveValueFrequencyHistogramBuckets_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.LDiversityResult.Types.LDiversityHistogramBucket>();
        /// <summary>
        /// Histogram of l-diversity equivalence class sensitive value frequencies.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.LDiversityResult.Types.LDiversityHistogramBucket> SensitiveValueFrequencyHistogramBuckets {
          get { return sensitiveValueFrequencyHistogramBuckets_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LDiversityResult);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LDiversityResult other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!sensitiveValueFrequencyHistogramBuckets_.Equals(other.sensitiveValueFrequencyHistogramBuckets_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= sensitiveValueFrequencyHistogramBuckets_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          sensitiveValueFrequencyHistogramBuckets_.WriteTo(output, _repeated_sensitiveValueFrequencyHistogramBuckets_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += sensitiveValueFrequencyHistogramBuckets_.CalculateSize(_repeated_sensitiveValueFrequencyHistogramBuckets_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LDiversityResult other) {
          if (other == null) {
            return;
          }
          sensitiveValueFrequencyHistogramBuckets_.Add(other.sensitiveValueFrequencyHistogramBuckets_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 42: {
                sensitiveValueFrequencyHistogramBuckets_.AddEntriesFrom(input, _repeated_sensitiveValueFrequencyHistogramBuckets_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the LDiversityResult message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// The set of columns' values that share the same l-diversity value.
          /// </summary>
          public sealed partial class LDiversityEquivalenceClass : pb::IMessage<LDiversityEquivalenceClass> {
            private static readonly pb::MessageParser<LDiversityEquivalenceClass> _parser = new pb::MessageParser<LDiversityEquivalenceClass>(() => new LDiversityEquivalenceClass());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<LDiversityEquivalenceClass> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.LDiversityResult.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public LDiversityEquivalenceClass() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public LDiversityEquivalenceClass(LDiversityEquivalenceClass other) : this() {
              quasiIdsValues_ = other.quasiIdsValues_.Clone();
              equivalenceClassSize_ = other.equivalenceClassSize_;
              numDistinctSensitiveValues_ = other.numDistinctSensitiveValues_;
              topSensitiveValues_ = other.topSensitiveValues_.Clone();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public LDiversityEquivalenceClass Clone() {
              return new LDiversityEquivalenceClass(this);
            }

            /// <summary>Field number for the "quasi_ids_values" field.</summary>
            public const int QuasiIdsValuesFieldNumber = 1;
            private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.Value> _repeated_quasiIdsValues_codec
                = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.Value.Parser);
            private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Value> quasiIdsValues_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Value>();
            /// <summary>
            /// Quasi-identifier values defining the k-anonymity equivalence
            /// class. The order is always the same as the original request.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Value> QuasiIdsValues {
              get { return quasiIdsValues_; }
            }

            /// <summary>Field number for the "equivalence_class_size" field.</summary>
            public const int EquivalenceClassSizeFieldNumber = 2;
            private long equivalenceClassSize_;
            /// <summary>
            /// Size of the k-anonymity equivalence class.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long EquivalenceClassSize {
              get { return equivalenceClassSize_; }
              set {
                equivalenceClassSize_ = value;
              }
            }

            /// <summary>Field number for the "num_distinct_sensitive_values" field.</summary>
            public const int NumDistinctSensitiveValuesFieldNumber = 3;
            private long numDistinctSensitiveValues_;
            /// <summary>
            /// Number of distinct sensitive values in this equivalence class.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long NumDistinctSensitiveValues {
              get { return numDistinctSensitiveValues_; }
              set {
                numDistinctSensitiveValues_ = value;
              }
            }

            /// <summary>Field number for the "top_sensitive_values" field.</summary>
            public const int TopSensitiveValuesFieldNumber = 4;
            private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.ValueFrequency> _repeated_topSensitiveValues_codec
                = pb::FieldCodec.ForMessage(34, global::Google.Cloud.Dlp.V2Beta1.ValueFrequency.Parser);
            private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ValueFrequency> topSensitiveValues_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ValueFrequency>();
            /// <summary>
            /// Estimated frequencies of top sensitive values.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ValueFrequency> TopSensitiveValues {
              get { return topSensitiveValues_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as LDiversityEquivalenceClass);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(LDiversityEquivalenceClass other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!quasiIdsValues_.Equals(other.quasiIdsValues_)) return false;
              if (EquivalenceClassSize != other.EquivalenceClassSize) return false;
              if (NumDistinctSensitiveValues != other.NumDistinctSensitiveValues) return false;
              if(!topSensitiveValues_.Equals(other.topSensitiveValues_)) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= quasiIdsValues_.GetHashCode();
              if (EquivalenceClassSize != 0L) hash ^= EquivalenceClassSize.GetHashCode();
              if (NumDistinctSensitiveValues != 0L) hash ^= NumDistinctSensitiveValues.GetHashCode();
              hash ^= topSensitiveValues_.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              quasiIdsValues_.WriteTo(output, _repeated_quasiIdsValues_codec);
              if (EquivalenceClassSize != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(EquivalenceClassSize);
              }
              if (NumDistinctSensitiveValues != 0L) {
                output.WriteRawTag(24);
                output.WriteInt64(NumDistinctSensitiveValues);
              }
              topSensitiveValues_.WriteTo(output, _repeated_topSensitiveValues_codec);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += quasiIdsValues_.CalculateSize(_repeated_quasiIdsValues_codec);
              if (EquivalenceClassSize != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(EquivalenceClassSize);
              }
              if (NumDistinctSensitiveValues != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(NumDistinctSensitiveValues);
              }
              size += topSensitiveValues_.CalculateSize(_repeated_topSensitiveValues_codec);
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(LDiversityEquivalenceClass other) {
              if (other == null) {
                return;
              }
              quasiIdsValues_.Add(other.quasiIdsValues_);
              if (other.EquivalenceClassSize != 0L) {
                EquivalenceClassSize = other.EquivalenceClassSize;
              }
              if (other.NumDistinctSensitiveValues != 0L) {
                NumDistinctSensitiveValues = other.NumDistinctSensitiveValues;
              }
              topSensitiveValues_.Add(other.topSensitiveValues_);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    quasiIdsValues_.AddEntriesFrom(input, _repeated_quasiIdsValues_codec);
                    break;
                  }
                  case 16: {
                    EquivalenceClassSize = input.ReadInt64();
                    break;
                  }
                  case 24: {
                    NumDistinctSensitiveValues = input.ReadInt64();
                    break;
                  }
                  case 34: {
                    topSensitiveValues_.AddEntriesFrom(input, _repeated_topSensitiveValues_codec);
                    break;
                  }
                }
              }
            }

          }

          /// <summary>
          /// Histogram bucket of sensitive value frequencies in the table.
          /// </summary>
          public sealed partial class LDiversityHistogramBucket : pb::IMessage<LDiversityHistogramBucket> {
            private static readonly pb::MessageParser<LDiversityHistogramBucket> _parser = new pb::MessageParser<LDiversityHistogramBucket>(() => new LDiversityHistogramBucket());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<LDiversityHistogramBucket> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.LDiversityResult.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public LDiversityHistogramBucket() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public LDiversityHistogramBucket(LDiversityHistogramBucket other) : this() {
              sensitiveValueFrequencyLowerBound_ = other.sensitiveValueFrequencyLowerBound_;
              sensitiveValueFrequencyUpperBound_ = other.sensitiveValueFrequencyUpperBound_;
              bucketSize_ = other.bucketSize_;
              bucketValues_ = other.bucketValues_.Clone();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public LDiversityHistogramBucket Clone() {
              return new LDiversityHistogramBucket(this);
            }

            /// <summary>Field number for the "sensitive_value_frequency_lower_bound" field.</summary>
            public const int SensitiveValueFrequencyLowerBoundFieldNumber = 1;
            private long sensitiveValueFrequencyLowerBound_;
            /// <summary>
            /// Lower bound on the sensitive value frequencies of the equivalence
            /// classes in this bucket.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long SensitiveValueFrequencyLowerBound {
              get { return sensitiveValueFrequencyLowerBound_; }
              set {
                sensitiveValueFrequencyLowerBound_ = value;
              }
            }

            /// <summary>Field number for the "sensitive_value_frequency_upper_bound" field.</summary>
            public const int SensitiveValueFrequencyUpperBoundFieldNumber = 2;
            private long sensitiveValueFrequencyUpperBound_;
            /// <summary>
            /// Upper bound on the sensitive value frequencies of the equivalence
            /// classes in this bucket.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long SensitiveValueFrequencyUpperBound {
              get { return sensitiveValueFrequencyUpperBound_; }
              set {
                sensitiveValueFrequencyUpperBound_ = value;
              }
            }

            /// <summary>Field number for the "bucket_size" field.</summary>
            public const int BucketSizeFieldNumber = 3;
            private long bucketSize_;
            /// <summary>
            /// Total number of records in this bucket.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long BucketSize {
              get { return bucketSize_; }
              set {
                bucketSize_ = value;
              }
            }

            /// <summary>Field number for the "bucket_values" field.</summary>
            public const int BucketValuesFieldNumber = 4;
            private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.LDiversityResult.Types.LDiversityEquivalenceClass> _repeated_bucketValues_codec
                = pb::FieldCodec.ForMessage(34, global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.LDiversityResult.Types.LDiversityEquivalenceClass.Parser);
            private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.LDiversityResult.Types.LDiversityEquivalenceClass> bucketValues_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.LDiversityResult.Types.LDiversityEquivalenceClass>();
            /// <summary>
            /// Sample of equivalence classes in this bucket. The total number of
            /// classes returned per bucket is capped at 20.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RiskAnalysisOperationResult.Types.LDiversityResult.Types.LDiversityEquivalenceClass> BucketValues {
              get { return bucketValues_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as LDiversityHistogramBucket);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(LDiversityHistogramBucket other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (SensitiveValueFrequencyLowerBound != other.SensitiveValueFrequencyLowerBound) return false;
              if (SensitiveValueFrequencyUpperBound != other.SensitiveValueFrequencyUpperBound) return false;
              if (BucketSize != other.BucketSize) return false;
              if(!bucketValues_.Equals(other.bucketValues_)) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (SensitiveValueFrequencyLowerBound != 0L) hash ^= SensitiveValueFrequencyLowerBound.GetHashCode();
              if (SensitiveValueFrequencyUpperBound != 0L) hash ^= SensitiveValueFrequencyUpperBound.GetHashCode();
              if (BucketSize != 0L) hash ^= BucketSize.GetHashCode();
              hash ^= bucketValues_.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (SensitiveValueFrequencyLowerBound != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(SensitiveValueFrequencyLowerBound);
              }
              if (SensitiveValueFrequencyUpperBound != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(SensitiveValueFrequencyUpperBound);
              }
              if (BucketSize != 0L) {
                output.WriteRawTag(24);
                output.WriteInt64(BucketSize);
              }
              bucketValues_.WriteTo(output, _repeated_bucketValues_codec);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (SensitiveValueFrequencyLowerBound != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(SensitiveValueFrequencyLowerBound);
              }
              if (SensitiveValueFrequencyUpperBound != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(SensitiveValueFrequencyUpperBound);
              }
              if (BucketSize != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(BucketSize);
              }
              size += bucketValues_.CalculateSize(_repeated_bucketValues_codec);
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(LDiversityHistogramBucket other) {
              if (other == null) {
                return;
              }
              if (other.SensitiveValueFrequencyLowerBound != 0L) {
                SensitiveValueFrequencyLowerBound = other.SensitiveValueFrequencyLowerBound;
              }
              if (other.SensitiveValueFrequencyUpperBound != 0L) {
                SensitiveValueFrequencyUpperBound = other.SensitiveValueFrequencyUpperBound;
              }
              if (other.BucketSize != 0L) {
                BucketSize = other.BucketSize;
              }
              bucketValues_.Add(other.bucketValues_);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    SensitiveValueFrequencyLowerBound = input.ReadInt64();
                    break;
                  }
                  case 16: {
                    SensitiveValueFrequencyUpperBound = input.ReadInt64();
                    break;
                  }
                  case 24: {
                    BucketSize = input.ReadInt64();
                    break;
                  }
                  case 34: {
                    bucketValues_.AddEntriesFrom(input, _repeated_bucketValues_codec);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// A value of a field, including its frequency.
  /// </summary>
  public sealed partial class ValueFrequency : pb::IMessage<ValueFrequency> {
    private static readonly pb::MessageParser<ValueFrequency> _parser = new pb::MessageParser<ValueFrequency>(() => new ValueFrequency());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValueFrequency> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueFrequency() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueFrequency(ValueFrequency other) : this() {
      Value = other.value_ != null ? other.Value.Clone() : null;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueFrequency Clone() {
      return new ValueFrequency(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.Value value_;
    /// <summary>
    /// A value contained in the field in question.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.Value Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private long count_;
    /// <summary>
    /// How many times the value is contained in the field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValueFrequency);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValueFrequency other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Value, other.Value)) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (value_ != null) hash ^= Value.GetHashCode();
      if (Count != 0L) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (value_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Value);
      }
      if (Count != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValueFrequency other) {
      if (other == null) {
        return;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::Google.Cloud.Dlp.V2Beta1.Value();
        }
        Value.MergeFrom(other.Value);
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (value_ == null) {
              value_ = new global::Google.Cloud.Dlp.V2Beta1.Value();
            }
            input.ReadMessage(value_);
            break;
          }
          case 16: {
            Count = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Set of primitive values supported by the system.
  /// </summary>
  public sealed partial class Value : pb::IMessage<Value> {
    private static readonly pb::MessageParser<Value> _parser = new pb::MessageParser<Value>(() => new Value());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Value> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value(Value other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.IntegerValue:
          IntegerValue = other.IntegerValue;
          break;
        case TypeOneofCase.FloatValue:
          FloatValue = other.FloatValue;
          break;
        case TypeOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case TypeOneofCase.BooleanValue:
          BooleanValue = other.BooleanValue;
          break;
        case TypeOneofCase.TimestampValue:
          TimestampValue = other.TimestampValue.Clone();
          break;
        case TypeOneofCase.TimeValue:
          TimeValue = other.TimeValue.Clone();
          break;
        case TypeOneofCase.DateValue:
          DateValue = other.DateValue.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value Clone() {
      return new Value(this);
    }

    /// <summary>Field number for the "integer_value" field.</summary>
    public const int IntegerValueFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IntegerValue {
      get { return typeCase_ == TypeOneofCase.IntegerValue ? (long) type_ : 0L; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.IntegerValue;
      }
    }

    /// <summary>Field number for the "float_value" field.</summary>
    public const int FloatValueFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FloatValue {
      get { return typeCase_ == TypeOneofCase.FloatValue ? (double) type_ : 0D; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.FloatValue;
      }
    }

    /// <summary>Field number for the "string_value" field.</summary>
    public const int StringValueFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return typeCase_ == TypeOneofCase.StringValue ? (string) type_ : ""; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        typeCase_ = TypeOneofCase.StringValue;
      }
    }

    /// <summary>Field number for the "boolean_value" field.</summary>
    public const int BooleanValueFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BooleanValue {
      get { return typeCase_ == TypeOneofCase.BooleanValue ? (bool) type_ : false; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.BooleanValue;
      }
    }

    /// <summary>Field number for the "timestamp_value" field.</summary>
    public const int TimestampValueFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp TimestampValue {
      get { return typeCase_ == TypeOneofCase.TimestampValue ? (global::Google.Protobuf.WellKnownTypes.Timestamp) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.TimestampValue;
      }
    }

    /// <summary>Field number for the "time_value" field.</summary>
    public const int TimeValueFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.TimeOfDay TimeValue {
      get { return typeCase_ == TypeOneofCase.TimeValue ? (global::Google.Type.TimeOfDay) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.TimeValue;
      }
    }

    /// <summary>Field number for the "date_value" field.</summary>
    public const int DateValueFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.Date DateValue {
      get { return typeCase_ == TypeOneofCase.DateValue ? (global::Google.Type.Date) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.DateValue;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      IntegerValue = 1,
      FloatValue = 2,
      StringValue = 3,
      BooleanValue = 4,
      TimestampValue = 5,
      TimeValue = 6,
      DateValue = 7,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Value);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Value other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IntegerValue != other.IntegerValue) return false;
      if (FloatValue != other.FloatValue) return false;
      if (StringValue != other.StringValue) return false;
      if (BooleanValue != other.BooleanValue) return false;
      if (!object.Equals(TimestampValue, other.TimestampValue)) return false;
      if (!object.Equals(TimeValue, other.TimeValue)) return false;
      if (!object.Equals(DateValue, other.DateValue)) return false;
      if (TypeCase != other.TypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.IntegerValue) hash ^= IntegerValue.GetHashCode();
      if (typeCase_ == TypeOneofCase.FloatValue) hash ^= FloatValue.GetHashCode();
      if (typeCase_ == TypeOneofCase.StringValue) hash ^= StringValue.GetHashCode();
      if (typeCase_ == TypeOneofCase.BooleanValue) hash ^= BooleanValue.GetHashCode();
      if (typeCase_ == TypeOneofCase.TimestampValue) hash ^= TimestampValue.GetHashCode();
      if (typeCase_ == TypeOneofCase.TimeValue) hash ^= TimeValue.GetHashCode();
      if (typeCase_ == TypeOneofCase.DateValue) hash ^= DateValue.GetHashCode();
      hash ^= (int) typeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.IntegerValue) {
        output.WriteRawTag(8);
        output.WriteInt64(IntegerValue);
      }
      if (typeCase_ == TypeOneofCase.FloatValue) {
        output.WriteRawTag(17);
        output.WriteDouble(FloatValue);
      }
      if (typeCase_ == TypeOneofCase.StringValue) {
        output.WriteRawTag(26);
        output.WriteString(StringValue);
      }
      if (typeCase_ == TypeOneofCase.BooleanValue) {
        output.WriteRawTag(32);
        output.WriteBool(BooleanValue);
      }
      if (typeCase_ == TypeOneofCase.TimestampValue) {
        output.WriteRawTag(42);
        output.WriteMessage(TimestampValue);
      }
      if (typeCase_ == TypeOneofCase.TimeValue) {
        output.WriteRawTag(50);
        output.WriteMessage(TimeValue);
      }
      if (typeCase_ == TypeOneofCase.DateValue) {
        output.WriteRawTag(58);
        output.WriteMessage(DateValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.IntegerValue) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IntegerValue);
      }
      if (typeCase_ == TypeOneofCase.FloatValue) {
        size += 1 + 8;
      }
      if (typeCase_ == TypeOneofCase.StringValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (typeCase_ == TypeOneofCase.BooleanValue) {
        size += 1 + 1;
      }
      if (typeCase_ == TypeOneofCase.TimestampValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimestampValue);
      }
      if (typeCase_ == TypeOneofCase.TimeValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeValue);
      }
      if (typeCase_ == TypeOneofCase.DateValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DateValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Value other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.IntegerValue:
          IntegerValue = other.IntegerValue;
          break;
        case TypeOneofCase.FloatValue:
          FloatValue = other.FloatValue;
          break;
        case TypeOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case TypeOneofCase.BooleanValue:
          BooleanValue = other.BooleanValue;
          break;
        case TypeOneofCase.TimestampValue:
          TimestampValue = other.TimestampValue;
          break;
        case TypeOneofCase.TimeValue:
          TimeValue = other.TimeValue;
          break;
        case TypeOneofCase.DateValue:
          DateValue = other.DateValue;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IntegerValue = input.ReadInt64();
            break;
          }
          case 17: {
            FloatValue = input.ReadDouble();
            break;
          }
          case 26: {
            StringValue = input.ReadString();
            break;
          }
          case 32: {
            BooleanValue = input.ReadBool();
            break;
          }
          case 42: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (typeCase_ == TypeOneofCase.TimestampValue) {
              subBuilder.MergeFrom(TimestampValue);
            }
            input.ReadMessage(subBuilder);
            TimestampValue = subBuilder;
            break;
          }
          case 50: {
            global::Google.Type.TimeOfDay subBuilder = new global::Google.Type.TimeOfDay();
            if (typeCase_ == TypeOneofCase.TimeValue) {
              subBuilder.MergeFrom(TimeValue);
            }
            input.ReadMessage(subBuilder);
            TimeValue = subBuilder;
            break;
          }
          case 58: {
            global::Google.Type.Date subBuilder = new global::Google.Type.Date();
            if (typeCase_ == TypeOneofCase.DateValue) {
              subBuilder.MergeFrom(DateValue);
            }
            input.ReadMessage(subBuilder);
            DateValue = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The configuration that controls how the data will change.
  /// </summary>
  public sealed partial class DeidentifyConfig : pb::IMessage<DeidentifyConfig> {
    private static readonly pb::MessageParser<DeidentifyConfig> _parser = new pb::MessageParser<DeidentifyConfig>(() => new DeidentifyConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeidentifyConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeidentifyConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeidentifyConfig(DeidentifyConfig other) : this() {
      switch (other.TransformationCase) {
        case TransformationOneofCase.InfoTypeTransformations:
          InfoTypeTransformations = other.InfoTypeTransformations.Clone();
          break;
        case TransformationOneofCase.RecordTransformations:
          RecordTransformations = other.RecordTransformations.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeidentifyConfig Clone() {
      return new DeidentifyConfig(this);
    }

    /// <summary>Field number for the "info_type_transformations" field.</summary>
    public const int InfoTypeTransformationsFieldNumber = 1;
    /// <summary>
    /// Treat the dataset as free-form text and apply the same free text
    /// transformation everywhere.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.InfoTypeTransformations InfoTypeTransformations {
      get { return transformationCase_ == TransformationOneofCase.InfoTypeTransformations ? (global::Google.Cloud.Dlp.V2Beta1.InfoTypeTransformations) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.InfoTypeTransformations;
      }
    }

    /// <summary>Field number for the "record_transformations" field.</summary>
    public const int RecordTransformationsFieldNumber = 2;
    /// <summary>
    /// Treat the dataset as structured. Transformations can be applied to
    /// specific locations within structured datasets, such as transforming
    /// a column within a table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.RecordTransformations RecordTransformations {
      get { return transformationCase_ == TransformationOneofCase.RecordTransformations ? (global::Google.Cloud.Dlp.V2Beta1.RecordTransformations) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.RecordTransformations;
      }
    }

    private object transformation_;
    /// <summary>Enum of possible cases for the "transformation" oneof.</summary>
    public enum TransformationOneofCase {
      None = 0,
      InfoTypeTransformations = 1,
      RecordTransformations = 2,
    }
    private TransformationOneofCase transformationCase_ = TransformationOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformationOneofCase TransformationCase {
      get { return transformationCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTransformation() {
      transformationCase_ = TransformationOneofCase.None;
      transformation_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeidentifyConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeidentifyConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InfoTypeTransformations, other.InfoTypeTransformations)) return false;
      if (!object.Equals(RecordTransformations, other.RecordTransformations)) return false;
      if (TransformationCase != other.TransformationCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transformationCase_ == TransformationOneofCase.InfoTypeTransformations) hash ^= InfoTypeTransformations.GetHashCode();
      if (transformationCase_ == TransformationOneofCase.RecordTransformations) hash ^= RecordTransformations.GetHashCode();
      hash ^= (int) transformationCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transformationCase_ == TransformationOneofCase.InfoTypeTransformations) {
        output.WriteRawTag(10);
        output.WriteMessage(InfoTypeTransformations);
      }
      if (transformationCase_ == TransformationOneofCase.RecordTransformations) {
        output.WriteRawTag(18);
        output.WriteMessage(RecordTransformations);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transformationCase_ == TransformationOneofCase.InfoTypeTransformations) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoTypeTransformations);
      }
      if (transformationCase_ == TransformationOneofCase.RecordTransformations) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecordTransformations);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeidentifyConfig other) {
      if (other == null) {
        return;
      }
      switch (other.TransformationCase) {
        case TransformationOneofCase.InfoTypeTransformations:
          InfoTypeTransformations = other.InfoTypeTransformations;
          break;
        case TransformationOneofCase.RecordTransformations:
          RecordTransformations = other.RecordTransformations;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Cloud.Dlp.V2Beta1.InfoTypeTransformations subBuilder = new global::Google.Cloud.Dlp.V2Beta1.InfoTypeTransformations();
            if (transformationCase_ == TransformationOneofCase.InfoTypeTransformations) {
              subBuilder.MergeFrom(InfoTypeTransformations);
            }
            input.ReadMessage(subBuilder);
            InfoTypeTransformations = subBuilder;
            break;
          }
          case 18: {
            global::Google.Cloud.Dlp.V2Beta1.RecordTransformations subBuilder = new global::Google.Cloud.Dlp.V2Beta1.RecordTransformations();
            if (transformationCase_ == TransformationOneofCase.RecordTransformations) {
              subBuilder.MergeFrom(RecordTransformations);
            }
            input.ReadMessage(subBuilder);
            RecordTransformations = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A rule for transforming a value.
  /// </summary>
  public sealed partial class PrimitiveTransformation : pb::IMessage<PrimitiveTransformation> {
    private static readonly pb::MessageParser<PrimitiveTransformation> _parser = new pb::MessageParser<PrimitiveTransformation>(() => new PrimitiveTransformation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrimitiveTransformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimitiveTransformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimitiveTransformation(PrimitiveTransformation other) : this() {
      switch (other.TransformationCase) {
        case TransformationOneofCase.ReplaceConfig:
          ReplaceConfig = other.ReplaceConfig.Clone();
          break;
        case TransformationOneofCase.RedactConfig:
          RedactConfig = other.RedactConfig.Clone();
          break;
        case TransformationOneofCase.CharacterMaskConfig:
          CharacterMaskConfig = other.CharacterMaskConfig.Clone();
          break;
        case TransformationOneofCase.CryptoReplaceFfxFpeConfig:
          CryptoReplaceFfxFpeConfig = other.CryptoReplaceFfxFpeConfig.Clone();
          break;
        case TransformationOneofCase.FixedSizeBucketingConfig:
          FixedSizeBucketingConfig = other.FixedSizeBucketingConfig.Clone();
          break;
        case TransformationOneofCase.BucketingConfig:
          BucketingConfig = other.BucketingConfig.Clone();
          break;
        case TransformationOneofCase.ReplaceWithInfoTypeConfig:
          ReplaceWithInfoTypeConfig = other.ReplaceWithInfoTypeConfig.Clone();
          break;
        case TransformationOneofCase.TimePartConfig:
          TimePartConfig = other.TimePartConfig.Clone();
          break;
        case TransformationOneofCase.CryptoHashConfig:
          CryptoHashConfig = other.CryptoHashConfig.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimitiveTransformation Clone() {
      return new PrimitiveTransformation(this);
    }

    /// <summary>Field number for the "replace_config" field.</summary>
    public const int ReplaceConfigFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.ReplaceValueConfig ReplaceConfig {
      get { return transformationCase_ == TransformationOneofCase.ReplaceConfig ? (global::Google.Cloud.Dlp.V2Beta1.ReplaceValueConfig) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.ReplaceConfig;
      }
    }

    /// <summary>Field number for the "redact_config" field.</summary>
    public const int RedactConfigFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.RedactConfig RedactConfig {
      get { return transformationCase_ == TransformationOneofCase.RedactConfig ? (global::Google.Cloud.Dlp.V2Beta1.RedactConfig) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.RedactConfig;
      }
    }

    /// <summary>Field number for the "character_mask_config" field.</summary>
    public const int CharacterMaskConfigFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.CharacterMaskConfig CharacterMaskConfig {
      get { return transformationCase_ == TransformationOneofCase.CharacterMaskConfig ? (global::Google.Cloud.Dlp.V2Beta1.CharacterMaskConfig) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.CharacterMaskConfig;
      }
    }

    /// <summary>Field number for the "crypto_replace_ffx_fpe_config" field.</summary>
    public const int CryptoReplaceFfxFpeConfigFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.CryptoReplaceFfxFpeConfig CryptoReplaceFfxFpeConfig {
      get { return transformationCase_ == TransformationOneofCase.CryptoReplaceFfxFpeConfig ? (global::Google.Cloud.Dlp.V2Beta1.CryptoReplaceFfxFpeConfig) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.CryptoReplaceFfxFpeConfig;
      }
    }

    /// <summary>Field number for the "fixed_size_bucketing_config" field.</summary>
    public const int FixedSizeBucketingConfigFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.FixedSizeBucketingConfig FixedSizeBucketingConfig {
      get { return transformationCase_ == TransformationOneofCase.FixedSizeBucketingConfig ? (global::Google.Cloud.Dlp.V2Beta1.FixedSizeBucketingConfig) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.FixedSizeBucketingConfig;
      }
    }

    /// <summary>Field number for the "bucketing_config" field.</summary>
    public const int BucketingConfigFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.BucketingConfig BucketingConfig {
      get { return transformationCase_ == TransformationOneofCase.BucketingConfig ? (global::Google.Cloud.Dlp.V2Beta1.BucketingConfig) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.BucketingConfig;
      }
    }

    /// <summary>Field number for the "replace_with_info_type_config" field.</summary>
    public const int ReplaceWithInfoTypeConfigFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.ReplaceWithInfoTypeConfig ReplaceWithInfoTypeConfig {
      get { return transformationCase_ == TransformationOneofCase.ReplaceWithInfoTypeConfig ? (global::Google.Cloud.Dlp.V2Beta1.ReplaceWithInfoTypeConfig) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.ReplaceWithInfoTypeConfig;
      }
    }

    /// <summary>Field number for the "time_part_config" field.</summary>
    public const int TimePartConfigFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.TimePartConfig TimePartConfig {
      get { return transformationCase_ == TransformationOneofCase.TimePartConfig ? (global::Google.Cloud.Dlp.V2Beta1.TimePartConfig) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.TimePartConfig;
      }
    }

    /// <summary>Field number for the "crypto_hash_config" field.</summary>
    public const int CryptoHashConfigFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.CryptoHashConfig CryptoHashConfig {
      get { return transformationCase_ == TransformationOneofCase.CryptoHashConfig ? (global::Google.Cloud.Dlp.V2Beta1.CryptoHashConfig) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.CryptoHashConfig;
      }
    }

    private object transformation_;
    /// <summary>Enum of possible cases for the "transformation" oneof.</summary>
    public enum TransformationOneofCase {
      None = 0,
      ReplaceConfig = 1,
      RedactConfig = 2,
      CharacterMaskConfig = 3,
      CryptoReplaceFfxFpeConfig = 4,
      FixedSizeBucketingConfig = 5,
      BucketingConfig = 6,
      ReplaceWithInfoTypeConfig = 7,
      TimePartConfig = 8,
      CryptoHashConfig = 9,
    }
    private TransformationOneofCase transformationCase_ = TransformationOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformationOneofCase TransformationCase {
      get { return transformationCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTransformation() {
      transformationCase_ = TransformationOneofCase.None;
      transformation_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrimitiveTransformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrimitiveTransformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ReplaceConfig, other.ReplaceConfig)) return false;
      if (!object.Equals(RedactConfig, other.RedactConfig)) return false;
      if (!object.Equals(CharacterMaskConfig, other.CharacterMaskConfig)) return false;
      if (!object.Equals(CryptoReplaceFfxFpeConfig, other.CryptoReplaceFfxFpeConfig)) return false;
      if (!object.Equals(FixedSizeBucketingConfig, other.FixedSizeBucketingConfig)) return false;
      if (!object.Equals(BucketingConfig, other.BucketingConfig)) return false;
      if (!object.Equals(ReplaceWithInfoTypeConfig, other.ReplaceWithInfoTypeConfig)) return false;
      if (!object.Equals(TimePartConfig, other.TimePartConfig)) return false;
      if (!object.Equals(CryptoHashConfig, other.CryptoHashConfig)) return false;
      if (TransformationCase != other.TransformationCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transformationCase_ == TransformationOneofCase.ReplaceConfig) hash ^= ReplaceConfig.GetHashCode();
      if (transformationCase_ == TransformationOneofCase.RedactConfig) hash ^= RedactConfig.GetHashCode();
      if (transformationCase_ == TransformationOneofCase.CharacterMaskConfig) hash ^= CharacterMaskConfig.GetHashCode();
      if (transformationCase_ == TransformationOneofCase.CryptoReplaceFfxFpeConfig) hash ^= CryptoReplaceFfxFpeConfig.GetHashCode();
      if (transformationCase_ == TransformationOneofCase.FixedSizeBucketingConfig) hash ^= FixedSizeBucketingConfig.GetHashCode();
      if (transformationCase_ == TransformationOneofCase.BucketingConfig) hash ^= BucketingConfig.GetHashCode();
      if (transformationCase_ == TransformationOneofCase.ReplaceWithInfoTypeConfig) hash ^= ReplaceWithInfoTypeConfig.GetHashCode();
      if (transformationCase_ == TransformationOneofCase.TimePartConfig) hash ^= TimePartConfig.GetHashCode();
      if (transformationCase_ == TransformationOneofCase.CryptoHashConfig) hash ^= CryptoHashConfig.GetHashCode();
      hash ^= (int) transformationCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transformationCase_ == TransformationOneofCase.ReplaceConfig) {
        output.WriteRawTag(10);
        output.WriteMessage(ReplaceConfig);
      }
      if (transformationCase_ == TransformationOneofCase.RedactConfig) {
        output.WriteRawTag(18);
        output.WriteMessage(RedactConfig);
      }
      if (transformationCase_ == TransformationOneofCase.CharacterMaskConfig) {
        output.WriteRawTag(26);
        output.WriteMessage(CharacterMaskConfig);
      }
      if (transformationCase_ == TransformationOneofCase.CryptoReplaceFfxFpeConfig) {
        output.WriteRawTag(34);
        output.WriteMessage(CryptoReplaceFfxFpeConfig);
      }
      if (transformationCase_ == TransformationOneofCase.FixedSizeBucketingConfig) {
        output.WriteRawTag(42);
        output.WriteMessage(FixedSizeBucketingConfig);
      }
      if (transformationCase_ == TransformationOneofCase.BucketingConfig) {
        output.WriteRawTag(50);
        output.WriteMessage(BucketingConfig);
      }
      if (transformationCase_ == TransformationOneofCase.ReplaceWithInfoTypeConfig) {
        output.WriteRawTag(58);
        output.WriteMessage(ReplaceWithInfoTypeConfig);
      }
      if (transformationCase_ == TransformationOneofCase.TimePartConfig) {
        output.WriteRawTag(66);
        output.WriteMessage(TimePartConfig);
      }
      if (transformationCase_ == TransformationOneofCase.CryptoHashConfig) {
        output.WriteRawTag(74);
        output.WriteMessage(CryptoHashConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transformationCase_ == TransformationOneofCase.ReplaceConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReplaceConfig);
      }
      if (transformationCase_ == TransformationOneofCase.RedactConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedactConfig);
      }
      if (transformationCase_ == TransformationOneofCase.CharacterMaskConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CharacterMaskConfig);
      }
      if (transformationCase_ == TransformationOneofCase.CryptoReplaceFfxFpeConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CryptoReplaceFfxFpeConfig);
      }
      if (transformationCase_ == TransformationOneofCase.FixedSizeBucketingConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FixedSizeBucketingConfig);
      }
      if (transformationCase_ == TransformationOneofCase.BucketingConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BucketingConfig);
      }
      if (transformationCase_ == TransformationOneofCase.ReplaceWithInfoTypeConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReplaceWithInfoTypeConfig);
      }
      if (transformationCase_ == TransformationOneofCase.TimePartConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimePartConfig);
      }
      if (transformationCase_ == TransformationOneofCase.CryptoHashConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CryptoHashConfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrimitiveTransformation other) {
      if (other == null) {
        return;
      }
      switch (other.TransformationCase) {
        case TransformationOneofCase.ReplaceConfig:
          ReplaceConfig = other.ReplaceConfig;
          break;
        case TransformationOneofCase.RedactConfig:
          RedactConfig = other.RedactConfig;
          break;
        case TransformationOneofCase.CharacterMaskConfig:
          CharacterMaskConfig = other.CharacterMaskConfig;
          break;
        case TransformationOneofCase.CryptoReplaceFfxFpeConfig:
          CryptoReplaceFfxFpeConfig = other.CryptoReplaceFfxFpeConfig;
          break;
        case TransformationOneofCase.FixedSizeBucketingConfig:
          FixedSizeBucketingConfig = other.FixedSizeBucketingConfig;
          break;
        case TransformationOneofCase.BucketingConfig:
          BucketingConfig = other.BucketingConfig;
          break;
        case TransformationOneofCase.ReplaceWithInfoTypeConfig:
          ReplaceWithInfoTypeConfig = other.ReplaceWithInfoTypeConfig;
          break;
        case TransformationOneofCase.TimePartConfig:
          TimePartConfig = other.TimePartConfig;
          break;
        case TransformationOneofCase.CryptoHashConfig:
          CryptoHashConfig = other.CryptoHashConfig;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Cloud.Dlp.V2Beta1.ReplaceValueConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta1.ReplaceValueConfig();
            if (transformationCase_ == TransformationOneofCase.ReplaceConfig) {
              subBuilder.MergeFrom(ReplaceConfig);
            }
            input.ReadMessage(subBuilder);
            ReplaceConfig = subBuilder;
            break;
          }
          case 18: {
            global::Google.Cloud.Dlp.V2Beta1.RedactConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta1.RedactConfig();
            if (transformationCase_ == TransformationOneofCase.RedactConfig) {
              subBuilder.MergeFrom(RedactConfig);
            }
            input.ReadMessage(subBuilder);
            RedactConfig = subBuilder;
            break;
          }
          case 26: {
            global::Google.Cloud.Dlp.V2Beta1.CharacterMaskConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta1.CharacterMaskConfig();
            if (transformationCase_ == TransformationOneofCase.CharacterMaskConfig) {
              subBuilder.MergeFrom(CharacterMaskConfig);
            }
            input.ReadMessage(subBuilder);
            CharacterMaskConfig = subBuilder;
            break;
          }
          case 34: {
            global::Google.Cloud.Dlp.V2Beta1.CryptoReplaceFfxFpeConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta1.CryptoReplaceFfxFpeConfig();
            if (transformationCase_ == TransformationOneofCase.CryptoReplaceFfxFpeConfig) {
              subBuilder.MergeFrom(CryptoReplaceFfxFpeConfig);
            }
            input.ReadMessage(subBuilder);
            CryptoReplaceFfxFpeConfig = subBuilder;
            break;
          }
          case 42: {
            global::Google.Cloud.Dlp.V2Beta1.FixedSizeBucketingConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta1.FixedSizeBucketingConfig();
            if (transformationCase_ == TransformationOneofCase.FixedSizeBucketingConfig) {
              subBuilder.MergeFrom(FixedSizeBucketingConfig);
            }
            input.ReadMessage(subBuilder);
            FixedSizeBucketingConfig = subBuilder;
            break;
          }
          case 50: {
            global::Google.Cloud.Dlp.V2Beta1.BucketingConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta1.BucketingConfig();
            if (transformationCase_ == TransformationOneofCase.BucketingConfig) {
              subBuilder.MergeFrom(BucketingConfig);
            }
            input.ReadMessage(subBuilder);
            BucketingConfig = subBuilder;
            break;
          }
          case 58: {
            global::Google.Cloud.Dlp.V2Beta1.ReplaceWithInfoTypeConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta1.ReplaceWithInfoTypeConfig();
            if (transformationCase_ == TransformationOneofCase.ReplaceWithInfoTypeConfig) {
              subBuilder.MergeFrom(ReplaceWithInfoTypeConfig);
            }
            input.ReadMessage(subBuilder);
            ReplaceWithInfoTypeConfig = subBuilder;
            break;
          }
          case 66: {
            global::Google.Cloud.Dlp.V2Beta1.TimePartConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta1.TimePartConfig();
            if (transformationCase_ == TransformationOneofCase.TimePartConfig) {
              subBuilder.MergeFrom(TimePartConfig);
            }
            input.ReadMessage(subBuilder);
            TimePartConfig = subBuilder;
            break;
          }
          case 74: {
            global::Google.Cloud.Dlp.V2Beta1.CryptoHashConfig subBuilder = new global::Google.Cloud.Dlp.V2Beta1.CryptoHashConfig();
            if (transformationCase_ == TransformationOneofCase.CryptoHashConfig) {
              subBuilder.MergeFrom(CryptoHashConfig);
            }
            input.ReadMessage(subBuilder);
            CryptoHashConfig = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// For use with `Date`, `Timestamp`, and `TimeOfDay`, extract or preserve a
  /// portion of the value.
  /// </summary>
  public sealed partial class TimePartConfig : pb::IMessage<TimePartConfig> {
    private static readonly pb::MessageParser<TimePartConfig> _parser = new pb::MessageParser<TimePartConfig>(() => new TimePartConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimePartConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimePartConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimePartConfig(TimePartConfig other) : this() {
      partToExtract_ = other.partToExtract_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimePartConfig Clone() {
      return new TimePartConfig(this);
    }

    /// <summary>Field number for the "part_to_extract" field.</summary>
    public const int PartToExtractFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.TimePartConfig.Types.TimePart partToExtract_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.TimePartConfig.Types.TimePart PartToExtract {
      get { return partToExtract_; }
      set {
        partToExtract_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimePartConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimePartConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PartToExtract != other.PartToExtract) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PartToExtract != 0) hash ^= PartToExtract.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartToExtract != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PartToExtract);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartToExtract != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PartToExtract);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimePartConfig other) {
      if (other == null) {
        return;
      }
      if (other.PartToExtract != 0) {
        PartToExtract = other.PartToExtract;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            partToExtract_ = (global::Google.Cloud.Dlp.V2Beta1.TimePartConfig.Types.TimePart) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TimePartConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TimePart {
        [pbr::OriginalName("TIME_PART_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// [000-9999]
        /// </summary>
        [pbr::OriginalName("YEAR")] Year = 1,
        /// <summary>
        /// [1-12]
        /// </summary>
        [pbr::OriginalName("MONTH")] Month = 2,
        /// <summary>
        /// [1-31]
        /// </summary>
        [pbr::OriginalName("DAY_OF_MONTH")] DayOfMonth = 3,
        /// <summary>
        /// [1-7]
        /// </summary>
        [pbr::OriginalName("DAY_OF_WEEK")] DayOfWeek = 4,
        /// <summary>
        /// [1-52]
        /// </summary>
        [pbr::OriginalName("WEEK_OF_YEAR")] WeekOfYear = 5,
        /// <summary>
        /// [0-24]
        /// </summary>
        [pbr::OriginalName("HOUR_OF_DAY")] HourOfDay = 6,
      }

    }
    #endregion

  }

  /// <summary>
  /// Pseudonymization method that generates surrogates via cryptographic hashing.
  /// Uses SHA-256.
  /// Outputs a 32 byte digest as an uppercase hex string
  /// (for example, 41D1567F7F99F1DC2A5FAB886DEE5BEE).
  /// Currently, only string and integer values can be hashed.
  /// </summary>
  public sealed partial class CryptoHashConfig : pb::IMessage<CryptoHashConfig> {
    private static readonly pb::MessageParser<CryptoHashConfig> _parser = new pb::MessageParser<CryptoHashConfig>(() => new CryptoHashConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CryptoHashConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoHashConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoHashConfig(CryptoHashConfig other) : this() {
      CryptoKey = other.cryptoKey_ != null ? other.CryptoKey.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoHashConfig Clone() {
      return new CryptoHashConfig(this);
    }

    /// <summary>Field number for the "crypto_key" field.</summary>
    public const int CryptoKeyFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.CryptoKey cryptoKey_;
    /// <summary>
    /// The key used by the hash function.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.CryptoKey CryptoKey {
      get { return cryptoKey_; }
      set {
        cryptoKey_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CryptoHashConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CryptoHashConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CryptoKey, other.CryptoKey)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cryptoKey_ != null) hash ^= CryptoKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cryptoKey_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CryptoKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cryptoKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CryptoKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CryptoHashConfig other) {
      if (other == null) {
        return;
      }
      if (other.cryptoKey_ != null) {
        if (cryptoKey_ == null) {
          cryptoKey_ = new global::Google.Cloud.Dlp.V2Beta1.CryptoKey();
        }
        CryptoKey.MergeFrom(other.CryptoKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (cryptoKey_ == null) {
              cryptoKey_ = new global::Google.Cloud.Dlp.V2Beta1.CryptoKey();
            }
            input.ReadMessage(cryptoKey_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Replace each input value with a given `Value`.
  /// </summary>
  public sealed partial class ReplaceValueConfig : pb::IMessage<ReplaceValueConfig> {
    private static readonly pb::MessageParser<ReplaceValueConfig> _parser = new pb::MessageParser<ReplaceValueConfig>(() => new ReplaceValueConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplaceValueConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplaceValueConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplaceValueConfig(ReplaceValueConfig other) : this() {
      NewValue = other.newValue_ != null ? other.NewValue.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplaceValueConfig Clone() {
      return new ReplaceValueConfig(this);
    }

    /// <summary>Field number for the "new_value" field.</summary>
    public const int NewValueFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.Value newValue_;
    /// <summary>
    /// Value to replace it with.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.Value NewValue {
      get { return newValue_; }
      set {
        newValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplaceValueConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplaceValueConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NewValue, other.NewValue)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (newValue_ != null) hash ^= NewValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (newValue_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NewValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (newValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplaceValueConfig other) {
      if (other == null) {
        return;
      }
      if (other.newValue_ != null) {
        if (newValue_ == null) {
          newValue_ = new global::Google.Cloud.Dlp.V2Beta1.Value();
        }
        NewValue.MergeFrom(other.NewValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (newValue_ == null) {
              newValue_ = new global::Google.Cloud.Dlp.V2Beta1.Value();
            }
            input.ReadMessage(newValue_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Replace each matching finding with the name of the info_type.
  /// </summary>
  public sealed partial class ReplaceWithInfoTypeConfig : pb::IMessage<ReplaceWithInfoTypeConfig> {
    private static readonly pb::MessageParser<ReplaceWithInfoTypeConfig> _parser = new pb::MessageParser<ReplaceWithInfoTypeConfig>(() => new ReplaceWithInfoTypeConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplaceWithInfoTypeConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplaceWithInfoTypeConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplaceWithInfoTypeConfig(ReplaceWithInfoTypeConfig other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplaceWithInfoTypeConfig Clone() {
      return new ReplaceWithInfoTypeConfig(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplaceWithInfoTypeConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplaceWithInfoTypeConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplaceWithInfoTypeConfig other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// Redact a given value. For example, if used with an `InfoTypeTransformation`
  /// transforming PHONE_NUMBER, and input 'My phone number is 206-555-0123', the
  /// output would be 'My phone number is '.
  /// </summary>
  public sealed partial class RedactConfig : pb::IMessage<RedactConfig> {
    private static readonly pb::MessageParser<RedactConfig> _parser = new pb::MessageParser<RedactConfig>(() => new RedactConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedactConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedactConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedactConfig(RedactConfig other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedactConfig Clone() {
      return new RedactConfig(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedactConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedactConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedactConfig other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// Characters to skip when doing deidentification of a value. These will be left
  /// alone and skipped.
  /// </summary>
  public sealed partial class CharsToIgnore : pb::IMessage<CharsToIgnore> {
    private static readonly pb::MessageParser<CharsToIgnore> _parser = new pb::MessageParser<CharsToIgnore>(() => new CharsToIgnore());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharsToIgnore> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharsToIgnore() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharsToIgnore(CharsToIgnore other) : this() {
      switch (other.CharactersCase) {
        case CharactersOneofCase.CharactersToSkip:
          CharactersToSkip = other.CharactersToSkip;
          break;
        case CharactersOneofCase.CommonCharactersToIgnore:
          CommonCharactersToIgnore = other.CommonCharactersToIgnore;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharsToIgnore Clone() {
      return new CharsToIgnore(this);
    }

    /// <summary>Field number for the "characters_to_skip" field.</summary>
    public const int CharactersToSkipFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CharactersToSkip {
      get { return charactersCase_ == CharactersOneofCase.CharactersToSkip ? (string) characters_ : ""; }
      set {
        characters_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        charactersCase_ = CharactersOneofCase.CharactersToSkip;
      }
    }

    /// <summary>Field number for the "common_characters_to_ignore" field.</summary>
    public const int CommonCharactersToIgnoreFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.CharsToIgnore.Types.CharacterGroup CommonCharactersToIgnore {
      get { return charactersCase_ == CharactersOneofCase.CommonCharactersToIgnore ? (global::Google.Cloud.Dlp.V2Beta1.CharsToIgnore.Types.CharacterGroup) characters_ : 0; }
      set {
        characters_ = value;
        charactersCase_ = CharactersOneofCase.CommonCharactersToIgnore;
      }
    }

    private object characters_;
    /// <summary>Enum of possible cases for the "characters" oneof.</summary>
    public enum CharactersOneofCase {
      None = 0,
      CharactersToSkip = 1,
      CommonCharactersToIgnore = 2,
    }
    private CharactersOneofCase charactersCase_ = CharactersOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharactersOneofCase CharactersCase {
      get { return charactersCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCharacters() {
      charactersCase_ = CharactersOneofCase.None;
      characters_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharsToIgnore);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharsToIgnore other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CharactersToSkip != other.CharactersToSkip) return false;
      if (CommonCharactersToIgnore != other.CommonCharactersToIgnore) return false;
      if (CharactersCase != other.CharactersCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (charactersCase_ == CharactersOneofCase.CharactersToSkip) hash ^= CharactersToSkip.GetHashCode();
      if (charactersCase_ == CharactersOneofCase.CommonCharactersToIgnore) hash ^= CommonCharactersToIgnore.GetHashCode();
      hash ^= (int) charactersCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (charactersCase_ == CharactersOneofCase.CharactersToSkip) {
        output.WriteRawTag(10);
        output.WriteString(CharactersToSkip);
      }
      if (charactersCase_ == CharactersOneofCase.CommonCharactersToIgnore) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CommonCharactersToIgnore);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (charactersCase_ == CharactersOneofCase.CharactersToSkip) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CharactersToSkip);
      }
      if (charactersCase_ == CharactersOneofCase.CommonCharactersToIgnore) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommonCharactersToIgnore);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharsToIgnore other) {
      if (other == null) {
        return;
      }
      switch (other.CharactersCase) {
        case CharactersOneofCase.CharactersToSkip:
          CharactersToSkip = other.CharactersToSkip;
          break;
        case CharactersOneofCase.CommonCharactersToIgnore:
          CommonCharactersToIgnore = other.CommonCharactersToIgnore;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CharactersToSkip = input.ReadString();
            break;
          }
          case 16: {
            characters_ = input.ReadEnum();
            charactersCase_ = CharactersOneofCase.CommonCharactersToIgnore;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CharsToIgnore message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CharacterGroup {
        [pbr::OriginalName("CHARACTER_GROUP_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// 0-9
        /// </summary>
        [pbr::OriginalName("NUMERIC")] Numeric = 1,
        /// <summary>
        /// A-Z
        /// </summary>
        [pbr::OriginalName("ALPHA_UPPER_CASE")] AlphaUpperCase = 2,
        /// <summary>
        /// a-z
        /// </summary>
        [pbr::OriginalName("ALPHA_LOWER_CASE")] AlphaLowerCase = 3,
        /// <summary>
        /// US Punctuation, one of !"#$%&amp;'()*+,-./:;&lt;=>?@[\]^_`{|}~
        /// </summary>
        [pbr::OriginalName("PUNCTUATION")] Punctuation = 4,
        /// <summary>
        /// Whitespace character, one of [ \t\n\x0B\f\r]
        /// </summary>
        [pbr::OriginalName("WHITESPACE")] Whitespace = 5,
      }

    }
    #endregion

  }

  /// <summary>
  /// Partially mask a string by replacing a given number of characters with a
  /// fixed character. Masking can start from the beginning or end of the string.
  /// This can be used on data of any type (numbers, longs, and so on) and when
  /// de-identifying structured data we'll attempt to preserve the original data's
  /// type. (This allows you to take a long like 123 and modify it to a string like
  /// **3.
  /// </summary>
  public sealed partial class CharacterMaskConfig : pb::IMessage<CharacterMaskConfig> {
    private static readonly pb::MessageParser<CharacterMaskConfig> _parser = new pb::MessageParser<CharacterMaskConfig>(() => new CharacterMaskConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterMaskConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterMaskConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterMaskConfig(CharacterMaskConfig other) : this() {
      maskingCharacter_ = other.maskingCharacter_;
      numberToMask_ = other.numberToMask_;
      reverseOrder_ = other.reverseOrder_;
      charactersToIgnore_ = other.charactersToIgnore_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterMaskConfig Clone() {
      return new CharacterMaskConfig(this);
    }

    /// <summary>Field number for the "masking_character" field.</summary>
    public const int MaskingCharacterFieldNumber = 1;
    private string maskingCharacter_ = "";
    /// <summary>
    /// Character to mask the sensitive values&amp;mdash;for example, "*" for an
    /// alphabetic string such as name, or "0" for a numeric string such as ZIP
    /// code or credit card number. String must have length 1. If not supplied, we
    /// will default to "*" for strings, 0 for digits.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaskingCharacter {
      get { return maskingCharacter_; }
      set {
        maskingCharacter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "number_to_mask" field.</summary>
    public const int NumberToMaskFieldNumber = 2;
    private int numberToMask_;
    /// <summary>
    /// Number of characters to mask. If not set, all matching chars will be
    /// masked. Skipped characters do not count towards this tally.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberToMask {
      get { return numberToMask_; }
      set {
        numberToMask_ = value;
      }
    }

    /// <summary>Field number for the "reverse_order" field.</summary>
    public const int ReverseOrderFieldNumber = 3;
    private bool reverseOrder_;
    /// <summary>
    /// Mask characters in reverse order. For example, if `masking_character` is
    /// '0', number_to_mask is 14, and `reverse_order` is false, then
    /// 1234-5678-9012-3456 -> 00000000000000-3456
    /// If `masking_character` is '*', `number_to_mask` is 3, and `reverse_order`
    /// is true, then 12345 -> 12***
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReverseOrder {
      get { return reverseOrder_; }
      set {
        reverseOrder_ = value;
      }
    }

    /// <summary>Field number for the "characters_to_ignore" field.</summary>
    public const int CharactersToIgnoreFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.CharsToIgnore> _repeated_charactersToIgnore_codec
        = pb::FieldCodec.ForMessage(34, global::Google.Cloud.Dlp.V2Beta1.CharsToIgnore.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.CharsToIgnore> charactersToIgnore_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.CharsToIgnore>();
    /// <summary>
    /// When masking a string, items in this list will be skipped when replacing.
    /// For example, if your string is 555-555-5555 and you ask us to skip `-` and
    /// mask 5 chars with * we would produce ***-*55-5555.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.CharsToIgnore> CharactersToIgnore {
      get { return charactersToIgnore_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharacterMaskConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterMaskConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaskingCharacter != other.MaskingCharacter) return false;
      if (NumberToMask != other.NumberToMask) return false;
      if (ReverseOrder != other.ReverseOrder) return false;
      if(!charactersToIgnore_.Equals(other.charactersToIgnore_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaskingCharacter.Length != 0) hash ^= MaskingCharacter.GetHashCode();
      if (NumberToMask != 0) hash ^= NumberToMask.GetHashCode();
      if (ReverseOrder != false) hash ^= ReverseOrder.GetHashCode();
      hash ^= charactersToIgnore_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaskingCharacter.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MaskingCharacter);
      }
      if (NumberToMask != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumberToMask);
      }
      if (ReverseOrder != false) {
        output.WriteRawTag(24);
        output.WriteBool(ReverseOrder);
      }
      charactersToIgnore_.WriteTo(output, _repeated_charactersToIgnore_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaskingCharacter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaskingCharacter);
      }
      if (NumberToMask != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberToMask);
      }
      if (ReverseOrder != false) {
        size += 1 + 1;
      }
      size += charactersToIgnore_.CalculateSize(_repeated_charactersToIgnore_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterMaskConfig other) {
      if (other == null) {
        return;
      }
      if (other.MaskingCharacter.Length != 0) {
        MaskingCharacter = other.MaskingCharacter;
      }
      if (other.NumberToMask != 0) {
        NumberToMask = other.NumberToMask;
      }
      if (other.ReverseOrder != false) {
        ReverseOrder = other.ReverseOrder;
      }
      charactersToIgnore_.Add(other.charactersToIgnore_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MaskingCharacter = input.ReadString();
            break;
          }
          case 16: {
            NumberToMask = input.ReadInt32();
            break;
          }
          case 24: {
            ReverseOrder = input.ReadBool();
            break;
          }
          case 34: {
            charactersToIgnore_.AddEntriesFrom(input, _repeated_charactersToIgnore_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Buckets values based on fixed size ranges. The
  /// Bucketing transformation can provide all of this functionality,
  /// but requires more configuration. This message is provided as a convenience to
  /// the user for simple bucketing strategies.
  /// The resulting value will be a hyphenated string of
  /// lower_bound-upper_bound.
  /// This can be used on data of type: double, long.
  /// If the bound Value type differs from the type of data
  /// being transformed, we will first attempt converting the type of the data to
  /// be transformed to match the type of the bound before comparing.
  /// </summary>
  public sealed partial class FixedSizeBucketingConfig : pb::IMessage<FixedSizeBucketingConfig> {
    private static readonly pb::MessageParser<FixedSizeBucketingConfig> _parser = new pb::MessageParser<FixedSizeBucketingConfig>(() => new FixedSizeBucketingConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FixedSizeBucketingConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FixedSizeBucketingConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FixedSizeBucketingConfig(FixedSizeBucketingConfig other) : this() {
      LowerBound = other.lowerBound_ != null ? other.LowerBound.Clone() : null;
      UpperBound = other.upperBound_ != null ? other.UpperBound.Clone() : null;
      bucketSize_ = other.bucketSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FixedSizeBucketingConfig Clone() {
      return new FixedSizeBucketingConfig(this);
    }

    /// <summary>Field number for the "lower_bound" field.</summary>
    public const int LowerBoundFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.Value lowerBound_;
    /// <summary>
    /// Lower bound value of buckets. All values less than `lower_bound` are
    /// grouped together into a single bucket; for example if `lower_bound` = 10,
    /// then all values less than 10 are replaced with the value “-10”. [Required].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.Value LowerBound {
      get { return lowerBound_; }
      set {
        lowerBound_ = value;
      }
    }

    /// <summary>Field number for the "upper_bound" field.</summary>
    public const int UpperBoundFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta1.Value upperBound_;
    /// <summary>
    /// Upper bound value of buckets. All values greater than upper_bound are
    /// grouped together into a single bucket; for example if `upper_bound` = 89,
    /// then all values greater than 89 are replaced with the value “89+”.
    /// [Required].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.Value UpperBound {
      get { return upperBound_; }
      set {
        upperBound_ = value;
      }
    }

    /// <summary>Field number for the "bucket_size" field.</summary>
    public const int BucketSizeFieldNumber = 3;
    private double bucketSize_;
    /// <summary>
    /// Size of each bucket (except for minimum and maximum buckets). So if
    /// `lower_bound` = 10, `upper_bound` = 89, and `bucket_size` = 10, then the
    /// following buckets would be used: -10, 10-20, 20-30, 30-40, 40-50, 50-60,
    /// 60-70, 70-80, 80-89, 89+. Precision up to 2 decimals works. [Required].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BucketSize {
      get { return bucketSize_; }
      set {
        bucketSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FixedSizeBucketingConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FixedSizeBucketingConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LowerBound, other.LowerBound)) return false;
      if (!object.Equals(UpperBound, other.UpperBound)) return false;
      if (BucketSize != other.BucketSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (lowerBound_ != null) hash ^= LowerBound.GetHashCode();
      if (upperBound_ != null) hash ^= UpperBound.GetHashCode();
      if (BucketSize != 0D) hash ^= BucketSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (lowerBound_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LowerBound);
      }
      if (upperBound_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UpperBound);
      }
      if (BucketSize != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(BucketSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (lowerBound_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LowerBound);
      }
      if (upperBound_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpperBound);
      }
      if (BucketSize != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FixedSizeBucketingConfig other) {
      if (other == null) {
        return;
      }
      if (other.lowerBound_ != null) {
        if (lowerBound_ == null) {
          lowerBound_ = new global::Google.Cloud.Dlp.V2Beta1.Value();
        }
        LowerBound.MergeFrom(other.LowerBound);
      }
      if (other.upperBound_ != null) {
        if (upperBound_ == null) {
          upperBound_ = new global::Google.Cloud.Dlp.V2Beta1.Value();
        }
        UpperBound.MergeFrom(other.UpperBound);
      }
      if (other.BucketSize != 0D) {
        BucketSize = other.BucketSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (lowerBound_ == null) {
              lowerBound_ = new global::Google.Cloud.Dlp.V2Beta1.Value();
            }
            input.ReadMessage(lowerBound_);
            break;
          }
          case 18: {
            if (upperBound_ == null) {
              upperBound_ = new global::Google.Cloud.Dlp.V2Beta1.Value();
            }
            input.ReadMessage(upperBound_);
            break;
          }
          case 25: {
            BucketSize = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Generalization function that buckets values based on ranges. The ranges and
  /// replacement values are dynamically provided by the user for custom behavior,
  /// such as 1-30 -> LOW 31-65 -> MEDIUM 66-100 -> HIGH
  /// This can be used on
  /// data of type: number, long, string, timestamp.
  /// If the bound `Value` type differs from the type of data being transformed, we
  /// will first attempt converting the type of the data to be transformed to match
  /// the type of the bound before comparing.
  /// </summary>
  public sealed partial class BucketingConfig : pb::IMessage<BucketingConfig> {
    private static readonly pb::MessageParser<BucketingConfig> _parser = new pb::MessageParser<BucketingConfig>(() => new BucketingConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BucketingConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BucketingConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BucketingConfig(BucketingConfig other) : this() {
      buckets_ = other.buckets_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BucketingConfig Clone() {
      return new BucketingConfig(this);
    }

    /// <summary>Field number for the "buckets" field.</summary>
    public const int BucketsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.BucketingConfig.Types.Bucket> _repeated_buckets_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.BucketingConfig.Types.Bucket.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.BucketingConfig.Types.Bucket> buckets_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.BucketingConfig.Types.Bucket>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.BucketingConfig.Types.Bucket> Buckets {
      get { return buckets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BucketingConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BucketingConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!buckets_.Equals(other.buckets_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= buckets_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      buckets_.WriteTo(output, _repeated_buckets_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += buckets_.CalculateSize(_repeated_buckets_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BucketingConfig other) {
      if (other == null) {
        return;
      }
      buckets_.Add(other.buckets_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            buckets_.AddEntriesFrom(input, _repeated_buckets_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BucketingConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Buckets represented as ranges, along with replacement values. Ranges must
      /// be non-overlapping.
      /// </summary>
      public sealed partial class Bucket : pb::IMessage<Bucket> {
        private static readonly pb::MessageParser<Bucket> _parser = new pb::MessageParser<Bucket>(() => new Bucket());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Bucket> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta1.BucketingConfig.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Bucket() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Bucket(Bucket other) : this() {
          Min = other.min_ != null ? other.Min.Clone() : null;
          Max = other.max_ != null ? other.Max.Clone() : null;
          ReplacementValue = other.replacementValue_ != null ? other.ReplacementValue.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Bucket Clone() {
          return new Bucket(this);
        }

        /// <summary>Field number for the "min" field.</summary>
        public const int MinFieldNumber = 1;
        private global::Google.Cloud.Dlp.V2Beta1.Value min_;
        /// <summary>
        /// Lower bound of the range, inclusive. Type should be the same as max if
        /// used.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta1.Value Min {
          get { return min_; }
          set {
            min_ = value;
          }
        }

        /// <summary>Field number for the "max" field.</summary>
        public const int MaxFieldNumber = 2;
        private global::Google.Cloud.Dlp.V2Beta1.Value max_;
        /// <summary>
        /// Upper bound of the range, exclusive; type must match min.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta1.Value Max {
          get { return max_; }
          set {
            max_ = value;
          }
        }

        /// <summary>Field number for the "replacement_value" field.</summary>
        public const int ReplacementValueFieldNumber = 3;
        private global::Google.Cloud.Dlp.V2Beta1.Value replacementValue_;
        /// <summary>
        /// Replacement value for this bucket. If not provided
        /// the default behavior will be to hyphenate the min-max range.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta1.Value ReplacementValue {
          get { return replacementValue_; }
          set {
            replacementValue_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Bucket);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Bucket other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Min, other.Min)) return false;
          if (!object.Equals(Max, other.Max)) return false;
          if (!object.Equals(ReplacementValue, other.ReplacementValue)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (min_ != null) hash ^= Min.GetHashCode();
          if (max_ != null) hash ^= Max.GetHashCode();
          if (replacementValue_ != null) hash ^= ReplacementValue.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (min_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Min);
          }
          if (max_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Max);
          }
          if (replacementValue_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(ReplacementValue);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (min_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Min);
          }
          if (max_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Max);
          }
          if (replacementValue_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReplacementValue);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Bucket other) {
          if (other == null) {
            return;
          }
          if (other.min_ != null) {
            if (min_ == null) {
              min_ = new global::Google.Cloud.Dlp.V2Beta1.Value();
            }
            Min.MergeFrom(other.Min);
          }
          if (other.max_ != null) {
            if (max_ == null) {
              max_ = new global::Google.Cloud.Dlp.V2Beta1.Value();
            }
            Max.MergeFrom(other.Max);
          }
          if (other.replacementValue_ != null) {
            if (replacementValue_ == null) {
              replacementValue_ = new global::Google.Cloud.Dlp.V2Beta1.Value();
            }
            ReplacementValue.MergeFrom(other.ReplacementValue);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (min_ == null) {
                  min_ = new global::Google.Cloud.Dlp.V2Beta1.Value();
                }
                input.ReadMessage(min_);
                break;
              }
              case 18: {
                if (max_ == null) {
                  max_ = new global::Google.Cloud.Dlp.V2Beta1.Value();
                }
                input.ReadMessage(max_);
                break;
              }
              case 26: {
                if (replacementValue_ == null) {
                  replacementValue_ = new global::Google.Cloud.Dlp.V2Beta1.Value();
                }
                input.ReadMessage(replacementValue_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Replaces an identifier with a surrogate using FPE with the FFX
  /// mode of operation.
  /// The identifier must be representable by the US-ASCII character set.
  /// For a given crypto key and context, the same identifier will be
  /// replaced with the same surrogate.
  /// Identifiers must be at least two characters long.
  /// In the case that the identifier is the empty string, it will be skipped.
  /// </summary>
  public sealed partial class CryptoReplaceFfxFpeConfig : pb::IMessage<CryptoReplaceFfxFpeConfig> {
    private static readonly pb::MessageParser<CryptoReplaceFfxFpeConfig> _parser = new pb::MessageParser<CryptoReplaceFfxFpeConfig>(() => new CryptoReplaceFfxFpeConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CryptoReplaceFfxFpeConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoReplaceFfxFpeConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoReplaceFfxFpeConfig(CryptoReplaceFfxFpeConfig other) : this() {
      CryptoKey = other.cryptoKey_ != null ? other.CryptoKey.Clone() : null;
      Context = other.context_ != null ? other.Context.Clone() : null;
      switch (other.AlphabetCase) {
        case AlphabetOneofCase.CommonAlphabet:
          CommonAlphabet = other.CommonAlphabet;
          break;
        case AlphabetOneofCase.CustomAlphabet:
          CustomAlphabet = other.CustomAlphabet;
          break;
        case AlphabetOneofCase.Radix:
          Radix = other.Radix;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoReplaceFfxFpeConfig Clone() {
      return new CryptoReplaceFfxFpeConfig(this);
    }

    /// <summary>Field number for the "crypto_key" field.</summary>
    public const int CryptoKeyFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.CryptoKey cryptoKey_;
    /// <summary>
    /// The key used by the encryption algorithm. [required]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.CryptoKey CryptoKey {
      get { return cryptoKey_; }
      set {
        cryptoKey_ = value;
      }
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta1.FieldId context_;
    /// <summary>
    /// A context may be used for higher security since the same
    /// identifier in two different contexts likely will be given a distinct
    /// surrogate. The principle is that the likeliness is inversely related
    /// to the ratio of the number of distinct identifiers per context over the
    /// number of possible surrogates: As long as this ratio is small, the
    /// likehood is large.
    ///
    /// If the context is not set, a default tweak will be used.
    /// If the context is set but:
    ///
    /// 1. there is no record present when transforming a given value or
    /// 1. the field is not present when transforming a given value,
    ///
    /// a default tweak will be used.
    ///
    /// Note that case (1) is expected when an `InfoTypeTransformation` is
    /// applied to both structured and non-structured `ContentItem`s.
    /// Currently, the referenced field may be of value type integer or string.
    ///
    /// The tweak is constructed as a sequence of bytes in big endian byte order
    /// such that:
    ///
    /// - a 64 bit integer is encoded followed by a single byte of value 1
    /// - a string is encoded in UTF-8 format followed by a single byte of value 2
    ///
    /// This is also known as the 'tweak', as in tweakable encryption.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.FieldId Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "common_alphabet" field.</summary>
    public const int CommonAlphabetFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.CryptoReplaceFfxFpeConfig.Types.FfxCommonNativeAlphabet CommonAlphabet {
      get { return alphabetCase_ == AlphabetOneofCase.CommonAlphabet ? (global::Google.Cloud.Dlp.V2Beta1.CryptoReplaceFfxFpeConfig.Types.FfxCommonNativeAlphabet) alphabet_ : 0; }
      set {
        alphabet_ = value;
        alphabetCase_ = AlphabetOneofCase.CommonAlphabet;
      }
    }

    /// <summary>Field number for the "custom_alphabet" field.</summary>
    public const int CustomAlphabetFieldNumber = 5;
    /// <summary>
    /// This is supported by mapping these to the alphanumeric characters
    /// that the FFX mode natively supports. This happens before/after
    /// encryption/decryption.
    /// Each character listed must appear only once.
    /// Number of characters must be in the range [2, 62].
    /// This must be encoded as ASCII.
    /// The order of characters does not matter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomAlphabet {
      get { return alphabetCase_ == AlphabetOneofCase.CustomAlphabet ? (string) alphabet_ : ""; }
      set {
        alphabet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        alphabetCase_ = AlphabetOneofCase.CustomAlphabet;
      }
    }

    /// <summary>Field number for the "radix" field.</summary>
    public const int RadixFieldNumber = 6;
    /// <summary>
    /// The native way to select the alphabet. Must be in the range [2, 62].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Radix {
      get { return alphabetCase_ == AlphabetOneofCase.Radix ? (int) alphabet_ : 0; }
      set {
        alphabet_ = value;
        alphabetCase_ = AlphabetOneofCase.Radix;
      }
    }

    private object alphabet_;
    /// <summary>Enum of possible cases for the "alphabet" oneof.</summary>
    public enum AlphabetOneofCase {
      None = 0,
      CommonAlphabet = 4,
      CustomAlphabet = 5,
      Radix = 6,
    }
    private AlphabetOneofCase alphabetCase_ = AlphabetOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlphabetOneofCase AlphabetCase {
      get { return alphabetCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAlphabet() {
      alphabetCase_ = AlphabetOneofCase.None;
      alphabet_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CryptoReplaceFfxFpeConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CryptoReplaceFfxFpeConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CryptoKey, other.CryptoKey)) return false;
      if (!object.Equals(Context, other.Context)) return false;
      if (CommonAlphabet != other.CommonAlphabet) return false;
      if (CustomAlphabet != other.CustomAlphabet) return false;
      if (Radix != other.Radix) return false;
      if (AlphabetCase != other.AlphabetCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cryptoKey_ != null) hash ^= CryptoKey.GetHashCode();
      if (context_ != null) hash ^= Context.GetHashCode();
      if (alphabetCase_ == AlphabetOneofCase.CommonAlphabet) hash ^= CommonAlphabet.GetHashCode();
      if (alphabetCase_ == AlphabetOneofCase.CustomAlphabet) hash ^= CustomAlphabet.GetHashCode();
      if (alphabetCase_ == AlphabetOneofCase.Radix) hash ^= Radix.GetHashCode();
      hash ^= (int) alphabetCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cryptoKey_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CryptoKey);
      }
      if (context_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Context);
      }
      if (alphabetCase_ == AlphabetOneofCase.CommonAlphabet) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CommonAlphabet);
      }
      if (alphabetCase_ == AlphabetOneofCase.CustomAlphabet) {
        output.WriteRawTag(42);
        output.WriteString(CustomAlphabet);
      }
      if (alphabetCase_ == AlphabetOneofCase.Radix) {
        output.WriteRawTag(48);
        output.WriteInt32(Radix);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cryptoKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CryptoKey);
      }
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (alphabetCase_ == AlphabetOneofCase.CommonAlphabet) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommonAlphabet);
      }
      if (alphabetCase_ == AlphabetOneofCase.CustomAlphabet) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomAlphabet);
      }
      if (alphabetCase_ == AlphabetOneofCase.Radix) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Radix);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CryptoReplaceFfxFpeConfig other) {
      if (other == null) {
        return;
      }
      if (other.cryptoKey_ != null) {
        if (cryptoKey_ == null) {
          cryptoKey_ = new global::Google.Cloud.Dlp.V2Beta1.CryptoKey();
        }
        CryptoKey.MergeFrom(other.CryptoKey);
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::Google.Cloud.Dlp.V2Beta1.FieldId();
        }
        Context.MergeFrom(other.Context);
      }
      switch (other.AlphabetCase) {
        case AlphabetOneofCase.CommonAlphabet:
          CommonAlphabet = other.CommonAlphabet;
          break;
        case AlphabetOneofCase.CustomAlphabet:
          CustomAlphabet = other.CustomAlphabet;
          break;
        case AlphabetOneofCase.Radix:
          Radix = other.Radix;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (cryptoKey_ == null) {
              cryptoKey_ = new global::Google.Cloud.Dlp.V2Beta1.CryptoKey();
            }
            input.ReadMessage(cryptoKey_);
            break;
          }
          case 18: {
            if (context_ == null) {
              context_ = new global::Google.Cloud.Dlp.V2Beta1.FieldId();
            }
            input.ReadMessage(context_);
            break;
          }
          case 32: {
            alphabet_ = input.ReadEnum();
            alphabetCase_ = AlphabetOneofCase.CommonAlphabet;
            break;
          }
          case 42: {
            CustomAlphabet = input.ReadString();
            break;
          }
          case 48: {
            Radix = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CryptoReplaceFfxFpeConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// These are commonly used subsets of the alphabet that the FFX mode
      /// natively supports. In the algorithm, the alphabet is selected using
      /// the "radix". Therefore each corresponds to particular radix.
      /// </summary>
      public enum FfxCommonNativeAlphabet {
        [pbr::OriginalName("FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// [0-9] (radix of 10)
        /// </summary>
        [pbr::OriginalName("NUMERIC")] Numeric = 1,
        /// <summary>
        /// [0-9A-F] (radix of 16)
        /// </summary>
        [pbr::OriginalName("HEXADECIMAL")] Hexadecimal = 2,
        /// <summary>
        /// [0-9A-Z] (radix of 36)
        /// </summary>
        [pbr::OriginalName("UPPER_CASE_ALPHA_NUMERIC")] UpperCaseAlphaNumeric = 3,
        /// <summary>
        /// [0-9A-Za-z] (radix of 62)
        /// </summary>
        [pbr::OriginalName("ALPHA_NUMERIC")] AlphaNumeric = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// This is a data encryption key (DEK) (as opposed to
  /// a key encryption key (KEK) stored by KMS).
  /// When using KMS to wrap/unwrap DEKs, be sure to set an appropriate
  /// IAM policy on the KMS CryptoKey (KEK) to ensure an attacker cannot
  /// unwrap the data crypto key.
  /// </summary>
  public sealed partial class CryptoKey : pb::IMessage<CryptoKey> {
    private static readonly pb::MessageParser<CryptoKey> _parser = new pb::MessageParser<CryptoKey>(() => new CryptoKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CryptoKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoKey(CryptoKey other) : this() {
      switch (other.SourceCase) {
        case SourceOneofCase.Transient:
          Transient = other.Transient.Clone();
          break;
        case SourceOneofCase.Unwrapped:
          Unwrapped = other.Unwrapped.Clone();
          break;
        case SourceOneofCase.KmsWrapped:
          KmsWrapped = other.KmsWrapped.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoKey Clone() {
      return new CryptoKey(this);
    }

    /// <summary>Field number for the "transient" field.</summary>
    public const int TransientFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.TransientCryptoKey Transient {
      get { return sourceCase_ == SourceOneofCase.Transient ? (global::Google.Cloud.Dlp.V2Beta1.TransientCryptoKey) source_ : null; }
      set {
        source_ = value;
        sourceCase_ = value == null ? SourceOneofCase.None : SourceOneofCase.Transient;
      }
    }

    /// <summary>Field number for the "unwrapped" field.</summary>
    public const int UnwrappedFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.UnwrappedCryptoKey Unwrapped {
      get { return sourceCase_ == SourceOneofCase.Unwrapped ? (global::Google.Cloud.Dlp.V2Beta1.UnwrappedCryptoKey) source_ : null; }
      set {
        source_ = value;
        sourceCase_ = value == null ? SourceOneofCase.None : SourceOneofCase.Unwrapped;
      }
    }

    /// <summary>Field number for the "kms_wrapped" field.</summary>
    public const int KmsWrappedFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.KmsWrappedCryptoKey KmsWrapped {
      get { return sourceCase_ == SourceOneofCase.KmsWrapped ? (global::Google.Cloud.Dlp.V2Beta1.KmsWrappedCryptoKey) source_ : null; }
      set {
        source_ = value;
        sourceCase_ = value == null ? SourceOneofCase.None : SourceOneofCase.KmsWrapped;
      }
    }

    private object source_;
    /// <summary>Enum of possible cases for the "source" oneof.</summary>
    public enum SourceOneofCase {
      None = 0,
      Transient = 1,
      Unwrapped = 2,
      KmsWrapped = 3,
    }
    private SourceOneofCase sourceCase_ = SourceOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceOneofCase SourceCase {
      get { return sourceCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSource() {
      sourceCase_ = SourceOneofCase.None;
      source_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CryptoKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CryptoKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Transient, other.Transient)) return false;
      if (!object.Equals(Unwrapped, other.Unwrapped)) return false;
      if (!object.Equals(KmsWrapped, other.KmsWrapped)) return false;
      if (SourceCase != other.SourceCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sourceCase_ == SourceOneofCase.Transient) hash ^= Transient.GetHashCode();
      if (sourceCase_ == SourceOneofCase.Unwrapped) hash ^= Unwrapped.GetHashCode();
      if (sourceCase_ == SourceOneofCase.KmsWrapped) hash ^= KmsWrapped.GetHashCode();
      hash ^= (int) sourceCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sourceCase_ == SourceOneofCase.Transient) {
        output.WriteRawTag(10);
        output.WriteMessage(Transient);
      }
      if (sourceCase_ == SourceOneofCase.Unwrapped) {
        output.WriteRawTag(18);
        output.WriteMessage(Unwrapped);
      }
      if (sourceCase_ == SourceOneofCase.KmsWrapped) {
        output.WriteRawTag(26);
        output.WriteMessage(KmsWrapped);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sourceCase_ == SourceOneofCase.Transient) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transient);
      }
      if (sourceCase_ == SourceOneofCase.Unwrapped) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unwrapped);
      }
      if (sourceCase_ == SourceOneofCase.KmsWrapped) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KmsWrapped);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CryptoKey other) {
      if (other == null) {
        return;
      }
      switch (other.SourceCase) {
        case SourceOneofCase.Transient:
          Transient = other.Transient;
          break;
        case SourceOneofCase.Unwrapped:
          Unwrapped = other.Unwrapped;
          break;
        case SourceOneofCase.KmsWrapped:
          KmsWrapped = other.KmsWrapped;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Cloud.Dlp.V2Beta1.TransientCryptoKey subBuilder = new global::Google.Cloud.Dlp.V2Beta1.TransientCryptoKey();
            if (sourceCase_ == SourceOneofCase.Transient) {
              subBuilder.MergeFrom(Transient);
            }
            input.ReadMessage(subBuilder);
            Transient = subBuilder;
            break;
          }
          case 18: {
            global::Google.Cloud.Dlp.V2Beta1.UnwrappedCryptoKey subBuilder = new global::Google.Cloud.Dlp.V2Beta1.UnwrappedCryptoKey();
            if (sourceCase_ == SourceOneofCase.Unwrapped) {
              subBuilder.MergeFrom(Unwrapped);
            }
            input.ReadMessage(subBuilder);
            Unwrapped = subBuilder;
            break;
          }
          case 26: {
            global::Google.Cloud.Dlp.V2Beta1.KmsWrappedCryptoKey subBuilder = new global::Google.Cloud.Dlp.V2Beta1.KmsWrappedCryptoKey();
            if (sourceCase_ == SourceOneofCase.KmsWrapped) {
              subBuilder.MergeFrom(KmsWrapped);
            }
            input.ReadMessage(subBuilder);
            KmsWrapped = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Use this to have a random data crypto key generated.
  /// It will be discarded after the operation/request finishes.
  /// </summary>
  public sealed partial class TransientCryptoKey : pb::IMessage<TransientCryptoKey> {
    private static readonly pb::MessageParser<TransientCryptoKey> _parser = new pb::MessageParser<TransientCryptoKey>(() => new TransientCryptoKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransientCryptoKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransientCryptoKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransientCryptoKey(TransientCryptoKey other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransientCryptoKey Clone() {
      return new TransientCryptoKey(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the key. [required]
    /// This is an arbitrary string used to differentiate different keys.
    /// A unique key is generated per name: two separate `TransientCryptoKey`
    /// protos share the same generated key if their names are the same.
    /// When the data crypto key is generated, this name is not used in any way
    /// (repeating the api call will result in a different key being generated).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransientCryptoKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransientCryptoKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransientCryptoKey other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Using raw keys is prone to security risks due to accidentally
  /// leaking the key. Choose another type of key if possible.
  /// </summary>
  public sealed partial class UnwrappedCryptoKey : pb::IMessage<UnwrappedCryptoKey> {
    private static readonly pb::MessageParser<UnwrappedCryptoKey> _parser = new pb::MessageParser<UnwrappedCryptoKey>(() => new UnwrappedCryptoKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnwrappedCryptoKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnwrappedCryptoKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnwrappedCryptoKey(UnwrappedCryptoKey other) : this() {
      key_ = other.key_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnwrappedCryptoKey Clone() {
      return new UnwrappedCryptoKey(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private pb::ByteString key_ = pb::ByteString.Empty;
    /// <summary>
    /// The AES 128/192/256 bit key. [required]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnwrappedCryptoKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnwrappedCryptoKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Key);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnwrappedCryptoKey other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Include to use an existing data crypto key wrapped by KMS.
  /// Authorization requires the following IAM permissions when sending a request
  /// to perform a crypto transformation using a kms-wrapped crypto key:
  /// dlp.kms.encrypt
  /// </summary>
  public sealed partial class KmsWrappedCryptoKey : pb::IMessage<KmsWrappedCryptoKey> {
    private static readonly pb::MessageParser<KmsWrappedCryptoKey> _parser = new pb::MessageParser<KmsWrappedCryptoKey>(() => new KmsWrappedCryptoKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KmsWrappedCryptoKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KmsWrappedCryptoKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KmsWrappedCryptoKey(KmsWrappedCryptoKey other) : this() {
      wrappedKey_ = other.wrappedKey_;
      cryptoKeyName_ = other.cryptoKeyName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KmsWrappedCryptoKey Clone() {
      return new KmsWrappedCryptoKey(this);
    }

    /// <summary>Field number for the "wrapped_key" field.</summary>
    public const int WrappedKeyFieldNumber = 1;
    private pb::ByteString wrappedKey_ = pb::ByteString.Empty;
    /// <summary>
    /// The wrapped data crypto key. [required]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString WrappedKey {
      get { return wrappedKey_; }
      set {
        wrappedKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "crypto_key_name" field.</summary>
    public const int CryptoKeyNameFieldNumber = 2;
    private string cryptoKeyName_ = "";
    /// <summary>
    /// The resource name of the KMS CryptoKey to use for unwrapping. [required]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CryptoKeyName {
      get { return cryptoKeyName_; }
      set {
        cryptoKeyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KmsWrappedCryptoKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KmsWrappedCryptoKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WrappedKey != other.WrappedKey) return false;
      if (CryptoKeyName != other.CryptoKeyName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WrappedKey.Length != 0) hash ^= WrappedKey.GetHashCode();
      if (CryptoKeyName.Length != 0) hash ^= CryptoKeyName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WrappedKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(WrappedKey);
      }
      if (CryptoKeyName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CryptoKeyName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WrappedKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(WrappedKey);
      }
      if (CryptoKeyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CryptoKeyName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KmsWrappedCryptoKey other) {
      if (other == null) {
        return;
      }
      if (other.WrappedKey.Length != 0) {
        WrappedKey = other.WrappedKey;
      }
      if (other.CryptoKeyName.Length != 0) {
        CryptoKeyName = other.CryptoKeyName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WrappedKey = input.ReadBytes();
            break;
          }
          case 18: {
            CryptoKeyName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A type of transformation that will scan unstructured text and
  /// apply various `PrimitiveTransformation`s to each finding, where the
  /// transformation is applied to only values that were identified as a specific
  /// info_type.
  /// </summary>
  public sealed partial class InfoTypeTransformations : pb::IMessage<InfoTypeTransformations> {
    private static readonly pb::MessageParser<InfoTypeTransformations> _parser = new pb::MessageParser<InfoTypeTransformations>(() => new InfoTypeTransformations());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InfoTypeTransformations> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTypeTransformations() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTypeTransformations(InfoTypeTransformations other) : this() {
      transformations_ = other.transformations_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTypeTransformations Clone() {
      return new InfoTypeTransformations(this);
    }

    /// <summary>Field number for the "transformations" field.</summary>
    public const int TransformationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.InfoTypeTransformations.Types.InfoTypeTransformation> _repeated_transformations_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.InfoTypeTransformations.Types.InfoTypeTransformation.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InfoTypeTransformations.Types.InfoTypeTransformation> transformations_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InfoTypeTransformations.Types.InfoTypeTransformation>();
    /// <summary>
    /// Transformation for each info type. Cannot specify more than one
    /// for a given info type. [required]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InfoTypeTransformations.Types.InfoTypeTransformation> Transformations {
      get { return transformations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InfoTypeTransformations);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InfoTypeTransformations other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!transformations_.Equals(other.transformations_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= transformations_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      transformations_.WriteTo(output, _repeated_transformations_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += transformations_.CalculateSize(_repeated_transformations_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InfoTypeTransformations other) {
      if (other == null) {
        return;
      }
      transformations_.Add(other.transformations_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            transformations_.AddEntriesFrom(input, _repeated_transformations_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the InfoTypeTransformations message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A transformation to apply to text that is identified as a specific
      /// info_type.
      /// </summary>
      public sealed partial class InfoTypeTransformation : pb::IMessage<InfoTypeTransformation> {
        private static readonly pb::MessageParser<InfoTypeTransformation> _parser = new pb::MessageParser<InfoTypeTransformation>(() => new InfoTypeTransformation());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InfoTypeTransformation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta1.InfoTypeTransformations.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InfoTypeTransformation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InfoTypeTransformation(InfoTypeTransformation other) : this() {
          infoTypes_ = other.infoTypes_.Clone();
          PrimitiveTransformation = other.primitiveTransformation_ != null ? other.PrimitiveTransformation.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InfoTypeTransformation Clone() {
          return new InfoTypeTransformation(this);
        }

        /// <summary>Field number for the "info_types" field.</summary>
        public const int InfoTypesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.InfoType> _repeated_infoTypes_codec
            = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.InfoType.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InfoType> infoTypes_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InfoType>();
        /// <summary>
        /// Info types to apply the transformation to. Empty list will match all
        /// available info types for this transformation.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InfoType> InfoTypes {
          get { return infoTypes_; }
        }

        /// <summary>Field number for the "primitive_transformation" field.</summary>
        public const int PrimitiveTransformationFieldNumber = 2;
        private global::Google.Cloud.Dlp.V2Beta1.PrimitiveTransformation primitiveTransformation_;
        /// <summary>
        /// Primitive transformation to apply to the info type. [required]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta1.PrimitiveTransformation PrimitiveTransformation {
          get { return primitiveTransformation_; }
          set {
            primitiveTransformation_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as InfoTypeTransformation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InfoTypeTransformation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!infoTypes_.Equals(other.infoTypes_)) return false;
          if (!object.Equals(PrimitiveTransformation, other.PrimitiveTransformation)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= infoTypes_.GetHashCode();
          if (primitiveTransformation_ != null) hash ^= PrimitiveTransformation.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          infoTypes_.WriteTo(output, _repeated_infoTypes_codec);
          if (primitiveTransformation_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(PrimitiveTransformation);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += infoTypes_.CalculateSize(_repeated_infoTypes_codec);
          if (primitiveTransformation_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrimitiveTransformation);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InfoTypeTransformation other) {
          if (other == null) {
            return;
          }
          infoTypes_.Add(other.infoTypes_);
          if (other.primitiveTransformation_ != null) {
            if (primitiveTransformation_ == null) {
              primitiveTransformation_ = new global::Google.Cloud.Dlp.V2Beta1.PrimitiveTransformation();
            }
            PrimitiveTransformation.MergeFrom(other.PrimitiveTransformation);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                infoTypes_.AddEntriesFrom(input, _repeated_infoTypes_codec);
                break;
              }
              case 18: {
                if (primitiveTransformation_ == null) {
                  primitiveTransformation_ = new global::Google.Cloud.Dlp.V2Beta1.PrimitiveTransformation();
                }
                input.ReadMessage(primitiveTransformation_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// The transformation to apply to the field.
  /// </summary>
  public sealed partial class FieldTransformation : pb::IMessage<FieldTransformation> {
    private static readonly pb::MessageParser<FieldTransformation> _parser = new pb::MessageParser<FieldTransformation>(() => new FieldTransformation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FieldTransformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldTransformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldTransformation(FieldTransformation other) : this() {
      fields_ = other.fields_.Clone();
      Condition = other.condition_ != null ? other.Condition.Clone() : null;
      switch (other.TransformationCase) {
        case TransformationOneofCase.PrimitiveTransformation:
          PrimitiveTransformation = other.PrimitiveTransformation.Clone();
          break;
        case TransformationOneofCase.InfoTypeTransformations:
          InfoTypeTransformations = other.InfoTypeTransformations.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldTransformation Clone() {
      return new FieldTransformation(this);
    }

    /// <summary>Field number for the "fields" field.</summary>
    public const int FieldsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.FieldId> _repeated_fields_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.FieldId.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.FieldId> fields_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.FieldId>();
    /// <summary>
    /// Input field(s) to apply the transformation to. [required]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.FieldId> Fields {
      get { return fields_; }
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 3;
    private global::Google.Cloud.Dlp.V2Beta1.RecordCondition condition_;
    /// <summary>
    /// Only apply the transformation if the condition evaluates to true for the
    /// given `RecordCondition`. The conditions are allowed to reference fields
    /// that are not used in the actual transformation. [optional]
    ///
    /// Example Use Cases:
    ///
    /// - Apply a different bucket transformation to an age column if the zip code
    /// column for the same record is within a specific range.
    /// - Redact a field if the date of birth field is greater than 85.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.RecordCondition Condition {
      get { return condition_; }
      set {
        condition_ = value;
      }
    }

    /// <summary>Field number for the "primitive_transformation" field.</summary>
    public const int PrimitiveTransformationFieldNumber = 4;
    /// <summary>
    /// Apply the transformation to the entire field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.PrimitiveTransformation PrimitiveTransformation {
      get { return transformationCase_ == TransformationOneofCase.PrimitiveTransformation ? (global::Google.Cloud.Dlp.V2Beta1.PrimitiveTransformation) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.PrimitiveTransformation;
      }
    }

    /// <summary>Field number for the "info_type_transformations" field.</summary>
    public const int InfoTypeTransformationsFieldNumber = 5;
    /// <summary>
    /// Treat the contents of the field as free text, and selectively
    /// transform content that matches an `InfoType`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.InfoTypeTransformations InfoTypeTransformations {
      get { return transformationCase_ == TransformationOneofCase.InfoTypeTransformations ? (global::Google.Cloud.Dlp.V2Beta1.InfoTypeTransformations) transformation_ : null; }
      set {
        transformation_ = value;
        transformationCase_ = value == null ? TransformationOneofCase.None : TransformationOneofCase.InfoTypeTransformations;
      }
    }

    private object transformation_;
    /// <summary>Enum of possible cases for the "transformation" oneof.</summary>
    public enum TransformationOneofCase {
      None = 0,
      PrimitiveTransformation = 4,
      InfoTypeTransformations = 5,
    }
    private TransformationOneofCase transformationCase_ = TransformationOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformationOneofCase TransformationCase {
      get { return transformationCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTransformation() {
      transformationCase_ = TransformationOneofCase.None;
      transformation_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FieldTransformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FieldTransformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fields_.Equals(other.fields_)) return false;
      if (!object.Equals(Condition, other.Condition)) return false;
      if (!object.Equals(PrimitiveTransformation, other.PrimitiveTransformation)) return false;
      if (!object.Equals(InfoTypeTransformations, other.InfoTypeTransformations)) return false;
      if (TransformationCase != other.TransformationCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fields_.GetHashCode();
      if (condition_ != null) hash ^= Condition.GetHashCode();
      if (transformationCase_ == TransformationOneofCase.PrimitiveTransformation) hash ^= PrimitiveTransformation.GetHashCode();
      if (transformationCase_ == TransformationOneofCase.InfoTypeTransformations) hash ^= InfoTypeTransformations.GetHashCode();
      hash ^= (int) transformationCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fields_.WriteTo(output, _repeated_fields_codec);
      if (condition_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Condition);
      }
      if (transformationCase_ == TransformationOneofCase.PrimitiveTransformation) {
        output.WriteRawTag(34);
        output.WriteMessage(PrimitiveTransformation);
      }
      if (transformationCase_ == TransformationOneofCase.InfoTypeTransformations) {
        output.WriteRawTag(42);
        output.WriteMessage(InfoTypeTransformations);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fields_.CalculateSize(_repeated_fields_codec);
      if (condition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Condition);
      }
      if (transformationCase_ == TransformationOneofCase.PrimitiveTransformation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrimitiveTransformation);
      }
      if (transformationCase_ == TransformationOneofCase.InfoTypeTransformations) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoTypeTransformations);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FieldTransformation other) {
      if (other == null) {
        return;
      }
      fields_.Add(other.fields_);
      if (other.condition_ != null) {
        if (condition_ == null) {
          condition_ = new global::Google.Cloud.Dlp.V2Beta1.RecordCondition();
        }
        Condition.MergeFrom(other.Condition);
      }
      switch (other.TransformationCase) {
        case TransformationOneofCase.PrimitiveTransformation:
          PrimitiveTransformation = other.PrimitiveTransformation;
          break;
        case TransformationOneofCase.InfoTypeTransformations:
          InfoTypeTransformations = other.InfoTypeTransformations;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            fields_.AddEntriesFrom(input, _repeated_fields_codec);
            break;
          }
          case 26: {
            if (condition_ == null) {
              condition_ = new global::Google.Cloud.Dlp.V2Beta1.RecordCondition();
            }
            input.ReadMessage(condition_);
            break;
          }
          case 34: {
            global::Google.Cloud.Dlp.V2Beta1.PrimitiveTransformation subBuilder = new global::Google.Cloud.Dlp.V2Beta1.PrimitiveTransformation();
            if (transformationCase_ == TransformationOneofCase.PrimitiveTransformation) {
              subBuilder.MergeFrom(PrimitiveTransformation);
            }
            input.ReadMessage(subBuilder);
            PrimitiveTransformation = subBuilder;
            break;
          }
          case 42: {
            global::Google.Cloud.Dlp.V2Beta1.InfoTypeTransformations subBuilder = new global::Google.Cloud.Dlp.V2Beta1.InfoTypeTransformations();
            if (transformationCase_ == TransformationOneofCase.InfoTypeTransformations) {
              subBuilder.MergeFrom(InfoTypeTransformations);
            }
            input.ReadMessage(subBuilder);
            InfoTypeTransformations = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A type of transformation that is applied over structured data such as a
  /// table.
  /// </summary>
  public sealed partial class RecordTransformations : pb::IMessage<RecordTransformations> {
    private static readonly pb::MessageParser<RecordTransformations> _parser = new pb::MessageParser<RecordTransformations>(() => new RecordTransformations());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordTransformations> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordTransformations() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordTransformations(RecordTransformations other) : this() {
      fieldTransformations_ = other.fieldTransformations_.Clone();
      recordSuppressions_ = other.recordSuppressions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordTransformations Clone() {
      return new RecordTransformations(this);
    }

    /// <summary>Field number for the "field_transformations" field.</summary>
    public const int FieldTransformationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.FieldTransformation> _repeated_fieldTransformations_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.FieldTransformation.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.FieldTransformation> fieldTransformations_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.FieldTransformation>();
    /// <summary>
    /// Transform the record by applying various field transformations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.FieldTransformation> FieldTransformations {
      get { return fieldTransformations_; }
    }

    /// <summary>Field number for the "record_suppressions" field.</summary>
    public const int RecordSuppressionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.RecordSuppression> _repeated_recordSuppressions_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Dlp.V2Beta1.RecordSuppression.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RecordSuppression> recordSuppressions_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RecordSuppression>();
    /// <summary>
    /// Configuration defining which records get suppressed entirely. Records that
    /// match any suppression rule are omitted from the output [optional].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RecordSuppression> RecordSuppressions {
      get { return recordSuppressions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordTransformations);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordTransformations other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fieldTransformations_.Equals(other.fieldTransformations_)) return false;
      if(!recordSuppressions_.Equals(other.recordSuppressions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fieldTransformations_.GetHashCode();
      hash ^= recordSuppressions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fieldTransformations_.WriteTo(output, _repeated_fieldTransformations_codec);
      recordSuppressions_.WriteTo(output, _repeated_recordSuppressions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fieldTransformations_.CalculateSize(_repeated_fieldTransformations_codec);
      size += recordSuppressions_.CalculateSize(_repeated_recordSuppressions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordTransformations other) {
      if (other == null) {
        return;
      }
      fieldTransformations_.Add(other.fieldTransformations_);
      recordSuppressions_.Add(other.recordSuppressions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            fieldTransformations_.AddEntriesFrom(input, _repeated_fieldTransformations_codec);
            break;
          }
          case 18: {
            recordSuppressions_.AddEntriesFrom(input, _repeated_recordSuppressions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Configuration to suppress records whose suppression conditions evaluate to
  /// true.
  /// </summary>
  public sealed partial class RecordSuppression : pb::IMessage<RecordSuppression> {
    private static readonly pb::MessageParser<RecordSuppression> _parser = new pb::MessageParser<RecordSuppression>(() => new RecordSuppression());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordSuppression> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordSuppression() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordSuppression(RecordSuppression other) : this() {
      Condition = other.condition_ != null ? other.Condition.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordSuppression Clone() {
      return new RecordSuppression(this);
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.RecordCondition condition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.RecordCondition Condition {
      get { return condition_; }
      set {
        condition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordSuppression);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordSuppression other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Condition, other.Condition)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (condition_ != null) hash ^= Condition.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (condition_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Condition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (condition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Condition);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordSuppression other) {
      if (other == null) {
        return;
      }
      if (other.condition_ != null) {
        if (condition_ == null) {
          condition_ = new global::Google.Cloud.Dlp.V2Beta1.RecordCondition();
        }
        Condition.MergeFrom(other.Condition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (condition_ == null) {
              condition_ = new global::Google.Cloud.Dlp.V2Beta1.RecordCondition();
            }
            input.ReadMessage(condition_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A condition for determining whether a transformation should be applied to
  /// a field.
  /// </summary>
  public sealed partial class RecordCondition : pb::IMessage<RecordCondition> {
    private static readonly pb::MessageParser<RecordCondition> _parser = new pb::MessageParser<RecordCondition>(() => new RecordCondition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordCondition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordCondition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordCondition(RecordCondition other) : this() {
      Expressions = other.expressions_ != null ? other.Expressions.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordCondition Clone() {
      return new RecordCondition(this);
    }

    /// <summary>Field number for the "expressions" field.</summary>
    public const int ExpressionsFieldNumber = 3;
    private global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Types.Expressions expressions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Types.Expressions Expressions {
      get { return expressions_; }
      set {
        expressions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordCondition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordCondition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Expressions, other.Expressions)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (expressions_ != null) hash ^= Expressions.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (expressions_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Expressions);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (expressions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expressions);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordCondition other) {
      if (other == null) {
        return;
      }
      if (other.expressions_ != null) {
        if (expressions_ == null) {
          expressions_ = new global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Types.Expressions();
        }
        Expressions.MergeFrom(other.Expressions);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            if (expressions_ == null) {
              expressions_ = new global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Types.Expressions();
            }
            input.ReadMessage(expressions_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RecordCondition message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The field type of `value` and `field` do not need to match to be
      /// considered equal, but not all comparisons are possible.
      ///
      /// A `value` of type:
      ///
      /// - `string` can be compared against all other types
      /// - `boolean` can only be compared against other booleans
      /// - `integer` can be compared against doubles or a string if the string value
      /// can be parsed as an integer.
      /// - `double` can be compared against integers or a string if the string can
      /// be parsed as a double.
      /// - `Timestamp` can be compared against strings in RFC 3339 date string
      /// format.
      /// - `TimeOfDay` can be compared against timestamps and strings in the format
      /// of 'HH:mm:ss'.
      ///
      /// If we fail to compare do to type mismatch, a warning will be given and
      /// the condition will evaluate to false.
      /// </summary>
      public sealed partial class Condition : pb::IMessage<Condition> {
        private static readonly pb::MessageParser<Condition> _parser = new pb::MessageParser<Condition>(() => new Condition());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Condition> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Condition() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Condition(Condition other) : this() {
          Field = other.field_ != null ? other.Field.Clone() : null;
          operator_ = other.operator_;
          Value = other.value_ != null ? other.Value.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Condition Clone() {
          return new Condition(this);
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 1;
        private global::Google.Cloud.Dlp.V2Beta1.FieldId field_;
        /// <summary>
        /// Field within the record this condition is evaluated against. [required]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta1.FieldId Field {
          get { return field_; }
          set {
            field_ = value;
          }
        }

        /// <summary>Field number for the "operator" field.</summary>
        public const int OperatorFieldNumber = 3;
        private global::Google.Cloud.Dlp.V2Beta1.RelationalOperator operator_ = 0;
        /// <summary>
        /// Operator used to compare the field or info type to the value. [required]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta1.RelationalOperator Operator {
          get { return operator_; }
          set {
            operator_ = value;
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 4;
        private global::Google.Cloud.Dlp.V2Beta1.Value value_;
        /// <summary>
        /// Value to compare against. [Required, except for `EXISTS` tests.]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta1.Value Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Condition);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Condition other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Field, other.Field)) return false;
          if (Operator != other.Operator) return false;
          if (!object.Equals(Value, other.Value)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (field_ != null) hash ^= Field.GetHashCode();
          if (Operator != 0) hash ^= Operator.GetHashCode();
          if (value_ != null) hash ^= Value.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (field_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Field);
          }
          if (Operator != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Operator);
          }
          if (value_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Value);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (field_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Field);
          }
          if (Operator != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operator);
          }
          if (value_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Condition other) {
          if (other == null) {
            return;
          }
          if (other.field_ != null) {
            if (field_ == null) {
              field_ = new global::Google.Cloud.Dlp.V2Beta1.FieldId();
            }
            Field.MergeFrom(other.Field);
          }
          if (other.Operator != 0) {
            Operator = other.Operator;
          }
          if (other.value_ != null) {
            if (value_ == null) {
              value_ = new global::Google.Cloud.Dlp.V2Beta1.Value();
            }
            Value.MergeFrom(other.Value);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (field_ == null) {
                  field_ = new global::Google.Cloud.Dlp.V2Beta1.FieldId();
                }
                input.ReadMessage(field_);
                break;
              }
              case 24: {
                operator_ = (global::Google.Cloud.Dlp.V2Beta1.RelationalOperator) input.ReadEnum();
                break;
              }
              case 34: {
                if (value_ == null) {
                  value_ = new global::Google.Cloud.Dlp.V2Beta1.Value();
                }
                input.ReadMessage(value_);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Conditions : pb::IMessage<Conditions> {
        private static readonly pb::MessageParser<Conditions> _parser = new pb::MessageParser<Conditions>(() => new Conditions());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Conditions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Conditions() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Conditions(Conditions other) : this() {
          conditions_ = other.conditions_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Conditions Clone() {
          return new Conditions(this);
        }

        /// <summary>Field number for the "conditions" field.</summary>
        public const int Conditions_FieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Types.Condition> _repeated_conditions_codec
            = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Types.Condition.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Types.Condition> conditions_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Types.Condition>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Types.Condition> Conditions_ {
          get { return conditions_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Conditions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Conditions other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!conditions_.Equals(other.conditions_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= conditions_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          conditions_.WriteTo(output, _repeated_conditions_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += conditions_.CalculateSize(_repeated_conditions_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Conditions other) {
          if (other == null) {
            return;
          }
          conditions_.Add(other.conditions_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// A collection of expressions
      /// </summary>
      public sealed partial class Expressions : pb::IMessage<Expressions> {
        private static readonly pb::MessageParser<Expressions> _parser = new pb::MessageParser<Expressions>(() => new Expressions());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Expressions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Expressions() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Expressions(Expressions other) : this() {
          logicalOperator_ = other.logicalOperator_;
          switch (other.TypeCase) {
            case TypeOneofCase.Conditions:
              Conditions = other.Conditions.Clone();
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Expressions Clone() {
          return new Expressions(this);
        }

        /// <summary>Field number for the "logical_operator" field.</summary>
        public const int LogicalOperatorFieldNumber = 1;
        private global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Types.Expressions.Types.LogicalOperator logicalOperator_ = 0;
        /// <summary>
        /// The operator to apply to the result of conditions. Default and currently
        /// only supported value is `AND`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Types.Expressions.Types.LogicalOperator LogicalOperator {
          get { return logicalOperator_; }
          set {
            logicalOperator_ = value;
          }
        }

        /// <summary>Field number for the "conditions" field.</summary>
        public const int ConditionsFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Types.Conditions Conditions {
          get { return typeCase_ == TypeOneofCase.Conditions ? (global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Types.Conditions) type_ : null; }
          set {
            type_ = value;
            typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Conditions;
          }
        }

        private object type_;
        /// <summary>Enum of possible cases for the "type" oneof.</summary>
        public enum TypeOneofCase {
          None = 0,
          Conditions = 3,
        }
        private TypeOneofCase typeCase_ = TypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TypeOneofCase TypeCase {
          get { return typeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType() {
          typeCase_ = TypeOneofCase.None;
          type_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Expressions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Expressions other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (LogicalOperator != other.LogicalOperator) return false;
          if (!object.Equals(Conditions, other.Conditions)) return false;
          if (TypeCase != other.TypeCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (LogicalOperator != 0) hash ^= LogicalOperator.GetHashCode();
          if (typeCase_ == TypeOneofCase.Conditions) hash ^= Conditions.GetHashCode();
          hash ^= (int) typeCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (LogicalOperator != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) LogicalOperator);
          }
          if (typeCase_ == TypeOneofCase.Conditions) {
            output.WriteRawTag(26);
            output.WriteMessage(Conditions);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (LogicalOperator != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LogicalOperator);
          }
          if (typeCase_ == TypeOneofCase.Conditions) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Conditions);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Expressions other) {
          if (other == null) {
            return;
          }
          if (other.LogicalOperator != 0) {
            LogicalOperator = other.LogicalOperator;
          }
          switch (other.TypeCase) {
            case TypeOneofCase.Conditions:
              Conditions = other.Conditions;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                logicalOperator_ = (global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Types.Expressions.Types.LogicalOperator) input.ReadEnum();
                break;
              }
              case 26: {
                global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Types.Conditions subBuilder = new global::Google.Cloud.Dlp.V2Beta1.RecordCondition.Types.Conditions();
                if (typeCase_ == TypeOneofCase.Conditions) {
                  subBuilder.MergeFrom(Conditions);
                }
                input.ReadMessage(subBuilder);
                Conditions = subBuilder;
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Expressions message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum LogicalOperator {
            [pbr::OriginalName("LOGICAL_OPERATOR_UNSPECIFIED")] Unspecified = 0,
            [pbr::OriginalName("AND")] And = 1,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// High level summary of deidentification.
  /// </summary>
  public sealed partial class DeidentificationSummary : pb::IMessage<DeidentificationSummary> {
    private static readonly pb::MessageParser<DeidentificationSummary> _parser = new pb::MessageParser<DeidentificationSummary>(() => new DeidentificationSummary());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeidentificationSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeidentificationSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeidentificationSummary(DeidentificationSummary other) : this() {
      transformedBytes_ = other.transformedBytes_;
      transformationSummaries_ = other.transformationSummaries_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeidentificationSummary Clone() {
      return new DeidentificationSummary(this);
    }

    /// <summary>Field number for the "transformed_bytes" field.</summary>
    public const int TransformedBytesFieldNumber = 2;
    private long transformedBytes_;
    /// <summary>
    /// Total size in bytes that were transformed in some way.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransformedBytes {
      get { return transformedBytes_; }
      set {
        transformedBytes_ = value;
      }
    }

    /// <summary>Field number for the "transformation_summaries" field.</summary>
    public const int TransformationSummariesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.TransformationSummary> _repeated_transformationSummaries_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Dlp.V2Beta1.TransformationSummary.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.TransformationSummary> transformationSummaries_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.TransformationSummary>();
    /// <summary>
    /// Transformations applied to the dataset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.TransformationSummary> TransformationSummaries {
      get { return transformationSummaries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeidentificationSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeidentificationSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransformedBytes != other.TransformedBytes) return false;
      if(!transformationSummaries_.Equals(other.transformationSummaries_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransformedBytes != 0L) hash ^= TransformedBytes.GetHashCode();
      hash ^= transformationSummaries_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransformedBytes != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TransformedBytes);
      }
      transformationSummaries_.WriteTo(output, _repeated_transformationSummaries_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransformedBytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TransformedBytes);
      }
      size += transformationSummaries_.CalculateSize(_repeated_transformationSummaries_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeidentificationSummary other) {
      if (other == null) {
        return;
      }
      if (other.TransformedBytes != 0L) {
        TransformedBytes = other.TransformedBytes;
      }
      transformationSummaries_.Add(other.transformationSummaries_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            TransformedBytes = input.ReadInt64();
            break;
          }
          case 26: {
            transformationSummaries_.AddEntriesFrom(input, _repeated_transformationSummaries_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Summary of a single tranformation.
  /// </summary>
  public sealed partial class TransformationSummary : pb::IMessage<TransformationSummary> {
    private static readonly pb::MessageParser<TransformationSummary> _parser = new pb::MessageParser<TransformationSummary>(() => new TransformationSummary());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransformationSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformationSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformationSummary(TransformationSummary other) : this() {
      InfoType = other.infoType_ != null ? other.InfoType.Clone() : null;
      Field = other.field_ != null ? other.Field.Clone() : null;
      Transformation = other.transformation_ != null ? other.Transformation.Clone() : null;
      fieldTransformations_ = other.fieldTransformations_.Clone();
      RecordSuppress = other.recordSuppress_ != null ? other.RecordSuppress.Clone() : null;
      results_ = other.results_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformationSummary Clone() {
      return new TransformationSummary(this);
    }

    /// <summary>Field number for the "info_type" field.</summary>
    public const int InfoTypeFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.InfoType infoType_;
    /// <summary>
    /// Set if the transformation was limited to a specific info_type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.InfoType InfoType {
      get { return infoType_; }
      set {
        infoType_ = value;
      }
    }

    /// <summary>Field number for the "field" field.</summary>
    public const int FieldFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta1.FieldId field_;
    /// <summary>
    /// Set if the transformation was limited to a specific FieldId.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.FieldId Field {
      get { return field_; }
      set {
        field_ = value;
      }
    }

    /// <summary>Field number for the "transformation" field.</summary>
    public const int TransformationFieldNumber = 3;
    private global::Google.Cloud.Dlp.V2Beta1.PrimitiveTransformation transformation_;
    /// <summary>
    /// The specific transformation these stats apply to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.PrimitiveTransformation Transformation {
      get { return transformation_; }
      set {
        transformation_ = value;
      }
    }

    /// <summary>Field number for the "field_transformations" field.</summary>
    public const int FieldTransformationsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.FieldTransformation> _repeated_fieldTransformations_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Cloud.Dlp.V2Beta1.FieldTransformation.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.FieldTransformation> fieldTransformations_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.FieldTransformation>();
    /// <summary>
    /// The field transformation that was applied. This list will contain
    /// multiple only in the case of errors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.FieldTransformation> FieldTransformations {
      get { return fieldTransformations_; }
    }

    /// <summary>Field number for the "record_suppress" field.</summary>
    public const int RecordSuppressFieldNumber = 6;
    private global::Google.Cloud.Dlp.V2Beta1.RecordSuppression recordSuppress_;
    /// <summary>
    /// The specific suppression option these stats apply to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.RecordSuppression RecordSuppress {
      get { return recordSuppress_; }
      set {
        recordSuppress_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.TransformationSummary.Types.SummaryResult> _repeated_results_codec
        = pb::FieldCodec.ForMessage(34, global::Google.Cloud.Dlp.V2Beta1.TransformationSummary.Types.SummaryResult.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.TransformationSummary.Types.SummaryResult> results_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.TransformationSummary.Types.SummaryResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.TransformationSummary.Types.SummaryResult> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransformationSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransformationSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InfoType, other.InfoType)) return false;
      if (!object.Equals(Field, other.Field)) return false;
      if (!object.Equals(Transformation, other.Transformation)) return false;
      if(!fieldTransformations_.Equals(other.fieldTransformations_)) return false;
      if (!object.Equals(RecordSuppress, other.RecordSuppress)) return false;
      if(!results_.Equals(other.results_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (infoType_ != null) hash ^= InfoType.GetHashCode();
      if (field_ != null) hash ^= Field.GetHashCode();
      if (transformation_ != null) hash ^= Transformation.GetHashCode();
      hash ^= fieldTransformations_.GetHashCode();
      if (recordSuppress_ != null) hash ^= RecordSuppress.GetHashCode();
      hash ^= results_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (infoType_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InfoType);
      }
      if (field_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Field);
      }
      if (transformation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Transformation);
      }
      results_.WriteTo(output, _repeated_results_codec);
      fieldTransformations_.WriteTo(output, _repeated_fieldTransformations_codec);
      if (recordSuppress_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RecordSuppress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (infoType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoType);
      }
      if (field_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Field);
      }
      if (transformation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transformation);
      }
      size += fieldTransformations_.CalculateSize(_repeated_fieldTransformations_codec);
      if (recordSuppress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecordSuppress);
      }
      size += results_.CalculateSize(_repeated_results_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransformationSummary other) {
      if (other == null) {
        return;
      }
      if (other.infoType_ != null) {
        if (infoType_ == null) {
          infoType_ = new global::Google.Cloud.Dlp.V2Beta1.InfoType();
        }
        InfoType.MergeFrom(other.InfoType);
      }
      if (other.field_ != null) {
        if (field_ == null) {
          field_ = new global::Google.Cloud.Dlp.V2Beta1.FieldId();
        }
        Field.MergeFrom(other.Field);
      }
      if (other.transformation_ != null) {
        if (transformation_ == null) {
          transformation_ = new global::Google.Cloud.Dlp.V2Beta1.PrimitiveTransformation();
        }
        Transformation.MergeFrom(other.Transformation);
      }
      fieldTransformations_.Add(other.fieldTransformations_);
      if (other.recordSuppress_ != null) {
        if (recordSuppress_ == null) {
          recordSuppress_ = new global::Google.Cloud.Dlp.V2Beta1.RecordSuppression();
        }
        RecordSuppress.MergeFrom(other.RecordSuppress);
      }
      results_.Add(other.results_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (infoType_ == null) {
              infoType_ = new global::Google.Cloud.Dlp.V2Beta1.InfoType();
            }
            input.ReadMessage(infoType_);
            break;
          }
          case 18: {
            if (field_ == null) {
              field_ = new global::Google.Cloud.Dlp.V2Beta1.FieldId();
            }
            input.ReadMessage(field_);
            break;
          }
          case 26: {
            if (transformation_ == null) {
              transformation_ = new global::Google.Cloud.Dlp.V2Beta1.PrimitiveTransformation();
            }
            input.ReadMessage(transformation_);
            break;
          }
          case 34: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 42: {
            fieldTransformations_.AddEntriesFrom(input, _repeated_fieldTransformations_codec);
            break;
          }
          case 50: {
            if (recordSuppress_ == null) {
              recordSuppress_ = new global::Google.Cloud.Dlp.V2Beta1.RecordSuppression();
            }
            input.ReadMessage(recordSuppress_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TransformationSummary message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Possible outcomes of transformations.
      /// </summary>
      public enum TransformationResultCode {
        [pbr::OriginalName("TRANSFORMATION_RESULT_CODE_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("SUCCESS")] Success = 1,
        [pbr::OriginalName("ERROR")] Error = 2,
      }

      /// <summary>
      /// A collection that informs the user the number of times a particular
      /// `TransformationResultCode` and error details occurred.
      /// </summary>
      public sealed partial class SummaryResult : pb::IMessage<SummaryResult> {
        private static readonly pb::MessageParser<SummaryResult> _parser = new pb::MessageParser<SummaryResult>(() => new SummaryResult());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SummaryResult> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta1.TransformationSummary.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SummaryResult() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SummaryResult(SummaryResult other) : this() {
          count_ = other.count_;
          code_ = other.code_;
          details_ = other.details_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SummaryResult Clone() {
          return new SummaryResult(this);
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 1;
        private long count_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        /// <summary>Field number for the "code" field.</summary>
        public const int CodeFieldNumber = 2;
        private global::Google.Cloud.Dlp.V2Beta1.TransformationSummary.Types.TransformationResultCode code_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta1.TransformationSummary.Types.TransformationResultCode Code {
          get { return code_; }
          set {
            code_ = value;
          }
        }

        /// <summary>Field number for the "details" field.</summary>
        public const int DetailsFieldNumber = 3;
        private string details_ = "";
        /// <summary>
        /// A place for warnings or errors to show up if a transformation didn't
        /// work as expected.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Details {
          get { return details_; }
          set {
            details_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SummaryResult);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SummaryResult other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Count != other.Count) return false;
          if (Code != other.Code) return false;
          if (Details != other.Details) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Count != 0L) hash ^= Count.GetHashCode();
          if (Code != 0) hash ^= Code.GetHashCode();
          if (Details.Length != 0) hash ^= Details.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Count != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Count);
          }
          if (Code != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Code);
          }
          if (Details.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Details);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Count != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
          }
          if (Code != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
          }
          if (Details.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Details);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SummaryResult other) {
          if (other == null) {
            return;
          }
          if (other.Count != 0L) {
            Count = other.Count;
          }
          if (other.Code != 0) {
            Code = other.Code;
          }
          if (other.Details.Length != 0) {
            Details = other.Details;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Count = input.ReadInt64();
                break;
              }
              case 16: {
                code_ = (global::Google.Cloud.Dlp.V2Beta1.TransformationSummary.Types.TransformationResultCode) input.ReadEnum();
                break;
              }
              case 26: {
                Details = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
