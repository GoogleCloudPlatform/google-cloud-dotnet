// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/privacy/dlp/v2beta1/storage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Dlp.V2Beta1 {

  /// <summary>Holder for reflection information generated from google/privacy/dlp/v2beta1/storage.proto</summary>
  public static partial class StorageReflection {

    #region Descriptor
    /// <summary>File descriptor for google/privacy/dlp/v2beta1/storage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StorageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cihnb29nbGUvcHJpdmFjeS9kbHAvdjJiZXRhMS9zdG9yYWdlLnByb3RvEhpn",
            "b29nbGUucHJpdmFjeS5kbHAudjJiZXRhMRocZ29vZ2xlL2FwaS9hbm5vdGF0",
            "aW9ucy5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byIY",
            "CghJbmZvVHlwZRIMCgRuYW1lGAEgASgJIqcCCg5DdXN0b21JbmZvVHlwZRI3",
            "CglpbmZvX3R5cGUYASABKAsyJC5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRh",
            "MS5JbmZvVHlwZRJLCgpkaWN0aW9uYXJ5GAIgASgLMjUuZ29vZ2xlLnByaXZh",
            "Y3kuZGxwLnYyYmV0YTEuQ3VzdG9tSW5mb1R5cGUuRGljdGlvbmFyeUgAGoYB",
            "CgpEaWN0aW9uYXJ5ElMKCXdvcmRfbGlzdBgBIAEoCzI+Lmdvb2dsZS5wcml2",
            "YWN5LmRscC52MmJldGExLkN1c3RvbUluZm9UeXBlLkRpY3Rpb25hcnkuV29y",
            "ZExpc3RIABoZCghXb3JkTGlzdBINCgV3b3JkcxgBIAMoCUIICgZzb3VyY2VC",
            "BgoEdHlwZSIeCgdGaWVsZElkEhMKC2NvbHVtbl9uYW1lGAEgASgJIjcKC1Bh",
            "cnRpdGlvbklkEhIKCnByb2plY3RfaWQYAiABKAkSFAoMbmFtZXNwYWNlX2lk",
            "GAQgASgJIh4KDktpbmRFeHByZXNzaW9uEgwKBG5hbWUYASABKAkiIQoRUHJv",
            "cGVydHlSZWZlcmVuY2USDAoEbmFtZRgCIAEoCSJNCgpQcm9qZWN0aW9uEj8K",
            "CHByb3BlcnR5GAEgASgLMi0uZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEu",
            "UHJvcGVydHlSZWZlcmVuY2UixwEKEERhdGFzdG9yZU9wdGlvbnMSPQoMcGFy",
            "dGl0aW9uX2lkGAEgASgLMicuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEu",
            "UGFydGl0aW9uSWQSOAoEa2luZBgCIAEoCzIqLmdvb2dsZS5wcml2YWN5LmRs",
            "cC52MmJldGExLktpbmRFeHByZXNzaW9uEjoKCnByb2plY3Rpb24YAyADKAsy",
            "Ji5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5Qcm9qZWN0aW9uIngKE0Ns",
            "b3VkU3RvcmFnZU9wdGlvbnMSSQoIZmlsZV9zZXQYASABKAsyNy5nb29nbGUu",
            "cHJpdmFjeS5kbHAudjJiZXRhMS5DbG91ZFN0b3JhZ2VPcHRpb25zLkZpbGVT",
            "ZXQaFgoHRmlsZVNldBILCgN1cmwYASABKAkiIAoQQ2xvdWRTdG9yYWdlUGF0",
            "aBIMCgRwYXRoGAEgASgJIpYBCg9CaWdRdWVyeU9wdGlvbnMSQgoPdGFibGVf",
            "cmVmZXJlbmNlGAEgASgLMikuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEu",
            "QmlnUXVlcnlUYWJsZRI/ChJpZGVudGlmeWluZ19maWVsZHMYAiADKAsyIy5n",
            "b29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5GaWVsZElkIv4BCg1TdG9yYWdl",
            "Q29uZmlnEkkKEWRhdGFzdG9yZV9vcHRpb25zGAIgASgLMiwuZ29vZ2xlLnBy",
            "aXZhY3kuZGxwLnYyYmV0YTEuRGF0YXN0b3JlT3B0aW9uc0gAElAKFWNsb3Vk",
            "X3N0b3JhZ2Vfb3B0aW9ucxgDIAEoCzIvLmdvb2dsZS5wcml2YWN5LmRscC52",
            "MmJldGExLkNsb3VkU3RvcmFnZU9wdGlvbnNIABJIChFiaWdfcXVlcnlfb3B0",
            "aW9ucxgEIAEoCzIrLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLkJpZ1F1",
            "ZXJ5T3B0aW9uc0gAQgYKBHR5cGUiOgoPQ2xvdWRTdG9yYWdlS2V5EhEKCWZp",
            "bGVfcGF0aBgBIAEoCRIUCgxzdGFydF9vZmZzZXQYAiABKAMiQwoMRGF0YXN0",
            "b3JlS2V5EjMKCmVudGl0eV9rZXkYASABKAsyHy5nb29nbGUucHJpdmFjeS5k",
            "bHAudjJiZXRhMS5LZXkixQEKA0tleRI9CgxwYXJ0aXRpb25faWQYASABKAsy",
            "Jy5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5QYXJ0aXRpb25JZBI5CgRw",
            "YXRoGAIgAygLMisuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuS2V5LlBh",
            "dGhFbGVtZW50GkQKC1BhdGhFbGVtZW50EgwKBGtpbmQYASABKAkSDAoCaWQY",
            "AiABKANIABIOCgRuYW1lGAMgASgJSABCCQoHaWRfdHlwZSKgAQoJUmVjb3Jk",
            "S2V5EkgKEWNsb3VkX3N0b3JhZ2Vfa2V5GAEgASgLMisuZ29vZ2xlLnByaXZh",
            "Y3kuZGxwLnYyYmV0YTEuQ2xvdWRTdG9yYWdlS2V5SAASQQoNZGF0YXN0b3Jl",
            "X2tleRgCIAEoCzIoLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLkRhdGFz",
            "dG9yZUtleUgAQgYKBHR5cGUiSQoNQmlnUXVlcnlUYWJsZRISCgpwcm9qZWN0",
            "X2lkGAEgASgJEhIKCmRhdGFzZXRfaWQYAiABKAkSEAoIdGFibGVfaWQYAyAB",
            "KAkiPgoIRW50aXR5SWQSMgoFZmllbGQYASABKAsyIy5nb29nbGUucHJpdmFj",
            "eS5kbHAudjJiZXRhMS5GaWVsZElkQogBCh5jb20uZ29vZ2xlLnByaXZhY3ku",
            "ZGxwLnYyYmV0YTFCCkRscFN0b3JhZ2VQAVo9Z29vZ2xlLmdvbGFuZy5vcmcv",
            "Z2VucHJvdG8vZ29vZ2xlYXBpcy9wcml2YWN5L2RscC92MmJldGExO2RscKoC",
            "GEdvb2dsZS5DbG91ZC5EbHAuVjJCZXRhMWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.InfoType), global::Google.Cloud.Dlp.V2Beta1.InfoType.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.CustomInfoType), global::Google.Cloud.Dlp.V2Beta1.CustomInfoType.Parser, new[]{ "InfoType", "Dictionary" }, new[]{ "Type" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.CustomInfoType.Types.Dictionary), global::Google.Cloud.Dlp.V2Beta1.CustomInfoType.Types.Dictionary.Parser, new[]{ "WordList" }, new[]{ "Source" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.CustomInfoType.Types.Dictionary.Types.WordList), global::Google.Cloud.Dlp.V2Beta1.CustomInfoType.Types.Dictionary.Types.WordList.Parser, new[]{ "Words" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.FieldId), global::Google.Cloud.Dlp.V2Beta1.FieldId.Parser, new[]{ "ColumnName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.PartitionId), global::Google.Cloud.Dlp.V2Beta1.PartitionId.Parser, new[]{ "ProjectId", "NamespaceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.KindExpression), global::Google.Cloud.Dlp.V2Beta1.KindExpression.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.PropertyReference), global::Google.Cloud.Dlp.V2Beta1.PropertyReference.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.Projection), global::Google.Cloud.Dlp.V2Beta1.Projection.Parser, new[]{ "Property" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.DatastoreOptions), global::Google.Cloud.Dlp.V2Beta1.DatastoreOptions.Parser, new[]{ "PartitionId", "Kind", "Projection" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.CloudStorageOptions), global::Google.Cloud.Dlp.V2Beta1.CloudStorageOptions.Parser, new[]{ "FileSet" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.CloudStorageOptions.Types.FileSet), global::Google.Cloud.Dlp.V2Beta1.CloudStorageOptions.Types.FileSet.Parser, new[]{ "Url" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.CloudStoragePath), global::Google.Cloud.Dlp.V2Beta1.CloudStoragePath.Parser, new[]{ "Path" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.BigQueryOptions), global::Google.Cloud.Dlp.V2Beta1.BigQueryOptions.Parser, new[]{ "TableReference", "IdentifyingFields" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.StorageConfig), global::Google.Cloud.Dlp.V2Beta1.StorageConfig.Parser, new[]{ "DatastoreOptions", "CloudStorageOptions", "BigQueryOptions" }, new[]{ "Type" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.CloudStorageKey), global::Google.Cloud.Dlp.V2Beta1.CloudStorageKey.Parser, new[]{ "FilePath", "StartOffset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.DatastoreKey), global::Google.Cloud.Dlp.V2Beta1.DatastoreKey.Parser, new[]{ "EntityKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.Key), global::Google.Cloud.Dlp.V2Beta1.Key.Parser, new[]{ "PartitionId", "Path" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.Key.Types.PathElement), global::Google.Cloud.Dlp.V2Beta1.Key.Types.PathElement.Parser, new[]{ "Kind", "Id", "Name" }, new[]{ "IdType" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RecordKey), global::Google.Cloud.Dlp.V2Beta1.RecordKey.Parser, new[]{ "CloudStorageKey", "DatastoreKey" }, new[]{ "Type" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.BigQueryTable), global::Google.Cloud.Dlp.V2Beta1.BigQueryTable.Parser, new[]{ "ProjectId", "DatasetId", "TableId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.EntityId), global::Google.Cloud.Dlp.V2Beta1.EntityId.Parser, new[]{ "Field" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Type of information detected by the API.
  /// </summary>
  public sealed partial class InfoType : pb::IMessage<InfoType> {
    private static readonly pb::MessageParser<InfoType> _parser = new pb::MessageParser<InfoType>(() => new InfoType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InfoType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.StorageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoType(InfoType other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoType Clone() {
      return new InfoType(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the information type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InfoType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InfoType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InfoType other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Custom information type provided by the user. Used to find domain-specific
  /// sensitive information configurable to the data in question.
  /// </summary>
  public sealed partial class CustomInfoType : pb::IMessage<CustomInfoType> {
    private static readonly pb::MessageParser<CustomInfoType> _parser = new pb::MessageParser<CustomInfoType>(() => new CustomInfoType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CustomInfoType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.StorageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomInfoType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomInfoType(CustomInfoType other) : this() {
      InfoType = other.infoType_ != null ? other.InfoType.Clone() : null;
      switch (other.TypeCase) {
        case TypeOneofCase.Dictionary:
          Dictionary = other.Dictionary.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomInfoType Clone() {
      return new CustomInfoType(this);
    }

    /// <summary>Field number for the "info_type" field.</summary>
    public const int InfoTypeFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.InfoType infoType_;
    /// <summary>
    /// Info type configuration. All custom info types must have configurations
    /// that do not conflict with built-in info types or other custom info types.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.InfoType InfoType {
      get { return infoType_; }
      set {
        infoType_ = value;
      }
    }

    /// <summary>Field number for the "dictionary" field.</summary>
    public const int DictionaryFieldNumber = 2;
    /// <summary>
    /// Dictionary-based custom info type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.CustomInfoType.Types.Dictionary Dictionary {
      get { return typeCase_ == TypeOneofCase.Dictionary ? (global::Google.Cloud.Dlp.V2Beta1.CustomInfoType.Types.Dictionary) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Dictionary;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Dictionary = 2,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CustomInfoType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CustomInfoType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InfoType, other.InfoType)) return false;
      if (!object.Equals(Dictionary, other.Dictionary)) return false;
      if (TypeCase != other.TypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (infoType_ != null) hash ^= InfoType.GetHashCode();
      if (typeCase_ == TypeOneofCase.Dictionary) hash ^= Dictionary.GetHashCode();
      hash ^= (int) typeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (infoType_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InfoType);
      }
      if (typeCase_ == TypeOneofCase.Dictionary) {
        output.WriteRawTag(18);
        output.WriteMessage(Dictionary);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (infoType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoType);
      }
      if (typeCase_ == TypeOneofCase.Dictionary) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dictionary);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CustomInfoType other) {
      if (other == null) {
        return;
      }
      if (other.infoType_ != null) {
        if (infoType_ == null) {
          infoType_ = new global::Google.Cloud.Dlp.V2Beta1.InfoType();
        }
        InfoType.MergeFrom(other.InfoType);
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Dictionary:
          Dictionary = other.Dictionary;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (infoType_ == null) {
              infoType_ = new global::Google.Cloud.Dlp.V2Beta1.InfoType();
            }
            input.ReadMessage(infoType_);
            break;
          }
          case 18: {
            global::Google.Cloud.Dlp.V2Beta1.CustomInfoType.Types.Dictionary subBuilder = new global::Google.Cloud.Dlp.V2Beta1.CustomInfoType.Types.Dictionary();
            if (typeCase_ == TypeOneofCase.Dictionary) {
              subBuilder.MergeFrom(Dictionary);
            }
            input.ReadMessage(subBuilder);
            Dictionary = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CustomInfoType message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Custom information type based on a dictionary of words or phrases. This can
      /// be used to match sensitive information specific to the data, such as a list
      /// of employee IDs or job titles.
      ///
      /// Dictionary words are case-insensitive and all characters other than letters
      /// and digits in the unicode [Basic Multilingual
      /// Plane](https://en.wikipedia.org/wiki/Plane_%28Unicode%29#Basic_Multilingual_Plane)
      /// will be replaced with whitespace when scanning for matches, so the
      /// dictionary phrase "Sam Johnson" will match all three phrases "sam johnson",
      /// "Sam, Johnson", and "Sam (Johnson)". Additionally, the characters
      /// surrounding any match must be of a different type than the adjacent
      /// characters within the word, so letters must be next to non-letters and
      /// digits next to non-digits. For example, the dictionary word "jen" will
      /// match the first three letters of the text "jen123" but will return no
      /// matches for "jennifer".
      ///
      /// Dictionary words containing a large number of characters that are not
      /// letters or digits may result in unexpected findings because such characters
      /// are treated as whitespace.
      /// </summary>
      public sealed partial class Dictionary : pb::IMessage<Dictionary> {
        private static readonly pb::MessageParser<Dictionary> _parser = new pb::MessageParser<Dictionary>(() => new Dictionary());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Dictionary> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta1.CustomInfoType.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Dictionary() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Dictionary(Dictionary other) : this() {
          switch (other.SourceCase) {
            case SourceOneofCase.WordList:
              WordList = other.WordList.Clone();
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Dictionary Clone() {
          return new Dictionary(this);
        }

        /// <summary>Field number for the "word_list" field.</summary>
        public const int WordListFieldNumber = 1;
        /// <summary>
        /// List of words or phrases to search for.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta1.CustomInfoType.Types.Dictionary.Types.WordList WordList {
          get { return sourceCase_ == SourceOneofCase.WordList ? (global::Google.Cloud.Dlp.V2Beta1.CustomInfoType.Types.Dictionary.Types.WordList) source_ : null; }
          set {
            source_ = value;
            sourceCase_ = value == null ? SourceOneofCase.None : SourceOneofCase.WordList;
          }
        }

        private object source_;
        /// <summary>Enum of possible cases for the "source" oneof.</summary>
        public enum SourceOneofCase {
          None = 0,
          WordList = 1,
        }
        private SourceOneofCase sourceCase_ = SourceOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SourceOneofCase SourceCase {
          get { return sourceCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSource() {
          sourceCase_ = SourceOneofCase.None;
          source_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Dictionary);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Dictionary other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(WordList, other.WordList)) return false;
          if (SourceCase != other.SourceCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (sourceCase_ == SourceOneofCase.WordList) hash ^= WordList.GetHashCode();
          hash ^= (int) sourceCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (sourceCase_ == SourceOneofCase.WordList) {
            output.WriteRawTag(10);
            output.WriteMessage(WordList);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (sourceCase_ == SourceOneofCase.WordList) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(WordList);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Dictionary other) {
          if (other == null) {
            return;
          }
          switch (other.SourceCase) {
            case SourceOneofCase.WordList:
              WordList = other.WordList;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                global::Google.Cloud.Dlp.V2Beta1.CustomInfoType.Types.Dictionary.Types.WordList subBuilder = new global::Google.Cloud.Dlp.V2Beta1.CustomInfoType.Types.Dictionary.Types.WordList();
                if (sourceCase_ == SourceOneofCase.WordList) {
                  subBuilder.MergeFrom(WordList);
                }
                input.ReadMessage(subBuilder);
                WordList = subBuilder;
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Dictionary message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Message defining a list of words or phrases to search for in the data.
          /// </summary>
          public sealed partial class WordList : pb::IMessage<WordList> {
            private static readonly pb::MessageParser<WordList> _parser = new pb::MessageParser<WordList>(() => new WordList());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<WordList> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Cloud.Dlp.V2Beta1.CustomInfoType.Types.Dictionary.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public WordList() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public WordList(WordList other) : this() {
              words_ = other.words_.Clone();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public WordList Clone() {
              return new WordList(this);
            }

            /// <summary>Field number for the "words" field.</summary>
            public const int WordsFieldNumber = 1;
            private static readonly pb::FieldCodec<string> _repeated_words_codec
                = pb::FieldCodec.ForString(10);
            private readonly pbc::RepeatedField<string> words_ = new pbc::RepeatedField<string>();
            /// <summary>
            /// Words or phrases defining the dictionary. The dictionary must contain
            /// at least one phrase and every phrase must contain at least 2 characters
            /// that are letters or digits. [required]
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<string> Words {
              get { return words_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as WordList);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(WordList other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!words_.Equals(other.words_)) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= words_.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              words_.WriteTo(output, _repeated_words_codec);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += words_.CalculateSize(_repeated_words_codec);
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(WordList other) {
              if (other == null) {
                return;
              }
              words_.Add(other.words_);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    words_.AddEntriesFrom(input, _repeated_words_codec);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// General identifier of a data field in a storage service.
  /// </summary>
  public sealed partial class FieldId : pb::IMessage<FieldId> {
    private static readonly pb::MessageParser<FieldId> _parser = new pb::MessageParser<FieldId>(() => new FieldId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FieldId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.StorageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldId(FieldId other) : this() {
      columnName_ = other.columnName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldId Clone() {
      return new FieldId(this);
    }

    /// <summary>Field number for the "column_name" field.</summary>
    public const int ColumnNameFieldNumber = 1;
    private string columnName_ = "";
    /// <summary>
    /// Name describing the field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColumnName {
      get { return columnName_; }
      set {
        columnName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FieldId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FieldId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ColumnName != other.ColumnName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ColumnName.Length != 0) hash ^= ColumnName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ColumnName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ColumnName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ColumnName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColumnName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FieldId other) {
      if (other == null) {
        return;
      }
      if (other.ColumnName.Length != 0) {
        ColumnName = other.ColumnName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ColumnName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Datastore partition ID.
  /// A partition ID identifies a grouping of entities. The grouping is always
  /// by project and namespace, however the namespace ID may be empty.
  ///
  /// A partition ID contains several dimensions:
  /// project ID and namespace ID.
  /// </summary>
  public sealed partial class PartitionId : pb::IMessage<PartitionId> {
    private static readonly pb::MessageParser<PartitionId> _parser = new pb::MessageParser<PartitionId>(() => new PartitionId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartitionId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.StorageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartitionId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartitionId(PartitionId other) : this() {
      projectId_ = other.projectId_;
      namespaceId_ = other.namespaceId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartitionId Clone() {
      return new PartitionId(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 2;
    private string projectId_ = "";
    /// <summary>
    /// The ID of the project to which the entities belong.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "namespace_id" field.</summary>
    public const int NamespaceIdFieldNumber = 4;
    private string namespaceId_ = "";
    /// <summary>
    /// If not empty, the ID of the namespace to which the entities belong.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NamespaceId {
      get { return namespaceId_; }
      set {
        namespaceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PartitionId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PartitionId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (NamespaceId != other.NamespaceId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (NamespaceId.Length != 0) hash ^= NamespaceId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProjectId);
      }
      if (NamespaceId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NamespaceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (NamespaceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NamespaceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PartitionId other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.NamespaceId.Length != 0) {
        NamespaceId = other.NamespaceId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            ProjectId = input.ReadString();
            break;
          }
          case 34: {
            NamespaceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A representation of a Datastore kind.
  /// </summary>
  public sealed partial class KindExpression : pb::IMessage<KindExpression> {
    private static readonly pb::MessageParser<KindExpression> _parser = new pb::MessageParser<KindExpression>(() => new KindExpression());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KindExpression> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.StorageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KindExpression() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KindExpression(KindExpression other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KindExpression Clone() {
      return new KindExpression(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the kind.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KindExpression);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KindExpression other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KindExpression other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A reference to a property relative to the Datastore kind expressions.
  /// </summary>
  public sealed partial class PropertyReference : pb::IMessage<PropertyReference> {
    private static readonly pb::MessageParser<PropertyReference> _parser = new pb::MessageParser<PropertyReference>(() => new PropertyReference());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropertyReference> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.StorageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyReference() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyReference(PropertyReference other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyReference Clone() {
      return new PropertyReference(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// The name of the property.
    /// If name includes "."s, it may be interpreted as a property name path.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropertyReference);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropertyReference other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PropertyReference other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A representation of a Datastore property in a projection.
  /// </summary>
  public sealed partial class Projection : pb::IMessage<Projection> {
    private static readonly pb::MessageParser<Projection> _parser = new pb::MessageParser<Projection>(() => new Projection());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Projection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.StorageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Projection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Projection(Projection other) : this() {
      Property = other.property_ != null ? other.Property.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Projection Clone() {
      return new Projection(this);
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.PropertyReference property_;
    /// <summary>
    /// The property to project.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.PropertyReference Property {
      get { return property_; }
      set {
        property_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Projection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Projection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Property, other.Property)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (property_ != null) hash ^= Property.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (property_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Property);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (property_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Property);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Projection other) {
      if (other == null) {
        return;
      }
      if (other.property_ != null) {
        if (property_ == null) {
          property_ = new global::Google.Cloud.Dlp.V2Beta1.PropertyReference();
        }
        Property.MergeFrom(other.Property);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (property_ == null) {
              property_ = new global::Google.Cloud.Dlp.V2Beta1.PropertyReference();
            }
            input.ReadMessage(property_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Options defining a data set within Google Cloud Datastore.
  /// </summary>
  public sealed partial class DatastoreOptions : pb::IMessage<DatastoreOptions> {
    private static readonly pb::MessageParser<DatastoreOptions> _parser = new pb::MessageParser<DatastoreOptions>(() => new DatastoreOptions());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatastoreOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.StorageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatastoreOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatastoreOptions(DatastoreOptions other) : this() {
      PartitionId = other.partitionId_ != null ? other.PartitionId.Clone() : null;
      Kind = other.kind_ != null ? other.Kind.Clone() : null;
      projection_ = other.projection_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatastoreOptions Clone() {
      return new DatastoreOptions(this);
    }

    /// <summary>Field number for the "partition_id" field.</summary>
    public const int PartitionIdFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.PartitionId partitionId_;
    /// <summary>
    /// A partition ID identifies a grouping of entities. The grouping is always
    /// by project and namespace, however the namespace ID may be empty.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.PartitionId PartitionId {
      get { return partitionId_; }
      set {
        partitionId_ = value;
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta1.KindExpression kind_;
    /// <summary>
    /// The kind to process.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.KindExpression Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "projection" field.</summary>
    public const int ProjectionFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.Projection> _repeated_projection_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Dlp.V2Beta1.Projection.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Projection> projection_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Projection>();
    /// <summary>
    /// Properties to scan. If none are specified, all properties will be scanned
    /// by default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Projection> Projection {
      get { return projection_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatastoreOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatastoreOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PartitionId, other.PartitionId)) return false;
      if (!object.Equals(Kind, other.Kind)) return false;
      if(!projection_.Equals(other.projection_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (partitionId_ != null) hash ^= PartitionId.GetHashCode();
      if (kind_ != null) hash ^= Kind.GetHashCode();
      hash ^= projection_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (partitionId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PartitionId);
      }
      if (kind_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Kind);
      }
      projection_.WriteTo(output, _repeated_projection_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (partitionId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PartitionId);
      }
      if (kind_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kind);
      }
      size += projection_.CalculateSize(_repeated_projection_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatastoreOptions other) {
      if (other == null) {
        return;
      }
      if (other.partitionId_ != null) {
        if (partitionId_ == null) {
          partitionId_ = new global::Google.Cloud.Dlp.V2Beta1.PartitionId();
        }
        PartitionId.MergeFrom(other.PartitionId);
      }
      if (other.kind_ != null) {
        if (kind_ == null) {
          kind_ = new global::Google.Cloud.Dlp.V2Beta1.KindExpression();
        }
        Kind.MergeFrom(other.Kind);
      }
      projection_.Add(other.projection_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (partitionId_ == null) {
              partitionId_ = new global::Google.Cloud.Dlp.V2Beta1.PartitionId();
            }
            input.ReadMessage(partitionId_);
            break;
          }
          case 18: {
            if (kind_ == null) {
              kind_ = new global::Google.Cloud.Dlp.V2Beta1.KindExpression();
            }
            input.ReadMessage(kind_);
            break;
          }
          case 26: {
            projection_.AddEntriesFrom(input, _repeated_projection_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Options defining a file or a set of files (path ending with *) within
  /// a Google Cloud Storage bucket.
  /// </summary>
  public sealed partial class CloudStorageOptions : pb::IMessage<CloudStorageOptions> {
    private static readonly pb::MessageParser<CloudStorageOptions> _parser = new pb::MessageParser<CloudStorageOptions>(() => new CloudStorageOptions());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloudStorageOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.StorageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudStorageOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudStorageOptions(CloudStorageOptions other) : this() {
      FileSet = other.fileSet_ != null ? other.FileSet.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudStorageOptions Clone() {
      return new CloudStorageOptions(this);
    }

    /// <summary>Field number for the "file_set" field.</summary>
    public const int FileSetFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.CloudStorageOptions.Types.FileSet fileSet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.CloudStorageOptions.Types.FileSet FileSet {
      get { return fileSet_; }
      set {
        fileSet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloudStorageOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloudStorageOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FileSet, other.FileSet)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fileSet_ != null) hash ^= FileSet.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (fileSet_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FileSet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fileSet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FileSet);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloudStorageOptions other) {
      if (other == null) {
        return;
      }
      if (other.fileSet_ != null) {
        if (fileSet_ == null) {
          fileSet_ = new global::Google.Cloud.Dlp.V2Beta1.CloudStorageOptions.Types.FileSet();
        }
        FileSet.MergeFrom(other.FileSet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (fileSet_ == null) {
              fileSet_ = new global::Google.Cloud.Dlp.V2Beta1.CloudStorageOptions.Types.FileSet();
            }
            input.ReadMessage(fileSet_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CloudStorageOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Set of files to scan.
      /// </summary>
      public sealed partial class FileSet : pb::IMessage<FileSet> {
        private static readonly pb::MessageParser<FileSet> _parser = new pb::MessageParser<FileSet>(() => new FileSet());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FileSet> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta1.CloudStorageOptions.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FileSet() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FileSet(FileSet other) : this() {
          url_ = other.url_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FileSet Clone() {
          return new FileSet(this);
        }

        /// <summary>Field number for the "url" field.</summary>
        public const int UrlFieldNumber = 1;
        private string url_ = "";
        /// <summary>
        /// The url, in the format `gs://&lt;bucket>/&lt;path>`. Trailing wildcard in the
        /// path is allowed.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Url {
          get { return url_; }
          set {
            url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FileSet);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FileSet other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Url != other.Url) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Url.Length != 0) hash ^= Url.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Url.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Url);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Url.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FileSet other) {
          if (other == null) {
            return;
          }
          if (other.Url.Length != 0) {
            Url = other.Url;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Url = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// A location in Cloud Storage.
  /// </summary>
  public sealed partial class CloudStoragePath : pb::IMessage<CloudStoragePath> {
    private static readonly pb::MessageParser<CloudStoragePath> _parser = new pb::MessageParser<CloudStoragePath>(() => new CloudStoragePath());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloudStoragePath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.StorageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudStoragePath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudStoragePath(CloudStoragePath other) : this() {
      path_ = other.path_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudStoragePath Clone() {
      return new CloudStoragePath(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    /// <summary>
    /// The url, in the format of `gs://bucket/&lt;path>`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloudStoragePath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloudStoragePath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloudStoragePath other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Options defining BigQuery table and row identifiers.
  /// </summary>
  public sealed partial class BigQueryOptions : pb::IMessage<BigQueryOptions> {
    private static readonly pb::MessageParser<BigQueryOptions> _parser = new pb::MessageParser<BigQueryOptions>(() => new BigQueryOptions());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BigQueryOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.StorageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigQueryOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigQueryOptions(BigQueryOptions other) : this() {
      TableReference = other.tableReference_ != null ? other.TableReference.Clone() : null;
      identifyingFields_ = other.identifyingFields_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigQueryOptions Clone() {
      return new BigQueryOptions(this);
    }

    /// <summary>Field number for the "table_reference" field.</summary>
    public const int TableReferenceFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.BigQueryTable tableReference_;
    /// <summary>
    /// Complete BigQuery table reference.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.BigQueryTable TableReference {
      get { return tableReference_; }
      set {
        tableReference_ = value;
      }
    }

    /// <summary>Field number for the "identifying_fields" field.</summary>
    public const int IdentifyingFieldsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.FieldId> _repeated_identifyingFields_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Dlp.V2Beta1.FieldId.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.FieldId> identifyingFields_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.FieldId>();
    /// <summary>
    /// References to fields uniquely identifying rows within the table.
    /// Nested fields in the format, like `person.birthdate.year`, are allowed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.FieldId> IdentifyingFields {
      get { return identifyingFields_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BigQueryOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BigQueryOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TableReference, other.TableReference)) return false;
      if(!identifyingFields_.Equals(other.identifyingFields_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tableReference_ != null) hash ^= TableReference.GetHashCode();
      hash ^= identifyingFields_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (tableReference_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TableReference);
      }
      identifyingFields_.WriteTo(output, _repeated_identifyingFields_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tableReference_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableReference);
      }
      size += identifyingFields_.CalculateSize(_repeated_identifyingFields_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BigQueryOptions other) {
      if (other == null) {
        return;
      }
      if (other.tableReference_ != null) {
        if (tableReference_ == null) {
          tableReference_ = new global::Google.Cloud.Dlp.V2Beta1.BigQueryTable();
        }
        TableReference.MergeFrom(other.TableReference);
      }
      identifyingFields_.Add(other.identifyingFields_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (tableReference_ == null) {
              tableReference_ = new global::Google.Cloud.Dlp.V2Beta1.BigQueryTable();
            }
            input.ReadMessage(tableReference_);
            break;
          }
          case 18: {
            identifyingFields_.AddEntriesFrom(input, _repeated_identifyingFields_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Shared message indicating Cloud storage type.
  /// </summary>
  public sealed partial class StorageConfig : pb::IMessage<StorageConfig> {
    private static readonly pb::MessageParser<StorageConfig> _parser = new pb::MessageParser<StorageConfig>(() => new StorageConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StorageConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.StorageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageConfig(StorageConfig other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.DatastoreOptions:
          DatastoreOptions = other.DatastoreOptions.Clone();
          break;
        case TypeOneofCase.CloudStorageOptions:
          CloudStorageOptions = other.CloudStorageOptions.Clone();
          break;
        case TypeOneofCase.BigQueryOptions:
          BigQueryOptions = other.BigQueryOptions.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageConfig Clone() {
      return new StorageConfig(this);
    }

    /// <summary>Field number for the "datastore_options" field.</summary>
    public const int DatastoreOptionsFieldNumber = 2;
    /// <summary>
    /// Google Cloud Datastore options specification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.DatastoreOptions DatastoreOptions {
      get { return typeCase_ == TypeOneofCase.DatastoreOptions ? (global::Google.Cloud.Dlp.V2Beta1.DatastoreOptions) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.DatastoreOptions;
      }
    }

    /// <summary>Field number for the "cloud_storage_options" field.</summary>
    public const int CloudStorageOptionsFieldNumber = 3;
    /// <summary>
    /// Google Cloud Storage options specification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.CloudStorageOptions CloudStorageOptions {
      get { return typeCase_ == TypeOneofCase.CloudStorageOptions ? (global::Google.Cloud.Dlp.V2Beta1.CloudStorageOptions) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.CloudStorageOptions;
      }
    }

    /// <summary>Field number for the "big_query_options" field.</summary>
    public const int BigQueryOptionsFieldNumber = 4;
    /// <summary>
    /// BigQuery options specification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.BigQueryOptions BigQueryOptions {
      get { return typeCase_ == TypeOneofCase.BigQueryOptions ? (global::Google.Cloud.Dlp.V2Beta1.BigQueryOptions) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.BigQueryOptions;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      DatastoreOptions = 2,
      CloudStorageOptions = 3,
      BigQueryOptions = 4,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StorageConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StorageConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DatastoreOptions, other.DatastoreOptions)) return false;
      if (!object.Equals(CloudStorageOptions, other.CloudStorageOptions)) return false;
      if (!object.Equals(BigQueryOptions, other.BigQueryOptions)) return false;
      if (TypeCase != other.TypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.DatastoreOptions) hash ^= DatastoreOptions.GetHashCode();
      if (typeCase_ == TypeOneofCase.CloudStorageOptions) hash ^= CloudStorageOptions.GetHashCode();
      if (typeCase_ == TypeOneofCase.BigQueryOptions) hash ^= BigQueryOptions.GetHashCode();
      hash ^= (int) typeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.DatastoreOptions) {
        output.WriteRawTag(18);
        output.WriteMessage(DatastoreOptions);
      }
      if (typeCase_ == TypeOneofCase.CloudStorageOptions) {
        output.WriteRawTag(26);
        output.WriteMessage(CloudStorageOptions);
      }
      if (typeCase_ == TypeOneofCase.BigQueryOptions) {
        output.WriteRawTag(34);
        output.WriteMessage(BigQueryOptions);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.DatastoreOptions) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DatastoreOptions);
      }
      if (typeCase_ == TypeOneofCase.CloudStorageOptions) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CloudStorageOptions);
      }
      if (typeCase_ == TypeOneofCase.BigQueryOptions) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BigQueryOptions);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StorageConfig other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.DatastoreOptions:
          DatastoreOptions = other.DatastoreOptions;
          break;
        case TypeOneofCase.CloudStorageOptions:
          CloudStorageOptions = other.CloudStorageOptions;
          break;
        case TypeOneofCase.BigQueryOptions:
          BigQueryOptions = other.BigQueryOptions;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            global::Google.Cloud.Dlp.V2Beta1.DatastoreOptions subBuilder = new global::Google.Cloud.Dlp.V2Beta1.DatastoreOptions();
            if (typeCase_ == TypeOneofCase.DatastoreOptions) {
              subBuilder.MergeFrom(DatastoreOptions);
            }
            input.ReadMessage(subBuilder);
            DatastoreOptions = subBuilder;
            break;
          }
          case 26: {
            global::Google.Cloud.Dlp.V2Beta1.CloudStorageOptions subBuilder = new global::Google.Cloud.Dlp.V2Beta1.CloudStorageOptions();
            if (typeCase_ == TypeOneofCase.CloudStorageOptions) {
              subBuilder.MergeFrom(CloudStorageOptions);
            }
            input.ReadMessage(subBuilder);
            CloudStorageOptions = subBuilder;
            break;
          }
          case 34: {
            global::Google.Cloud.Dlp.V2Beta1.BigQueryOptions subBuilder = new global::Google.Cloud.Dlp.V2Beta1.BigQueryOptions();
            if (typeCase_ == TypeOneofCase.BigQueryOptions) {
              subBuilder.MergeFrom(BigQueryOptions);
            }
            input.ReadMessage(subBuilder);
            BigQueryOptions = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Record key for a finding in a Cloud Storage file.
  /// </summary>
  public sealed partial class CloudStorageKey : pb::IMessage<CloudStorageKey> {
    private static readonly pb::MessageParser<CloudStorageKey> _parser = new pb::MessageParser<CloudStorageKey>(() => new CloudStorageKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloudStorageKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.StorageReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudStorageKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudStorageKey(CloudStorageKey other) : this() {
      filePath_ = other.filePath_;
      startOffset_ = other.startOffset_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudStorageKey Clone() {
      return new CloudStorageKey(this);
    }

    /// <summary>Field number for the "file_path" field.</summary>
    public const int FilePathFieldNumber = 1;
    private string filePath_ = "";
    /// <summary>
    /// Path to the file.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FilePath {
      get { return filePath_; }
      set {
        filePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_offset" field.</summary>
    public const int StartOffsetFieldNumber = 2;
    private long startOffset_;
    /// <summary>
    /// Byte offset of the referenced data in the file.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartOffset {
      get { return startOffset_; }
      set {
        startOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloudStorageKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloudStorageKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FilePath != other.FilePath) return false;
      if (StartOffset != other.StartOffset) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FilePath.Length != 0) hash ^= FilePath.GetHashCode();
      if (StartOffset != 0L) hash ^= StartOffset.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FilePath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FilePath);
      }
      if (StartOffset != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StartOffset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FilePath);
      }
      if (StartOffset != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartOffset);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloudStorageKey other) {
      if (other == null) {
        return;
      }
      if (other.FilePath.Length != 0) {
        FilePath = other.FilePath;
      }
      if (other.StartOffset != 0L) {
        StartOffset = other.StartOffset;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FilePath = input.ReadString();
            break;
          }
          case 16: {
            StartOffset = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Record key for a finding in Cloud Datastore.
  /// </summary>
  public sealed partial class DatastoreKey : pb::IMessage<DatastoreKey> {
    private static readonly pb::MessageParser<DatastoreKey> _parser = new pb::MessageParser<DatastoreKey>(() => new DatastoreKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatastoreKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.StorageReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatastoreKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatastoreKey(DatastoreKey other) : this() {
      EntityKey = other.entityKey_ != null ? other.EntityKey.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatastoreKey Clone() {
      return new DatastoreKey(this);
    }

    /// <summary>Field number for the "entity_key" field.</summary>
    public const int EntityKeyFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.Key entityKey_;
    /// <summary>
    /// Datastore entity key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.Key EntityKey {
      get { return entityKey_; }
      set {
        entityKey_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatastoreKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatastoreKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EntityKey, other.EntityKey)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (entityKey_ != null) hash ^= EntityKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (entityKey_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EntityKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (entityKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EntityKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatastoreKey other) {
      if (other == null) {
        return;
      }
      if (other.entityKey_ != null) {
        if (entityKey_ == null) {
          entityKey_ = new global::Google.Cloud.Dlp.V2Beta1.Key();
        }
        EntityKey.MergeFrom(other.EntityKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (entityKey_ == null) {
              entityKey_ = new global::Google.Cloud.Dlp.V2Beta1.Key();
            }
            input.ReadMessage(entityKey_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A unique identifier for a Datastore entity.
  /// If a key's partition ID or any of its path kinds or names are
  /// reserved/read-only, the key is reserved/read-only.
  /// A reserved/read-only key is forbidden in certain documented contexts.
  /// </summary>
  public sealed partial class Key : pb::IMessage<Key> {
    private static readonly pb::MessageParser<Key> _parser = new pb::MessageParser<Key>(() => new Key());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Key> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.StorageReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Key() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Key(Key other) : this() {
      PartitionId = other.partitionId_ != null ? other.PartitionId.Clone() : null;
      path_ = other.path_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Key Clone() {
      return new Key(this);
    }

    /// <summary>Field number for the "partition_id" field.</summary>
    public const int PartitionIdFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.PartitionId partitionId_;
    /// <summary>
    /// Entities are partitioned into subsets, currently identified by a project
    /// ID and namespace ID.
    /// Queries are scoped to a single partition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.PartitionId PartitionId {
      get { return partitionId_; }
      set {
        partitionId_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.Key.Types.PathElement> _repeated_path_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Dlp.V2Beta1.Key.Types.PathElement.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Key.Types.PathElement> path_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Key.Types.PathElement>();
    /// <summary>
    /// The entity path.
    /// An entity path consists of one or more elements composed of a kind and a
    /// string or numerical identifier, which identify entities. The first
    /// element identifies a _root entity_, the second element identifies
    /// a _child_ of the root entity, the third element identifies a child of the
    /// second entity, and so forth. The entities identified by all prefixes of
    /// the path are called the element's _ancestors_.
    ///
    /// A path can never be empty, and a path can have at most 100 elements.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Key.Types.PathElement> Path {
      get { return path_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Key);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Key other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PartitionId, other.PartitionId)) return false;
      if(!path_.Equals(other.path_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (partitionId_ != null) hash ^= PartitionId.GetHashCode();
      hash ^= path_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (partitionId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PartitionId);
      }
      path_.WriteTo(output, _repeated_path_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (partitionId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PartitionId);
      }
      size += path_.CalculateSize(_repeated_path_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Key other) {
      if (other == null) {
        return;
      }
      if (other.partitionId_ != null) {
        if (partitionId_ == null) {
          partitionId_ = new global::Google.Cloud.Dlp.V2Beta1.PartitionId();
        }
        PartitionId.MergeFrom(other.PartitionId);
      }
      path_.Add(other.path_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (partitionId_ == null) {
              partitionId_ = new global::Google.Cloud.Dlp.V2Beta1.PartitionId();
            }
            input.ReadMessage(partitionId_);
            break;
          }
          case 18: {
            path_.AddEntriesFrom(input, _repeated_path_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Key message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A (kind, ID/name) pair used to construct a key path.
      ///
      /// If either name or ID is set, the element is complete.
      /// If neither is set, the element is incomplete.
      /// </summary>
      public sealed partial class PathElement : pb::IMessage<PathElement> {
        private static readonly pb::MessageParser<PathElement> _parser = new pb::MessageParser<PathElement>(() => new PathElement());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PathElement> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta1.Key.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PathElement() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PathElement(PathElement other) : this() {
          kind_ = other.kind_;
          switch (other.IdTypeCase) {
            case IdTypeOneofCase.Id:
              Id = other.Id;
              break;
            case IdTypeOneofCase.Name:
              Name = other.Name;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PathElement Clone() {
          return new PathElement(this);
        }

        /// <summary>Field number for the "kind" field.</summary>
        public const int KindFieldNumber = 1;
        private string kind_ = "";
        /// <summary>
        /// The kind of the entity.
        /// A kind matching regex `__.*__` is reserved/read-only.
        /// A kind must not contain more than 1500 bytes when UTF-8 encoded.
        /// Cannot be `""`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Kind {
          get { return kind_; }
          set {
            kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 2;
        /// <summary>
        /// The auto-allocated ID of the entity.
        /// Never equal to zero. Values less than zero are discouraged and may not
        /// be supported in the future.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Id {
          get { return idTypeCase_ == IdTypeOneofCase.Id ? (long) idType_ : 0L; }
          set {
            idType_ = value;
            idTypeCase_ = IdTypeOneofCase.Id;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 3;
        /// <summary>
        /// The name of the entity.
        /// A name matching regex `__.*__` is reserved/read-only.
        /// A name must not be more than 1500 bytes when UTF-8 encoded.
        /// Cannot be `""`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return idTypeCase_ == IdTypeOneofCase.Name ? (string) idType_ : ""; }
          set {
            idType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            idTypeCase_ = IdTypeOneofCase.Name;
          }
        }

        private object idType_;
        /// <summary>Enum of possible cases for the "id_type" oneof.</summary>
        public enum IdTypeOneofCase {
          None = 0,
          Id = 2,
          Name = 3,
        }
        private IdTypeOneofCase idTypeCase_ = IdTypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IdTypeOneofCase IdTypeCase {
          get { return idTypeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIdType() {
          idTypeCase_ = IdTypeOneofCase.None;
          idType_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PathElement);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PathElement other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Kind != other.Kind) return false;
          if (Id != other.Id) return false;
          if (Name != other.Name) return false;
          if (IdTypeCase != other.IdTypeCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Kind.Length != 0) hash ^= Kind.GetHashCode();
          if (idTypeCase_ == IdTypeOneofCase.Id) hash ^= Id.GetHashCode();
          if (idTypeCase_ == IdTypeOneofCase.Name) hash ^= Name.GetHashCode();
          hash ^= (int) idTypeCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Kind.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Kind);
          }
          if (idTypeCase_ == IdTypeOneofCase.Id) {
            output.WriteRawTag(16);
            output.WriteInt64(Id);
          }
          if (idTypeCase_ == IdTypeOneofCase.Name) {
            output.WriteRawTag(26);
            output.WriteString(Name);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Kind.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind);
          }
          if (idTypeCase_ == IdTypeOneofCase.Id) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
          }
          if (idTypeCase_ == IdTypeOneofCase.Name) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PathElement other) {
          if (other == null) {
            return;
          }
          if (other.Kind.Length != 0) {
            Kind = other.Kind;
          }
          switch (other.IdTypeCase) {
            case IdTypeOneofCase.Id:
              Id = other.Id;
              break;
            case IdTypeOneofCase.Name:
              Name = other.Name;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Kind = input.ReadString();
                break;
              }
              case 16: {
                Id = input.ReadInt64();
                break;
              }
              case 26: {
                Name = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Message for a unique key indicating a record that contains a finding.
  /// </summary>
  public sealed partial class RecordKey : pb::IMessage<RecordKey> {
    private static readonly pb::MessageParser<RecordKey> _parser = new pb::MessageParser<RecordKey>(() => new RecordKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.StorageReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordKey(RecordKey other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.CloudStorageKey:
          CloudStorageKey = other.CloudStorageKey.Clone();
          break;
        case TypeOneofCase.DatastoreKey:
          DatastoreKey = other.DatastoreKey.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordKey Clone() {
      return new RecordKey(this);
    }

    /// <summary>Field number for the "cloud_storage_key" field.</summary>
    public const int CloudStorageKeyFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.CloudStorageKey CloudStorageKey {
      get { return typeCase_ == TypeOneofCase.CloudStorageKey ? (global::Google.Cloud.Dlp.V2Beta1.CloudStorageKey) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.CloudStorageKey;
      }
    }

    /// <summary>Field number for the "datastore_key" field.</summary>
    public const int DatastoreKeyFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.DatastoreKey DatastoreKey {
      get { return typeCase_ == TypeOneofCase.DatastoreKey ? (global::Google.Cloud.Dlp.V2Beta1.DatastoreKey) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.DatastoreKey;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      CloudStorageKey = 1,
      DatastoreKey = 2,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CloudStorageKey, other.CloudStorageKey)) return false;
      if (!object.Equals(DatastoreKey, other.DatastoreKey)) return false;
      if (TypeCase != other.TypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.CloudStorageKey) hash ^= CloudStorageKey.GetHashCode();
      if (typeCase_ == TypeOneofCase.DatastoreKey) hash ^= DatastoreKey.GetHashCode();
      hash ^= (int) typeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.CloudStorageKey) {
        output.WriteRawTag(10);
        output.WriteMessage(CloudStorageKey);
      }
      if (typeCase_ == TypeOneofCase.DatastoreKey) {
        output.WriteRawTag(18);
        output.WriteMessage(DatastoreKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.CloudStorageKey) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CloudStorageKey);
      }
      if (typeCase_ == TypeOneofCase.DatastoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DatastoreKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordKey other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.CloudStorageKey:
          CloudStorageKey = other.CloudStorageKey;
          break;
        case TypeOneofCase.DatastoreKey:
          DatastoreKey = other.DatastoreKey;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Cloud.Dlp.V2Beta1.CloudStorageKey subBuilder = new global::Google.Cloud.Dlp.V2Beta1.CloudStorageKey();
            if (typeCase_ == TypeOneofCase.CloudStorageKey) {
              subBuilder.MergeFrom(CloudStorageKey);
            }
            input.ReadMessage(subBuilder);
            CloudStorageKey = subBuilder;
            break;
          }
          case 18: {
            global::Google.Cloud.Dlp.V2Beta1.DatastoreKey subBuilder = new global::Google.Cloud.Dlp.V2Beta1.DatastoreKey();
            if (typeCase_ == TypeOneofCase.DatastoreKey) {
              subBuilder.MergeFrom(DatastoreKey);
            }
            input.ReadMessage(subBuilder);
            DatastoreKey = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message defining the location of a BigQuery table. A table is uniquely
  /// identified  by its project_id, dataset_id, and table_name. Within a query
  /// a table is often referenced with a string in the format of:
  /// `&lt;project_id>:&lt;dataset_id>.&lt;table_id>` or
  /// `&lt;project_id>.&lt;dataset_id>.&lt;table_id>`.
  /// </summary>
  public sealed partial class BigQueryTable : pb::IMessage<BigQueryTable> {
    private static readonly pb::MessageParser<BigQueryTable> _parser = new pb::MessageParser<BigQueryTable>(() => new BigQueryTable());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BigQueryTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.StorageReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigQueryTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigQueryTable(BigQueryTable other) : this() {
      projectId_ = other.projectId_;
      datasetId_ = other.datasetId_;
      tableId_ = other.tableId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigQueryTable Clone() {
      return new BigQueryTable(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private string projectId_ = "";
    /// <summary>
    /// The Google Cloud Platform project ID of the project containing the table.
    /// If omitted, project ID is inferred from the API call.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataset_id" field.</summary>
    public const int DatasetIdFieldNumber = 2;
    private string datasetId_ = "";
    /// <summary>
    /// Dataset ID of the table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatasetId {
      get { return datasetId_; }
      set {
        datasetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "table_id" field.</summary>
    public const int TableIdFieldNumber = 3;
    private string tableId_ = "";
    /// <summary>
    /// Name of the table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableId {
      get { return tableId_; }
      set {
        tableId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BigQueryTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BigQueryTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (DatasetId != other.DatasetId) return false;
      if (TableId != other.TableId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (DatasetId.Length != 0) hash ^= DatasetId.GetHashCode();
      if (TableId.Length != 0) hash ^= TableId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (DatasetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatasetId);
      }
      if (TableId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TableId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (DatasetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatasetId);
      }
      if (TableId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BigQueryTable other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.DatasetId.Length != 0) {
        DatasetId = other.DatasetId;
      }
      if (other.TableId.Length != 0) {
        TableId = other.TableId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 18: {
            DatasetId = input.ReadString();
            break;
          }
          case 26: {
            TableId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An entity in a dataset is a field or set of fields that correspond to a
  /// single person. For example, in medical records the `EntityId` might be
  /// a patient identifier, or for financial records it might be an account
  /// identifier. This message is used when generalizations or analysis must be
  /// consistent across multiple rows pertaining to the same entity.
  /// </summary>
  public sealed partial class EntityId : pb::IMessage<EntityId> {
    private static readonly pb::MessageParser<EntityId> _parser = new pb::MessageParser<EntityId>(() => new EntityId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.StorageReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityId(EntityId other) : this() {
      Field = other.field_ != null ? other.Field.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityId Clone() {
      return new EntityId(this);
    }

    /// <summary>Field number for the "field" field.</summary>
    public const int FieldFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.FieldId field_;
    /// <summary>
    /// Composite key indicating which field contains the entity identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.FieldId Field {
      get { return field_; }
      set {
        field_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Field, other.Field)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (field_ != null) hash ^= Field.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (field_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Field);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (field_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Field);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityId other) {
      if (other == null) {
        return;
      }
      if (other.field_ != null) {
        if (field_ == null) {
          field_ = new global::Google.Cloud.Dlp.V2Beta1.FieldId();
        }
        Field.MergeFrom(other.Field);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (field_ == null) {
              field_ = new global::Google.Cloud.Dlp.V2Beta1.FieldId();
            }
            input.ReadMessage(field_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
