// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/redis/v1beta1/cloud_redis.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Redis.V1Beta1 {

  /// <summary>Holder for reflection information generated from google/cloud/redis/v1beta1/cloud_redis.proto</summary>
  public static partial class CloudRedisReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/redis/v1beta1/cloud_redis.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CloudRedisReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cixnb29nbGUvY2xvdWQvcmVkaXMvdjFiZXRhMS9jbG91ZF9yZWRpcy5wcm90",
            "bxIaZ29vZ2xlLmNsb3VkLnJlZGlzLnYxYmV0YTEaHGdvb2dsZS9hcGkvYW5u",
            "b3RhdGlvbnMucHJvdG8aI2dvb2dsZS9sb25ncnVubmluZy9vcGVyYXRpb25z",
            "LnByb3RvGiBnb29nbGUvcHJvdG9idWYvZmllbGRfbWFzay5wcm90bxofZ29v",
            "Z2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byLkBgoISW5zdGFuY2USDAoE",
            "bmFtZRgBIAEoCRIUCgxkaXNwbGF5X25hbWUYAiABKAkSQAoGbGFiZWxzGAMg",
            "AygLMjAuZ29vZ2xlLmNsb3VkLnJlZGlzLnYxYmV0YTEuSW5zdGFuY2UuTGFi",
            "ZWxzRW50cnkSEwoLbG9jYXRpb25faWQYBCABKAkSHwoXYWx0ZXJuYXRpdmVf",
            "bG9jYXRpb25faWQYBSABKAkSFQoNcmVkaXNfdmVyc2lvbhgHIAEoCRIZChFy",
            "ZXNlcnZlZF9pcF9yYW5nZRgJIAEoCRIMCgRob3N0GAogASgJEgwKBHBvcnQY",
            "CyABKAUSGwoTY3VycmVudF9sb2NhdGlvbl9pZBgMIAEoCRIvCgtjcmVhdGVf",
            "dGltZRgNIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASOQoFc3Rh",
            "dGUYDiABKA4yKi5nb29nbGUuY2xvdWQucmVkaXMudjFiZXRhMS5JbnN0YW5j",
            "ZS5TdGF0ZRIWCg5zdGF0dXNfbWVzc2FnZRgPIAEoCRJNCg1yZWRpc19jb25m",
            "aWdzGBAgAygLMjYuZ29vZ2xlLmNsb3VkLnJlZGlzLnYxYmV0YTEuSW5zdGFu",
            "Y2UuUmVkaXNDb25maWdzRW50cnkSNwoEdGllchgRIAEoDjIpLmdvb2dsZS5j",
            "bG91ZC5yZWRpcy52MWJldGExLkluc3RhbmNlLlRpZXISFgoObWVtb3J5X3Np",
            "emVfZ2IYEiABKAUSGgoSYXV0aG9yaXplZF9uZXR3b3JrGBQgASgJGi0KC0xh",
            "YmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEaMwoR",
            "UmVkaXNDb25maWdzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJ",
            "OgI4ASJzCgVTdGF0ZRIVChFTVEFURV9VTlNQRUNJRklFRBAAEgwKCENSRUFU",
            "SU5HEAESCQoFUkVBRFkQAhIMCghVUERBVElORxADEgwKCERFTEVUSU5HEAQS",
            "DQoJUkVQQUlSSU5HEAUSDwoLTUFJTlRFTkFOQ0UQBiI4CgRUaWVyEhQKEFRJ",
            "RVJfVU5TUEVDSUZJRUQQABIJCgVCQVNJQxABEg8KC1NUQU5EQVJEX0hBEAMi",
            "TQoUTGlzdEluc3RhbmNlc1JlcXVlc3QSDgoGcGFyZW50GAEgASgJEhEKCXBh",
            "Z2Vfc2l6ZRgCIAEoBRISCgpwYWdlX3Rva2VuGAMgASgJImkKFUxpc3RJbnN0",
            "YW5jZXNSZXNwb25zZRI3CglpbnN0YW5jZXMYASADKAsyJC5nb29nbGUuY2xv",
            "dWQucmVkaXMudjFiZXRhMS5JbnN0YW5jZRIXCg9uZXh0X3BhZ2VfdG9rZW4Y",
            "AiABKAkiIgoSR2V0SW5zdGFuY2VSZXF1ZXN0EgwKBG5hbWUYASABKAkidAoV",
            "Q3JlYXRlSW5zdGFuY2VSZXF1ZXN0Eg4KBnBhcmVudBgBIAEoCRITCgtpbnN0",
            "YW5jZV9pZBgCIAEoCRI2CghpbnN0YW5jZRgDIAEoCzIkLmdvb2dsZS5jbG91",
            "ZC5yZWRpcy52MWJldGExLkluc3RhbmNlIoABChVVcGRhdGVJbnN0YW5jZVJl",
            "cXVlc3QSLwoLdXBkYXRlX21hc2sYASABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "RmllbGRNYXNrEjYKCGluc3RhbmNlGAIgASgLMiQuZ29vZ2xlLmNsb3VkLnJl",
            "ZGlzLnYxYmV0YTEuSW5zdGFuY2UiJQoVRGVsZXRlSW5zdGFuY2VSZXF1ZXN0",
            "EgwKBG5hbWUYASABKAkizgEKEExvY2F0aW9uTWV0YWRhdGESWQoPYXZhaWxh",
            "YmxlX3pvbmVzGAEgAygLMkAuZ29vZ2xlLmNsb3VkLnJlZGlzLnYxYmV0YTEu",
            "TG9jYXRpb25NZXRhZGF0YS5BdmFpbGFibGVab25lc0VudHJ5Gl8KE0F2YWls",
            "YWJsZVpvbmVzRW50cnkSCwoDa2V5GAEgASgJEjcKBXZhbHVlGAIgASgLMigu",
            "Z29vZ2xlLmNsb3VkLnJlZGlzLnYxYmV0YTEuWm9uZU1ldGFkYXRhOgI4ASIO",
            "Cgxab25lTWV0YWRhdGEy4QYKCkNsb3VkUmVkaXMSsAEKDUxpc3RJbnN0YW5j",
            "ZXMSMC5nb29nbGUuY2xvdWQucmVkaXMudjFiZXRhMS5MaXN0SW5zdGFuY2Vz",
            "UmVxdWVzdBoxLmdvb2dsZS5jbG91ZC5yZWRpcy52MWJldGExLkxpc3RJbnN0",
            "YW5jZXNSZXNwb25zZSI6gtPkkwI0EjIvdjFiZXRhMS97cGFyZW50PXByb2pl",
            "Y3RzLyovbG9jYXRpb25zLyp9L2luc3RhbmNlcxKfAQoLR2V0SW5zdGFuY2US",
            "Li5nb29nbGUuY2xvdWQucmVkaXMudjFiZXRhMS5HZXRJbnN0YW5jZVJlcXVl",
            "c3QaJC5nb29nbGUuY2xvdWQucmVkaXMudjFiZXRhMS5JbnN0YW5jZSI6gtPk",
            "kwI0EjIvdjFiZXRhMS97bmFtZT1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL2lu",
            "c3RhbmNlcy8qfRKoAQoOQ3JlYXRlSW5zdGFuY2USMS5nb29nbGUuY2xvdWQu",
            "cmVkaXMudjFiZXRhMS5DcmVhdGVJbnN0YW5jZVJlcXVlc3QaHS5nb29nbGUu",
            "bG9uZ3J1bm5pbmcuT3BlcmF0aW9uIkSC0+STAj4iMi92MWJldGExL3twYXJl",
            "bnQ9cHJvamVjdHMvKi9sb2NhdGlvbnMvKn0vaW5zdGFuY2VzOghpbnN0YW5j",
            "ZRKxAQoOVXBkYXRlSW5zdGFuY2USMS5nb29nbGUuY2xvdWQucmVkaXMudjFi",
            "ZXRhMS5VcGRhdGVJbnN0YW5jZVJlcXVlc3QaHS5nb29nbGUubG9uZ3J1bm5p",
            "bmcuT3BlcmF0aW9uIk2C0+STAkcyOy92MWJldGExL3tpbnN0YW5jZS5uYW1l",
            "PXByb2plY3RzLyovbG9jYXRpb25zLyovaW5zdGFuY2VzLyp9OghpbnN0YW5j",
            "ZRKeAQoORGVsZXRlSW5zdGFuY2USMS5nb29nbGUuY2xvdWQucmVkaXMudjFi",
            "ZXRhMS5EZWxldGVJbnN0YW5jZVJlcXVlc3QaHS5nb29nbGUubG9uZ3J1bm5p",
            "bmcuT3BlcmF0aW9uIjqC0+STAjQqMi92MWJldGExL3tuYW1lPXByb2plY3Rz",
            "LyovbG9jYXRpb25zLyovaW5zdGFuY2VzLyp9Qn8KHmNvbS5nb29nbGUuY2xv",
            "dWQucmVkaXMudjFiZXRhMUIaQ2xvdWRSZWRpc1NlcnZpY2VCZXRhUHJvdG9Q",
            "AVo/Z29vZ2xlLmdvbGFuZy5vcmcvZ2VucHJvdG8vZ29vZ2xlYXBpcy9jbG91",
            "ZC9yZWRpcy92MWJldGExO3JlZGlzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.LongRunning.OperationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.FieldMaskReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Redis.V1Beta1.Instance), global::Google.Cloud.Redis.V1Beta1.Instance.Parser, new[]{ "Name", "DisplayName", "Labels", "LocationId", "AlternativeLocationId", "RedisVersion", "ReservedIpRange", "Host", "Port", "CurrentLocationId", "CreateTime", "State", "StatusMessage", "RedisConfigs", "Tier", "MemorySizeGb", "AuthorizedNetwork" }, null, new[]{ typeof(global::Google.Cloud.Redis.V1Beta1.Instance.Types.State), typeof(global::Google.Cloud.Redis.V1Beta1.Instance.Types.Tier) }, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Redis.V1Beta1.ListInstancesRequest), global::Google.Cloud.Redis.V1Beta1.ListInstancesRequest.Parser, new[]{ "Parent", "PageSize", "PageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Redis.V1Beta1.ListInstancesResponse), global::Google.Cloud.Redis.V1Beta1.ListInstancesResponse.Parser, new[]{ "Instances", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Redis.V1Beta1.GetInstanceRequest), global::Google.Cloud.Redis.V1Beta1.GetInstanceRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Redis.V1Beta1.CreateInstanceRequest), global::Google.Cloud.Redis.V1Beta1.CreateInstanceRequest.Parser, new[]{ "Parent", "InstanceId", "Instance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Redis.V1Beta1.UpdateInstanceRequest), global::Google.Cloud.Redis.V1Beta1.UpdateInstanceRequest.Parser, new[]{ "UpdateMask", "Instance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Redis.V1Beta1.DeleteInstanceRequest), global::Google.Cloud.Redis.V1Beta1.DeleteInstanceRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Redis.V1Beta1.LocationMetadata), global::Google.Cloud.Redis.V1Beta1.LocationMetadata.Parser, new[]{ "AvailableZones" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Redis.V1Beta1.ZoneMetadata), global::Google.Cloud.Redis.V1Beta1.ZoneMetadata.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A Google Cloud Redis instance.
  /// </summary>
  public sealed partial class Instance : pb::IMessage<Instance> {
    private static readonly pb::MessageParser<Instance> _parser = new pb::MessageParser<Instance>(() => new Instance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Instance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Redis.V1Beta1.CloudRedisReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Instance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Instance(Instance other) : this() {
      name_ = other.name_;
      displayName_ = other.displayName_;
      labels_ = other.labels_.Clone();
      locationId_ = other.locationId_;
      alternativeLocationId_ = other.alternativeLocationId_;
      redisVersion_ = other.redisVersion_;
      reservedIpRange_ = other.reservedIpRange_;
      host_ = other.host_;
      port_ = other.port_;
      currentLocationId_ = other.currentLocationId_;
      createTime_ = other.createTime_ != null ? other.createTime_.Clone() : null;
      state_ = other.state_;
      statusMessage_ = other.statusMessage_;
      redisConfigs_ = other.redisConfigs_.Clone();
      tier_ = other.tier_;
      memorySizeGb_ = other.memorySizeGb_;
      authorizedNetwork_ = other.authorizedNetwork_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Instance Clone() {
      return new Instance(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Required. Unique name of the resource in this scope including project and
    /// location using the form:
    ///     `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
    ///
    /// Note: Redis instances are managed and addressed at regional level so
    /// location_id here refers to a GCP region; however, users get to choose which
    /// specific zone (or collection of zones for cross-zone instances) an instance
    /// should be provisioned in. Refer to [location_id] and
    /// [alternative_location_id] fields for more details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 2;
    private string displayName_ = "";
    /// <summary>
    /// An arbitrary and optional user-provided name for the instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 26);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Resource labels to represent user provided metadata
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "location_id" field.</summary>
    public const int LocationIdFieldNumber = 4;
    private string locationId_ = "";
    /// <summary>
    /// Optional. The zone where the instance will be provisioned. If not provided,
    /// the service will choose a zone for the instance. For STANDARD_HA tier,
    /// instances will be created across two zones for protection against zonal
    /// failures. if [alternative_location_id] is also provided, it must be
    /// different from [location_id].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocationId {
      get { return locationId_; }
      set {
        locationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alternative_location_id" field.</summary>
    public const int AlternativeLocationIdFieldNumber = 5;
    private string alternativeLocationId_ = "";
    /// <summary>
    /// Optional. Only applicable to STANDARD_HA tier which protects the instance
    /// against zonal failures by provisioning it across two zones. If provided, it
    /// must be a different zone from the one provided in [location_id].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlternativeLocationId {
      get { return alternativeLocationId_; }
      set {
        alternativeLocationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "redis_version" field.</summary>
    public const int RedisVersionFieldNumber = 7;
    private string redisVersion_ = "";
    /// <summary>
    /// Optional. The version of Redis software.
    /// If not provided, latest supported version will be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RedisVersion {
      get { return redisVersion_; }
      set {
        redisVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reserved_ip_range" field.</summary>
    public const int ReservedIpRangeFieldNumber = 9;
    private string reservedIpRange_ = "";
    /// <summary>
    /// Optional. The CIDR range of internal addresses that are reserved for this
    /// instance. If not provided, the service will choose an unused /29 block,
    /// for example, 10.0.0.0/29 or 192.168.0.0/29. Ranges must be unique
    /// and non-overlapping with existing subnets in a network.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReservedIpRange {
      get { return reservedIpRange_; }
      set {
        reservedIpRange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 10;
    private string host_ = "";
    /// <summary>
    /// Output only. Hostname or IP address of the exposed redis endpoint used by
    /// clients to connect to the service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 11;
    private int port_;
    /// <summary>
    /// Output only. The port number of the exposed redis endpoint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "current_location_id" field.</summary>
    public const int CurrentLocationIdFieldNumber = 12;
    private string currentLocationId_ = "";
    /// <summary>
    /// Output only. The current zone where the Redis endpoint is placed. In
    /// single zone deployments, this will always be the same as [location_id]
    /// provided by the user at creation time. In cross-zone instances (only
    /// applicable in STANDARD_HA tier), this can be either [location_id] or
    /// [alternative_location_id] and can change on a failover event.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentLocationId {
      get { return currentLocationId_; }
      set {
        currentLocationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 13;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// Output only. The time the instance was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 14;
    private global::Google.Cloud.Redis.V1Beta1.Instance.Types.State state_ = 0;
    /// <summary>
    /// Output only. The current state of this instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Redis.V1Beta1.Instance.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "status_message" field.</summary>
    public const int StatusMessageFieldNumber = 15;
    private string statusMessage_ = "";
    /// <summary>
    /// Output only. Additional information about the current status of this
    /// instance, if available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatusMessage {
      get { return statusMessage_; }
      set {
        statusMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "redis_configs" field.</summary>
    public const int RedisConfigsFieldNumber = 16;
    private static readonly pbc::MapField<string, string>.Codec _map_redisConfigs_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 130);
    private readonly pbc::MapField<string, string> redisConfigs_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Optional. Redis configuration parameters, according to
    /// http://redis.io/topics/config. Currently, the only supported parameters
    /// are:
    ///  * maxmemory-policy
    ///  * notify-keyspace-events
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> RedisConfigs {
      get { return redisConfigs_; }
    }

    /// <summary>Field number for the "tier" field.</summary>
    public const int TierFieldNumber = 17;
    private global::Google.Cloud.Redis.V1Beta1.Instance.Types.Tier tier_ = 0;
    /// <summary>
    /// Required. The service tier of the instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Redis.V1Beta1.Instance.Types.Tier Tier {
      get { return tier_; }
      set {
        tier_ = value;
      }
    }

    /// <summary>Field number for the "memory_size_gb" field.</summary>
    public const int MemorySizeGbFieldNumber = 18;
    private int memorySizeGb_;
    /// <summary>
    /// Required. Redis memory size in GB.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemorySizeGb {
      get { return memorySizeGb_; }
      set {
        memorySizeGb_ = value;
      }
    }

    /// <summary>Field number for the "authorized_network" field.</summary>
    public const int AuthorizedNetworkFieldNumber = 20;
    private string authorizedNetwork_ = "";
    /// <summary>
    /// Optional. The full name of the Google Compute Engine
    /// [network](/compute/docs/networks-and-firewalls#networks) to which the
    /// instance is connected. If left unspecified, the `default` network
    /// will be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthorizedNetwork {
      get { return authorizedNetwork_; }
      set {
        authorizedNetwork_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Instance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Instance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (DisplayName != other.DisplayName) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (LocationId != other.LocationId) return false;
      if (AlternativeLocationId != other.AlternativeLocationId) return false;
      if (RedisVersion != other.RedisVersion) return false;
      if (ReservedIpRange != other.ReservedIpRange) return false;
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      if (CurrentLocationId != other.CurrentLocationId) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (State != other.State) return false;
      if (StatusMessage != other.StatusMessage) return false;
      if (!RedisConfigs.Equals(other.RedisConfigs)) return false;
      if (Tier != other.Tier) return false;
      if (MemorySizeGb != other.MemorySizeGb) return false;
      if (AuthorizedNetwork != other.AuthorizedNetwork) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (LocationId.Length != 0) hash ^= LocationId.GetHashCode();
      if (AlternativeLocationId.Length != 0) hash ^= AlternativeLocationId.GetHashCode();
      if (RedisVersion.Length != 0) hash ^= RedisVersion.GetHashCode();
      if (ReservedIpRange.Length != 0) hash ^= ReservedIpRange.GetHashCode();
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (CurrentLocationId.Length != 0) hash ^= CurrentLocationId.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (StatusMessage.Length != 0) hash ^= StatusMessage.GetHashCode();
      hash ^= RedisConfigs.GetHashCode();
      if (Tier != 0) hash ^= Tier.GetHashCode();
      if (MemorySizeGb != 0) hash ^= MemorySizeGb.GetHashCode();
      if (AuthorizedNetwork.Length != 0) hash ^= AuthorizedNetwork.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayName);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (LocationId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LocationId);
      }
      if (AlternativeLocationId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AlternativeLocationId);
      }
      if (RedisVersion.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(RedisVersion);
      }
      if (ReservedIpRange.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ReservedIpRange);
      }
      if (Host.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Port);
      }
      if (CurrentLocationId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CurrentLocationId);
      }
      if (createTime_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(CreateTime);
      }
      if (State != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) State);
      }
      if (StatusMessage.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(StatusMessage);
      }
      redisConfigs_.WriteTo(output, _map_redisConfigs_codec);
      if (Tier != 0) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) Tier);
      }
      if (MemorySizeGb != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(MemorySizeGb);
      }
      if (AuthorizedNetwork.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(AuthorizedNetwork);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (LocationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocationId);
      }
      if (AlternativeLocationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlternativeLocationId);
      }
      if (RedisVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RedisVersion);
      }
      if (ReservedIpRange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReservedIpRange);
      }
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (CurrentLocationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentLocationId);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (StatusMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatusMessage);
      }
      size += redisConfigs_.CalculateSize(_map_redisConfigs_codec);
      if (Tier != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Tier);
      }
      if (MemorySizeGb != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MemorySizeGb);
      }
      if (AuthorizedNetwork.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AuthorizedNetwork);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Instance other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      labels_.Add(other.labels_);
      if (other.LocationId.Length != 0) {
        LocationId = other.LocationId;
      }
      if (other.AlternativeLocationId.Length != 0) {
        AlternativeLocationId = other.AlternativeLocationId;
      }
      if (other.RedisVersion.Length != 0) {
        RedisVersion = other.RedisVersion;
      }
      if (other.ReservedIpRange.Length != 0) {
        ReservedIpRange = other.ReservedIpRange;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.CurrentLocationId.Length != 0) {
        CurrentLocationId = other.CurrentLocationId;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.StatusMessage.Length != 0) {
        StatusMessage = other.StatusMessage;
      }
      redisConfigs_.Add(other.redisConfigs_);
      if (other.Tier != 0) {
        Tier = other.Tier;
      }
      if (other.MemorySizeGb != 0) {
        MemorySizeGb = other.MemorySizeGb;
      }
      if (other.AuthorizedNetwork.Length != 0) {
        AuthorizedNetwork = other.AuthorizedNetwork;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            DisplayName = input.ReadString();
            break;
          }
          case 26: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 34: {
            LocationId = input.ReadString();
            break;
          }
          case 42: {
            AlternativeLocationId = input.ReadString();
            break;
          }
          case 58: {
            RedisVersion = input.ReadString();
            break;
          }
          case 74: {
            ReservedIpRange = input.ReadString();
            break;
          }
          case 82: {
            Host = input.ReadString();
            break;
          }
          case 88: {
            Port = input.ReadInt32();
            break;
          }
          case 98: {
            CurrentLocationId = input.ReadString();
            break;
          }
          case 106: {
            if (createTime_ == null) {
              createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(createTime_);
            break;
          }
          case 112: {
            state_ = (global::Google.Cloud.Redis.V1Beta1.Instance.Types.State) input.ReadEnum();
            break;
          }
          case 122: {
            StatusMessage = input.ReadString();
            break;
          }
          case 130: {
            redisConfigs_.AddEntriesFrom(input, _map_redisConfigs_codec);
            break;
          }
          case 136: {
            tier_ = (global::Google.Cloud.Redis.V1Beta1.Instance.Types.Tier) input.ReadEnum();
            break;
          }
          case 144: {
            MemorySizeGb = input.ReadInt32();
            break;
          }
          case 162: {
            AuthorizedNetwork = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Instance message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Represents the different states of a Redis instance.
      /// </summary>
      public enum State {
        /// <summary>
        /// Not set.
        /// </summary>
        [pbr::OriginalName("STATE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Redis instance is being created.
        /// </summary>
        [pbr::OriginalName("CREATING")] Creating = 1,
        /// <summary>
        /// Redis instance has been created and is fully usable.
        /// </summary>
        [pbr::OriginalName("READY")] Ready = 2,
        /// <summary>
        /// Redis instance configuration is being updated. Certain kinds of updates
        /// may cause the instance to become unusable while the update is in
        /// progress.
        /// </summary>
        [pbr::OriginalName("UPDATING")] Updating = 3,
        /// <summary>
        /// Redis instance is being deleted.
        /// </summary>
        [pbr::OriginalName("DELETING")] Deleting = 4,
        /// <summary>
        /// Redis instance is being repaired and may be unusable. Details can be
        /// found in the `status_message` field.
        /// </summary>
        [pbr::OriginalName("REPAIRING")] Repairing = 5,
        /// <summary>
        /// Maintenance is being performed on this Redis instance.
        /// </summary>
        [pbr::OriginalName("MAINTENANCE")] Maintenance = 6,
      }

      /// <summary>
      /// Available service tiers to choose from
      /// </summary>
      public enum Tier {
        /// <summary>
        /// Not set.
        /// </summary>
        [pbr::OriginalName("TIER_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// BASIC tier: standalone instance
        /// </summary>
        [pbr::OriginalName("BASIC")] Basic = 1,
        /// <summary>
        /// STANDARD_HA tier: highly available primary/replica instances
        /// </summary>
        [pbr::OriginalName("STANDARD_HA")] StandardHa = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// Request for
  /// [ListInstances][google.cloud.redis.v1beta1.CloudRedis.ListInstances].
  /// </summary>
  public sealed partial class ListInstancesRequest : pb::IMessage<ListInstancesRequest> {
    private static readonly pb::MessageParser<ListInstancesRequest> _parser = new pb::MessageParser<ListInstancesRequest>(() => new ListInstancesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListInstancesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Redis.V1Beta1.CloudRedisReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInstancesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInstancesRequest(ListInstancesRequest other) : this() {
      parent_ = other.parent_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInstancesRequest Clone() {
      return new ListInstancesRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// Required. The resource name of the instance location using the form:
    ///     `projects/{project_id}/locations/{location_id}`
    /// where `location_id` refers to a GCP region
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    /// The maximum number of items to return.
    ///
    /// If not specified, a default value of 1000 will be used by the service.
    /// Regardless of the page_size value, the response may include a partial list
    /// and a caller should only rely on response's
    /// [next_page_token][CloudRedis.ListInstancesResponse.next_page_token]
    /// to determine if there are more instances left to be queried.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// The next_page_token value returned from a previous List request,
    /// if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListInstancesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListInstancesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListInstancesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response for
  /// [ListInstances][google.cloud.redis.v1beta1.CloudRedis.ListInstances].
  /// </summary>
  public sealed partial class ListInstancesResponse : pb::IMessage<ListInstancesResponse> {
    private static readonly pb::MessageParser<ListInstancesResponse> _parser = new pb::MessageParser<ListInstancesResponse>(() => new ListInstancesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListInstancesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Redis.V1Beta1.CloudRedisReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInstancesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInstancesResponse(ListInstancesResponse other) : this() {
      instances_ = other.instances_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInstancesResponse Clone() {
      return new ListInstancesResponse(this);
    }

    /// <summary>Field number for the "instances" field.</summary>
    public const int InstancesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Redis.V1Beta1.Instance> _repeated_instances_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Redis.V1Beta1.Instance.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Redis.V1Beta1.Instance> instances_ = new pbc::RepeatedField<global::Google.Cloud.Redis.V1Beta1.Instance>();
    /// <summary>
    /// A list of Redis instances in the project in the specified location,
    /// or across all locations.
    ///
    /// If the `location_id` in the parent field of the request is "-", all regions
    /// available to the project are queried, and the results aggregated.
    /// If in such an aggregated query a location is unavailable, a dummy Redis
    /// entry is included in the response with the "name" field set to a value of
    /// the form projects/{project_id}/locations/{location_id}/instances/- and the
    /// "status" field set to ERROR and "status_message" field set to "location not
    /// available for ListInstances".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Redis.V1Beta1.Instance> Instances {
      get { return instances_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// Token to retrieve the next page of results, or empty if there are no more
    /// results in the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListInstancesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListInstancesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instances_.Equals(other.instances_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instances_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      instances_.WriteTo(output, _repeated_instances_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += instances_.CalculateSize(_repeated_instances_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListInstancesResponse other) {
      if (other == null) {
        return;
      }
      instances_.Add(other.instances_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instances_.AddEntriesFrom(input, _repeated_instances_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request for [GetInstance][google.cloud.redis.v1beta1.CloudRedis.GetInstance].
  /// </summary>
  public sealed partial class GetInstanceRequest : pb::IMessage<GetInstanceRequest> {
    private static readonly pb::MessageParser<GetInstanceRequest> _parser = new pb::MessageParser<GetInstanceRequest>(() => new GetInstanceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetInstanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Redis.V1Beta1.CloudRedisReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInstanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInstanceRequest(GetInstanceRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInstanceRequest Clone() {
      return new GetInstanceRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Required. Redis instance resource name using the form:
    ///     `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
    /// where `location_id` refers to a GCP region
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetInstanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetInstanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetInstanceRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request for
  /// [CreateInstance][google.cloud.redis.v1beta1.CloudRedis.CreateInstance].
  /// </summary>
  public sealed partial class CreateInstanceRequest : pb::IMessage<CreateInstanceRequest> {
    private static readonly pb::MessageParser<CreateInstanceRequest> _parser = new pb::MessageParser<CreateInstanceRequest>(() => new CreateInstanceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateInstanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Redis.V1Beta1.CloudRedisReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInstanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInstanceRequest(CreateInstanceRequest other) : this() {
      parent_ = other.parent_;
      instanceId_ = other.instanceId_;
      instance_ = other.instance_ != null ? other.instance_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInstanceRequest Clone() {
      return new CreateInstanceRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// Required. The resource name of the instance location using the form:
    ///     `projects/{project_id}/locations/{location_id}`
    /// where `location_id` refers to a GCP region
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 2;
    private string instanceId_ = "";
    /// <summary>
    /// Required. The logical name of the Redis instance in the customer project
    /// with the following restrictions:
    ///
    /// * Must contain only lowercase letters, numbers, and hyphens.
    /// * Must start with a letter.
    /// * Must be between 1-40 characters.
    /// * Must end with a number or a letter.
    /// * Must be unique within the customer project / location
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instance" field.</summary>
    public const int InstanceFieldNumber = 3;
    private global::Google.Cloud.Redis.V1Beta1.Instance instance_;
    /// <summary>
    /// Required. A Redis [Instance] resource
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Redis.V1Beta1.Instance Instance {
      get { return instance_; }
      set {
        instance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateInstanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateInstanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (InstanceId != other.InstanceId) return false;
      if (!object.Equals(Instance, other.Instance)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (instance_ != null) hash ^= Instance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (InstanceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InstanceId);
      }
      if (instance_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Instance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (instance_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateInstanceRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      if (other.instance_ != null) {
        if (instance_ == null) {
          instance_ = new global::Google.Cloud.Redis.V1Beta1.Instance();
        }
        Instance.MergeFrom(other.Instance);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            InstanceId = input.ReadString();
            break;
          }
          case 26: {
            if (instance_ == null) {
              instance_ = new global::Google.Cloud.Redis.V1Beta1.Instance();
            }
            input.ReadMessage(instance_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request for
  /// [UpdateInstance][google.cloud.redis.v1beta1.CloudRedis.UpdateInstance].
  /// </summary>
  public sealed partial class UpdateInstanceRequest : pb::IMessage<UpdateInstanceRequest> {
    private static readonly pb::MessageParser<UpdateInstanceRequest> _parser = new pb::MessageParser<UpdateInstanceRequest>(() => new UpdateInstanceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateInstanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Redis.V1Beta1.CloudRedisReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInstanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInstanceRequest(UpdateInstanceRequest other) : this() {
      updateMask_ = other.updateMask_ != null ? other.updateMask_.Clone() : null;
      instance_ = other.instance_ != null ? other.instance_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInstanceRequest Clone() {
      return new UpdateInstanceRequest(this);
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    /// Required. Mask of fields to update. At least one path must be supplied in
    /// this field. The elements of the repeated paths field may only include these
    /// fields from [Instance][CloudRedis.Instance]:
    /// * `display_name`
    /// * `labels`
    /// * `memory_size_gb`
    /// * `redis_config`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    /// <summary>Field number for the "instance" field.</summary>
    public const int InstanceFieldNumber = 2;
    private global::Google.Cloud.Redis.V1Beta1.Instance instance_;
    /// <summary>
    /// Required. Update description.
    /// Only fields specified in update_mask are updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Redis.V1Beta1.Instance Instance {
      get { return instance_; }
      set {
        instance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateInstanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateInstanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      if (!object.Equals(Instance, other.Instance)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      if (instance_ != null) hash ^= Instance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (updateMask_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UpdateMask);
      }
      if (instance_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Instance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      if (instance_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateInstanceRequest other) {
      if (other == null) {
        return;
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
      if (other.instance_ != null) {
        if (instance_ == null) {
          instance_ = new global::Google.Cloud.Redis.V1Beta1.Instance();
        }
        Instance.MergeFrom(other.Instance);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (updateMask_ == null) {
              updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(updateMask_);
            break;
          }
          case 18: {
            if (instance_ == null) {
              instance_ = new global::Google.Cloud.Redis.V1Beta1.Instance();
            }
            input.ReadMessage(instance_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request for
  /// [DeleteInstance][google.cloud.redis.v1beta1.CloudRedis.DeleteInstance].
  /// </summary>
  public sealed partial class DeleteInstanceRequest : pb::IMessage<DeleteInstanceRequest> {
    private static readonly pb::MessageParser<DeleteInstanceRequest> _parser = new pb::MessageParser<DeleteInstanceRequest>(() => new DeleteInstanceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteInstanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Redis.V1Beta1.CloudRedisReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteInstanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteInstanceRequest(DeleteInstanceRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteInstanceRequest Clone() {
      return new DeleteInstanceRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Required. Redis instance resource name using the form:
    ///     `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
    /// where `location_id` refers to a GCP region
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteInstanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteInstanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteInstanceRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This location metadata represents additional configuration options for a
  /// given location where a Redis instance may be created. All fields are output
  /// only. It is returned as content of the
  /// `google.cloud.location.Location.metadata` field.
  /// </summary>
  public sealed partial class LocationMetadata : pb::IMessage<LocationMetadata> {
    private static readonly pb::MessageParser<LocationMetadata> _parser = new pb::MessageParser<LocationMetadata>(() => new LocationMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocationMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Redis.V1Beta1.CloudRedisReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationMetadata(LocationMetadata other) : this() {
      availableZones_ = other.availableZones_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationMetadata Clone() {
      return new LocationMetadata(this);
    }

    /// <summary>Field number for the "available_zones" field.</summary>
    public const int AvailableZonesFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Google.Cloud.Redis.V1Beta1.ZoneMetadata>.Codec _map_availableZones_codec
        = new pbc::MapField<string, global::Google.Cloud.Redis.V1Beta1.ZoneMetadata>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Cloud.Redis.V1Beta1.ZoneMetadata.Parser), 10);
    private readonly pbc::MapField<string, global::Google.Cloud.Redis.V1Beta1.ZoneMetadata> availableZones_ = new pbc::MapField<string, global::Google.Cloud.Redis.V1Beta1.ZoneMetadata>();
    /// <summary>
    /// Output only. The set of available zones in the location. The map is keyed
    /// by the lowercase ID of each zone, as defined by GCE. These keys can be
    /// specified in `location_id` or `alternative_location_id` fields when
    /// creating a Redis instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Cloud.Redis.V1Beta1.ZoneMetadata> AvailableZones {
      get { return availableZones_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocationMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocationMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!AvailableZones.Equals(other.AvailableZones)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= AvailableZones.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      availableZones_.WriteTo(output, _map_availableZones_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += availableZones_.CalculateSize(_map_availableZones_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocationMetadata other) {
      if (other == null) {
        return;
      }
      availableZones_.Add(other.availableZones_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            availableZones_.AddEntriesFrom(input, _map_availableZones_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Defines specific information for a particular zone. Currently empty and
  /// reserved for future use only.
  /// </summary>
  public sealed partial class ZoneMetadata : pb::IMessage<ZoneMetadata> {
    private static readonly pb::MessageParser<ZoneMetadata> _parser = new pb::MessageParser<ZoneMetadata>(() => new ZoneMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZoneMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Redis.V1Beta1.CloudRedisReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZoneMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZoneMetadata(ZoneMetadata other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZoneMetadata Clone() {
      return new ZoneMetadata(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZoneMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZoneMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZoneMetadata other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
