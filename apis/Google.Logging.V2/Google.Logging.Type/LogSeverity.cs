// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log_severity.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Logging.Type {

  /// <summary>Holder for reflection information generated from log_severity.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class LogSeverityReflection {

    #region Descriptor
    /// <summary>File descriptor for log_severity.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LogSeverityReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJsb2dfc2V2ZXJpdHkucHJvdG8SE2dvb2dsZS5sb2dnaW5nLnR5cGUaHGdv",
            "b2dsZS9hcGkvYW5ub3RhdGlvbnMucHJvdG8qggEKC0xvZ1NldmVyaXR5EgsK",
            "B0RFRkFVTFQQABIJCgVERUJVRxBkEgkKBElORk8QyAESCwoGTk9USUNFEKwC",
            "EgwKB1dBUk5JTkcQkAMSCgoFRVJST1IQ9AMSDQoIQ1JJVElDQUwQ2AQSCgoF",
            "QUxFUlQQvAUSDgoJRU1FUkdFTkNZEKAGQi0KF2NvbS5nb29nbGUubG9nZ2lu",
            "Zy50eXBlQhBMb2dTZXZlcml0eVByb3RvUAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Logging.Type.LogSeverity), }, null));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  The severity of the event described in a log entry.  These guideline severity
  ///  levels are ordered, with numerically smaller levels treated as less severe
  ///  than numerically larger levels. If the source of the log entries uses a
  ///  different set of severity levels, the client should select the closest
  ///  corresponding `LogSeverity` value. For example, Java's FINE, FINER, and
  ///  FINEST levels might all map to `LogSeverity.DEBUG`. If the original severity
  ///  code must be preserved, it can be stored in the payload.
  /// </summary>
  public enum LogSeverity {
    /// <summary>
    ///  The log entry has no assigned severity level.
    /// </summary>
    [pbr::OriginalName("DEFAULT")] Default = 0,
    /// <summary>
    ///  Debug or trace information.
    /// </summary>
    [pbr::OriginalName("DEBUG")] Debug = 100,
    /// <summary>
    ///  Routine information, such as ongoing status or performance.
    /// </summary>
    [pbr::OriginalName("INFO")] Info = 200,
    /// <summary>
    ///  Normal but significant events, such as start up, shut down, or
    ///  configuration.
    /// </summary>
    [pbr::OriginalName("NOTICE")] Notice = 300,
    /// <summary>
    ///  Warning events might cause problems.
    /// </summary>
    [pbr::OriginalName("WARNING")] Warning = 400,
    /// <summary>
    ///  Error events are likely to cause problems.
    /// </summary>
    [pbr::OriginalName("ERROR")] Error = 500,
    /// <summary>
    ///  Critical events cause more severe problems or brief outages.
    /// </summary>
    [pbr::OriginalName("CRITICAL")] Critical = 600,
    /// <summary>
    ///  A person must take an action immediately.
    /// </summary>
    [pbr::OriginalName("ALERT")] Alert = 700,
    /// <summary>
    ///  One or more systems are unusable.
    /// </summary>
    [pbr::OriginalName("EMERGENCY")] Emergency = 800,
  }

  #endregion

}

#endregion Designer generated code
