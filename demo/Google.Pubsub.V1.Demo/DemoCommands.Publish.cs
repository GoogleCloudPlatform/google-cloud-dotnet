// Copyright 2016 Google Inc. All Rights Reserved.
// Licensed under the Apache License Version 2.0.

using Google.Protobuf;
using System;
using System.Linq;

namespace Google.Pubsub.V1.Demo
{
    public partial class DemoCommands
    {
		/// <summary>
        /// Publishes the given messages to a pubsub topic. It is assumed that the topic exists before this is called.
        /// </summary>
        public static void Publish(string projectId, string topicId, params string[] textMessages)
        {
            // This creates a client (actually an instance of PublisherClientImpl) synchronously, using the
            // application default credentials, and connecting to the default endpoint. Optional parameters allow
            // an alternative endpoint to be specified, as well as general client settings and credentials. Most
            // applications can simply omit these.
            // This method completes synchronously; use CreateAsync for an asynchronous equivalent.
            var client = PublisherClient.Create();

            // The full resource name of a topic is "projects/{project-id}/topics/{topic-id}". The GetTopicName method
            // converts the project ID and topic ID pair into a resource name.
            // Some applications may wish to use resource names throughout the code;
            // other applications may want to use IDs and convert to resource names where required.
            string topicName = PublisherClient.GetTopicName(projectId, topicId);

            // Each pubsub message itself has a binary payload (Data) and a string-to-string dictionary (Attributes).
			// A publication timestamp and message ID are generated by the server.
			// In our case, we aren't providing any attributes, and each payload is just the UTF-8-encoded form of a text message.
			var messages = textMessages.Select(text => new PubsubMessage { Data = ByteString.CopyFromUtf8(text) });

            // Publish the messages to the topic.
            // This method completes synchronously; use PublishAsync for an asynchronous equivalent.
            var response = client.Publish(topicName, messages);

            // The response contains the published message IDs, which can be retrieved later when pulling from a subscription
            // to the topic.
			Console.WriteLine($"Published {textMessages.Length} messages to {topicName}.");
            Console.WriteLine($"Message IDs: {string.Join(", ", response.MessageIds)}");
        }
    }
}
