// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/logging_config.proto
// Original file comments:
// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Google.Logging.V2 {
  public static class ConfigServiceV2
  {
    static readonly string __ServiceName = "google.logging.v2.ConfigServiceV2";

    static readonly Marshaller<global::Google.Logging.V2.ListSinksRequest> __Marshaller_ListSinksRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Logging.V2.ListSinksRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Logging.V2.ListSinksResponse> __Marshaller_ListSinksResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Logging.V2.ListSinksResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Logging.V2.GetSinkRequest> __Marshaller_GetSinkRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Logging.V2.GetSinkRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Logging.V2.LogSink> __Marshaller_LogSink = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Logging.V2.LogSink.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Logging.V2.CreateSinkRequest> __Marshaller_CreateSinkRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Logging.V2.CreateSinkRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Logging.V2.UpdateSinkRequest> __Marshaller_UpdateSinkRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Logging.V2.UpdateSinkRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Logging.V2.DeleteSinkRequest> __Marshaller_DeleteSinkRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Logging.V2.DeleteSinkRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);

    static readonly Method<global::Google.Logging.V2.ListSinksRequest, global::Google.Logging.V2.ListSinksResponse> __Method_ListSinks = new Method<global::Google.Logging.V2.ListSinksRequest, global::Google.Logging.V2.ListSinksResponse>(
        MethodType.Unary,
        __ServiceName,
        "ListSinks",
        __Marshaller_ListSinksRequest,
        __Marshaller_ListSinksResponse);

    static readonly Method<global::Google.Logging.V2.GetSinkRequest, global::Google.Logging.V2.LogSink> __Method_GetSink = new Method<global::Google.Logging.V2.GetSinkRequest, global::Google.Logging.V2.LogSink>(
        MethodType.Unary,
        __ServiceName,
        "GetSink",
        __Marshaller_GetSinkRequest,
        __Marshaller_LogSink);

    static readonly Method<global::Google.Logging.V2.CreateSinkRequest, global::Google.Logging.V2.LogSink> __Method_CreateSink = new Method<global::Google.Logging.V2.CreateSinkRequest, global::Google.Logging.V2.LogSink>(
        MethodType.Unary,
        __ServiceName,
        "CreateSink",
        __Marshaller_CreateSinkRequest,
        __Marshaller_LogSink);

    static readonly Method<global::Google.Logging.V2.UpdateSinkRequest, global::Google.Logging.V2.LogSink> __Method_UpdateSink = new Method<global::Google.Logging.V2.UpdateSinkRequest, global::Google.Logging.V2.LogSink>(
        MethodType.Unary,
        __ServiceName,
        "UpdateSink",
        __Marshaller_UpdateSinkRequest,
        __Marshaller_LogSink);

    static readonly Method<global::Google.Logging.V2.DeleteSinkRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteSink = new Method<global::Google.Logging.V2.DeleteSinkRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        MethodType.Unary,
        __ServiceName,
        "DeleteSink",
        __Marshaller_DeleteSinkRequest,
        __Marshaller_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Logging.V2.LoggingConfigReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for ConfigServiceV2</summary>
    [System.Obsolete("Client side interfaced will be removed in the next release. Use client class directly.")]
    public interface IConfigServiceV2Client
    {
      /// <summary>
      ///  Lists sinks.
      /// </summary>
      global::Google.Logging.V2.ListSinksResponse ListSinks(global::Google.Logging.V2.ListSinksRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Lists sinks.
      /// </summary>
      global::Google.Logging.V2.ListSinksResponse ListSinks(global::Google.Logging.V2.ListSinksRequest request, CallOptions options);
      /// <summary>
      ///  Lists sinks.
      /// </summary>
      AsyncUnaryCall<global::Google.Logging.V2.ListSinksResponse> ListSinksAsync(global::Google.Logging.V2.ListSinksRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Lists sinks.
      /// </summary>
      AsyncUnaryCall<global::Google.Logging.V2.ListSinksResponse> ListSinksAsync(global::Google.Logging.V2.ListSinksRequest request, CallOptions options);
      /// <summary>
      ///  Gets a sink.
      /// </summary>
      global::Google.Logging.V2.LogSink GetSink(global::Google.Logging.V2.GetSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Gets a sink.
      /// </summary>
      global::Google.Logging.V2.LogSink GetSink(global::Google.Logging.V2.GetSinkRequest request, CallOptions options);
      /// <summary>
      ///  Gets a sink.
      /// </summary>
      AsyncUnaryCall<global::Google.Logging.V2.LogSink> GetSinkAsync(global::Google.Logging.V2.GetSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Gets a sink.
      /// </summary>
      AsyncUnaryCall<global::Google.Logging.V2.LogSink> GetSinkAsync(global::Google.Logging.V2.GetSinkRequest request, CallOptions options);
      /// <summary>
      ///  Creates a sink.
      /// </summary>
      global::Google.Logging.V2.LogSink CreateSink(global::Google.Logging.V2.CreateSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Creates a sink.
      /// </summary>
      global::Google.Logging.V2.LogSink CreateSink(global::Google.Logging.V2.CreateSinkRequest request, CallOptions options);
      /// <summary>
      ///  Creates a sink.
      /// </summary>
      AsyncUnaryCall<global::Google.Logging.V2.LogSink> CreateSinkAsync(global::Google.Logging.V2.CreateSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Creates a sink.
      /// </summary>
      AsyncUnaryCall<global::Google.Logging.V2.LogSink> CreateSinkAsync(global::Google.Logging.V2.CreateSinkRequest request, CallOptions options);
      /// <summary>
      ///  Creates or updates a sink.
      /// </summary>
      global::Google.Logging.V2.LogSink UpdateSink(global::Google.Logging.V2.UpdateSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Creates or updates a sink.
      /// </summary>
      global::Google.Logging.V2.LogSink UpdateSink(global::Google.Logging.V2.UpdateSinkRequest request, CallOptions options);
      /// <summary>
      ///  Creates or updates a sink.
      /// </summary>
      AsyncUnaryCall<global::Google.Logging.V2.LogSink> UpdateSinkAsync(global::Google.Logging.V2.UpdateSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Creates or updates a sink.
      /// </summary>
      AsyncUnaryCall<global::Google.Logging.V2.LogSink> UpdateSinkAsync(global::Google.Logging.V2.UpdateSinkRequest request, CallOptions options);
      /// <summary>
      ///  Deletes a sink.
      /// </summary>
      global::Google.Protobuf.WellKnownTypes.Empty DeleteSink(global::Google.Logging.V2.DeleteSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Deletes a sink.
      /// </summary>
      global::Google.Protobuf.WellKnownTypes.Empty DeleteSink(global::Google.Logging.V2.DeleteSinkRequest request, CallOptions options);
      /// <summary>
      ///  Deletes a sink.
      /// </summary>
      AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSinkAsync(global::Google.Logging.V2.DeleteSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      /// <summary>
      ///  Deletes a sink.
      /// </summary>
      AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSinkAsync(global::Google.Logging.V2.DeleteSinkRequest request, CallOptions options);
    }

    /// <summary>Interface of server-side implementations of ConfigServiceV2</summary>
    [System.Obsolete("Service implementations should inherit from the generated abstract base class instead.")]
    public interface IConfigServiceV2
    {
      /// <summary>
      ///  Lists sinks.
      /// </summary>
      global::System.Threading.Tasks.Task<global::Google.Logging.V2.ListSinksResponse> ListSinks(global::Google.Logging.V2.ListSinksRequest request, ServerCallContext context);
      /// <summary>
      ///  Gets a sink.
      /// </summary>
      global::System.Threading.Tasks.Task<global::Google.Logging.V2.LogSink> GetSink(global::Google.Logging.V2.GetSinkRequest request, ServerCallContext context);
      /// <summary>
      ///  Creates a sink.
      /// </summary>
      global::System.Threading.Tasks.Task<global::Google.Logging.V2.LogSink> CreateSink(global::Google.Logging.V2.CreateSinkRequest request, ServerCallContext context);
      /// <summary>
      ///  Creates or updates a sink.
      /// </summary>
      global::System.Threading.Tasks.Task<global::Google.Logging.V2.LogSink> UpdateSink(global::Google.Logging.V2.UpdateSinkRequest request, ServerCallContext context);
      /// <summary>
      ///  Deletes a sink.
      /// </summary>
      global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSink(global::Google.Logging.V2.DeleteSinkRequest request, ServerCallContext context);
    }

    /// <summary>Base class for server-side implementations of ConfigServiceV2</summary>
    public abstract class ConfigServiceV2Base
    {
      /// <summary>
      ///  Lists sinks.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Logging.V2.ListSinksResponse> ListSinks(global::Google.Logging.V2.ListSinksRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Gets a sink.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Logging.V2.LogSink> GetSink(global::Google.Logging.V2.GetSinkRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Creates a sink.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Logging.V2.LogSink> CreateSink(global::Google.Logging.V2.CreateSinkRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Creates or updates a sink.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Logging.V2.LogSink> UpdateSink(global::Google.Logging.V2.UpdateSinkRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Deletes a sink.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSink(global::Google.Logging.V2.DeleteSinkRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ConfigServiceV2</summary>
    #pragma warning disable 0618
    public class ConfigServiceV2Client : ClientBase<ConfigServiceV2Client>, IConfigServiceV2Client
    #pragma warning restore 0618
    {
      public ConfigServiceV2Client(Channel channel) : base(channel)
      {
      }
      public ConfigServiceV2Client(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      ///<summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ConfigServiceV2Client() : base()
      {
      }
      ///<summary>Protected constructor to allow creation of configured clients.</summary>
      protected ConfigServiceV2Client(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Lists sinks.
      /// </summary>
      public virtual global::Google.Logging.V2.ListSinksResponse ListSinks(global::Google.Logging.V2.ListSinksRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListSinks(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists sinks.
      /// </summary>
      public virtual global::Google.Logging.V2.ListSinksResponse ListSinks(global::Google.Logging.V2.ListSinksRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSinks, null, options, request);
      }
      /// <summary>
      ///  Lists sinks.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Logging.V2.ListSinksResponse> ListSinksAsync(global::Google.Logging.V2.ListSinksRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListSinksAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists sinks.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Logging.V2.ListSinksResponse> ListSinksAsync(global::Google.Logging.V2.ListSinksRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSinks, null, options, request);
      }
      /// <summary>
      ///  Gets a sink.
      /// </summary>
      public virtual global::Google.Logging.V2.LogSink GetSink(global::Google.Logging.V2.GetSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSink(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets a sink.
      /// </summary>
      public virtual global::Google.Logging.V2.LogSink GetSink(global::Google.Logging.V2.GetSinkRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSink, null, options, request);
      }
      /// <summary>
      ///  Gets a sink.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Logging.V2.LogSink> GetSinkAsync(global::Google.Logging.V2.GetSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSinkAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets a sink.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Logging.V2.LogSink> GetSinkAsync(global::Google.Logging.V2.GetSinkRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSink, null, options, request);
      }
      /// <summary>
      ///  Creates a sink.
      /// </summary>
      public virtual global::Google.Logging.V2.LogSink CreateSink(global::Google.Logging.V2.CreateSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateSink(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a sink.
      /// </summary>
      public virtual global::Google.Logging.V2.LogSink CreateSink(global::Google.Logging.V2.CreateSinkRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSink, null, options, request);
      }
      /// <summary>
      ///  Creates a sink.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Logging.V2.LogSink> CreateSinkAsync(global::Google.Logging.V2.CreateSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateSinkAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a sink.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Logging.V2.LogSink> CreateSinkAsync(global::Google.Logging.V2.CreateSinkRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSink, null, options, request);
      }
      /// <summary>
      ///  Creates or updates a sink.
      /// </summary>
      public virtual global::Google.Logging.V2.LogSink UpdateSink(global::Google.Logging.V2.UpdateSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateSink(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates or updates a sink.
      /// </summary>
      public virtual global::Google.Logging.V2.LogSink UpdateSink(global::Google.Logging.V2.UpdateSinkRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSink, null, options, request);
      }
      /// <summary>
      ///  Creates or updates a sink.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Logging.V2.LogSink> UpdateSinkAsync(global::Google.Logging.V2.UpdateSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateSinkAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates or updates a sink.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Logging.V2.LogSink> UpdateSinkAsync(global::Google.Logging.V2.UpdateSinkRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSink, null, options, request);
      }
      /// <summary>
      ///  Deletes a sink.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSink(global::Google.Logging.V2.DeleteSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteSink(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes a sink.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSink(global::Google.Logging.V2.DeleteSinkRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSink, null, options, request);
      }
      /// <summary>
      ///  Deletes a sink.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSinkAsync(global::Google.Logging.V2.DeleteSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteSinkAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes a sink.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSinkAsync(global::Google.Logging.V2.DeleteSinkRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSink, null, options, request);
      }
      protected override ConfigServiceV2Client NewInstance(ClientBaseConfiguration configuration)
      {
        return new ConfigServiceV2Client(configuration);
      }
    }

    /// <summary>Creates a new client for ConfigServiceV2</summary>
    public static ConfigServiceV2Client NewClient(Channel channel)
    {
      return new ConfigServiceV2Client(channel);
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    #pragma warning disable 0618
    public static ServerServiceDefinition BindService(IConfigServiceV2 serviceImpl)
    #pragma warning restore 0618
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_ListSinks, serviceImpl.ListSinks)
          .AddMethod(__Method_GetSink, serviceImpl.GetSink)
          .AddMethod(__Method_CreateSink, serviceImpl.CreateSink)
          .AddMethod(__Method_UpdateSink, serviceImpl.UpdateSink)
          .AddMethod(__Method_DeleteSink, serviceImpl.DeleteSink).Build();
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    #pragma warning disable 0618
    public static ServerServiceDefinition BindService(ConfigServiceV2Base serviceImpl)
    #pragma warning restore 0618
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_ListSinks, serviceImpl.ListSinks)
          .AddMethod(__Method_GetSink, serviceImpl.GetSink)
          .AddMethod(__Method_CreateSink, serviceImpl.CreateSink)
          .AddMethod(__Method_UpdateSink, serviceImpl.UpdateSink)
          .AddMethod(__Method_DeleteSink, serviceImpl.DeleteSink).Build();
    }

  }
}
#endregion
